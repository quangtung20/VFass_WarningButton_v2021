
main-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001790  0800ea90  0800ea90  0001ea90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010220  08010220  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  08010220  08010220  00020220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010228  08010228  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08010228  08010228  00020228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010238  08010238  00020238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0801023c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002714  20000214  08010450  00030214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002928  08010450  00032928  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e313  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f05  00000000  00000000  0005e54f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001640  00000000  00000000  00063458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001468  00000000  00000000  00064a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c25b  00000000  00000000  00065f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019d48  00000000  00000000  0008215b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009494e  00000000  00000000  0009bea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001307f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cdc  00000000  00000000  0013086c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000214 	.word	0x20000214
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ea74 	.word	0x0800ea74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000218 	.word	0x20000218
 8000104:	0800ea74 	.word	0x0800ea74

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 f93b 	bl	80016a4 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 f893 	bl	8001564 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f92d 	bl	80016a4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f923 	bl	80016a4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8b5 	bl	80015dc <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f8ab 	bl	80015dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 f9d3 	bl	8000848 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 f955 	bl	800075c <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f9c5 	bl	8000848 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f9bb 	bl	8000848 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f963 	bl	80007ac <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f959 	bl	80007ac <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_uldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d10f      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 8000510:	2900      	cmp	r1, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_uldivmod+0xe>
 8000514:	2800      	cmp	r0, #0
 8000516:	d002      	beq.n	800051e <__aeabi_uldivmod+0x16>
 8000518:	2100      	movs	r1, #0
 800051a:	43c9      	mvns	r1, r1
 800051c:	1c08      	adds	r0, r1, #0
 800051e:	b407      	push	{r0, r1, r2}
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <__aeabi_uldivmod+0x24>)
 8000522:	a102      	add	r1, pc, #8	; (adr r1, 800052c <__aeabi_uldivmod+0x24>)
 8000524:	1840      	adds	r0, r0, r1
 8000526:	9002      	str	r0, [sp, #8]
 8000528:	bd03      	pop	{r0, r1, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	fffffee9 	.word	0xfffffee9
 8000530:	b403      	push	{r0, r1}
 8000532:	4668      	mov	r0, sp
 8000534:	b501      	push	{r0, lr}
 8000536:	9802      	ldr	r0, [sp, #8]
 8000538:	f000 f84e 	bl	80005d8 <__udivmoddi4>
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	469e      	mov	lr, r3
 8000540:	b002      	add	sp, #8
 8000542:	bc0c      	pop	{r2, r3}
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			; (mov r8, r8)

08000548 <__aeabi_lmul>:
 8000548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054a:	46ce      	mov	lr, r9
 800054c:	4647      	mov	r7, r8
 800054e:	0415      	lsls	r5, r2, #16
 8000550:	0c2d      	lsrs	r5, r5, #16
 8000552:	002e      	movs	r6, r5
 8000554:	b580      	push	{r7, lr}
 8000556:	0407      	lsls	r7, r0, #16
 8000558:	0c14      	lsrs	r4, r2, #16
 800055a:	0c3f      	lsrs	r7, r7, #16
 800055c:	4699      	mov	r9, r3
 800055e:	0c03      	lsrs	r3, r0, #16
 8000560:	437e      	muls	r6, r7
 8000562:	435d      	muls	r5, r3
 8000564:	4367      	muls	r7, r4
 8000566:	4363      	muls	r3, r4
 8000568:	197f      	adds	r7, r7, r5
 800056a:	0c34      	lsrs	r4, r6, #16
 800056c:	19e4      	adds	r4, r4, r7
 800056e:	469c      	mov	ip, r3
 8000570:	42a5      	cmp	r5, r4
 8000572:	d903      	bls.n	800057c <__aeabi_lmul+0x34>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	025b      	lsls	r3, r3, #9
 8000578:	4698      	mov	r8, r3
 800057a:	44c4      	add	ip, r8
 800057c:	464b      	mov	r3, r9
 800057e:	4343      	muls	r3, r0
 8000580:	4351      	muls	r1, r2
 8000582:	0c25      	lsrs	r5, r4, #16
 8000584:	0436      	lsls	r6, r6, #16
 8000586:	4465      	add	r5, ip
 8000588:	0c36      	lsrs	r6, r6, #16
 800058a:	0424      	lsls	r4, r4, #16
 800058c:	19a4      	adds	r4, r4, r6
 800058e:	195b      	adds	r3, r3, r5
 8000590:	1859      	adds	r1, r3, r1
 8000592:	0020      	movs	r0, r4
 8000594:	bc0c      	pop	{r2, r3}
 8000596:	4690      	mov	r8, r2
 8000598:	4699      	mov	r9, r3
 800059a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff6b 	bl	8000480 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f001 feb5 	bl	8002320 <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f001 fb4a 	bl	8001c58 <__aeabi_dsub>
 80005c4:	f001 feac 	bl	8002320 <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__udivmoddi4>:
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	464f      	mov	r7, r9
 80005dc:	4646      	mov	r6, r8
 80005de:	46d6      	mov	lr, sl
 80005e0:	b5c0      	push	{r6, r7, lr}
 80005e2:	0004      	movs	r4, r0
 80005e4:	b082      	sub	sp, #8
 80005e6:	000d      	movs	r5, r1
 80005e8:	4691      	mov	r9, r2
 80005ea:	4698      	mov	r8, r3
 80005ec:	428b      	cmp	r3, r1
 80005ee:	d82f      	bhi.n	8000650 <__udivmoddi4+0x78>
 80005f0:	d02c      	beq.n	800064c <__udivmoddi4+0x74>
 80005f2:	4641      	mov	r1, r8
 80005f4:	4648      	mov	r0, r9
 80005f6:	f001 ffd7 	bl	80025a8 <__clzdi2>
 80005fa:	0029      	movs	r1, r5
 80005fc:	0006      	movs	r6, r0
 80005fe:	0020      	movs	r0, r4
 8000600:	f001 ffd2 	bl	80025a8 <__clzdi2>
 8000604:	1a33      	subs	r3, r6, r0
 8000606:	469c      	mov	ip, r3
 8000608:	3b20      	subs	r3, #32
 800060a:	469a      	mov	sl, r3
 800060c:	d500      	bpl.n	8000610 <__udivmoddi4+0x38>
 800060e:	e076      	b.n	80006fe <__udivmoddi4+0x126>
 8000610:	464b      	mov	r3, r9
 8000612:	4652      	mov	r2, sl
 8000614:	4093      	lsls	r3, r2
 8000616:	001f      	movs	r7, r3
 8000618:	464b      	mov	r3, r9
 800061a:	4662      	mov	r2, ip
 800061c:	4093      	lsls	r3, r2
 800061e:	001e      	movs	r6, r3
 8000620:	42af      	cmp	r7, r5
 8000622:	d828      	bhi.n	8000676 <__udivmoddi4+0x9e>
 8000624:	d025      	beq.n	8000672 <__udivmoddi4+0x9a>
 8000626:	4653      	mov	r3, sl
 8000628:	1ba4      	subs	r4, r4, r6
 800062a:	41bd      	sbcs	r5, r7
 800062c:	2b00      	cmp	r3, #0
 800062e:	da00      	bge.n	8000632 <__udivmoddi4+0x5a>
 8000630:	e07b      	b.n	800072a <__udivmoddi4+0x152>
 8000632:	2200      	movs	r2, #0
 8000634:	2300      	movs	r3, #0
 8000636:	9200      	str	r2, [sp, #0]
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2301      	movs	r3, #1
 800063c:	4652      	mov	r2, sl
 800063e:	4093      	lsls	r3, r2
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	4662      	mov	r2, ip
 8000646:	4093      	lsls	r3, r2
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	e018      	b.n	800067e <__udivmoddi4+0xa6>
 800064c:	4282      	cmp	r2, r0
 800064e:	d9d0      	bls.n	80005f2 <__udivmoddi4+0x1a>
 8000650:	2200      	movs	r2, #0
 8000652:	2300      	movs	r3, #0
 8000654:	9200      	str	r2, [sp, #0]
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <__udivmoddi4+0x8a>
 800065e:	601c      	str	r4, [r3, #0]
 8000660:	605d      	str	r5, [r3, #4]
 8000662:	9800      	ldr	r0, [sp, #0]
 8000664:	9901      	ldr	r1, [sp, #4]
 8000666:	b002      	add	sp, #8
 8000668:	bc1c      	pop	{r2, r3, r4}
 800066a:	4690      	mov	r8, r2
 800066c:	4699      	mov	r9, r3
 800066e:	46a2      	mov	sl, r4
 8000670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000672:	42a3      	cmp	r3, r4
 8000674:	d9d7      	bls.n	8000626 <__udivmoddi4+0x4e>
 8000676:	2200      	movs	r2, #0
 8000678:	2300      	movs	r3, #0
 800067a:	9200      	str	r2, [sp, #0]
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	4663      	mov	r3, ip
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0e9      	beq.n	8000658 <__udivmoddi4+0x80>
 8000684:	07fb      	lsls	r3, r7, #31
 8000686:	4698      	mov	r8, r3
 8000688:	4641      	mov	r1, r8
 800068a:	0872      	lsrs	r2, r6, #1
 800068c:	430a      	orrs	r2, r1
 800068e:	087b      	lsrs	r3, r7, #1
 8000690:	4666      	mov	r6, ip
 8000692:	e00e      	b.n	80006b2 <__udivmoddi4+0xda>
 8000694:	42ab      	cmp	r3, r5
 8000696:	d101      	bne.n	800069c <__udivmoddi4+0xc4>
 8000698:	42a2      	cmp	r2, r4
 800069a:	d80c      	bhi.n	80006b6 <__udivmoddi4+0xde>
 800069c:	1aa4      	subs	r4, r4, r2
 800069e:	419d      	sbcs	r5, r3
 80006a0:	2001      	movs	r0, #1
 80006a2:	1924      	adds	r4, r4, r4
 80006a4:	416d      	adcs	r5, r5
 80006a6:	2100      	movs	r1, #0
 80006a8:	3e01      	subs	r6, #1
 80006aa:	1824      	adds	r4, r4, r0
 80006ac:	414d      	adcs	r5, r1
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d006      	beq.n	80006c0 <__udivmoddi4+0xe8>
 80006b2:	42ab      	cmp	r3, r5
 80006b4:	d9ee      	bls.n	8000694 <__udivmoddi4+0xbc>
 80006b6:	3e01      	subs	r6, #1
 80006b8:	1924      	adds	r4, r4, r4
 80006ba:	416d      	adcs	r5, r5
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d1f8      	bne.n	80006b2 <__udivmoddi4+0xda>
 80006c0:	9800      	ldr	r0, [sp, #0]
 80006c2:	9901      	ldr	r1, [sp, #4]
 80006c4:	4653      	mov	r3, sl
 80006c6:	1900      	adds	r0, r0, r4
 80006c8:	4169      	adcs	r1, r5
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db23      	blt.n	8000716 <__udivmoddi4+0x13e>
 80006ce:	002b      	movs	r3, r5
 80006d0:	4652      	mov	r2, sl
 80006d2:	40d3      	lsrs	r3, r2
 80006d4:	002a      	movs	r2, r5
 80006d6:	4664      	mov	r4, ip
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	4653      	mov	r3, sl
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db2d      	blt.n	8000740 <__udivmoddi4+0x168>
 80006e4:	0026      	movs	r6, r4
 80006e6:	4657      	mov	r7, sl
 80006e8:	40be      	lsls	r6, r7
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4667      	mov	r7, ip
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e7ac      	b.n	8000658 <__udivmoddi4+0x80>
 80006fe:	4662      	mov	r2, ip
 8000700:	2320      	movs	r3, #32
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	464a      	mov	r2, r9
 8000706:	40da      	lsrs	r2, r3
 8000708:	4661      	mov	r1, ip
 800070a:	0013      	movs	r3, r2
 800070c:	4642      	mov	r2, r8
 800070e:	408a      	lsls	r2, r1
 8000710:	0017      	movs	r7, r2
 8000712:	431f      	orrs	r7, r3
 8000714:	e780      	b.n	8000618 <__udivmoddi4+0x40>
 8000716:	4662      	mov	r2, ip
 8000718:	2320      	movs	r3, #32
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	002a      	movs	r2, r5
 800071e:	4666      	mov	r6, ip
 8000720:	409a      	lsls	r2, r3
 8000722:	0023      	movs	r3, r4
 8000724:	40f3      	lsrs	r3, r6
 8000726:	4313      	orrs	r3, r2
 8000728:	e7d4      	b.n	80006d4 <__udivmoddi4+0xfc>
 800072a:	4662      	mov	r2, ip
 800072c:	2320      	movs	r3, #32
 800072e:	2100      	movs	r1, #0
 8000730:	1a9b      	subs	r3, r3, r2
 8000732:	2200      	movs	r2, #0
 8000734:	9100      	str	r1, [sp, #0]
 8000736:	9201      	str	r2, [sp, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	40da      	lsrs	r2, r3
 800073c:	9201      	str	r2, [sp, #4]
 800073e:	e780      	b.n	8000642 <__udivmoddi4+0x6a>
 8000740:	2320      	movs	r3, #32
 8000742:	4662      	mov	r2, ip
 8000744:	0026      	movs	r6, r4
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	002f      	movs	r7, r5
 800074c:	46b0      	mov	r8, r6
 800074e:	4666      	mov	r6, ip
 8000750:	40b7      	lsls	r7, r6
 8000752:	4646      	mov	r6, r8
 8000754:	003b      	movs	r3, r7
 8000756:	4333      	orrs	r3, r6
 8000758:	e7c8      	b.n	80006ec <__udivmoddi4+0x114>
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__eqsf2>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	0042      	lsls	r2, r0, #1
 8000760:	024e      	lsls	r6, r1, #9
 8000762:	004c      	lsls	r4, r1, #1
 8000764:	0245      	lsls	r5, r0, #9
 8000766:	0a6d      	lsrs	r5, r5, #9
 8000768:	0e12      	lsrs	r2, r2, #24
 800076a:	0fc3      	lsrs	r3, r0, #31
 800076c:	0a76      	lsrs	r6, r6, #9
 800076e:	0e24      	lsrs	r4, r4, #24
 8000770:	0fc9      	lsrs	r1, r1, #31
 8000772:	2aff      	cmp	r2, #255	; 0xff
 8000774:	d00f      	beq.n	8000796 <__eqsf2+0x3a>
 8000776:	2cff      	cmp	r4, #255	; 0xff
 8000778:	d011      	beq.n	800079e <__eqsf2+0x42>
 800077a:	2001      	movs	r0, #1
 800077c:	42a2      	cmp	r2, r4
 800077e:	d000      	beq.n	8000782 <__eqsf2+0x26>
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	42b5      	cmp	r5, r6
 8000784:	d1fc      	bne.n	8000780 <__eqsf2+0x24>
 8000786:	428b      	cmp	r3, r1
 8000788:	d00d      	beq.n	80007a6 <__eqsf2+0x4a>
 800078a:	2a00      	cmp	r2, #0
 800078c:	d1f8      	bne.n	8000780 <__eqsf2+0x24>
 800078e:	0028      	movs	r0, r5
 8000790:	1e45      	subs	r5, r0, #1
 8000792:	41a8      	sbcs	r0, r5
 8000794:	e7f4      	b.n	8000780 <__eqsf2+0x24>
 8000796:	2001      	movs	r0, #1
 8000798:	2d00      	cmp	r5, #0
 800079a:	d1f1      	bne.n	8000780 <__eqsf2+0x24>
 800079c:	e7eb      	b.n	8000776 <__eqsf2+0x1a>
 800079e:	2001      	movs	r0, #1
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d1ed      	bne.n	8000780 <__eqsf2+0x24>
 80007a4:	e7e9      	b.n	800077a <__eqsf2+0x1e>
 80007a6:	2000      	movs	r0, #0
 80007a8:	e7ea      	b.n	8000780 <__eqsf2+0x24>
 80007aa:	46c0      	nop			; (mov r8, r8)

080007ac <__gesf2>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	004a      	lsls	r2, r1, #1
 80007b0:	024e      	lsls	r6, r1, #9
 80007b2:	0245      	lsls	r5, r0, #9
 80007b4:	0044      	lsls	r4, r0, #1
 80007b6:	0a6d      	lsrs	r5, r5, #9
 80007b8:	0e24      	lsrs	r4, r4, #24
 80007ba:	0fc3      	lsrs	r3, r0, #31
 80007bc:	0a76      	lsrs	r6, r6, #9
 80007be:	0e12      	lsrs	r2, r2, #24
 80007c0:	0fc9      	lsrs	r1, r1, #31
 80007c2:	2cff      	cmp	r4, #255	; 0xff
 80007c4:	d015      	beq.n	80007f2 <__gesf2+0x46>
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00e      	beq.n	80007e8 <__gesf2+0x3c>
 80007ca:	2c00      	cmp	r4, #0
 80007cc:	d115      	bne.n	80007fa <__gesf2+0x4e>
 80007ce:	2a00      	cmp	r2, #0
 80007d0:	d101      	bne.n	80007d6 <__gesf2+0x2a>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d01c      	beq.n	8000810 <__gesf2+0x64>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d014      	beq.n	8000804 <__gesf2+0x58>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d027      	beq.n	800082e <__gesf2+0x82>
 80007de:	2002      	movs	r0, #2
 80007e0:	3b01      	subs	r3, #1
 80007e2:	4018      	ands	r0, r3
 80007e4:	3801      	subs	r0, #1
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d0ee      	beq.n	80007ca <__gesf2+0x1e>
 80007ec:	2002      	movs	r0, #2
 80007ee:	4240      	negs	r0, r0
 80007f0:	e7f9      	b.n	80007e6 <__gesf2+0x3a>
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d1fa      	bne.n	80007ec <__gesf2+0x40>
 80007f6:	2aff      	cmp	r2, #255	; 0xff
 80007f8:	d00e      	beq.n	8000818 <__gesf2+0x6c>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d10e      	bne.n	800081c <__gesf2+0x70>
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d0ed      	beq.n	80007de <__gesf2+0x32>
 8000802:	e00b      	b.n	800081c <__gesf2+0x70>
 8000804:	2301      	movs	r3, #1
 8000806:	3901      	subs	r1, #1
 8000808:	4399      	bics	r1, r3
 800080a:	0008      	movs	r0, r1
 800080c:	3001      	adds	r0, #1
 800080e:	e7ea      	b.n	80007e6 <__gesf2+0x3a>
 8000810:	2000      	movs	r0, #0
 8000812:	2d00      	cmp	r5, #0
 8000814:	d0e7      	beq.n	80007e6 <__gesf2+0x3a>
 8000816:	e7e2      	b.n	80007de <__gesf2+0x32>
 8000818:	2e00      	cmp	r6, #0
 800081a:	d1e7      	bne.n	80007ec <__gesf2+0x40>
 800081c:	428b      	cmp	r3, r1
 800081e:	d1de      	bne.n	80007de <__gesf2+0x32>
 8000820:	4294      	cmp	r4, r2
 8000822:	dd05      	ble.n	8000830 <__gesf2+0x84>
 8000824:	2102      	movs	r1, #2
 8000826:	1e58      	subs	r0, r3, #1
 8000828:	4008      	ands	r0, r1
 800082a:	3801      	subs	r0, #1
 800082c:	e7db      	b.n	80007e6 <__gesf2+0x3a>
 800082e:	2400      	movs	r4, #0
 8000830:	42a2      	cmp	r2, r4
 8000832:	dc04      	bgt.n	800083e <__gesf2+0x92>
 8000834:	42b5      	cmp	r5, r6
 8000836:	d8d2      	bhi.n	80007de <__gesf2+0x32>
 8000838:	2000      	movs	r0, #0
 800083a:	42b5      	cmp	r5, r6
 800083c:	d2d3      	bcs.n	80007e6 <__gesf2+0x3a>
 800083e:	1e58      	subs	r0, r3, #1
 8000840:	2301      	movs	r3, #1
 8000842:	4398      	bics	r0, r3
 8000844:	3001      	adds	r0, #1
 8000846:	e7ce      	b.n	80007e6 <__gesf2+0x3a>

08000848 <__lesf2>:
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	0042      	lsls	r2, r0, #1
 800084c:	0244      	lsls	r4, r0, #9
 800084e:	024d      	lsls	r5, r1, #9
 8000850:	0fc3      	lsrs	r3, r0, #31
 8000852:	0048      	lsls	r0, r1, #1
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	0e12      	lsrs	r2, r2, #24
 8000858:	0a6d      	lsrs	r5, r5, #9
 800085a:	0e00      	lsrs	r0, r0, #24
 800085c:	0fc9      	lsrs	r1, r1, #31
 800085e:	2aff      	cmp	r2, #255	; 0xff
 8000860:	d012      	beq.n	8000888 <__lesf2+0x40>
 8000862:	28ff      	cmp	r0, #255	; 0xff
 8000864:	d00c      	beq.n	8000880 <__lesf2+0x38>
 8000866:	2a00      	cmp	r2, #0
 8000868:	d112      	bne.n	8000890 <__lesf2+0x48>
 800086a:	2800      	cmp	r0, #0
 800086c:	d119      	bne.n	80008a2 <__lesf2+0x5a>
 800086e:	2d00      	cmp	r5, #0
 8000870:	d117      	bne.n	80008a2 <__lesf2+0x5a>
 8000872:	2c00      	cmp	r4, #0
 8000874:	d02b      	beq.n	80008ce <__lesf2+0x86>
 8000876:	2002      	movs	r0, #2
 8000878:	3b01      	subs	r3, #1
 800087a:	4018      	ands	r0, r3
 800087c:	3801      	subs	r0, #1
 800087e:	e026      	b.n	80008ce <__lesf2+0x86>
 8000880:	2d00      	cmp	r5, #0
 8000882:	d0f0      	beq.n	8000866 <__lesf2+0x1e>
 8000884:	2002      	movs	r0, #2
 8000886:	e022      	b.n	80008ce <__lesf2+0x86>
 8000888:	2c00      	cmp	r4, #0
 800088a:	d1fb      	bne.n	8000884 <__lesf2+0x3c>
 800088c:	28ff      	cmp	r0, #255	; 0xff
 800088e:	d01f      	beq.n	80008d0 <__lesf2+0x88>
 8000890:	2800      	cmp	r0, #0
 8000892:	d11f      	bne.n	80008d4 <__lesf2+0x8c>
 8000894:	2d00      	cmp	r5, #0
 8000896:	d11d      	bne.n	80008d4 <__lesf2+0x8c>
 8000898:	2002      	movs	r0, #2
 800089a:	3b01      	subs	r3, #1
 800089c:	4018      	ands	r0, r3
 800089e:	3801      	subs	r0, #1
 80008a0:	e015      	b.n	80008ce <__lesf2+0x86>
 80008a2:	2c00      	cmp	r4, #0
 80008a4:	d00e      	beq.n	80008c4 <__lesf2+0x7c>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d1e5      	bne.n	8000876 <__lesf2+0x2e>
 80008aa:	2200      	movs	r2, #0
 80008ac:	4290      	cmp	r0, r2
 80008ae:	dc04      	bgt.n	80008ba <__lesf2+0x72>
 80008b0:	42ac      	cmp	r4, r5
 80008b2:	d8e0      	bhi.n	8000876 <__lesf2+0x2e>
 80008b4:	2000      	movs	r0, #0
 80008b6:	42ac      	cmp	r4, r5
 80008b8:	d209      	bcs.n	80008ce <__lesf2+0x86>
 80008ba:	1e58      	subs	r0, r3, #1
 80008bc:	2301      	movs	r3, #1
 80008be:	4398      	bics	r0, r3
 80008c0:	3001      	adds	r0, #1
 80008c2:	e004      	b.n	80008ce <__lesf2+0x86>
 80008c4:	2301      	movs	r3, #1
 80008c6:	3901      	subs	r1, #1
 80008c8:	4399      	bics	r1, r3
 80008ca:	0008      	movs	r0, r1
 80008cc:	3001      	adds	r0, #1
 80008ce:	bd30      	pop	{r4, r5, pc}
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d1d7      	bne.n	8000884 <__lesf2+0x3c>
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d1ce      	bne.n	8000876 <__lesf2+0x2e>
 80008d8:	4282      	cmp	r2, r0
 80008da:	dde7      	ble.n	80008ac <__lesf2+0x64>
 80008dc:	2102      	movs	r1, #2
 80008de:	1e58      	subs	r0, r3, #1
 80008e0:	4008      	ands	r0, r1
 80008e2:	3801      	subs	r0, #1
 80008e4:	e7f3      	b.n	80008ce <__lesf2+0x86>
 80008e6:	46c0      	nop			; (mov r8, r8)

080008e8 <__aeabi_f2iz>:
 80008e8:	0241      	lsls	r1, r0, #9
 80008ea:	0042      	lsls	r2, r0, #1
 80008ec:	0fc3      	lsrs	r3, r0, #31
 80008ee:	0a49      	lsrs	r1, r1, #9
 80008f0:	0e12      	lsrs	r2, r2, #24
 80008f2:	2000      	movs	r0, #0
 80008f4:	2a7e      	cmp	r2, #126	; 0x7e
 80008f6:	d90d      	bls.n	8000914 <__aeabi_f2iz+0x2c>
 80008f8:	2a9d      	cmp	r2, #157	; 0x9d
 80008fa:	d80c      	bhi.n	8000916 <__aeabi_f2iz+0x2e>
 80008fc:	2080      	movs	r0, #128	; 0x80
 80008fe:	0400      	lsls	r0, r0, #16
 8000900:	4301      	orrs	r1, r0
 8000902:	2a95      	cmp	r2, #149	; 0x95
 8000904:	dc0a      	bgt.n	800091c <__aeabi_f2iz+0x34>
 8000906:	2096      	movs	r0, #150	; 0x96
 8000908:	1a82      	subs	r2, r0, r2
 800090a:	40d1      	lsrs	r1, r2
 800090c:	4248      	negs	r0, r1
 800090e:	2b00      	cmp	r3, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_f2iz+0x2c>
 8000912:	0008      	movs	r0, r1
 8000914:	4770      	bx	lr
 8000916:	4a03      	ldr	r2, [pc, #12]	; (8000924 <__aeabi_f2iz+0x3c>)
 8000918:	1898      	adds	r0, r3, r2
 800091a:	e7fb      	b.n	8000914 <__aeabi_f2iz+0x2c>
 800091c:	3a96      	subs	r2, #150	; 0x96
 800091e:	4091      	lsls	r1, r2
 8000920:	e7f4      	b.n	800090c <__aeabi_f2iz+0x24>
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	7fffffff 	.word	0x7fffffff

08000928 <__aeabi_dadd>:
 8000928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092a:	464f      	mov	r7, r9
 800092c:	4646      	mov	r6, r8
 800092e:	46d6      	mov	lr, sl
 8000930:	000c      	movs	r4, r1
 8000932:	0309      	lsls	r1, r1, #12
 8000934:	b5c0      	push	{r6, r7, lr}
 8000936:	0a49      	lsrs	r1, r1, #9
 8000938:	0f47      	lsrs	r7, r0, #29
 800093a:	005e      	lsls	r6, r3, #1
 800093c:	4339      	orrs	r1, r7
 800093e:	031f      	lsls	r7, r3, #12
 8000940:	0fdb      	lsrs	r3, r3, #31
 8000942:	469c      	mov	ip, r3
 8000944:	0065      	lsls	r5, r4, #1
 8000946:	0a7b      	lsrs	r3, r7, #9
 8000948:	0f57      	lsrs	r7, r2, #29
 800094a:	431f      	orrs	r7, r3
 800094c:	0d6d      	lsrs	r5, r5, #21
 800094e:	0fe4      	lsrs	r4, r4, #31
 8000950:	0d76      	lsrs	r6, r6, #21
 8000952:	46a1      	mov	r9, r4
 8000954:	00c0      	lsls	r0, r0, #3
 8000956:	46b8      	mov	r8, r7
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	1bab      	subs	r3, r5, r6
 800095c:	4564      	cmp	r4, ip
 800095e:	d07b      	beq.n	8000a58 <__aeabi_dadd+0x130>
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd5f      	ble.n	8000a24 <__aeabi_dadd+0xfc>
 8000964:	2e00      	cmp	r6, #0
 8000966:	d000      	beq.n	800096a <__aeabi_dadd+0x42>
 8000968:	e0a4      	b.n	8000ab4 <__aeabi_dadd+0x18c>
 800096a:	003e      	movs	r6, r7
 800096c:	4316      	orrs	r6, r2
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x4a>
 8000970:	e112      	b.n	8000b98 <__aeabi_dadd+0x270>
 8000972:	1e5e      	subs	r6, r3, #1
 8000974:	2e00      	cmp	r6, #0
 8000976:	d000      	beq.n	800097a <__aeabi_dadd+0x52>
 8000978:	e19e      	b.n	8000cb8 <__aeabi_dadd+0x390>
 800097a:	1a87      	subs	r7, r0, r2
 800097c:	4643      	mov	r3, r8
 800097e:	42b8      	cmp	r0, r7
 8000980:	4180      	sbcs	r0, r0
 8000982:	2501      	movs	r5, #1
 8000984:	1ac9      	subs	r1, r1, r3
 8000986:	4240      	negs	r0, r0
 8000988:	1a09      	subs	r1, r1, r0
 800098a:	020b      	lsls	r3, r1, #8
 800098c:	d400      	bmi.n	8000990 <__aeabi_dadd+0x68>
 800098e:	e131      	b.n	8000bf4 <__aeabi_dadd+0x2cc>
 8000990:	0249      	lsls	r1, r1, #9
 8000992:	0a4e      	lsrs	r6, r1, #9
 8000994:	2e00      	cmp	r6, #0
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x72>
 8000998:	e16e      	b.n	8000c78 <__aeabi_dadd+0x350>
 800099a:	0030      	movs	r0, r6
 800099c:	f001 fde6 	bl	800256c <__clzsi2>
 80009a0:	0003      	movs	r3, r0
 80009a2:	3b08      	subs	r3, #8
 80009a4:	2b1f      	cmp	r3, #31
 80009a6:	dd00      	ble.n	80009aa <__aeabi_dadd+0x82>
 80009a8:	e161      	b.n	8000c6e <__aeabi_dadd+0x346>
 80009aa:	2220      	movs	r2, #32
 80009ac:	0039      	movs	r1, r7
 80009ae:	1ad2      	subs	r2, r2, r3
 80009b0:	409e      	lsls	r6, r3
 80009b2:	40d1      	lsrs	r1, r2
 80009b4:	409f      	lsls	r7, r3
 80009b6:	430e      	orrs	r6, r1
 80009b8:	429d      	cmp	r5, r3
 80009ba:	dd00      	ble.n	80009be <__aeabi_dadd+0x96>
 80009bc:	e151      	b.n	8000c62 <__aeabi_dadd+0x33a>
 80009be:	1b5d      	subs	r5, r3, r5
 80009c0:	1c6b      	adds	r3, r5, #1
 80009c2:	2b1f      	cmp	r3, #31
 80009c4:	dd00      	ble.n	80009c8 <__aeabi_dadd+0xa0>
 80009c6:	e17c      	b.n	8000cc2 <__aeabi_dadd+0x39a>
 80009c8:	2120      	movs	r1, #32
 80009ca:	1ac9      	subs	r1, r1, r3
 80009cc:	003d      	movs	r5, r7
 80009ce:	0030      	movs	r0, r6
 80009d0:	408f      	lsls	r7, r1
 80009d2:	4088      	lsls	r0, r1
 80009d4:	40dd      	lsrs	r5, r3
 80009d6:	1e79      	subs	r1, r7, #1
 80009d8:	418f      	sbcs	r7, r1
 80009da:	0031      	movs	r1, r6
 80009dc:	2207      	movs	r2, #7
 80009de:	4328      	orrs	r0, r5
 80009e0:	40d9      	lsrs	r1, r3
 80009e2:	2500      	movs	r5, #0
 80009e4:	4307      	orrs	r7, r0
 80009e6:	403a      	ands	r2, r7
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d009      	beq.n	8000a00 <__aeabi_dadd+0xd8>
 80009ec:	230f      	movs	r3, #15
 80009ee:	403b      	ands	r3, r7
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d005      	beq.n	8000a00 <__aeabi_dadd+0xd8>
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	42bb      	cmp	r3, r7
 80009f8:	41bf      	sbcs	r7, r7
 80009fa:	427f      	negs	r7, r7
 80009fc:	19c9      	adds	r1, r1, r7
 80009fe:	001f      	movs	r7, r3
 8000a00:	020b      	lsls	r3, r1, #8
 8000a02:	d400      	bmi.n	8000a06 <__aeabi_dadd+0xde>
 8000a04:	e226      	b.n	8000e54 <__aeabi_dadd+0x52c>
 8000a06:	1c6a      	adds	r2, r5, #1
 8000a08:	4bc6      	ldr	r3, [pc, #792]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000a0a:	0555      	lsls	r5, r2, #21
 8000a0c:	0d6d      	lsrs	r5, r5, #21
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dadd+0xec>
 8000a12:	e106      	b.n	8000c22 <__aeabi_dadd+0x2fa>
 8000a14:	4ac4      	ldr	r2, [pc, #784]	; (8000d28 <__aeabi_dadd+0x400>)
 8000a16:	08ff      	lsrs	r7, r7, #3
 8000a18:	400a      	ands	r2, r1
 8000a1a:	0753      	lsls	r3, r2, #29
 8000a1c:	0252      	lsls	r2, r2, #9
 8000a1e:	433b      	orrs	r3, r7
 8000a20:	0b12      	lsrs	r2, r2, #12
 8000a22:	e08e      	b.n	8000b42 <__aeabi_dadd+0x21a>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d000      	beq.n	8000a2a <__aeabi_dadd+0x102>
 8000a28:	e0b8      	b.n	8000b9c <__aeabi_dadd+0x274>
 8000a2a:	1c6b      	adds	r3, r5, #1
 8000a2c:	055b      	lsls	r3, r3, #21
 8000a2e:	0d5b      	lsrs	r3, r3, #21
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	dc00      	bgt.n	8000a36 <__aeabi_dadd+0x10e>
 8000a34:	e130      	b.n	8000c98 <__aeabi_dadd+0x370>
 8000a36:	1a87      	subs	r7, r0, r2
 8000a38:	4643      	mov	r3, r8
 8000a3a:	42b8      	cmp	r0, r7
 8000a3c:	41b6      	sbcs	r6, r6
 8000a3e:	1acb      	subs	r3, r1, r3
 8000a40:	4276      	negs	r6, r6
 8000a42:	1b9e      	subs	r6, r3, r6
 8000a44:	0233      	lsls	r3, r6, #8
 8000a46:	d500      	bpl.n	8000a4a <__aeabi_dadd+0x122>
 8000a48:	e14c      	b.n	8000ce4 <__aeabi_dadd+0x3bc>
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	4333      	orrs	r3, r6
 8000a4e:	d1a1      	bne.n	8000994 <__aeabi_dadd+0x6c>
 8000a50:	2200      	movs	r2, #0
 8000a52:	2400      	movs	r4, #0
 8000a54:	2500      	movs	r5, #0
 8000a56:	e070      	b.n	8000b3a <__aeabi_dadd+0x212>
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	dc00      	bgt.n	8000a5e <__aeabi_dadd+0x136>
 8000a5c:	e0e5      	b.n	8000c2a <__aeabi_dadd+0x302>
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x13c>
 8000a62:	e083      	b.n	8000b6c <__aeabi_dadd+0x244>
 8000a64:	4eaf      	ldr	r6, [pc, #700]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000a66:	42b5      	cmp	r5, r6
 8000a68:	d060      	beq.n	8000b2c <__aeabi_dadd+0x204>
 8000a6a:	2680      	movs	r6, #128	; 0x80
 8000a6c:	0436      	lsls	r6, r6, #16
 8000a6e:	4337      	orrs	r7, r6
 8000a70:	46b8      	mov	r8, r7
 8000a72:	2b38      	cmp	r3, #56	; 0x38
 8000a74:	dc00      	bgt.n	8000a78 <__aeabi_dadd+0x150>
 8000a76:	e13e      	b.n	8000cf6 <__aeabi_dadd+0x3ce>
 8000a78:	4643      	mov	r3, r8
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	001f      	movs	r7, r3
 8000a7e:	1e7a      	subs	r2, r7, #1
 8000a80:	4197      	sbcs	r7, r2
 8000a82:	183f      	adds	r7, r7, r0
 8000a84:	4287      	cmp	r7, r0
 8000a86:	4180      	sbcs	r0, r0
 8000a88:	4240      	negs	r0, r0
 8000a8a:	1809      	adds	r1, r1, r0
 8000a8c:	020b      	lsls	r3, r1, #8
 8000a8e:	d400      	bmi.n	8000a92 <__aeabi_dadd+0x16a>
 8000a90:	e0b0      	b.n	8000bf4 <__aeabi_dadd+0x2cc>
 8000a92:	4ba4      	ldr	r3, [pc, #656]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000a94:	3501      	adds	r5, #1
 8000a96:	429d      	cmp	r5, r3
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x174>
 8000a9a:	e0c3      	b.n	8000c24 <__aeabi_dadd+0x2fc>
 8000a9c:	4aa2      	ldr	r2, [pc, #648]	; (8000d28 <__aeabi_dadd+0x400>)
 8000a9e:	087b      	lsrs	r3, r7, #1
 8000aa0:	400a      	ands	r2, r1
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	400f      	ands	r7, r1
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0851      	lsrs	r1, r2, #1
 8000aaa:	07d3      	lsls	r3, r2, #31
 8000aac:	2207      	movs	r2, #7
 8000aae:	431f      	orrs	r7, r3
 8000ab0:	403a      	ands	r2, r7
 8000ab2:	e799      	b.n	80009e8 <__aeabi_dadd+0xc0>
 8000ab4:	4e9b      	ldr	r6, [pc, #620]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000ab6:	42b5      	cmp	r5, r6
 8000ab8:	d038      	beq.n	8000b2c <__aeabi_dadd+0x204>
 8000aba:	2680      	movs	r6, #128	; 0x80
 8000abc:	0436      	lsls	r6, r6, #16
 8000abe:	4337      	orrs	r7, r6
 8000ac0:	46b8      	mov	r8, r7
 8000ac2:	2b38      	cmp	r3, #56	; 0x38
 8000ac4:	dd00      	ble.n	8000ac8 <__aeabi_dadd+0x1a0>
 8000ac6:	e0dc      	b.n	8000c82 <__aeabi_dadd+0x35a>
 8000ac8:	2b1f      	cmp	r3, #31
 8000aca:	dc00      	bgt.n	8000ace <__aeabi_dadd+0x1a6>
 8000acc:	e130      	b.n	8000d30 <__aeabi_dadd+0x408>
 8000ace:	001e      	movs	r6, r3
 8000ad0:	4647      	mov	r7, r8
 8000ad2:	3e20      	subs	r6, #32
 8000ad4:	40f7      	lsrs	r7, r6
 8000ad6:	46bc      	mov	ip, r7
 8000ad8:	2b20      	cmp	r3, #32
 8000ada:	d004      	beq.n	8000ae6 <__aeabi_dadd+0x1be>
 8000adc:	2640      	movs	r6, #64	; 0x40
 8000ade:	1af3      	subs	r3, r6, r3
 8000ae0:	4646      	mov	r6, r8
 8000ae2:	409e      	lsls	r6, r3
 8000ae4:	4332      	orrs	r2, r6
 8000ae6:	0017      	movs	r7, r2
 8000ae8:	4663      	mov	r3, ip
 8000aea:	1e7a      	subs	r2, r7, #1
 8000aec:	4197      	sbcs	r7, r2
 8000aee:	431f      	orrs	r7, r3
 8000af0:	e0cc      	b.n	8000c8c <__aeabi_dadd+0x364>
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_dadd+0x1d0>
 8000af6:	e204      	b.n	8000f02 <__aeabi_dadd+0x5da>
 8000af8:	4643      	mov	r3, r8
 8000afa:	4313      	orrs	r3, r2
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dadd+0x1d8>
 8000afe:	e159      	b.n	8000db4 <__aeabi_dadd+0x48c>
 8000b00:	074b      	lsls	r3, r1, #29
 8000b02:	08c0      	lsrs	r0, r0, #3
 8000b04:	4318      	orrs	r0, r3
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	08c9      	lsrs	r1, r1, #3
 8000b0a:	031b      	lsls	r3, r3, #12
 8000b0c:	4219      	tst	r1, r3
 8000b0e:	d008      	beq.n	8000b22 <__aeabi_dadd+0x1fa>
 8000b10:	4645      	mov	r5, r8
 8000b12:	08ed      	lsrs	r5, r5, #3
 8000b14:	421d      	tst	r5, r3
 8000b16:	d104      	bne.n	8000b22 <__aeabi_dadd+0x1fa>
 8000b18:	4643      	mov	r3, r8
 8000b1a:	08d0      	lsrs	r0, r2, #3
 8000b1c:	0759      	lsls	r1, r3, #29
 8000b1e:	4308      	orrs	r0, r1
 8000b20:	0029      	movs	r1, r5
 8000b22:	0f42      	lsrs	r2, r0, #29
 8000b24:	00c9      	lsls	r1, r1, #3
 8000b26:	4d7f      	ldr	r5, [pc, #508]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000b28:	4311      	orrs	r1, r2
 8000b2a:	00c0      	lsls	r0, r0, #3
 8000b2c:	074b      	lsls	r3, r1, #29
 8000b2e:	08ca      	lsrs	r2, r1, #3
 8000b30:	497c      	ldr	r1, [pc, #496]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000b32:	08c0      	lsrs	r0, r0, #3
 8000b34:	4303      	orrs	r3, r0
 8000b36:	428d      	cmp	r5, r1
 8000b38:	d068      	beq.n	8000c0c <__aeabi_dadd+0x2e4>
 8000b3a:	0312      	lsls	r2, r2, #12
 8000b3c:	056d      	lsls	r5, r5, #21
 8000b3e:	0b12      	lsrs	r2, r2, #12
 8000b40:	0d6d      	lsrs	r5, r5, #21
 8000b42:	2100      	movs	r1, #0
 8000b44:	0312      	lsls	r2, r2, #12
 8000b46:	0018      	movs	r0, r3
 8000b48:	0b13      	lsrs	r3, r2, #12
 8000b4a:	0d0a      	lsrs	r2, r1, #20
 8000b4c:	0512      	lsls	r2, r2, #20
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	4b76      	ldr	r3, [pc, #472]	; (8000d2c <__aeabi_dadd+0x404>)
 8000b52:	052d      	lsls	r5, r5, #20
 8000b54:	4013      	ands	r3, r2
 8000b56:	432b      	orrs	r3, r5
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	07e4      	lsls	r4, r4, #31
 8000b5c:	085b      	lsrs	r3, r3, #1
 8000b5e:	4323      	orrs	r3, r4
 8000b60:	0019      	movs	r1, r3
 8000b62:	bc1c      	pop	{r2, r3, r4}
 8000b64:	4690      	mov	r8, r2
 8000b66:	4699      	mov	r9, r3
 8000b68:	46a2      	mov	sl, r4
 8000b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6c:	003e      	movs	r6, r7
 8000b6e:	4316      	orrs	r6, r2
 8000b70:	d012      	beq.n	8000b98 <__aeabi_dadd+0x270>
 8000b72:	1e5e      	subs	r6, r3, #1
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d000      	beq.n	8000b7a <__aeabi_dadd+0x252>
 8000b78:	e100      	b.n	8000d7c <__aeabi_dadd+0x454>
 8000b7a:	1887      	adds	r7, r0, r2
 8000b7c:	4287      	cmp	r7, r0
 8000b7e:	4180      	sbcs	r0, r0
 8000b80:	4441      	add	r1, r8
 8000b82:	4240      	negs	r0, r0
 8000b84:	1809      	adds	r1, r1, r0
 8000b86:	2501      	movs	r5, #1
 8000b88:	020b      	lsls	r3, r1, #8
 8000b8a:	d533      	bpl.n	8000bf4 <__aeabi_dadd+0x2cc>
 8000b8c:	2502      	movs	r5, #2
 8000b8e:	e785      	b.n	8000a9c <__aeabi_dadd+0x174>
 8000b90:	4664      	mov	r4, ip
 8000b92:	0033      	movs	r3, r6
 8000b94:	4641      	mov	r1, r8
 8000b96:	0010      	movs	r0, r2
 8000b98:	001d      	movs	r5, r3
 8000b9a:	e7c7      	b.n	8000b2c <__aeabi_dadd+0x204>
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_dadd+0x27a>
 8000ba0:	e0da      	b.n	8000d58 <__aeabi_dadd+0x430>
 8000ba2:	000c      	movs	r4, r1
 8000ba4:	4304      	orrs	r4, r0
 8000ba6:	d0f3      	beq.n	8000b90 <__aeabi_dadd+0x268>
 8000ba8:	1c5c      	adds	r4, r3, #1
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x286>
 8000bac:	e19f      	b.n	8000eee <__aeabi_dadd+0x5c6>
 8000bae:	4c5d      	ldr	r4, [pc, #372]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000bb0:	42a6      	cmp	r6, r4
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_dadd+0x28e>
 8000bb4:	e12f      	b.n	8000e16 <__aeabi_dadd+0x4ee>
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	2b38      	cmp	r3, #56	; 0x38
 8000bba:	dd00      	ble.n	8000bbe <__aeabi_dadd+0x296>
 8000bbc:	e166      	b.n	8000e8c <__aeabi_dadd+0x564>
 8000bbe:	2b1f      	cmp	r3, #31
 8000bc0:	dd00      	ble.n	8000bc4 <__aeabi_dadd+0x29c>
 8000bc2:	e183      	b.n	8000ecc <__aeabi_dadd+0x5a4>
 8000bc4:	2420      	movs	r4, #32
 8000bc6:	0005      	movs	r5, r0
 8000bc8:	1ae4      	subs	r4, r4, r3
 8000bca:	000f      	movs	r7, r1
 8000bcc:	40dd      	lsrs	r5, r3
 8000bce:	40d9      	lsrs	r1, r3
 8000bd0:	40a0      	lsls	r0, r4
 8000bd2:	4643      	mov	r3, r8
 8000bd4:	40a7      	lsls	r7, r4
 8000bd6:	1a5b      	subs	r3, r3, r1
 8000bd8:	1e44      	subs	r4, r0, #1
 8000bda:	41a0      	sbcs	r0, r4
 8000bdc:	4698      	mov	r8, r3
 8000bde:	432f      	orrs	r7, r5
 8000be0:	4338      	orrs	r0, r7
 8000be2:	1a17      	subs	r7, r2, r0
 8000be4:	42ba      	cmp	r2, r7
 8000be6:	4192      	sbcs	r2, r2
 8000be8:	4643      	mov	r3, r8
 8000bea:	4252      	negs	r2, r2
 8000bec:	1a99      	subs	r1, r3, r2
 8000bee:	4664      	mov	r4, ip
 8000bf0:	0035      	movs	r5, r6
 8000bf2:	e6ca      	b.n	800098a <__aeabi_dadd+0x62>
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	403a      	ands	r2, r7
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_dadd+0x2d6>
 8000bfc:	e6f6      	b.n	80009ec <__aeabi_dadd+0xc4>
 8000bfe:	074b      	lsls	r3, r1, #29
 8000c00:	08ca      	lsrs	r2, r1, #3
 8000c02:	4948      	ldr	r1, [pc, #288]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000c04:	08ff      	lsrs	r7, r7, #3
 8000c06:	433b      	orrs	r3, r7
 8000c08:	428d      	cmp	r5, r1
 8000c0a:	d196      	bne.n	8000b3a <__aeabi_dadd+0x212>
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x2ec>
 8000c12:	e19e      	b.n	8000f52 <__aeabi_dadd+0x62a>
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	0309      	lsls	r1, r1, #12
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	0312      	lsls	r2, r2, #12
 8000c1c:	0b12      	lsrs	r2, r2, #12
 8000c1e:	4d41      	ldr	r5, [pc, #260]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000c20:	e78f      	b.n	8000b42 <__aeabi_dadd+0x21a>
 8000c22:	0015      	movs	r5, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	2300      	movs	r3, #0
 8000c28:	e78b      	b.n	8000b42 <__aeabi_dadd+0x21a>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_dadd+0x308>
 8000c2e:	e0c7      	b.n	8000dc0 <__aeabi_dadd+0x498>
 8000c30:	1c6b      	adds	r3, r5, #1
 8000c32:	055f      	lsls	r7, r3, #21
 8000c34:	0d7f      	lsrs	r7, r7, #21
 8000c36:	2f01      	cmp	r7, #1
 8000c38:	dc00      	bgt.n	8000c3c <__aeabi_dadd+0x314>
 8000c3a:	e0f1      	b.n	8000e20 <__aeabi_dadd+0x4f8>
 8000c3c:	4d39      	ldr	r5, [pc, #228]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000c3e:	42ab      	cmp	r3, r5
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dadd+0x31c>
 8000c42:	e0b9      	b.n	8000db8 <__aeabi_dadd+0x490>
 8000c44:	1885      	adds	r5, r0, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	4285      	cmp	r5, r0
 8000c4a:	4189      	sbcs	r1, r1
 8000c4c:	4442      	add	r2, r8
 8000c4e:	4249      	negs	r1, r1
 8000c50:	1851      	adds	r1, r2, r1
 8000c52:	2207      	movs	r2, #7
 8000c54:	07cf      	lsls	r7, r1, #31
 8000c56:	086d      	lsrs	r5, r5, #1
 8000c58:	432f      	orrs	r7, r5
 8000c5a:	0849      	lsrs	r1, r1, #1
 8000c5c:	403a      	ands	r2, r7
 8000c5e:	001d      	movs	r5, r3
 8000c60:	e6c2      	b.n	80009e8 <__aeabi_dadd+0xc0>
 8000c62:	2207      	movs	r2, #7
 8000c64:	4930      	ldr	r1, [pc, #192]	; (8000d28 <__aeabi_dadd+0x400>)
 8000c66:	1aed      	subs	r5, r5, r3
 8000c68:	4031      	ands	r1, r6
 8000c6a:	403a      	ands	r2, r7
 8000c6c:	e6bc      	b.n	80009e8 <__aeabi_dadd+0xc0>
 8000c6e:	003e      	movs	r6, r7
 8000c70:	3828      	subs	r0, #40	; 0x28
 8000c72:	4086      	lsls	r6, r0
 8000c74:	2700      	movs	r7, #0
 8000c76:	e69f      	b.n	80009b8 <__aeabi_dadd+0x90>
 8000c78:	0038      	movs	r0, r7
 8000c7a:	f001 fc77 	bl	800256c <__clzsi2>
 8000c7e:	3020      	adds	r0, #32
 8000c80:	e68e      	b.n	80009a0 <__aeabi_dadd+0x78>
 8000c82:	4643      	mov	r3, r8
 8000c84:	4313      	orrs	r3, r2
 8000c86:	001f      	movs	r7, r3
 8000c88:	1e7a      	subs	r2, r7, #1
 8000c8a:	4197      	sbcs	r7, r2
 8000c8c:	1bc7      	subs	r7, r0, r7
 8000c8e:	42b8      	cmp	r0, r7
 8000c90:	4180      	sbcs	r0, r0
 8000c92:	4240      	negs	r0, r0
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	e678      	b.n	800098a <__aeabi_dadd+0x62>
 8000c98:	000e      	movs	r6, r1
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	4306      	orrs	r6, r0
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	2d00      	cmp	r5, #0
 8000ca2:	d161      	bne.n	8000d68 <__aeabi_dadd+0x440>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d000      	beq.n	8000caa <__aeabi_dadd+0x382>
 8000ca8:	e0f4      	b.n	8000e94 <__aeabi_dadd+0x56c>
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x388>
 8000cae:	e11b      	b.n	8000ee8 <__aeabi_dadd+0x5c0>
 8000cb0:	4664      	mov	r4, ip
 8000cb2:	0039      	movs	r1, r7
 8000cb4:	0010      	movs	r0, r2
 8000cb6:	e739      	b.n	8000b2c <__aeabi_dadd+0x204>
 8000cb8:	4f1a      	ldr	r7, [pc, #104]	; (8000d24 <__aeabi_dadd+0x3fc>)
 8000cba:	42bb      	cmp	r3, r7
 8000cbc:	d07a      	beq.n	8000db4 <__aeabi_dadd+0x48c>
 8000cbe:	0033      	movs	r3, r6
 8000cc0:	e6ff      	b.n	8000ac2 <__aeabi_dadd+0x19a>
 8000cc2:	0030      	movs	r0, r6
 8000cc4:	3d1f      	subs	r5, #31
 8000cc6:	40e8      	lsrs	r0, r5
 8000cc8:	2b20      	cmp	r3, #32
 8000cca:	d003      	beq.n	8000cd4 <__aeabi_dadd+0x3ac>
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	1acb      	subs	r3, r1, r3
 8000cd0:	409e      	lsls	r6, r3
 8000cd2:	4337      	orrs	r7, r6
 8000cd4:	1e7b      	subs	r3, r7, #1
 8000cd6:	419f      	sbcs	r7, r3
 8000cd8:	2207      	movs	r2, #7
 8000cda:	4307      	orrs	r7, r0
 8000cdc:	403a      	ands	r2, r7
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	e789      	b.n	8000bf8 <__aeabi_dadd+0x2d0>
 8000ce4:	1a17      	subs	r7, r2, r0
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	42ba      	cmp	r2, r7
 8000cea:	41b6      	sbcs	r6, r6
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	4276      	negs	r6, r6
 8000cf0:	1b8e      	subs	r6, r1, r6
 8000cf2:	4664      	mov	r4, ip
 8000cf4:	e64e      	b.n	8000994 <__aeabi_dadd+0x6c>
 8000cf6:	2b1f      	cmp	r3, #31
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dadd+0x3d4>
 8000cfa:	e0ad      	b.n	8000e58 <__aeabi_dadd+0x530>
 8000cfc:	2620      	movs	r6, #32
 8000cfe:	4647      	mov	r7, r8
 8000d00:	1af6      	subs	r6, r6, r3
 8000d02:	40b7      	lsls	r7, r6
 8000d04:	46b9      	mov	r9, r7
 8000d06:	0017      	movs	r7, r2
 8000d08:	46b2      	mov	sl, r6
 8000d0a:	40df      	lsrs	r7, r3
 8000d0c:	464e      	mov	r6, r9
 8000d0e:	433e      	orrs	r6, r7
 8000d10:	0037      	movs	r7, r6
 8000d12:	4656      	mov	r6, sl
 8000d14:	40b2      	lsls	r2, r6
 8000d16:	1e56      	subs	r6, r2, #1
 8000d18:	41b2      	sbcs	r2, r6
 8000d1a:	4317      	orrs	r7, r2
 8000d1c:	4642      	mov	r2, r8
 8000d1e:	40da      	lsrs	r2, r3
 8000d20:	1889      	adds	r1, r1, r2
 8000d22:	e6ae      	b.n	8000a82 <__aeabi_dadd+0x15a>
 8000d24:	000007ff 	.word	0x000007ff
 8000d28:	ff7fffff 	.word	0xff7fffff
 8000d2c:	800fffff 	.word	0x800fffff
 8000d30:	2620      	movs	r6, #32
 8000d32:	4647      	mov	r7, r8
 8000d34:	1af6      	subs	r6, r6, r3
 8000d36:	40b7      	lsls	r7, r6
 8000d38:	46b9      	mov	r9, r7
 8000d3a:	0017      	movs	r7, r2
 8000d3c:	46b2      	mov	sl, r6
 8000d3e:	40df      	lsrs	r7, r3
 8000d40:	464e      	mov	r6, r9
 8000d42:	433e      	orrs	r6, r7
 8000d44:	0037      	movs	r7, r6
 8000d46:	4656      	mov	r6, sl
 8000d48:	40b2      	lsls	r2, r6
 8000d4a:	1e56      	subs	r6, r2, #1
 8000d4c:	41b2      	sbcs	r2, r6
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	4642      	mov	r2, r8
 8000d52:	40da      	lsrs	r2, r3
 8000d54:	1a89      	subs	r1, r1, r2
 8000d56:	e799      	b.n	8000c8c <__aeabi_dadd+0x364>
 8000d58:	4c7f      	ldr	r4, [pc, #508]	; (8000f58 <__aeabi_dadd+0x630>)
 8000d5a:	42a6      	cmp	r6, r4
 8000d5c:	d05b      	beq.n	8000e16 <__aeabi_dadd+0x4ee>
 8000d5e:	2480      	movs	r4, #128	; 0x80
 8000d60:	0424      	lsls	r4, r4, #16
 8000d62:	425b      	negs	r3, r3
 8000d64:	4321      	orrs	r1, r4
 8000d66:	e727      	b.n	8000bb8 <__aeabi_dadd+0x290>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d10c      	bne.n	8000d86 <__aeabi_dadd+0x45e>
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x44a>
 8000d70:	e0cb      	b.n	8000f0a <__aeabi_dadd+0x5e2>
 8000d72:	4664      	mov	r4, ip
 8000d74:	0039      	movs	r1, r7
 8000d76:	0010      	movs	r0, r2
 8000d78:	4d77      	ldr	r5, [pc, #476]	; (8000f58 <__aeabi_dadd+0x630>)
 8000d7a:	e6d7      	b.n	8000b2c <__aeabi_dadd+0x204>
 8000d7c:	4f76      	ldr	r7, [pc, #472]	; (8000f58 <__aeabi_dadd+0x630>)
 8000d7e:	42bb      	cmp	r3, r7
 8000d80:	d018      	beq.n	8000db4 <__aeabi_dadd+0x48c>
 8000d82:	0033      	movs	r3, r6
 8000d84:	e675      	b.n	8000a72 <__aeabi_dadd+0x14a>
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d014      	beq.n	8000db4 <__aeabi_dadd+0x48c>
 8000d8a:	074b      	lsls	r3, r1, #29
 8000d8c:	08c0      	lsrs	r0, r0, #3
 8000d8e:	4318      	orrs	r0, r3
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	08c9      	lsrs	r1, r1, #3
 8000d94:	031b      	lsls	r3, r3, #12
 8000d96:	4219      	tst	r1, r3
 8000d98:	d007      	beq.n	8000daa <__aeabi_dadd+0x482>
 8000d9a:	08fc      	lsrs	r4, r7, #3
 8000d9c:	421c      	tst	r4, r3
 8000d9e:	d104      	bne.n	8000daa <__aeabi_dadd+0x482>
 8000da0:	0779      	lsls	r1, r7, #29
 8000da2:	08d0      	lsrs	r0, r2, #3
 8000da4:	4308      	orrs	r0, r1
 8000da6:	46e1      	mov	r9, ip
 8000da8:	0021      	movs	r1, r4
 8000daa:	464c      	mov	r4, r9
 8000dac:	0f42      	lsrs	r2, r0, #29
 8000dae:	00c9      	lsls	r1, r1, #3
 8000db0:	4311      	orrs	r1, r2
 8000db2:	00c0      	lsls	r0, r0, #3
 8000db4:	4d68      	ldr	r5, [pc, #416]	; (8000f58 <__aeabi_dadd+0x630>)
 8000db6:	e6b9      	b.n	8000b2c <__aeabi_dadd+0x204>
 8000db8:	001d      	movs	r5, r3
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e6c0      	b.n	8000b42 <__aeabi_dadd+0x21a>
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d15b      	bne.n	8000e7c <__aeabi_dadd+0x554>
 8000dc4:	000d      	movs	r5, r1
 8000dc6:	4305      	orrs	r5, r0
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dadd+0x4a4>
 8000dca:	e6e2      	b.n	8000b92 <__aeabi_dadd+0x26a>
 8000dcc:	1c5d      	adds	r5, r3, #1
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dadd+0x4aa>
 8000dd0:	e0b0      	b.n	8000f34 <__aeabi_dadd+0x60c>
 8000dd2:	4d61      	ldr	r5, [pc, #388]	; (8000f58 <__aeabi_dadd+0x630>)
 8000dd4:	42ae      	cmp	r6, r5
 8000dd6:	d01f      	beq.n	8000e18 <__aeabi_dadd+0x4f0>
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	2b38      	cmp	r3, #56	; 0x38
 8000ddc:	dc71      	bgt.n	8000ec2 <__aeabi_dadd+0x59a>
 8000dde:	2b1f      	cmp	r3, #31
 8000de0:	dd00      	ble.n	8000de4 <__aeabi_dadd+0x4bc>
 8000de2:	e096      	b.n	8000f12 <__aeabi_dadd+0x5ea>
 8000de4:	2520      	movs	r5, #32
 8000de6:	000f      	movs	r7, r1
 8000de8:	1aed      	subs	r5, r5, r3
 8000dea:	40af      	lsls	r7, r5
 8000dec:	46b9      	mov	r9, r7
 8000dee:	0007      	movs	r7, r0
 8000df0:	46aa      	mov	sl, r5
 8000df2:	40df      	lsrs	r7, r3
 8000df4:	464d      	mov	r5, r9
 8000df6:	433d      	orrs	r5, r7
 8000df8:	002f      	movs	r7, r5
 8000dfa:	4655      	mov	r5, sl
 8000dfc:	40a8      	lsls	r0, r5
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	1e45      	subs	r5, r0, #1
 8000e02:	41a8      	sbcs	r0, r5
 8000e04:	4488      	add	r8, r1
 8000e06:	4307      	orrs	r7, r0
 8000e08:	18bf      	adds	r7, r7, r2
 8000e0a:	4297      	cmp	r7, r2
 8000e0c:	4192      	sbcs	r2, r2
 8000e0e:	4251      	negs	r1, r2
 8000e10:	4441      	add	r1, r8
 8000e12:	0035      	movs	r5, r6
 8000e14:	e63a      	b.n	8000a8c <__aeabi_dadd+0x164>
 8000e16:	4664      	mov	r4, ip
 8000e18:	0035      	movs	r5, r6
 8000e1a:	4641      	mov	r1, r8
 8000e1c:	0010      	movs	r0, r2
 8000e1e:	e685      	b.n	8000b2c <__aeabi_dadd+0x204>
 8000e20:	000b      	movs	r3, r1
 8000e22:	4303      	orrs	r3, r0
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d000      	beq.n	8000e2a <__aeabi_dadd+0x502>
 8000e28:	e663      	b.n	8000af2 <__aeabi_dadd+0x1ca>
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f5      	beq.n	8000e1a <__aeabi_dadd+0x4f2>
 8000e2e:	4643      	mov	r3, r8
 8000e30:	4313      	orrs	r3, r2
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x50e>
 8000e34:	e67a      	b.n	8000b2c <__aeabi_dadd+0x204>
 8000e36:	1887      	adds	r7, r0, r2
 8000e38:	4287      	cmp	r7, r0
 8000e3a:	4180      	sbcs	r0, r0
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	4441      	add	r1, r8
 8000e40:	4240      	negs	r0, r0
 8000e42:	1809      	adds	r1, r1, r0
 8000e44:	403a      	ands	r2, r7
 8000e46:	020b      	lsls	r3, r1, #8
 8000e48:	d400      	bmi.n	8000e4c <__aeabi_dadd+0x524>
 8000e4a:	e6d5      	b.n	8000bf8 <__aeabi_dadd+0x2d0>
 8000e4c:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <__aeabi_dadd+0x634>)
 8000e4e:	3501      	adds	r5, #1
 8000e50:	4019      	ands	r1, r3
 8000e52:	e5c9      	b.n	80009e8 <__aeabi_dadd+0xc0>
 8000e54:	0038      	movs	r0, r7
 8000e56:	e669      	b.n	8000b2c <__aeabi_dadd+0x204>
 8000e58:	001e      	movs	r6, r3
 8000e5a:	4647      	mov	r7, r8
 8000e5c:	3e20      	subs	r6, #32
 8000e5e:	40f7      	lsrs	r7, r6
 8000e60:	46bc      	mov	ip, r7
 8000e62:	2b20      	cmp	r3, #32
 8000e64:	d004      	beq.n	8000e70 <__aeabi_dadd+0x548>
 8000e66:	2640      	movs	r6, #64	; 0x40
 8000e68:	1af3      	subs	r3, r6, r3
 8000e6a:	4646      	mov	r6, r8
 8000e6c:	409e      	lsls	r6, r3
 8000e6e:	4332      	orrs	r2, r6
 8000e70:	0017      	movs	r7, r2
 8000e72:	4663      	mov	r3, ip
 8000e74:	1e7a      	subs	r2, r7, #1
 8000e76:	4197      	sbcs	r7, r2
 8000e78:	431f      	orrs	r7, r3
 8000e7a:	e602      	b.n	8000a82 <__aeabi_dadd+0x15a>
 8000e7c:	4d36      	ldr	r5, [pc, #216]	; (8000f58 <__aeabi_dadd+0x630>)
 8000e7e:	42ae      	cmp	r6, r5
 8000e80:	d0ca      	beq.n	8000e18 <__aeabi_dadd+0x4f0>
 8000e82:	2580      	movs	r5, #128	; 0x80
 8000e84:	042d      	lsls	r5, r5, #16
 8000e86:	425b      	negs	r3, r3
 8000e88:	4329      	orrs	r1, r5
 8000e8a:	e7a6      	b.n	8000dda <__aeabi_dadd+0x4b2>
 8000e8c:	4308      	orrs	r0, r1
 8000e8e:	1e41      	subs	r1, r0, #1
 8000e90:	4188      	sbcs	r0, r1
 8000e92:	e6a6      	b.n	8000be2 <__aeabi_dadd+0x2ba>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d100      	bne.n	8000e9a <__aeabi_dadd+0x572>
 8000e98:	e648      	b.n	8000b2c <__aeabi_dadd+0x204>
 8000e9a:	1a87      	subs	r7, r0, r2
 8000e9c:	4643      	mov	r3, r8
 8000e9e:	42b8      	cmp	r0, r7
 8000ea0:	41b6      	sbcs	r6, r6
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	4276      	negs	r6, r6
 8000ea6:	1b9e      	subs	r6, r3, r6
 8000ea8:	0233      	lsls	r3, r6, #8
 8000eaa:	d54b      	bpl.n	8000f44 <__aeabi_dadd+0x61c>
 8000eac:	1a17      	subs	r7, r2, r0
 8000eae:	4643      	mov	r3, r8
 8000eb0:	42ba      	cmp	r2, r7
 8000eb2:	4192      	sbcs	r2, r2
 8000eb4:	1a59      	subs	r1, r3, r1
 8000eb6:	4252      	negs	r2, r2
 8000eb8:	1a89      	subs	r1, r1, r2
 8000eba:	2207      	movs	r2, #7
 8000ebc:	4664      	mov	r4, ip
 8000ebe:	403a      	ands	r2, r7
 8000ec0:	e592      	b.n	80009e8 <__aeabi_dadd+0xc0>
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	000f      	movs	r7, r1
 8000ec6:	1e79      	subs	r1, r7, #1
 8000ec8:	418f      	sbcs	r7, r1
 8000eca:	e79d      	b.n	8000e08 <__aeabi_dadd+0x4e0>
 8000ecc:	001c      	movs	r4, r3
 8000ece:	000f      	movs	r7, r1
 8000ed0:	3c20      	subs	r4, #32
 8000ed2:	40e7      	lsrs	r7, r4
 8000ed4:	2b20      	cmp	r3, #32
 8000ed6:	d003      	beq.n	8000ee0 <__aeabi_dadd+0x5b8>
 8000ed8:	2440      	movs	r4, #64	; 0x40
 8000eda:	1ae3      	subs	r3, r4, r3
 8000edc:	4099      	lsls	r1, r3
 8000ede:	4308      	orrs	r0, r1
 8000ee0:	1e41      	subs	r1, r0, #1
 8000ee2:	4188      	sbcs	r0, r1
 8000ee4:	4338      	orrs	r0, r7
 8000ee6:	e67c      	b.n	8000be2 <__aeabi_dadd+0x2ba>
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2400      	movs	r4, #0
 8000eec:	e625      	b.n	8000b3a <__aeabi_dadd+0x212>
 8000eee:	1a17      	subs	r7, r2, r0
 8000ef0:	4643      	mov	r3, r8
 8000ef2:	42ba      	cmp	r2, r7
 8000ef4:	4192      	sbcs	r2, r2
 8000ef6:	1a59      	subs	r1, r3, r1
 8000ef8:	4252      	negs	r2, r2
 8000efa:	1a89      	subs	r1, r1, r2
 8000efc:	4664      	mov	r4, ip
 8000efe:	0035      	movs	r5, r6
 8000f00:	e543      	b.n	800098a <__aeabi_dadd+0x62>
 8000f02:	4641      	mov	r1, r8
 8000f04:	0010      	movs	r0, r2
 8000f06:	4d14      	ldr	r5, [pc, #80]	; (8000f58 <__aeabi_dadd+0x630>)
 8000f08:	e610      	b.n	8000b2c <__aeabi_dadd+0x204>
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	2400      	movs	r4, #0
 8000f0e:	0312      	lsls	r2, r2, #12
 8000f10:	e680      	b.n	8000c14 <__aeabi_dadd+0x2ec>
 8000f12:	001d      	movs	r5, r3
 8000f14:	000f      	movs	r7, r1
 8000f16:	3d20      	subs	r5, #32
 8000f18:	40ef      	lsrs	r7, r5
 8000f1a:	46bc      	mov	ip, r7
 8000f1c:	2b20      	cmp	r3, #32
 8000f1e:	d003      	beq.n	8000f28 <__aeabi_dadd+0x600>
 8000f20:	2540      	movs	r5, #64	; 0x40
 8000f22:	1aeb      	subs	r3, r5, r3
 8000f24:	4099      	lsls	r1, r3
 8000f26:	4308      	orrs	r0, r1
 8000f28:	0007      	movs	r7, r0
 8000f2a:	4663      	mov	r3, ip
 8000f2c:	1e78      	subs	r0, r7, #1
 8000f2e:	4187      	sbcs	r7, r0
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e769      	b.n	8000e08 <__aeabi_dadd+0x4e0>
 8000f34:	1887      	adds	r7, r0, r2
 8000f36:	4297      	cmp	r7, r2
 8000f38:	419b      	sbcs	r3, r3
 8000f3a:	4441      	add	r1, r8
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	18c9      	adds	r1, r1, r3
 8000f40:	0035      	movs	r5, r6
 8000f42:	e5a3      	b.n	8000a8c <__aeabi_dadd+0x164>
 8000f44:	003b      	movs	r3, r7
 8000f46:	4333      	orrs	r3, r6
 8000f48:	d0ce      	beq.n	8000ee8 <__aeabi_dadd+0x5c0>
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	0031      	movs	r1, r6
 8000f4e:	403a      	ands	r2, r7
 8000f50:	e652      	b.n	8000bf8 <__aeabi_dadd+0x2d0>
 8000f52:	2300      	movs	r3, #0
 8000f54:	001a      	movs	r2, r3
 8000f56:	e5f4      	b.n	8000b42 <__aeabi_dadd+0x21a>
 8000f58:	000007ff 	.word	0x000007ff
 8000f5c:	ff7fffff 	.word	0xff7fffff

08000f60 <__aeabi_ddiv>:
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	4657      	mov	r7, sl
 8000f64:	46de      	mov	lr, fp
 8000f66:	464e      	mov	r6, r9
 8000f68:	4645      	mov	r5, r8
 8000f6a:	b5e0      	push	{r5, r6, r7, lr}
 8000f6c:	4683      	mov	fp, r0
 8000f6e:	0007      	movs	r7, r0
 8000f70:	030e      	lsls	r6, r1, #12
 8000f72:	0048      	lsls	r0, r1, #1
 8000f74:	b085      	sub	sp, #20
 8000f76:	4692      	mov	sl, r2
 8000f78:	001c      	movs	r4, r3
 8000f7a:	0b36      	lsrs	r6, r6, #12
 8000f7c:	0d40      	lsrs	r0, r0, #21
 8000f7e:	0fcd      	lsrs	r5, r1, #31
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_ddiv+0x26>
 8000f84:	e09d      	b.n	80010c2 <__aeabi_ddiv+0x162>
 8000f86:	4b95      	ldr	r3, [pc, #596]	; (80011dc <__aeabi_ddiv+0x27c>)
 8000f88:	4298      	cmp	r0, r3
 8000f8a:	d039      	beq.n	8001000 <__aeabi_ddiv+0xa0>
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	00f6      	lsls	r6, r6, #3
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	431e      	orrs	r6, r3
 8000f94:	4a92      	ldr	r2, [pc, #584]	; (80011e0 <__aeabi_ddiv+0x280>)
 8000f96:	0f7b      	lsrs	r3, r7, #29
 8000f98:	4333      	orrs	r3, r6
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	4463      	add	r3, ip
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	00ff      	lsls	r7, r7, #3
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	0323      	lsls	r3, r4, #12
 8000fae:	0b1b      	lsrs	r3, r3, #12
 8000fb0:	4698      	mov	r8, r3
 8000fb2:	0063      	lsls	r3, r4, #1
 8000fb4:	0fe4      	lsrs	r4, r4, #31
 8000fb6:	4652      	mov	r2, sl
 8000fb8:	0d5b      	lsrs	r3, r3, #21
 8000fba:	9401      	str	r4, [sp, #4]
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_ddiv+0x60>
 8000fbe:	e0b3      	b.n	8001128 <__aeabi_ddiv+0x1c8>
 8000fc0:	4986      	ldr	r1, [pc, #536]	; (80011dc <__aeabi_ddiv+0x27c>)
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_ddiv+0x68>
 8000fc6:	e09e      	b.n	8001106 <__aeabi_ddiv+0x1a6>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	00d1      	lsls	r1, r2, #3
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	0412      	lsls	r2, r2, #16
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	4651      	mov	r1, sl
 8000fd4:	0f49      	lsrs	r1, r1, #29
 8000fd6:	4311      	orrs	r1, r2
 8000fd8:	468b      	mov	fp, r1
 8000fda:	4981      	ldr	r1, [pc, #516]	; (80011e0 <__aeabi_ddiv+0x280>)
 8000fdc:	4652      	mov	r2, sl
 8000fde:	468c      	mov	ip, r1
 8000fe0:	9900      	ldr	r1, [sp, #0]
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1acb      	subs	r3, r1, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	00d2      	lsls	r2, r2, #3
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	002b      	movs	r3, r5
 8000fee:	4063      	eors	r3, r4
 8000ff0:	469a      	mov	sl, r3
 8000ff2:	2e0f      	cmp	r6, #15
 8000ff4:	d900      	bls.n	8000ff8 <__aeabi_ddiv+0x98>
 8000ff6:	e105      	b.n	8001204 <__aeabi_ddiv+0x2a4>
 8000ff8:	4b7a      	ldr	r3, [pc, #488]	; (80011e4 <__aeabi_ddiv+0x284>)
 8000ffa:	00b6      	lsls	r6, r6, #2
 8000ffc:	599b      	ldr	r3, [r3, r6]
 8000ffe:	469f      	mov	pc, r3
 8001000:	465b      	mov	r3, fp
 8001002:	4333      	orrs	r3, r6
 8001004:	4699      	mov	r9, r3
 8001006:	d000      	beq.n	800100a <__aeabi_ddiv+0xaa>
 8001008:	e0b8      	b.n	800117c <__aeabi_ddiv+0x21c>
 800100a:	2302      	movs	r3, #2
 800100c:	2608      	movs	r6, #8
 800100e:	2700      	movs	r7, #0
 8001010:	9000      	str	r0, [sp, #0]
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	e7ca      	b.n	8000fac <__aeabi_ddiv+0x4c>
 8001016:	46cb      	mov	fp, r9
 8001018:	003a      	movs	r2, r7
 800101a:	9902      	ldr	r1, [sp, #8]
 800101c:	9501      	str	r5, [sp, #4]
 800101e:	9b01      	ldr	r3, [sp, #4]
 8001020:	469a      	mov	sl, r3
 8001022:	2902      	cmp	r1, #2
 8001024:	d027      	beq.n	8001076 <__aeabi_ddiv+0x116>
 8001026:	2903      	cmp	r1, #3
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0xcc>
 800102a:	e280      	b.n	800152e <__aeabi_ddiv+0x5ce>
 800102c:	2901      	cmp	r1, #1
 800102e:	d044      	beq.n	80010ba <__aeabi_ddiv+0x15a>
 8001030:	496d      	ldr	r1, [pc, #436]	; (80011e8 <__aeabi_ddiv+0x288>)
 8001032:	9b00      	ldr	r3, [sp, #0]
 8001034:	468c      	mov	ip, r1
 8001036:	4463      	add	r3, ip
 8001038:	001c      	movs	r4, r3
 800103a:	2c00      	cmp	r4, #0
 800103c:	dd38      	ble.n	80010b0 <__aeabi_ddiv+0x150>
 800103e:	0753      	lsls	r3, r2, #29
 8001040:	d000      	beq.n	8001044 <__aeabi_ddiv+0xe4>
 8001042:	e213      	b.n	800146c <__aeabi_ddiv+0x50c>
 8001044:	08d2      	lsrs	r2, r2, #3
 8001046:	465b      	mov	r3, fp
 8001048:	01db      	lsls	r3, r3, #7
 800104a:	d509      	bpl.n	8001060 <__aeabi_ddiv+0x100>
 800104c:	4659      	mov	r1, fp
 800104e:	4b67      	ldr	r3, [pc, #412]	; (80011ec <__aeabi_ddiv+0x28c>)
 8001050:	4019      	ands	r1, r3
 8001052:	468b      	mov	fp, r1
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	00c9      	lsls	r1, r1, #3
 8001058:	468c      	mov	ip, r1
 800105a:	9b00      	ldr	r3, [sp, #0]
 800105c:	4463      	add	r3, ip
 800105e:	001c      	movs	r4, r3
 8001060:	4b63      	ldr	r3, [pc, #396]	; (80011f0 <__aeabi_ddiv+0x290>)
 8001062:	429c      	cmp	r4, r3
 8001064:	dc07      	bgt.n	8001076 <__aeabi_ddiv+0x116>
 8001066:	465b      	mov	r3, fp
 8001068:	0564      	lsls	r4, r4, #21
 800106a:	075f      	lsls	r7, r3, #29
 800106c:	025b      	lsls	r3, r3, #9
 800106e:	4317      	orrs	r7, r2
 8001070:	0b1b      	lsrs	r3, r3, #12
 8001072:	0d62      	lsrs	r2, r4, #21
 8001074:	e002      	b.n	800107c <__aeabi_ddiv+0x11c>
 8001076:	2300      	movs	r3, #0
 8001078:	2700      	movs	r7, #0
 800107a:	4a58      	ldr	r2, [pc, #352]	; (80011dc <__aeabi_ddiv+0x27c>)
 800107c:	2100      	movs	r1, #0
 800107e:	031b      	lsls	r3, r3, #12
 8001080:	0b1c      	lsrs	r4, r3, #12
 8001082:	0d0b      	lsrs	r3, r1, #20
 8001084:	051b      	lsls	r3, r3, #20
 8001086:	4323      	orrs	r3, r4
 8001088:	0514      	lsls	r4, r2, #20
 800108a:	4a5a      	ldr	r2, [pc, #360]	; (80011f4 <__aeabi_ddiv+0x294>)
 800108c:	0038      	movs	r0, r7
 800108e:	4013      	ands	r3, r2
 8001090:	431c      	orrs	r4, r3
 8001092:	4653      	mov	r3, sl
 8001094:	0064      	lsls	r4, r4, #1
 8001096:	07db      	lsls	r3, r3, #31
 8001098:	0864      	lsrs	r4, r4, #1
 800109a:	431c      	orrs	r4, r3
 800109c:	0021      	movs	r1, r4
 800109e:	b005      	add	sp, #20
 80010a0:	bc3c      	pop	{r2, r3, r4, r5}
 80010a2:	4690      	mov	r8, r2
 80010a4:	4699      	mov	r9, r3
 80010a6:	46a2      	mov	sl, r4
 80010a8:	46ab      	mov	fp, r5
 80010aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ac:	2201      	movs	r2, #1
 80010ae:	4252      	negs	r2, r2
 80010b0:	2301      	movs	r3, #1
 80010b2:	1b1b      	subs	r3, r3, r4
 80010b4:	2b38      	cmp	r3, #56	; 0x38
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_ddiv+0x15a>
 80010b8:	e1ad      	b.n	8001416 <__aeabi_ddiv+0x4b6>
 80010ba:	2200      	movs	r2, #0
 80010bc:	2300      	movs	r3, #0
 80010be:	2700      	movs	r7, #0
 80010c0:	e7dc      	b.n	800107c <__aeabi_ddiv+0x11c>
 80010c2:	465b      	mov	r3, fp
 80010c4:	4333      	orrs	r3, r6
 80010c6:	4699      	mov	r9, r3
 80010c8:	d05e      	beq.n	8001188 <__aeabi_ddiv+0x228>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d100      	bne.n	80010d0 <__aeabi_ddiv+0x170>
 80010ce:	e18a      	b.n	80013e6 <__aeabi_ddiv+0x486>
 80010d0:	0030      	movs	r0, r6
 80010d2:	f001 fa4b 	bl	800256c <__clzsi2>
 80010d6:	0003      	movs	r3, r0
 80010d8:	3b0b      	subs	r3, #11
 80010da:	2b1c      	cmp	r3, #28
 80010dc:	dd00      	ble.n	80010e0 <__aeabi_ddiv+0x180>
 80010de:	e17b      	b.n	80013d8 <__aeabi_ddiv+0x478>
 80010e0:	221d      	movs	r2, #29
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	465a      	mov	r2, fp
 80010e6:	0001      	movs	r1, r0
 80010e8:	40da      	lsrs	r2, r3
 80010ea:	3908      	subs	r1, #8
 80010ec:	408e      	lsls	r6, r1
 80010ee:	0013      	movs	r3, r2
 80010f0:	465f      	mov	r7, fp
 80010f2:	4333      	orrs	r3, r6
 80010f4:	4699      	mov	r9, r3
 80010f6:	408f      	lsls	r7, r1
 80010f8:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <__aeabi_ddiv+0x298>)
 80010fa:	2600      	movs	r6, #0
 80010fc:	1a1b      	subs	r3, r3, r0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2300      	movs	r3, #0
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	e752      	b.n	8000fac <__aeabi_ddiv+0x4c>
 8001106:	4641      	mov	r1, r8
 8001108:	4653      	mov	r3, sl
 800110a:	430b      	orrs	r3, r1
 800110c:	493b      	ldr	r1, [pc, #236]	; (80011fc <__aeabi_ddiv+0x29c>)
 800110e:	469b      	mov	fp, r3
 8001110:	468c      	mov	ip, r1
 8001112:	9b00      	ldr	r3, [sp, #0]
 8001114:	4463      	add	r3, ip
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	465b      	mov	r3, fp
 800111a:	2b00      	cmp	r3, #0
 800111c:	d13b      	bne.n	8001196 <__aeabi_ddiv+0x236>
 800111e:	2302      	movs	r3, #2
 8001120:	2200      	movs	r2, #0
 8001122:	431e      	orrs	r6, r3
 8001124:	2102      	movs	r1, #2
 8001126:	e761      	b.n	8000fec <__aeabi_ddiv+0x8c>
 8001128:	4643      	mov	r3, r8
 800112a:	4313      	orrs	r3, r2
 800112c:	469b      	mov	fp, r3
 800112e:	d037      	beq.n	80011a0 <__aeabi_ddiv+0x240>
 8001130:	4643      	mov	r3, r8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d100      	bne.n	8001138 <__aeabi_ddiv+0x1d8>
 8001136:	e162      	b.n	80013fe <__aeabi_ddiv+0x49e>
 8001138:	4640      	mov	r0, r8
 800113a:	f001 fa17 	bl	800256c <__clzsi2>
 800113e:	0003      	movs	r3, r0
 8001140:	3b0b      	subs	r3, #11
 8001142:	2b1c      	cmp	r3, #28
 8001144:	dd00      	ble.n	8001148 <__aeabi_ddiv+0x1e8>
 8001146:	e153      	b.n	80013f0 <__aeabi_ddiv+0x490>
 8001148:	0002      	movs	r2, r0
 800114a:	4641      	mov	r1, r8
 800114c:	3a08      	subs	r2, #8
 800114e:	4091      	lsls	r1, r2
 8001150:	4688      	mov	r8, r1
 8001152:	211d      	movs	r1, #29
 8001154:	1acb      	subs	r3, r1, r3
 8001156:	4651      	mov	r1, sl
 8001158:	40d9      	lsrs	r1, r3
 800115a:	000b      	movs	r3, r1
 800115c:	4641      	mov	r1, r8
 800115e:	430b      	orrs	r3, r1
 8001160:	469b      	mov	fp, r3
 8001162:	4653      	mov	r3, sl
 8001164:	4093      	lsls	r3, r2
 8001166:	001a      	movs	r2, r3
 8001168:	9b00      	ldr	r3, [sp, #0]
 800116a:	4925      	ldr	r1, [pc, #148]	; (8001200 <__aeabi_ddiv+0x2a0>)
 800116c:	469c      	mov	ip, r3
 800116e:	4460      	add	r0, ip
 8001170:	0003      	movs	r3, r0
 8001172:	468c      	mov	ip, r1
 8001174:	4463      	add	r3, ip
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2100      	movs	r1, #0
 800117a:	e737      	b.n	8000fec <__aeabi_ddiv+0x8c>
 800117c:	2303      	movs	r3, #3
 800117e:	46b1      	mov	r9, r6
 8001180:	9000      	str	r0, [sp, #0]
 8001182:	260c      	movs	r6, #12
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	e711      	b.n	8000fac <__aeabi_ddiv+0x4c>
 8001188:	2300      	movs	r3, #0
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	2604      	movs	r6, #4
 8001190:	2700      	movs	r7, #0
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	e70a      	b.n	8000fac <__aeabi_ddiv+0x4c>
 8001196:	2303      	movs	r3, #3
 8001198:	46c3      	mov	fp, r8
 800119a:	431e      	orrs	r6, r3
 800119c:	2103      	movs	r1, #3
 800119e:	e725      	b.n	8000fec <__aeabi_ddiv+0x8c>
 80011a0:	3301      	adds	r3, #1
 80011a2:	431e      	orrs	r6, r3
 80011a4:	2200      	movs	r2, #0
 80011a6:	2101      	movs	r1, #1
 80011a8:	e720      	b.n	8000fec <__aeabi_ddiv+0x8c>
 80011aa:	2300      	movs	r3, #0
 80011ac:	469a      	mov	sl, r3
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	2700      	movs	r7, #0
 80011b2:	031b      	lsls	r3, r3, #12
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <__aeabi_ddiv+0x27c>)
 80011b6:	e761      	b.n	800107c <__aeabi_ddiv+0x11c>
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	4649      	mov	r1, r9
 80011bc:	031b      	lsls	r3, r3, #12
 80011be:	4219      	tst	r1, r3
 80011c0:	d100      	bne.n	80011c4 <__aeabi_ddiv+0x264>
 80011c2:	e0e2      	b.n	800138a <__aeabi_ddiv+0x42a>
 80011c4:	4659      	mov	r1, fp
 80011c6:	4219      	tst	r1, r3
 80011c8:	d000      	beq.n	80011cc <__aeabi_ddiv+0x26c>
 80011ca:	e0de      	b.n	800138a <__aeabi_ddiv+0x42a>
 80011cc:	430b      	orrs	r3, r1
 80011ce:	031b      	lsls	r3, r3, #12
 80011d0:	0017      	movs	r7, r2
 80011d2:	0b1b      	lsrs	r3, r3, #12
 80011d4:	46a2      	mov	sl, r4
 80011d6:	4a01      	ldr	r2, [pc, #4]	; (80011dc <__aeabi_ddiv+0x27c>)
 80011d8:	e750      	b.n	800107c <__aeabi_ddiv+0x11c>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007ff 	.word	0x000007ff
 80011e0:	fffffc01 	.word	0xfffffc01
 80011e4:	0800f738 	.word	0x0800f738
 80011e8:	000003ff 	.word	0x000003ff
 80011ec:	feffffff 	.word	0xfeffffff
 80011f0:	000007fe 	.word	0x000007fe
 80011f4:	800fffff 	.word	0x800fffff
 80011f8:	fffffc0d 	.word	0xfffffc0d
 80011fc:	fffff801 	.word	0xfffff801
 8001200:	000003f3 	.word	0x000003f3
 8001204:	45d9      	cmp	r9, fp
 8001206:	d900      	bls.n	800120a <__aeabi_ddiv+0x2aa>
 8001208:	e0cb      	b.n	80013a2 <__aeabi_ddiv+0x442>
 800120a:	d100      	bne.n	800120e <__aeabi_ddiv+0x2ae>
 800120c:	e0c6      	b.n	800139c <__aeabi_ddiv+0x43c>
 800120e:	003c      	movs	r4, r7
 8001210:	4648      	mov	r0, r9
 8001212:	2700      	movs	r7, #0
 8001214:	9b00      	ldr	r3, [sp, #0]
 8001216:	3b01      	subs	r3, #1
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	465b      	mov	r3, fp
 800121c:	0e16      	lsrs	r6, r2, #24
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	431e      	orrs	r6, r3
 8001222:	0213      	lsls	r3, r2, #8
 8001224:	4698      	mov	r8, r3
 8001226:	0433      	lsls	r3, r6, #16
 8001228:	0c1b      	lsrs	r3, r3, #16
 800122a:	4699      	mov	r9, r3
 800122c:	0c31      	lsrs	r1, r6, #16
 800122e:	9101      	str	r1, [sp, #4]
 8001230:	f7ff f802 	bl	8000238 <__aeabi_uidivmod>
 8001234:	464a      	mov	r2, r9
 8001236:	4342      	muls	r2, r0
 8001238:	040b      	lsls	r3, r1, #16
 800123a:	0c21      	lsrs	r1, r4, #16
 800123c:	0005      	movs	r5, r0
 800123e:	4319      	orrs	r1, r3
 8001240:	428a      	cmp	r2, r1
 8001242:	d907      	bls.n	8001254 <__aeabi_ddiv+0x2f4>
 8001244:	1989      	adds	r1, r1, r6
 8001246:	3d01      	subs	r5, #1
 8001248:	428e      	cmp	r6, r1
 800124a:	d803      	bhi.n	8001254 <__aeabi_ddiv+0x2f4>
 800124c:	428a      	cmp	r2, r1
 800124e:	d901      	bls.n	8001254 <__aeabi_ddiv+0x2f4>
 8001250:	1e85      	subs	r5, r0, #2
 8001252:	1989      	adds	r1, r1, r6
 8001254:	1a88      	subs	r0, r1, r2
 8001256:	9901      	ldr	r1, [sp, #4]
 8001258:	f7fe ffee 	bl	8000238 <__aeabi_uidivmod>
 800125c:	0409      	lsls	r1, r1, #16
 800125e:	468c      	mov	ip, r1
 8001260:	464a      	mov	r2, r9
 8001262:	0421      	lsls	r1, r4, #16
 8001264:	4664      	mov	r4, ip
 8001266:	4342      	muls	r2, r0
 8001268:	0c09      	lsrs	r1, r1, #16
 800126a:	0003      	movs	r3, r0
 800126c:	4321      	orrs	r1, r4
 800126e:	428a      	cmp	r2, r1
 8001270:	d904      	bls.n	800127c <__aeabi_ddiv+0x31c>
 8001272:	1989      	adds	r1, r1, r6
 8001274:	3b01      	subs	r3, #1
 8001276:	428e      	cmp	r6, r1
 8001278:	d800      	bhi.n	800127c <__aeabi_ddiv+0x31c>
 800127a:	e0f1      	b.n	8001460 <__aeabi_ddiv+0x500>
 800127c:	042d      	lsls	r5, r5, #16
 800127e:	431d      	orrs	r5, r3
 8001280:	46ab      	mov	fp, r5
 8001282:	4643      	mov	r3, r8
 8001284:	1a89      	subs	r1, r1, r2
 8001286:	4642      	mov	r2, r8
 8001288:	0c28      	lsrs	r0, r5, #16
 800128a:	0412      	lsls	r2, r2, #16
 800128c:	0c1d      	lsrs	r5, r3, #16
 800128e:	465b      	mov	r3, fp
 8001290:	0c14      	lsrs	r4, r2, #16
 8001292:	0022      	movs	r2, r4
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	0c1b      	lsrs	r3, r3, #16
 8001298:	435a      	muls	r2, r3
 800129a:	9403      	str	r4, [sp, #12]
 800129c:	436b      	muls	r3, r5
 800129e:	4344      	muls	r4, r0
 80012a0:	9502      	str	r5, [sp, #8]
 80012a2:	4368      	muls	r0, r5
 80012a4:	191b      	adds	r3, r3, r4
 80012a6:	0c15      	lsrs	r5, r2, #16
 80012a8:	18eb      	adds	r3, r5, r3
 80012aa:	429c      	cmp	r4, r3
 80012ac:	d903      	bls.n	80012b6 <__aeabi_ddiv+0x356>
 80012ae:	2480      	movs	r4, #128	; 0x80
 80012b0:	0264      	lsls	r4, r4, #9
 80012b2:	46a4      	mov	ip, r4
 80012b4:	4460      	add	r0, ip
 80012b6:	0c1c      	lsrs	r4, r3, #16
 80012b8:	0415      	lsls	r5, r2, #16
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	0c2d      	lsrs	r5, r5, #16
 80012be:	1820      	adds	r0, r4, r0
 80012c0:	195d      	adds	r5, r3, r5
 80012c2:	4281      	cmp	r1, r0
 80012c4:	d377      	bcc.n	80013b6 <__aeabi_ddiv+0x456>
 80012c6:	d073      	beq.n	80013b0 <__aeabi_ddiv+0x450>
 80012c8:	1a0c      	subs	r4, r1, r0
 80012ca:	4aa2      	ldr	r2, [pc, #648]	; (8001554 <__aeabi_ddiv+0x5f4>)
 80012cc:	1b7d      	subs	r5, r7, r5
 80012ce:	42af      	cmp	r7, r5
 80012d0:	41bf      	sbcs	r7, r7
 80012d2:	4694      	mov	ip, r2
 80012d4:	9b00      	ldr	r3, [sp, #0]
 80012d6:	427f      	negs	r7, r7
 80012d8:	4463      	add	r3, ip
 80012da:	1be0      	subs	r0, r4, r7
 80012dc:	001c      	movs	r4, r3
 80012de:	4286      	cmp	r6, r0
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0x384>
 80012e2:	e0db      	b.n	800149c <__aeabi_ddiv+0x53c>
 80012e4:	9901      	ldr	r1, [sp, #4]
 80012e6:	f7fe ffa7 	bl	8000238 <__aeabi_uidivmod>
 80012ea:	464a      	mov	r2, r9
 80012ec:	4342      	muls	r2, r0
 80012ee:	040b      	lsls	r3, r1, #16
 80012f0:	0c29      	lsrs	r1, r5, #16
 80012f2:	0007      	movs	r7, r0
 80012f4:	4319      	orrs	r1, r3
 80012f6:	428a      	cmp	r2, r1
 80012f8:	d907      	bls.n	800130a <__aeabi_ddiv+0x3aa>
 80012fa:	1989      	adds	r1, r1, r6
 80012fc:	3f01      	subs	r7, #1
 80012fe:	428e      	cmp	r6, r1
 8001300:	d803      	bhi.n	800130a <__aeabi_ddiv+0x3aa>
 8001302:	428a      	cmp	r2, r1
 8001304:	d901      	bls.n	800130a <__aeabi_ddiv+0x3aa>
 8001306:	1e87      	subs	r7, r0, #2
 8001308:	1989      	adds	r1, r1, r6
 800130a:	1a88      	subs	r0, r1, r2
 800130c:	9901      	ldr	r1, [sp, #4]
 800130e:	f7fe ff93 	bl	8000238 <__aeabi_uidivmod>
 8001312:	0409      	lsls	r1, r1, #16
 8001314:	464a      	mov	r2, r9
 8001316:	4689      	mov	r9, r1
 8001318:	0429      	lsls	r1, r5, #16
 800131a:	464d      	mov	r5, r9
 800131c:	4342      	muls	r2, r0
 800131e:	0c09      	lsrs	r1, r1, #16
 8001320:	0003      	movs	r3, r0
 8001322:	4329      	orrs	r1, r5
 8001324:	428a      	cmp	r2, r1
 8001326:	d907      	bls.n	8001338 <__aeabi_ddiv+0x3d8>
 8001328:	1989      	adds	r1, r1, r6
 800132a:	3b01      	subs	r3, #1
 800132c:	428e      	cmp	r6, r1
 800132e:	d803      	bhi.n	8001338 <__aeabi_ddiv+0x3d8>
 8001330:	428a      	cmp	r2, r1
 8001332:	d901      	bls.n	8001338 <__aeabi_ddiv+0x3d8>
 8001334:	1e83      	subs	r3, r0, #2
 8001336:	1989      	adds	r1, r1, r6
 8001338:	043f      	lsls	r7, r7, #16
 800133a:	1a89      	subs	r1, r1, r2
 800133c:	003a      	movs	r2, r7
 800133e:	9f03      	ldr	r7, [sp, #12]
 8001340:	431a      	orrs	r2, r3
 8001342:	0038      	movs	r0, r7
 8001344:	0413      	lsls	r3, r2, #16
 8001346:	0c1b      	lsrs	r3, r3, #16
 8001348:	4358      	muls	r0, r3
 800134a:	4681      	mov	r9, r0
 800134c:	9802      	ldr	r0, [sp, #8]
 800134e:	0c15      	lsrs	r5, r2, #16
 8001350:	436f      	muls	r7, r5
 8001352:	4343      	muls	r3, r0
 8001354:	4345      	muls	r5, r0
 8001356:	4648      	mov	r0, r9
 8001358:	0c00      	lsrs	r0, r0, #16
 800135a:	4684      	mov	ip, r0
 800135c:	19db      	adds	r3, r3, r7
 800135e:	4463      	add	r3, ip
 8001360:	429f      	cmp	r7, r3
 8001362:	d903      	bls.n	800136c <__aeabi_ddiv+0x40c>
 8001364:	2080      	movs	r0, #128	; 0x80
 8001366:	0240      	lsls	r0, r0, #9
 8001368:	4684      	mov	ip, r0
 800136a:	4465      	add	r5, ip
 800136c:	4648      	mov	r0, r9
 800136e:	0c1f      	lsrs	r7, r3, #16
 8001370:	0400      	lsls	r0, r0, #16
 8001372:	041b      	lsls	r3, r3, #16
 8001374:	0c00      	lsrs	r0, r0, #16
 8001376:	197d      	adds	r5, r7, r5
 8001378:	1818      	adds	r0, r3, r0
 800137a:	42a9      	cmp	r1, r5
 800137c:	d200      	bcs.n	8001380 <__aeabi_ddiv+0x420>
 800137e:	e084      	b.n	800148a <__aeabi_ddiv+0x52a>
 8001380:	d100      	bne.n	8001384 <__aeabi_ddiv+0x424>
 8001382:	e07f      	b.n	8001484 <__aeabi_ddiv+0x524>
 8001384:	2301      	movs	r3, #1
 8001386:	431a      	orrs	r2, r3
 8001388:	e657      	b.n	800103a <__aeabi_ddiv+0xda>
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	464a      	mov	r2, r9
 800138e:	031b      	lsls	r3, r3, #12
 8001390:	4313      	orrs	r3, r2
 8001392:	031b      	lsls	r3, r3, #12
 8001394:	0b1b      	lsrs	r3, r3, #12
 8001396:	46aa      	mov	sl, r5
 8001398:	4a6f      	ldr	r2, [pc, #444]	; (8001558 <__aeabi_ddiv+0x5f8>)
 800139a:	e66f      	b.n	800107c <__aeabi_ddiv+0x11c>
 800139c:	42ba      	cmp	r2, r7
 800139e:	d900      	bls.n	80013a2 <__aeabi_ddiv+0x442>
 80013a0:	e735      	b.n	800120e <__aeabi_ddiv+0x2ae>
 80013a2:	464b      	mov	r3, r9
 80013a4:	07dc      	lsls	r4, r3, #31
 80013a6:	0858      	lsrs	r0, r3, #1
 80013a8:	087b      	lsrs	r3, r7, #1
 80013aa:	431c      	orrs	r4, r3
 80013ac:	07ff      	lsls	r7, r7, #31
 80013ae:	e734      	b.n	800121a <__aeabi_ddiv+0x2ba>
 80013b0:	2400      	movs	r4, #0
 80013b2:	42af      	cmp	r7, r5
 80013b4:	d289      	bcs.n	80012ca <__aeabi_ddiv+0x36a>
 80013b6:	4447      	add	r7, r8
 80013b8:	4547      	cmp	r7, r8
 80013ba:	41a4      	sbcs	r4, r4
 80013bc:	465b      	mov	r3, fp
 80013be:	4264      	negs	r4, r4
 80013c0:	19a4      	adds	r4, r4, r6
 80013c2:	1864      	adds	r4, r4, r1
 80013c4:	3b01      	subs	r3, #1
 80013c6:	42a6      	cmp	r6, r4
 80013c8:	d21e      	bcs.n	8001408 <__aeabi_ddiv+0x4a8>
 80013ca:	42a0      	cmp	r0, r4
 80013cc:	d86d      	bhi.n	80014aa <__aeabi_ddiv+0x54a>
 80013ce:	d100      	bne.n	80013d2 <__aeabi_ddiv+0x472>
 80013d0:	e0b6      	b.n	8001540 <__aeabi_ddiv+0x5e0>
 80013d2:	1a24      	subs	r4, r4, r0
 80013d4:	469b      	mov	fp, r3
 80013d6:	e778      	b.n	80012ca <__aeabi_ddiv+0x36a>
 80013d8:	0003      	movs	r3, r0
 80013da:	465a      	mov	r2, fp
 80013dc:	3b28      	subs	r3, #40	; 0x28
 80013de:	409a      	lsls	r2, r3
 80013e0:	2700      	movs	r7, #0
 80013e2:	4691      	mov	r9, r2
 80013e4:	e688      	b.n	80010f8 <__aeabi_ddiv+0x198>
 80013e6:	4658      	mov	r0, fp
 80013e8:	f001 f8c0 	bl	800256c <__clzsi2>
 80013ec:	3020      	adds	r0, #32
 80013ee:	e672      	b.n	80010d6 <__aeabi_ddiv+0x176>
 80013f0:	0003      	movs	r3, r0
 80013f2:	4652      	mov	r2, sl
 80013f4:	3b28      	subs	r3, #40	; 0x28
 80013f6:	409a      	lsls	r2, r3
 80013f8:	4693      	mov	fp, r2
 80013fa:	2200      	movs	r2, #0
 80013fc:	e6b4      	b.n	8001168 <__aeabi_ddiv+0x208>
 80013fe:	4650      	mov	r0, sl
 8001400:	f001 f8b4 	bl	800256c <__clzsi2>
 8001404:	3020      	adds	r0, #32
 8001406:	e69a      	b.n	800113e <__aeabi_ddiv+0x1de>
 8001408:	42a6      	cmp	r6, r4
 800140a:	d1e2      	bne.n	80013d2 <__aeabi_ddiv+0x472>
 800140c:	45b8      	cmp	r8, r7
 800140e:	d9dc      	bls.n	80013ca <__aeabi_ddiv+0x46a>
 8001410:	1a34      	subs	r4, r6, r0
 8001412:	469b      	mov	fp, r3
 8001414:	e759      	b.n	80012ca <__aeabi_ddiv+0x36a>
 8001416:	2b1f      	cmp	r3, #31
 8001418:	dc65      	bgt.n	80014e6 <__aeabi_ddiv+0x586>
 800141a:	4c50      	ldr	r4, [pc, #320]	; (800155c <__aeabi_ddiv+0x5fc>)
 800141c:	9900      	ldr	r1, [sp, #0]
 800141e:	46a4      	mov	ip, r4
 8001420:	465c      	mov	r4, fp
 8001422:	4461      	add	r1, ip
 8001424:	0008      	movs	r0, r1
 8001426:	408c      	lsls	r4, r1
 8001428:	0011      	movs	r1, r2
 800142a:	4082      	lsls	r2, r0
 800142c:	40d9      	lsrs	r1, r3
 800142e:	1e50      	subs	r0, r2, #1
 8001430:	4182      	sbcs	r2, r0
 8001432:	430c      	orrs	r4, r1
 8001434:	4314      	orrs	r4, r2
 8001436:	465a      	mov	r2, fp
 8001438:	40da      	lsrs	r2, r3
 800143a:	0013      	movs	r3, r2
 800143c:	0762      	lsls	r2, r4, #29
 800143e:	d009      	beq.n	8001454 <__aeabi_ddiv+0x4f4>
 8001440:	220f      	movs	r2, #15
 8001442:	4022      	ands	r2, r4
 8001444:	2a04      	cmp	r2, #4
 8001446:	d005      	beq.n	8001454 <__aeabi_ddiv+0x4f4>
 8001448:	0022      	movs	r2, r4
 800144a:	1d14      	adds	r4, r2, #4
 800144c:	4294      	cmp	r4, r2
 800144e:	4189      	sbcs	r1, r1
 8001450:	4249      	negs	r1, r1
 8001452:	185b      	adds	r3, r3, r1
 8001454:	021a      	lsls	r2, r3, #8
 8001456:	d562      	bpl.n	800151e <__aeabi_ddiv+0x5be>
 8001458:	2201      	movs	r2, #1
 800145a:	2300      	movs	r3, #0
 800145c:	2700      	movs	r7, #0
 800145e:	e60d      	b.n	800107c <__aeabi_ddiv+0x11c>
 8001460:	428a      	cmp	r2, r1
 8001462:	d800      	bhi.n	8001466 <__aeabi_ddiv+0x506>
 8001464:	e70a      	b.n	800127c <__aeabi_ddiv+0x31c>
 8001466:	1e83      	subs	r3, r0, #2
 8001468:	1989      	adds	r1, r1, r6
 800146a:	e707      	b.n	800127c <__aeabi_ddiv+0x31c>
 800146c:	230f      	movs	r3, #15
 800146e:	4013      	ands	r3, r2
 8001470:	2b04      	cmp	r3, #4
 8001472:	d100      	bne.n	8001476 <__aeabi_ddiv+0x516>
 8001474:	e5e6      	b.n	8001044 <__aeabi_ddiv+0xe4>
 8001476:	1d17      	adds	r7, r2, #4
 8001478:	4297      	cmp	r7, r2
 800147a:	4192      	sbcs	r2, r2
 800147c:	4253      	negs	r3, r2
 800147e:	449b      	add	fp, r3
 8001480:	08fa      	lsrs	r2, r7, #3
 8001482:	e5e0      	b.n	8001046 <__aeabi_ddiv+0xe6>
 8001484:	2800      	cmp	r0, #0
 8001486:	d100      	bne.n	800148a <__aeabi_ddiv+0x52a>
 8001488:	e5d7      	b.n	800103a <__aeabi_ddiv+0xda>
 800148a:	1871      	adds	r1, r6, r1
 800148c:	1e53      	subs	r3, r2, #1
 800148e:	42b1      	cmp	r1, r6
 8001490:	d327      	bcc.n	80014e2 <__aeabi_ddiv+0x582>
 8001492:	42a9      	cmp	r1, r5
 8001494:	d315      	bcc.n	80014c2 <__aeabi_ddiv+0x562>
 8001496:	d058      	beq.n	800154a <__aeabi_ddiv+0x5ea>
 8001498:	001a      	movs	r2, r3
 800149a:	e773      	b.n	8001384 <__aeabi_ddiv+0x424>
 800149c:	2b00      	cmp	r3, #0
 800149e:	dc00      	bgt.n	80014a2 <__aeabi_ddiv+0x542>
 80014a0:	e604      	b.n	80010ac <__aeabi_ddiv+0x14c>
 80014a2:	2301      	movs	r3, #1
 80014a4:	2200      	movs	r2, #0
 80014a6:	449b      	add	fp, r3
 80014a8:	e5cd      	b.n	8001046 <__aeabi_ddiv+0xe6>
 80014aa:	2302      	movs	r3, #2
 80014ac:	4447      	add	r7, r8
 80014ae:	4547      	cmp	r7, r8
 80014b0:	4189      	sbcs	r1, r1
 80014b2:	425b      	negs	r3, r3
 80014b4:	469c      	mov	ip, r3
 80014b6:	4249      	negs	r1, r1
 80014b8:	1989      	adds	r1, r1, r6
 80014ba:	190c      	adds	r4, r1, r4
 80014bc:	44e3      	add	fp, ip
 80014be:	1a24      	subs	r4, r4, r0
 80014c0:	e703      	b.n	80012ca <__aeabi_ddiv+0x36a>
 80014c2:	4643      	mov	r3, r8
 80014c4:	005f      	lsls	r7, r3, #1
 80014c6:	4547      	cmp	r7, r8
 80014c8:	419b      	sbcs	r3, r3
 80014ca:	46b8      	mov	r8, r7
 80014cc:	425b      	negs	r3, r3
 80014ce:	199e      	adds	r6, r3, r6
 80014d0:	3a02      	subs	r2, #2
 80014d2:	1989      	adds	r1, r1, r6
 80014d4:	42a9      	cmp	r1, r5
 80014d6:	d000      	beq.n	80014da <__aeabi_ddiv+0x57a>
 80014d8:	e754      	b.n	8001384 <__aeabi_ddiv+0x424>
 80014da:	4540      	cmp	r0, r8
 80014dc:	d000      	beq.n	80014e0 <__aeabi_ddiv+0x580>
 80014de:	e751      	b.n	8001384 <__aeabi_ddiv+0x424>
 80014e0:	e5ab      	b.n	800103a <__aeabi_ddiv+0xda>
 80014e2:	001a      	movs	r2, r3
 80014e4:	e7f6      	b.n	80014d4 <__aeabi_ddiv+0x574>
 80014e6:	211f      	movs	r1, #31
 80014e8:	465f      	mov	r7, fp
 80014ea:	4249      	negs	r1, r1
 80014ec:	1b0c      	subs	r4, r1, r4
 80014ee:	40e7      	lsrs	r7, r4
 80014f0:	2b20      	cmp	r3, #32
 80014f2:	d007      	beq.n	8001504 <__aeabi_ddiv+0x5a4>
 80014f4:	491a      	ldr	r1, [pc, #104]	; (8001560 <__aeabi_ddiv+0x600>)
 80014f6:	9b00      	ldr	r3, [sp, #0]
 80014f8:	468c      	mov	ip, r1
 80014fa:	4463      	add	r3, ip
 80014fc:	0018      	movs	r0, r3
 80014fe:	465b      	mov	r3, fp
 8001500:	4083      	lsls	r3, r0
 8001502:	431a      	orrs	r2, r3
 8001504:	1e50      	subs	r0, r2, #1
 8001506:	4182      	sbcs	r2, r0
 8001508:	433a      	orrs	r2, r7
 800150a:	2707      	movs	r7, #7
 800150c:	2300      	movs	r3, #0
 800150e:	4017      	ands	r7, r2
 8001510:	d009      	beq.n	8001526 <__aeabi_ddiv+0x5c6>
 8001512:	210f      	movs	r1, #15
 8001514:	2300      	movs	r3, #0
 8001516:	4011      	ands	r1, r2
 8001518:	0014      	movs	r4, r2
 800151a:	2904      	cmp	r1, #4
 800151c:	d195      	bne.n	800144a <__aeabi_ddiv+0x4ea>
 800151e:	0022      	movs	r2, r4
 8001520:	075f      	lsls	r7, r3, #29
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	0b1b      	lsrs	r3, r3, #12
 8001526:	08d2      	lsrs	r2, r2, #3
 8001528:	4317      	orrs	r7, r2
 800152a:	2200      	movs	r2, #0
 800152c:	e5a6      	b.n	800107c <__aeabi_ddiv+0x11c>
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	4659      	mov	r1, fp
 8001532:	031b      	lsls	r3, r3, #12
 8001534:	430b      	orrs	r3, r1
 8001536:	031b      	lsls	r3, r3, #12
 8001538:	0017      	movs	r7, r2
 800153a:	0b1b      	lsrs	r3, r3, #12
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <__aeabi_ddiv+0x5f8>)
 800153e:	e59d      	b.n	800107c <__aeabi_ddiv+0x11c>
 8001540:	42bd      	cmp	r5, r7
 8001542:	d8b2      	bhi.n	80014aa <__aeabi_ddiv+0x54a>
 8001544:	469b      	mov	fp, r3
 8001546:	2400      	movs	r4, #0
 8001548:	e6bf      	b.n	80012ca <__aeabi_ddiv+0x36a>
 800154a:	4580      	cmp	r8, r0
 800154c:	d3b9      	bcc.n	80014c2 <__aeabi_ddiv+0x562>
 800154e:	001a      	movs	r2, r3
 8001550:	e7c3      	b.n	80014da <__aeabi_ddiv+0x57a>
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	000003ff 	.word	0x000003ff
 8001558:	000007ff 	.word	0x000007ff
 800155c:	0000041e 	.word	0x0000041e
 8001560:	0000043e 	.word	0x0000043e

08001564 <__eqdf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	464f      	mov	r7, r9
 8001568:	4646      	mov	r6, r8
 800156a:	46d6      	mov	lr, sl
 800156c:	4684      	mov	ip, r0
 800156e:	b5c0      	push	{r6, r7, lr}
 8001570:	4680      	mov	r8, r0
 8001572:	4e19      	ldr	r6, [pc, #100]	; (80015d8 <__eqdf2+0x74>)
 8001574:	0318      	lsls	r0, r3, #12
 8001576:	030f      	lsls	r7, r1, #12
 8001578:	004d      	lsls	r5, r1, #1
 800157a:	0b00      	lsrs	r0, r0, #12
 800157c:	005c      	lsls	r4, r3, #1
 800157e:	4682      	mov	sl, r0
 8001580:	0b3f      	lsrs	r7, r7, #12
 8001582:	0d6d      	lsrs	r5, r5, #21
 8001584:	0fc9      	lsrs	r1, r1, #31
 8001586:	4691      	mov	r9, r2
 8001588:	0d64      	lsrs	r4, r4, #21
 800158a:	0fdb      	lsrs	r3, r3, #31
 800158c:	2001      	movs	r0, #1
 800158e:	42b5      	cmp	r5, r6
 8001590:	d00a      	beq.n	80015a8 <__eqdf2+0x44>
 8001592:	42b4      	cmp	r4, r6
 8001594:	d003      	beq.n	800159e <__eqdf2+0x3a>
 8001596:	42a5      	cmp	r5, r4
 8001598:	d101      	bne.n	800159e <__eqdf2+0x3a>
 800159a:	4557      	cmp	r7, sl
 800159c:	d00c      	beq.n	80015b8 <__eqdf2+0x54>
 800159e:	bc1c      	pop	{r2, r3, r4}
 80015a0:	4690      	mov	r8, r2
 80015a2:	4699      	mov	r9, r3
 80015a4:	46a2      	mov	sl, r4
 80015a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a8:	4666      	mov	r6, ip
 80015aa:	433e      	orrs	r6, r7
 80015ac:	d1f7      	bne.n	800159e <__eqdf2+0x3a>
 80015ae:	42ac      	cmp	r4, r5
 80015b0:	d1f5      	bne.n	800159e <__eqdf2+0x3a>
 80015b2:	4654      	mov	r4, sl
 80015b4:	4314      	orrs	r4, r2
 80015b6:	d1f2      	bne.n	800159e <__eqdf2+0x3a>
 80015b8:	2001      	movs	r0, #1
 80015ba:	45c8      	cmp	r8, r9
 80015bc:	d1ef      	bne.n	800159e <__eqdf2+0x3a>
 80015be:	4299      	cmp	r1, r3
 80015c0:	d007      	beq.n	80015d2 <__eqdf2+0x6e>
 80015c2:	2d00      	cmp	r5, #0
 80015c4:	d1eb      	bne.n	800159e <__eqdf2+0x3a>
 80015c6:	4663      	mov	r3, ip
 80015c8:	431f      	orrs	r7, r3
 80015ca:	0038      	movs	r0, r7
 80015cc:	1e47      	subs	r7, r0, #1
 80015ce:	41b8      	sbcs	r0, r7
 80015d0:	e7e5      	b.n	800159e <__eqdf2+0x3a>
 80015d2:	2000      	movs	r0, #0
 80015d4:	e7e3      	b.n	800159e <__eqdf2+0x3a>
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	000007ff 	.word	0x000007ff

080015dc <__gedf2>:
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015de:	464f      	mov	r7, r9
 80015e0:	4646      	mov	r6, r8
 80015e2:	46d6      	mov	lr, sl
 80015e4:	004d      	lsls	r5, r1, #1
 80015e6:	b5c0      	push	{r6, r7, lr}
 80015e8:	030e      	lsls	r6, r1, #12
 80015ea:	0fc9      	lsrs	r1, r1, #31
 80015ec:	468a      	mov	sl, r1
 80015ee:	492c      	ldr	r1, [pc, #176]	; (80016a0 <__gedf2+0xc4>)
 80015f0:	031f      	lsls	r7, r3, #12
 80015f2:	005c      	lsls	r4, r3, #1
 80015f4:	4680      	mov	r8, r0
 80015f6:	0b36      	lsrs	r6, r6, #12
 80015f8:	0d6d      	lsrs	r5, r5, #21
 80015fa:	4691      	mov	r9, r2
 80015fc:	0b3f      	lsrs	r7, r7, #12
 80015fe:	0d64      	lsrs	r4, r4, #21
 8001600:	0fdb      	lsrs	r3, r3, #31
 8001602:	428d      	cmp	r5, r1
 8001604:	d01e      	beq.n	8001644 <__gedf2+0x68>
 8001606:	428c      	cmp	r4, r1
 8001608:	d016      	beq.n	8001638 <__gedf2+0x5c>
 800160a:	2d00      	cmp	r5, #0
 800160c:	d11e      	bne.n	800164c <__gedf2+0x70>
 800160e:	4330      	orrs	r0, r6
 8001610:	4684      	mov	ip, r0
 8001612:	2c00      	cmp	r4, #0
 8001614:	d101      	bne.n	800161a <__gedf2+0x3e>
 8001616:	433a      	orrs	r2, r7
 8001618:	d023      	beq.n	8001662 <__gedf2+0x86>
 800161a:	4662      	mov	r2, ip
 800161c:	2a00      	cmp	r2, #0
 800161e:	d01a      	beq.n	8001656 <__gedf2+0x7a>
 8001620:	459a      	cmp	sl, r3
 8001622:	d029      	beq.n	8001678 <__gedf2+0x9c>
 8001624:	4651      	mov	r1, sl
 8001626:	2002      	movs	r0, #2
 8001628:	3901      	subs	r1, #1
 800162a:	4008      	ands	r0, r1
 800162c:	3801      	subs	r0, #1
 800162e:	bc1c      	pop	{r2, r3, r4}
 8001630:	4690      	mov	r8, r2
 8001632:	4699      	mov	r9, r3
 8001634:	46a2      	mov	sl, r4
 8001636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001638:	0039      	movs	r1, r7
 800163a:	4311      	orrs	r1, r2
 800163c:	d0e5      	beq.n	800160a <__gedf2+0x2e>
 800163e:	2002      	movs	r0, #2
 8001640:	4240      	negs	r0, r0
 8001642:	e7f4      	b.n	800162e <__gedf2+0x52>
 8001644:	4330      	orrs	r0, r6
 8001646:	d1fa      	bne.n	800163e <__gedf2+0x62>
 8001648:	42ac      	cmp	r4, r5
 800164a:	d00f      	beq.n	800166c <__gedf2+0x90>
 800164c:	2c00      	cmp	r4, #0
 800164e:	d10f      	bne.n	8001670 <__gedf2+0x94>
 8001650:	433a      	orrs	r2, r7
 8001652:	d0e7      	beq.n	8001624 <__gedf2+0x48>
 8001654:	e00c      	b.n	8001670 <__gedf2+0x94>
 8001656:	2201      	movs	r2, #1
 8001658:	3b01      	subs	r3, #1
 800165a:	4393      	bics	r3, r2
 800165c:	0018      	movs	r0, r3
 800165e:	3001      	adds	r0, #1
 8001660:	e7e5      	b.n	800162e <__gedf2+0x52>
 8001662:	4663      	mov	r3, ip
 8001664:	2000      	movs	r0, #0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0e1      	beq.n	800162e <__gedf2+0x52>
 800166a:	e7db      	b.n	8001624 <__gedf2+0x48>
 800166c:	433a      	orrs	r2, r7
 800166e:	d1e6      	bne.n	800163e <__gedf2+0x62>
 8001670:	459a      	cmp	sl, r3
 8001672:	d1d7      	bne.n	8001624 <__gedf2+0x48>
 8001674:	42a5      	cmp	r5, r4
 8001676:	dcd5      	bgt.n	8001624 <__gedf2+0x48>
 8001678:	42a5      	cmp	r5, r4
 800167a:	db05      	blt.n	8001688 <__gedf2+0xac>
 800167c:	42be      	cmp	r6, r7
 800167e:	d8d1      	bhi.n	8001624 <__gedf2+0x48>
 8001680:	d008      	beq.n	8001694 <__gedf2+0xb8>
 8001682:	2000      	movs	r0, #0
 8001684:	42be      	cmp	r6, r7
 8001686:	d2d2      	bcs.n	800162e <__gedf2+0x52>
 8001688:	4650      	mov	r0, sl
 800168a:	2301      	movs	r3, #1
 800168c:	3801      	subs	r0, #1
 800168e:	4398      	bics	r0, r3
 8001690:	3001      	adds	r0, #1
 8001692:	e7cc      	b.n	800162e <__gedf2+0x52>
 8001694:	45c8      	cmp	r8, r9
 8001696:	d8c5      	bhi.n	8001624 <__gedf2+0x48>
 8001698:	2000      	movs	r0, #0
 800169a:	45c8      	cmp	r8, r9
 800169c:	d3f4      	bcc.n	8001688 <__gedf2+0xac>
 800169e:	e7c6      	b.n	800162e <__gedf2+0x52>
 80016a0:	000007ff 	.word	0x000007ff

080016a4 <__ledf2>:
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	464f      	mov	r7, r9
 80016a8:	4646      	mov	r6, r8
 80016aa:	46d6      	mov	lr, sl
 80016ac:	004d      	lsls	r5, r1, #1
 80016ae:	b5c0      	push	{r6, r7, lr}
 80016b0:	030e      	lsls	r6, r1, #12
 80016b2:	0fc9      	lsrs	r1, r1, #31
 80016b4:	468a      	mov	sl, r1
 80016b6:	492e      	ldr	r1, [pc, #184]	; (8001770 <__ledf2+0xcc>)
 80016b8:	031f      	lsls	r7, r3, #12
 80016ba:	005c      	lsls	r4, r3, #1
 80016bc:	4680      	mov	r8, r0
 80016be:	0b36      	lsrs	r6, r6, #12
 80016c0:	0d6d      	lsrs	r5, r5, #21
 80016c2:	4691      	mov	r9, r2
 80016c4:	0b3f      	lsrs	r7, r7, #12
 80016c6:	0d64      	lsrs	r4, r4, #21
 80016c8:	0fdb      	lsrs	r3, r3, #31
 80016ca:	428d      	cmp	r5, r1
 80016cc:	d018      	beq.n	8001700 <__ledf2+0x5c>
 80016ce:	428c      	cmp	r4, r1
 80016d0:	d011      	beq.n	80016f6 <__ledf2+0x52>
 80016d2:	2d00      	cmp	r5, #0
 80016d4:	d118      	bne.n	8001708 <__ledf2+0x64>
 80016d6:	4330      	orrs	r0, r6
 80016d8:	4684      	mov	ip, r0
 80016da:	2c00      	cmp	r4, #0
 80016dc:	d11e      	bne.n	800171c <__ledf2+0x78>
 80016de:	433a      	orrs	r2, r7
 80016e0:	d11c      	bne.n	800171c <__ledf2+0x78>
 80016e2:	4663      	mov	r3, ip
 80016e4:	2000      	movs	r0, #0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d030      	beq.n	800174c <__ledf2+0xa8>
 80016ea:	4651      	mov	r1, sl
 80016ec:	2002      	movs	r0, #2
 80016ee:	3901      	subs	r1, #1
 80016f0:	4008      	ands	r0, r1
 80016f2:	3801      	subs	r0, #1
 80016f4:	e02a      	b.n	800174c <__ledf2+0xa8>
 80016f6:	0039      	movs	r1, r7
 80016f8:	4311      	orrs	r1, r2
 80016fa:	d0ea      	beq.n	80016d2 <__ledf2+0x2e>
 80016fc:	2002      	movs	r0, #2
 80016fe:	e025      	b.n	800174c <__ledf2+0xa8>
 8001700:	4330      	orrs	r0, r6
 8001702:	d1fb      	bne.n	80016fc <__ledf2+0x58>
 8001704:	42ac      	cmp	r4, r5
 8001706:	d026      	beq.n	8001756 <__ledf2+0xb2>
 8001708:	2c00      	cmp	r4, #0
 800170a:	d126      	bne.n	800175a <__ledf2+0xb6>
 800170c:	433a      	orrs	r2, r7
 800170e:	d124      	bne.n	800175a <__ledf2+0xb6>
 8001710:	4651      	mov	r1, sl
 8001712:	2002      	movs	r0, #2
 8001714:	3901      	subs	r1, #1
 8001716:	4008      	ands	r0, r1
 8001718:	3801      	subs	r0, #1
 800171a:	e017      	b.n	800174c <__ledf2+0xa8>
 800171c:	4662      	mov	r2, ip
 800171e:	2a00      	cmp	r2, #0
 8001720:	d00f      	beq.n	8001742 <__ledf2+0x9e>
 8001722:	459a      	cmp	sl, r3
 8001724:	d1e1      	bne.n	80016ea <__ledf2+0x46>
 8001726:	42a5      	cmp	r5, r4
 8001728:	db05      	blt.n	8001736 <__ledf2+0x92>
 800172a:	42be      	cmp	r6, r7
 800172c:	d8dd      	bhi.n	80016ea <__ledf2+0x46>
 800172e:	d019      	beq.n	8001764 <__ledf2+0xc0>
 8001730:	2000      	movs	r0, #0
 8001732:	42be      	cmp	r6, r7
 8001734:	d20a      	bcs.n	800174c <__ledf2+0xa8>
 8001736:	4650      	mov	r0, sl
 8001738:	2301      	movs	r3, #1
 800173a:	3801      	subs	r0, #1
 800173c:	4398      	bics	r0, r3
 800173e:	3001      	adds	r0, #1
 8001740:	e004      	b.n	800174c <__ledf2+0xa8>
 8001742:	2201      	movs	r2, #1
 8001744:	3b01      	subs	r3, #1
 8001746:	4393      	bics	r3, r2
 8001748:	0018      	movs	r0, r3
 800174a:	3001      	adds	r0, #1
 800174c:	bc1c      	pop	{r2, r3, r4}
 800174e:	4690      	mov	r8, r2
 8001750:	4699      	mov	r9, r3
 8001752:	46a2      	mov	sl, r4
 8001754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001756:	433a      	orrs	r2, r7
 8001758:	d1d0      	bne.n	80016fc <__ledf2+0x58>
 800175a:	459a      	cmp	sl, r3
 800175c:	d1c5      	bne.n	80016ea <__ledf2+0x46>
 800175e:	42a5      	cmp	r5, r4
 8001760:	dcc3      	bgt.n	80016ea <__ledf2+0x46>
 8001762:	e7e0      	b.n	8001726 <__ledf2+0x82>
 8001764:	45c8      	cmp	r8, r9
 8001766:	d8c0      	bhi.n	80016ea <__ledf2+0x46>
 8001768:	2000      	movs	r0, #0
 800176a:	45c8      	cmp	r8, r9
 800176c:	d3e3      	bcc.n	8001736 <__ledf2+0x92>
 800176e:	e7ed      	b.n	800174c <__ledf2+0xa8>
 8001770:	000007ff 	.word	0x000007ff

08001774 <__aeabi_dmul>:
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	4657      	mov	r7, sl
 8001778:	46de      	mov	lr, fp
 800177a:	464e      	mov	r6, r9
 800177c:	4645      	mov	r5, r8
 800177e:	b5e0      	push	{r5, r6, r7, lr}
 8001780:	4683      	mov	fp, r0
 8001782:	0006      	movs	r6, r0
 8001784:	030f      	lsls	r7, r1, #12
 8001786:	0048      	lsls	r0, r1, #1
 8001788:	b087      	sub	sp, #28
 800178a:	4692      	mov	sl, r2
 800178c:	001d      	movs	r5, r3
 800178e:	0b3f      	lsrs	r7, r7, #12
 8001790:	0d40      	lsrs	r0, r0, #21
 8001792:	0fcc      	lsrs	r4, r1, #31
 8001794:	2800      	cmp	r0, #0
 8001796:	d100      	bne.n	800179a <__aeabi_dmul+0x26>
 8001798:	e06f      	b.n	800187a <__aeabi_dmul+0x106>
 800179a:	4bde      	ldr	r3, [pc, #888]	; (8001b14 <__aeabi_dmul+0x3a0>)
 800179c:	4298      	cmp	r0, r3
 800179e:	d038      	beq.n	8001812 <__aeabi_dmul+0x9e>
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	00ff      	lsls	r7, r7, #3
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	431f      	orrs	r7, r3
 80017a8:	0f73      	lsrs	r3, r6, #29
 80017aa:	433b      	orrs	r3, r7
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	4bda      	ldr	r3, [pc, #872]	; (8001b18 <__aeabi_dmul+0x3a4>)
 80017b0:	2700      	movs	r7, #0
 80017b2:	4699      	mov	r9, r3
 80017b4:	2300      	movs	r3, #0
 80017b6:	469b      	mov	fp, r3
 80017b8:	00f6      	lsls	r6, r6, #3
 80017ba:	4481      	add	r9, r0
 80017bc:	032b      	lsls	r3, r5, #12
 80017be:	0069      	lsls	r1, r5, #1
 80017c0:	0b1b      	lsrs	r3, r3, #12
 80017c2:	4652      	mov	r2, sl
 80017c4:	4698      	mov	r8, r3
 80017c6:	0d49      	lsrs	r1, r1, #21
 80017c8:	0fed      	lsrs	r5, r5, #31
 80017ca:	2900      	cmp	r1, #0
 80017cc:	d100      	bne.n	80017d0 <__aeabi_dmul+0x5c>
 80017ce:	e085      	b.n	80018dc <__aeabi_dmul+0x168>
 80017d0:	4bd0      	ldr	r3, [pc, #832]	; (8001b14 <__aeabi_dmul+0x3a0>)
 80017d2:	4299      	cmp	r1, r3
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dmul+0x64>
 80017d6:	e073      	b.n	80018c0 <__aeabi_dmul+0x14c>
 80017d8:	4643      	mov	r3, r8
 80017da:	00da      	lsls	r2, r3, #3
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	4313      	orrs	r3, r2
 80017e2:	4652      	mov	r2, sl
 80017e4:	48cc      	ldr	r0, [pc, #816]	; (8001b18 <__aeabi_dmul+0x3a4>)
 80017e6:	0f52      	lsrs	r2, r2, #29
 80017e8:	4684      	mov	ip, r0
 80017ea:	4313      	orrs	r3, r2
 80017ec:	4652      	mov	r2, sl
 80017ee:	2000      	movs	r0, #0
 80017f0:	4461      	add	r1, ip
 80017f2:	00d2      	lsls	r2, r2, #3
 80017f4:	4489      	add	r9, r1
 80017f6:	0021      	movs	r1, r4
 80017f8:	4069      	eors	r1, r5
 80017fa:	9100      	str	r1, [sp, #0]
 80017fc:	468c      	mov	ip, r1
 80017fe:	2101      	movs	r1, #1
 8001800:	4449      	add	r1, r9
 8001802:	468a      	mov	sl, r1
 8001804:	2f0f      	cmp	r7, #15
 8001806:	d900      	bls.n	800180a <__aeabi_dmul+0x96>
 8001808:	e090      	b.n	800192c <__aeabi_dmul+0x1b8>
 800180a:	49c4      	ldr	r1, [pc, #784]	; (8001b1c <__aeabi_dmul+0x3a8>)
 800180c:	00bf      	lsls	r7, r7, #2
 800180e:	59cf      	ldr	r7, [r1, r7]
 8001810:	46bf      	mov	pc, r7
 8001812:	465b      	mov	r3, fp
 8001814:	433b      	orrs	r3, r7
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	d000      	beq.n	800181c <__aeabi_dmul+0xa8>
 800181a:	e16a      	b.n	8001af2 <__aeabi_dmul+0x37e>
 800181c:	2302      	movs	r3, #2
 800181e:	2708      	movs	r7, #8
 8001820:	2600      	movs	r6, #0
 8001822:	4681      	mov	r9, r0
 8001824:	469b      	mov	fp, r3
 8001826:	e7c9      	b.n	80017bc <__aeabi_dmul+0x48>
 8001828:	0032      	movs	r2, r6
 800182a:	4658      	mov	r0, fp
 800182c:	9b01      	ldr	r3, [sp, #4]
 800182e:	4661      	mov	r1, ip
 8001830:	9100      	str	r1, [sp, #0]
 8001832:	2802      	cmp	r0, #2
 8001834:	d100      	bne.n	8001838 <__aeabi_dmul+0xc4>
 8001836:	e075      	b.n	8001924 <__aeabi_dmul+0x1b0>
 8001838:	2803      	cmp	r0, #3
 800183a:	d100      	bne.n	800183e <__aeabi_dmul+0xca>
 800183c:	e1fe      	b.n	8001c3c <__aeabi_dmul+0x4c8>
 800183e:	2801      	cmp	r0, #1
 8001840:	d000      	beq.n	8001844 <__aeabi_dmul+0xd0>
 8001842:	e12c      	b.n	8001a9e <__aeabi_dmul+0x32a>
 8001844:	2300      	movs	r3, #0
 8001846:	2700      	movs	r7, #0
 8001848:	2600      	movs	r6, #0
 800184a:	2500      	movs	r5, #0
 800184c:	033f      	lsls	r7, r7, #12
 800184e:	0d2a      	lsrs	r2, r5, #20
 8001850:	0b3f      	lsrs	r7, r7, #12
 8001852:	48b3      	ldr	r0, [pc, #716]	; (8001b20 <__aeabi_dmul+0x3ac>)
 8001854:	0512      	lsls	r2, r2, #20
 8001856:	433a      	orrs	r2, r7
 8001858:	4002      	ands	r2, r0
 800185a:	051b      	lsls	r3, r3, #20
 800185c:	4313      	orrs	r3, r2
 800185e:	9a00      	ldr	r2, [sp, #0]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	07d1      	lsls	r1, r2, #31
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	430b      	orrs	r3, r1
 8001868:	0030      	movs	r0, r6
 800186a:	0019      	movs	r1, r3
 800186c:	b007      	add	sp, #28
 800186e:	bc3c      	pop	{r2, r3, r4, r5}
 8001870:	4690      	mov	r8, r2
 8001872:	4699      	mov	r9, r3
 8001874:	46a2      	mov	sl, r4
 8001876:	46ab      	mov	fp, r5
 8001878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800187a:	465b      	mov	r3, fp
 800187c:	433b      	orrs	r3, r7
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	d100      	bne.n	8001884 <__aeabi_dmul+0x110>
 8001882:	e12f      	b.n	8001ae4 <__aeabi_dmul+0x370>
 8001884:	2f00      	cmp	r7, #0
 8001886:	d100      	bne.n	800188a <__aeabi_dmul+0x116>
 8001888:	e1a5      	b.n	8001bd6 <__aeabi_dmul+0x462>
 800188a:	0038      	movs	r0, r7
 800188c:	f000 fe6e 	bl	800256c <__clzsi2>
 8001890:	0003      	movs	r3, r0
 8001892:	3b0b      	subs	r3, #11
 8001894:	2b1c      	cmp	r3, #28
 8001896:	dd00      	ble.n	800189a <__aeabi_dmul+0x126>
 8001898:	e196      	b.n	8001bc8 <__aeabi_dmul+0x454>
 800189a:	221d      	movs	r2, #29
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	465a      	mov	r2, fp
 80018a0:	0001      	movs	r1, r0
 80018a2:	40da      	lsrs	r2, r3
 80018a4:	465e      	mov	r6, fp
 80018a6:	3908      	subs	r1, #8
 80018a8:	408f      	lsls	r7, r1
 80018aa:	0013      	movs	r3, r2
 80018ac:	408e      	lsls	r6, r1
 80018ae:	433b      	orrs	r3, r7
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	4b9c      	ldr	r3, [pc, #624]	; (8001b24 <__aeabi_dmul+0x3b0>)
 80018b4:	2700      	movs	r7, #0
 80018b6:	1a1b      	subs	r3, r3, r0
 80018b8:	4699      	mov	r9, r3
 80018ba:	2300      	movs	r3, #0
 80018bc:	469b      	mov	fp, r3
 80018be:	e77d      	b.n	80017bc <__aeabi_dmul+0x48>
 80018c0:	4641      	mov	r1, r8
 80018c2:	4653      	mov	r3, sl
 80018c4:	430b      	orrs	r3, r1
 80018c6:	4993      	ldr	r1, [pc, #588]	; (8001b14 <__aeabi_dmul+0x3a0>)
 80018c8:	468c      	mov	ip, r1
 80018ca:	44e1      	add	r9, ip
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d000      	beq.n	80018d2 <__aeabi_dmul+0x15e>
 80018d0:	e11a      	b.n	8001b08 <__aeabi_dmul+0x394>
 80018d2:	2202      	movs	r2, #2
 80018d4:	2002      	movs	r0, #2
 80018d6:	4317      	orrs	r7, r2
 80018d8:	2200      	movs	r2, #0
 80018da:	e78c      	b.n	80017f6 <__aeabi_dmul+0x82>
 80018dc:	4313      	orrs	r3, r2
 80018de:	d100      	bne.n	80018e2 <__aeabi_dmul+0x16e>
 80018e0:	e10d      	b.n	8001afe <__aeabi_dmul+0x38a>
 80018e2:	4643      	mov	r3, r8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d100      	bne.n	80018ea <__aeabi_dmul+0x176>
 80018e8:	e181      	b.n	8001bee <__aeabi_dmul+0x47a>
 80018ea:	4640      	mov	r0, r8
 80018ec:	f000 fe3e 	bl	800256c <__clzsi2>
 80018f0:	0002      	movs	r2, r0
 80018f2:	3a0b      	subs	r2, #11
 80018f4:	2a1c      	cmp	r2, #28
 80018f6:	dd00      	ble.n	80018fa <__aeabi_dmul+0x186>
 80018f8:	e172      	b.n	8001be0 <__aeabi_dmul+0x46c>
 80018fa:	0001      	movs	r1, r0
 80018fc:	4643      	mov	r3, r8
 80018fe:	3908      	subs	r1, #8
 8001900:	408b      	lsls	r3, r1
 8001902:	4698      	mov	r8, r3
 8001904:	231d      	movs	r3, #29
 8001906:	1a9a      	subs	r2, r3, r2
 8001908:	4653      	mov	r3, sl
 800190a:	40d3      	lsrs	r3, r2
 800190c:	001a      	movs	r2, r3
 800190e:	4643      	mov	r3, r8
 8001910:	4313      	orrs	r3, r2
 8001912:	4652      	mov	r2, sl
 8001914:	408a      	lsls	r2, r1
 8001916:	4649      	mov	r1, r9
 8001918:	1a08      	subs	r0, r1, r0
 800191a:	4982      	ldr	r1, [pc, #520]	; (8001b24 <__aeabi_dmul+0x3b0>)
 800191c:	4689      	mov	r9, r1
 800191e:	4481      	add	r9, r0
 8001920:	2000      	movs	r0, #0
 8001922:	e768      	b.n	80017f6 <__aeabi_dmul+0x82>
 8001924:	4b7b      	ldr	r3, [pc, #492]	; (8001b14 <__aeabi_dmul+0x3a0>)
 8001926:	2700      	movs	r7, #0
 8001928:	2600      	movs	r6, #0
 800192a:	e78e      	b.n	800184a <__aeabi_dmul+0xd6>
 800192c:	0c14      	lsrs	r4, r2, #16
 800192e:	0412      	lsls	r2, r2, #16
 8001930:	0c12      	lsrs	r2, r2, #16
 8001932:	0011      	movs	r1, r2
 8001934:	0c37      	lsrs	r7, r6, #16
 8001936:	0436      	lsls	r6, r6, #16
 8001938:	0c35      	lsrs	r5, r6, #16
 800193a:	4379      	muls	r1, r7
 800193c:	0028      	movs	r0, r5
 800193e:	468c      	mov	ip, r1
 8001940:	002e      	movs	r6, r5
 8001942:	4360      	muls	r0, r4
 8001944:	4460      	add	r0, ip
 8001946:	4683      	mov	fp, r0
 8001948:	4356      	muls	r6, r2
 800194a:	0021      	movs	r1, r4
 800194c:	0c30      	lsrs	r0, r6, #16
 800194e:	4680      	mov	r8, r0
 8001950:	4658      	mov	r0, fp
 8001952:	4379      	muls	r1, r7
 8001954:	4440      	add	r0, r8
 8001956:	9102      	str	r1, [sp, #8]
 8001958:	4584      	cmp	ip, r0
 800195a:	d906      	bls.n	800196a <__aeabi_dmul+0x1f6>
 800195c:	4688      	mov	r8, r1
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	0249      	lsls	r1, r1, #9
 8001962:	468c      	mov	ip, r1
 8001964:	44e0      	add	r8, ip
 8001966:	4641      	mov	r1, r8
 8001968:	9102      	str	r1, [sp, #8]
 800196a:	0436      	lsls	r6, r6, #16
 800196c:	0c01      	lsrs	r1, r0, #16
 800196e:	0c36      	lsrs	r6, r6, #16
 8001970:	0400      	lsls	r0, r0, #16
 8001972:	468b      	mov	fp, r1
 8001974:	1981      	adds	r1, r0, r6
 8001976:	0c1e      	lsrs	r6, r3, #16
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	9103      	str	r1, [sp, #12]
 800197e:	0019      	movs	r1, r3
 8001980:	4379      	muls	r1, r7
 8001982:	468c      	mov	ip, r1
 8001984:	0028      	movs	r0, r5
 8001986:	4375      	muls	r5, r6
 8001988:	4465      	add	r5, ip
 800198a:	46a8      	mov	r8, r5
 800198c:	4358      	muls	r0, r3
 800198e:	0c05      	lsrs	r5, r0, #16
 8001990:	4445      	add	r5, r8
 8001992:	4377      	muls	r7, r6
 8001994:	42a9      	cmp	r1, r5
 8001996:	d903      	bls.n	80019a0 <__aeabi_dmul+0x22c>
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	0249      	lsls	r1, r1, #9
 800199c:	468c      	mov	ip, r1
 800199e:	4467      	add	r7, ip
 80019a0:	0c29      	lsrs	r1, r5, #16
 80019a2:	468c      	mov	ip, r1
 80019a4:	0039      	movs	r1, r7
 80019a6:	0400      	lsls	r0, r0, #16
 80019a8:	0c00      	lsrs	r0, r0, #16
 80019aa:	042d      	lsls	r5, r5, #16
 80019ac:	182d      	adds	r5, r5, r0
 80019ae:	4461      	add	r1, ip
 80019b0:	44ab      	add	fp, r5
 80019b2:	9105      	str	r1, [sp, #20]
 80019b4:	4659      	mov	r1, fp
 80019b6:	9104      	str	r1, [sp, #16]
 80019b8:	9901      	ldr	r1, [sp, #4]
 80019ba:	040f      	lsls	r7, r1, #16
 80019bc:	0c3f      	lsrs	r7, r7, #16
 80019be:	0c08      	lsrs	r0, r1, #16
 80019c0:	0039      	movs	r1, r7
 80019c2:	4351      	muls	r1, r2
 80019c4:	4342      	muls	r2, r0
 80019c6:	4690      	mov	r8, r2
 80019c8:	0002      	movs	r2, r0
 80019ca:	468c      	mov	ip, r1
 80019cc:	0c09      	lsrs	r1, r1, #16
 80019ce:	468b      	mov	fp, r1
 80019d0:	4362      	muls	r2, r4
 80019d2:	437c      	muls	r4, r7
 80019d4:	4444      	add	r4, r8
 80019d6:	445c      	add	r4, fp
 80019d8:	45a0      	cmp	r8, r4
 80019da:	d903      	bls.n	80019e4 <__aeabi_dmul+0x270>
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	0249      	lsls	r1, r1, #9
 80019e0:	4688      	mov	r8, r1
 80019e2:	4442      	add	r2, r8
 80019e4:	0c21      	lsrs	r1, r4, #16
 80019e6:	4688      	mov	r8, r1
 80019e8:	4661      	mov	r1, ip
 80019ea:	0409      	lsls	r1, r1, #16
 80019ec:	0c09      	lsrs	r1, r1, #16
 80019ee:	468c      	mov	ip, r1
 80019f0:	0039      	movs	r1, r7
 80019f2:	4359      	muls	r1, r3
 80019f4:	4343      	muls	r3, r0
 80019f6:	4370      	muls	r0, r6
 80019f8:	437e      	muls	r6, r7
 80019fa:	0c0f      	lsrs	r7, r1, #16
 80019fc:	18f6      	adds	r6, r6, r3
 80019fe:	0424      	lsls	r4, r4, #16
 8001a00:	19be      	adds	r6, r7, r6
 8001a02:	4464      	add	r4, ip
 8001a04:	4442      	add	r2, r8
 8001a06:	468c      	mov	ip, r1
 8001a08:	42b3      	cmp	r3, r6
 8001a0a:	d903      	bls.n	8001a14 <__aeabi_dmul+0x2a0>
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	025b      	lsls	r3, r3, #9
 8001a10:	4698      	mov	r8, r3
 8001a12:	4440      	add	r0, r8
 8001a14:	9b02      	ldr	r3, [sp, #8]
 8001a16:	4661      	mov	r1, ip
 8001a18:	4698      	mov	r8, r3
 8001a1a:	9b04      	ldr	r3, [sp, #16]
 8001a1c:	0437      	lsls	r7, r6, #16
 8001a1e:	4443      	add	r3, r8
 8001a20:	469b      	mov	fp, r3
 8001a22:	45ab      	cmp	fp, r5
 8001a24:	41ad      	sbcs	r5, r5
 8001a26:	426b      	negs	r3, r5
 8001a28:	040d      	lsls	r5, r1, #16
 8001a2a:	9905      	ldr	r1, [sp, #20]
 8001a2c:	0c2d      	lsrs	r5, r5, #16
 8001a2e:	468c      	mov	ip, r1
 8001a30:	197f      	adds	r7, r7, r5
 8001a32:	4467      	add	r7, ip
 8001a34:	18fd      	adds	r5, r7, r3
 8001a36:	46a8      	mov	r8, r5
 8001a38:	465d      	mov	r5, fp
 8001a3a:	192d      	adds	r5, r5, r4
 8001a3c:	42a5      	cmp	r5, r4
 8001a3e:	41a4      	sbcs	r4, r4
 8001a40:	4693      	mov	fp, r2
 8001a42:	4264      	negs	r4, r4
 8001a44:	46a4      	mov	ip, r4
 8001a46:	44c3      	add	fp, r8
 8001a48:	44dc      	add	ip, fp
 8001a4a:	428f      	cmp	r7, r1
 8001a4c:	41bf      	sbcs	r7, r7
 8001a4e:	4598      	cmp	r8, r3
 8001a50:	419b      	sbcs	r3, r3
 8001a52:	4593      	cmp	fp, r2
 8001a54:	4192      	sbcs	r2, r2
 8001a56:	45a4      	cmp	ip, r4
 8001a58:	41a4      	sbcs	r4, r4
 8001a5a:	425b      	negs	r3, r3
 8001a5c:	427f      	negs	r7, r7
 8001a5e:	431f      	orrs	r7, r3
 8001a60:	0c36      	lsrs	r6, r6, #16
 8001a62:	4252      	negs	r2, r2
 8001a64:	4264      	negs	r4, r4
 8001a66:	19bf      	adds	r7, r7, r6
 8001a68:	4322      	orrs	r2, r4
 8001a6a:	18bf      	adds	r7, r7, r2
 8001a6c:	4662      	mov	r2, ip
 8001a6e:	1838      	adds	r0, r7, r0
 8001a70:	0243      	lsls	r3, r0, #9
 8001a72:	0dd2      	lsrs	r2, r2, #23
 8001a74:	9903      	ldr	r1, [sp, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	026a      	lsls	r2, r5, #9
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	1e50      	subs	r0, r2, #1
 8001a7e:	4182      	sbcs	r2, r0
 8001a80:	4661      	mov	r1, ip
 8001a82:	0ded      	lsrs	r5, r5, #23
 8001a84:	432a      	orrs	r2, r5
 8001a86:	024e      	lsls	r6, r1, #9
 8001a88:	4332      	orrs	r2, r6
 8001a8a:	01d9      	lsls	r1, r3, #7
 8001a8c:	d400      	bmi.n	8001a90 <__aeabi_dmul+0x31c>
 8001a8e:	e0b3      	b.n	8001bf8 <__aeabi_dmul+0x484>
 8001a90:	2601      	movs	r6, #1
 8001a92:	0850      	lsrs	r0, r2, #1
 8001a94:	4032      	ands	r2, r6
 8001a96:	4302      	orrs	r2, r0
 8001a98:	07de      	lsls	r6, r3, #31
 8001a9a:	4332      	orrs	r2, r6
 8001a9c:	085b      	lsrs	r3, r3, #1
 8001a9e:	4c22      	ldr	r4, [pc, #136]	; (8001b28 <__aeabi_dmul+0x3b4>)
 8001aa0:	4454      	add	r4, sl
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	dd62      	ble.n	8001b6c <__aeabi_dmul+0x3f8>
 8001aa6:	0751      	lsls	r1, r2, #29
 8001aa8:	d009      	beq.n	8001abe <__aeabi_dmul+0x34a>
 8001aaa:	200f      	movs	r0, #15
 8001aac:	4010      	ands	r0, r2
 8001aae:	2804      	cmp	r0, #4
 8001ab0:	d005      	beq.n	8001abe <__aeabi_dmul+0x34a>
 8001ab2:	1d10      	adds	r0, r2, #4
 8001ab4:	4290      	cmp	r0, r2
 8001ab6:	4192      	sbcs	r2, r2
 8001ab8:	4252      	negs	r2, r2
 8001aba:	189b      	adds	r3, r3, r2
 8001abc:	0002      	movs	r2, r0
 8001abe:	01d9      	lsls	r1, r3, #7
 8001ac0:	d504      	bpl.n	8001acc <__aeabi_dmul+0x358>
 8001ac2:	2480      	movs	r4, #128	; 0x80
 8001ac4:	4819      	ldr	r0, [pc, #100]	; (8001b2c <__aeabi_dmul+0x3b8>)
 8001ac6:	00e4      	lsls	r4, r4, #3
 8001ac8:	4003      	ands	r3, r0
 8001aca:	4454      	add	r4, sl
 8001acc:	4818      	ldr	r0, [pc, #96]	; (8001b30 <__aeabi_dmul+0x3bc>)
 8001ace:	4284      	cmp	r4, r0
 8001ad0:	dd00      	ble.n	8001ad4 <__aeabi_dmul+0x360>
 8001ad2:	e727      	b.n	8001924 <__aeabi_dmul+0x1b0>
 8001ad4:	075e      	lsls	r6, r3, #29
 8001ad6:	025b      	lsls	r3, r3, #9
 8001ad8:	08d2      	lsrs	r2, r2, #3
 8001ada:	0b1f      	lsrs	r7, r3, #12
 8001adc:	0563      	lsls	r3, r4, #21
 8001ade:	4316      	orrs	r6, r2
 8001ae0:	0d5b      	lsrs	r3, r3, #21
 8001ae2:	e6b2      	b.n	800184a <__aeabi_dmul+0xd6>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	4699      	mov	r9, r3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	2704      	movs	r7, #4
 8001aec:	2600      	movs	r6, #0
 8001aee:	469b      	mov	fp, r3
 8001af0:	e664      	b.n	80017bc <__aeabi_dmul+0x48>
 8001af2:	2303      	movs	r3, #3
 8001af4:	9701      	str	r7, [sp, #4]
 8001af6:	4681      	mov	r9, r0
 8001af8:	270c      	movs	r7, #12
 8001afa:	469b      	mov	fp, r3
 8001afc:	e65e      	b.n	80017bc <__aeabi_dmul+0x48>
 8001afe:	2201      	movs	r2, #1
 8001b00:	2001      	movs	r0, #1
 8001b02:	4317      	orrs	r7, r2
 8001b04:	2200      	movs	r2, #0
 8001b06:	e676      	b.n	80017f6 <__aeabi_dmul+0x82>
 8001b08:	2303      	movs	r3, #3
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	431f      	orrs	r7, r3
 8001b0e:	4643      	mov	r3, r8
 8001b10:	e671      	b.n	80017f6 <__aeabi_dmul+0x82>
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	000007ff 	.word	0x000007ff
 8001b18:	fffffc01 	.word	0xfffffc01
 8001b1c:	0800f778 	.word	0x0800f778
 8001b20:	800fffff 	.word	0x800fffff
 8001b24:	fffffc0d 	.word	0xfffffc0d
 8001b28:	000003ff 	.word	0x000003ff
 8001b2c:	feffffff 	.word	0xfeffffff
 8001b30:	000007fe 	.word	0x000007fe
 8001b34:	2300      	movs	r3, #0
 8001b36:	2780      	movs	r7, #128	; 0x80
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	033f      	lsls	r7, r7, #12
 8001b3c:	2600      	movs	r6, #0
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <__aeabi_dmul+0x4d8>)
 8001b40:	e683      	b.n	800184a <__aeabi_dmul+0xd6>
 8001b42:	9b01      	ldr	r3, [sp, #4]
 8001b44:	0032      	movs	r2, r6
 8001b46:	46a4      	mov	ip, r4
 8001b48:	4658      	mov	r0, fp
 8001b4a:	e670      	b.n	800182e <__aeabi_dmul+0xba>
 8001b4c:	46ac      	mov	ip, r5
 8001b4e:	e66e      	b.n	800182e <__aeabi_dmul+0xba>
 8001b50:	2780      	movs	r7, #128	; 0x80
 8001b52:	9901      	ldr	r1, [sp, #4]
 8001b54:	033f      	lsls	r7, r7, #12
 8001b56:	4239      	tst	r1, r7
 8001b58:	d02d      	beq.n	8001bb6 <__aeabi_dmul+0x442>
 8001b5a:	423b      	tst	r3, r7
 8001b5c:	d12b      	bne.n	8001bb6 <__aeabi_dmul+0x442>
 8001b5e:	431f      	orrs	r7, r3
 8001b60:	033f      	lsls	r7, r7, #12
 8001b62:	0b3f      	lsrs	r7, r7, #12
 8001b64:	9500      	str	r5, [sp, #0]
 8001b66:	0016      	movs	r6, r2
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <__aeabi_dmul+0x4d8>)
 8001b6a:	e66e      	b.n	800184a <__aeabi_dmul+0xd6>
 8001b6c:	2501      	movs	r5, #1
 8001b6e:	1b2d      	subs	r5, r5, r4
 8001b70:	2d38      	cmp	r5, #56	; 0x38
 8001b72:	dd00      	ble.n	8001b76 <__aeabi_dmul+0x402>
 8001b74:	e666      	b.n	8001844 <__aeabi_dmul+0xd0>
 8001b76:	2d1f      	cmp	r5, #31
 8001b78:	dc40      	bgt.n	8001bfc <__aeabi_dmul+0x488>
 8001b7a:	4835      	ldr	r0, [pc, #212]	; (8001c50 <__aeabi_dmul+0x4dc>)
 8001b7c:	001c      	movs	r4, r3
 8001b7e:	4450      	add	r0, sl
 8001b80:	0016      	movs	r6, r2
 8001b82:	4082      	lsls	r2, r0
 8001b84:	4084      	lsls	r4, r0
 8001b86:	40ee      	lsrs	r6, r5
 8001b88:	1e50      	subs	r0, r2, #1
 8001b8a:	4182      	sbcs	r2, r0
 8001b8c:	4334      	orrs	r4, r6
 8001b8e:	4314      	orrs	r4, r2
 8001b90:	40eb      	lsrs	r3, r5
 8001b92:	0762      	lsls	r2, r4, #29
 8001b94:	d009      	beq.n	8001baa <__aeabi_dmul+0x436>
 8001b96:	220f      	movs	r2, #15
 8001b98:	4022      	ands	r2, r4
 8001b9a:	2a04      	cmp	r2, #4
 8001b9c:	d005      	beq.n	8001baa <__aeabi_dmul+0x436>
 8001b9e:	0022      	movs	r2, r4
 8001ba0:	1d14      	adds	r4, r2, #4
 8001ba2:	4294      	cmp	r4, r2
 8001ba4:	4180      	sbcs	r0, r0
 8001ba6:	4240      	negs	r0, r0
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	021a      	lsls	r2, r3, #8
 8001bac:	d53e      	bpl.n	8001c2c <__aeabi_dmul+0x4b8>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2700      	movs	r7, #0
 8001bb2:	2600      	movs	r6, #0
 8001bb4:	e649      	b.n	800184a <__aeabi_dmul+0xd6>
 8001bb6:	2780      	movs	r7, #128	; 0x80
 8001bb8:	9b01      	ldr	r3, [sp, #4]
 8001bba:	033f      	lsls	r7, r7, #12
 8001bbc:	431f      	orrs	r7, r3
 8001bbe:	033f      	lsls	r7, r7, #12
 8001bc0:	0b3f      	lsrs	r7, r7, #12
 8001bc2:	9400      	str	r4, [sp, #0]
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <__aeabi_dmul+0x4d8>)
 8001bc6:	e640      	b.n	800184a <__aeabi_dmul+0xd6>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	465a      	mov	r2, fp
 8001bcc:	3b28      	subs	r3, #40	; 0x28
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	2600      	movs	r6, #0
 8001bd2:	9201      	str	r2, [sp, #4]
 8001bd4:	e66d      	b.n	80018b2 <__aeabi_dmul+0x13e>
 8001bd6:	4658      	mov	r0, fp
 8001bd8:	f000 fcc8 	bl	800256c <__clzsi2>
 8001bdc:	3020      	adds	r0, #32
 8001bde:	e657      	b.n	8001890 <__aeabi_dmul+0x11c>
 8001be0:	0003      	movs	r3, r0
 8001be2:	4652      	mov	r2, sl
 8001be4:	3b28      	subs	r3, #40	; 0x28
 8001be6:	409a      	lsls	r2, r3
 8001be8:	0013      	movs	r3, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e693      	b.n	8001916 <__aeabi_dmul+0x1a2>
 8001bee:	4650      	mov	r0, sl
 8001bf0:	f000 fcbc 	bl	800256c <__clzsi2>
 8001bf4:	3020      	adds	r0, #32
 8001bf6:	e67b      	b.n	80018f0 <__aeabi_dmul+0x17c>
 8001bf8:	46ca      	mov	sl, r9
 8001bfa:	e750      	b.n	8001a9e <__aeabi_dmul+0x32a>
 8001bfc:	201f      	movs	r0, #31
 8001bfe:	001e      	movs	r6, r3
 8001c00:	4240      	negs	r0, r0
 8001c02:	1b04      	subs	r4, r0, r4
 8001c04:	40e6      	lsrs	r6, r4
 8001c06:	2d20      	cmp	r5, #32
 8001c08:	d003      	beq.n	8001c12 <__aeabi_dmul+0x49e>
 8001c0a:	4c12      	ldr	r4, [pc, #72]	; (8001c54 <__aeabi_dmul+0x4e0>)
 8001c0c:	4454      	add	r4, sl
 8001c0e:	40a3      	lsls	r3, r4
 8001c10:	431a      	orrs	r2, r3
 8001c12:	1e50      	subs	r0, r2, #1
 8001c14:	4182      	sbcs	r2, r0
 8001c16:	4332      	orrs	r2, r6
 8001c18:	2607      	movs	r6, #7
 8001c1a:	2700      	movs	r7, #0
 8001c1c:	4016      	ands	r6, r2
 8001c1e:	d009      	beq.n	8001c34 <__aeabi_dmul+0x4c0>
 8001c20:	200f      	movs	r0, #15
 8001c22:	2300      	movs	r3, #0
 8001c24:	4010      	ands	r0, r2
 8001c26:	0014      	movs	r4, r2
 8001c28:	2804      	cmp	r0, #4
 8001c2a:	d1b9      	bne.n	8001ba0 <__aeabi_dmul+0x42c>
 8001c2c:	0022      	movs	r2, r4
 8001c2e:	075e      	lsls	r6, r3, #29
 8001c30:	025b      	lsls	r3, r3, #9
 8001c32:	0b1f      	lsrs	r7, r3, #12
 8001c34:	08d2      	lsrs	r2, r2, #3
 8001c36:	4316      	orrs	r6, r2
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e606      	b.n	800184a <__aeabi_dmul+0xd6>
 8001c3c:	2780      	movs	r7, #128	; 0x80
 8001c3e:	033f      	lsls	r7, r7, #12
 8001c40:	431f      	orrs	r7, r3
 8001c42:	033f      	lsls	r7, r7, #12
 8001c44:	0b3f      	lsrs	r7, r7, #12
 8001c46:	0016      	movs	r6, r2
 8001c48:	4b00      	ldr	r3, [pc, #0]	; (8001c4c <__aeabi_dmul+0x4d8>)
 8001c4a:	e5fe      	b.n	800184a <__aeabi_dmul+0xd6>
 8001c4c:	000007ff 	.word	0x000007ff
 8001c50:	0000041e 	.word	0x0000041e
 8001c54:	0000043e 	.word	0x0000043e

08001c58 <__aeabi_dsub>:
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5a:	4657      	mov	r7, sl
 8001c5c:	464e      	mov	r6, r9
 8001c5e:	4645      	mov	r5, r8
 8001c60:	46de      	mov	lr, fp
 8001c62:	000c      	movs	r4, r1
 8001c64:	0309      	lsls	r1, r1, #12
 8001c66:	b5e0      	push	{r5, r6, r7, lr}
 8001c68:	0a49      	lsrs	r1, r1, #9
 8001c6a:	0f46      	lsrs	r6, r0, #29
 8001c6c:	005f      	lsls	r7, r3, #1
 8001c6e:	4331      	orrs	r1, r6
 8001c70:	031e      	lsls	r6, r3, #12
 8001c72:	0fdb      	lsrs	r3, r3, #31
 8001c74:	0a76      	lsrs	r6, r6, #9
 8001c76:	469b      	mov	fp, r3
 8001c78:	0f53      	lsrs	r3, r2, #29
 8001c7a:	4333      	orrs	r3, r6
 8001c7c:	4ec8      	ldr	r6, [pc, #800]	; (8001fa0 <__aeabi_dsub+0x348>)
 8001c7e:	0065      	lsls	r5, r4, #1
 8001c80:	00c0      	lsls	r0, r0, #3
 8001c82:	0fe4      	lsrs	r4, r4, #31
 8001c84:	00d2      	lsls	r2, r2, #3
 8001c86:	0d6d      	lsrs	r5, r5, #21
 8001c88:	46a2      	mov	sl, r4
 8001c8a:	4681      	mov	r9, r0
 8001c8c:	0d7f      	lsrs	r7, r7, #21
 8001c8e:	469c      	mov	ip, r3
 8001c90:	4690      	mov	r8, r2
 8001c92:	42b7      	cmp	r7, r6
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x40>
 8001c96:	e0b9      	b.n	8001e0c <__aeabi_dsub+0x1b4>
 8001c98:	465b      	mov	r3, fp
 8001c9a:	2601      	movs	r6, #1
 8001c9c:	4073      	eors	r3, r6
 8001c9e:	469b      	mov	fp, r3
 8001ca0:	1bee      	subs	r6, r5, r7
 8001ca2:	45a3      	cmp	fp, r4
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x50>
 8001ca6:	e083      	b.n	8001db0 <__aeabi_dsub+0x158>
 8001ca8:	2e00      	cmp	r6, #0
 8001caa:	dd63      	ble.n	8001d74 <__aeabi_dsub+0x11c>
 8001cac:	2f00      	cmp	r7, #0
 8001cae:	d000      	beq.n	8001cb2 <__aeabi_dsub+0x5a>
 8001cb0:	e0b1      	b.n	8001e16 <__aeabi_dsub+0x1be>
 8001cb2:	4663      	mov	r3, ip
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x62>
 8001cb8:	e123      	b.n	8001f02 <__aeabi_dsub+0x2aa>
 8001cba:	1e73      	subs	r3, r6, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d000      	beq.n	8001cc2 <__aeabi_dsub+0x6a>
 8001cc0:	e1ba      	b.n	8002038 <__aeabi_dsub+0x3e0>
 8001cc2:	1a86      	subs	r6, r0, r2
 8001cc4:	4663      	mov	r3, ip
 8001cc6:	42b0      	cmp	r0, r6
 8001cc8:	4180      	sbcs	r0, r0
 8001cca:	2501      	movs	r5, #1
 8001ccc:	1ac9      	subs	r1, r1, r3
 8001cce:	4240      	negs	r0, r0
 8001cd0:	1a09      	subs	r1, r1, r0
 8001cd2:	020b      	lsls	r3, r1, #8
 8001cd4:	d400      	bmi.n	8001cd8 <__aeabi_dsub+0x80>
 8001cd6:	e147      	b.n	8001f68 <__aeabi_dsub+0x310>
 8001cd8:	0249      	lsls	r1, r1, #9
 8001cda:	0a4b      	lsrs	r3, r1, #9
 8001cdc:	4698      	mov	r8, r3
 8001cde:	4643      	mov	r3, r8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x8e>
 8001ce4:	e189      	b.n	8001ffa <__aeabi_dsub+0x3a2>
 8001ce6:	4640      	mov	r0, r8
 8001ce8:	f000 fc40 	bl	800256c <__clzsi2>
 8001cec:	0003      	movs	r3, r0
 8001cee:	3b08      	subs	r3, #8
 8001cf0:	2b1f      	cmp	r3, #31
 8001cf2:	dd00      	ble.n	8001cf6 <__aeabi_dsub+0x9e>
 8001cf4:	e17c      	b.n	8001ff0 <__aeabi_dsub+0x398>
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	0030      	movs	r0, r6
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	40d0      	lsrs	r0, r2
 8001d00:	4099      	lsls	r1, r3
 8001d02:	0002      	movs	r2, r0
 8001d04:	409e      	lsls	r6, r3
 8001d06:	430a      	orrs	r2, r1
 8001d08:	429d      	cmp	r5, r3
 8001d0a:	dd00      	ble.n	8001d0e <__aeabi_dsub+0xb6>
 8001d0c:	e16a      	b.n	8001fe4 <__aeabi_dsub+0x38c>
 8001d0e:	1b5d      	subs	r5, r3, r5
 8001d10:	1c6b      	adds	r3, r5, #1
 8001d12:	2b1f      	cmp	r3, #31
 8001d14:	dd00      	ble.n	8001d18 <__aeabi_dsub+0xc0>
 8001d16:	e194      	b.n	8002042 <__aeabi_dsub+0x3ea>
 8001d18:	2120      	movs	r1, #32
 8001d1a:	0010      	movs	r0, r2
 8001d1c:	0035      	movs	r5, r6
 8001d1e:	1ac9      	subs	r1, r1, r3
 8001d20:	408e      	lsls	r6, r1
 8001d22:	40da      	lsrs	r2, r3
 8001d24:	4088      	lsls	r0, r1
 8001d26:	40dd      	lsrs	r5, r3
 8001d28:	1e71      	subs	r1, r6, #1
 8001d2a:	418e      	sbcs	r6, r1
 8001d2c:	0011      	movs	r1, r2
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4328      	orrs	r0, r5
 8001d32:	2500      	movs	r5, #0
 8001d34:	4306      	orrs	r6, r0
 8001d36:	4032      	ands	r2, r6
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	d009      	beq.n	8001d50 <__aeabi_dsub+0xf8>
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	4033      	ands	r3, r6
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d005      	beq.n	8001d50 <__aeabi_dsub+0xf8>
 8001d44:	1d33      	adds	r3, r6, #4
 8001d46:	42b3      	cmp	r3, r6
 8001d48:	41b6      	sbcs	r6, r6
 8001d4a:	4276      	negs	r6, r6
 8001d4c:	1989      	adds	r1, r1, r6
 8001d4e:	001e      	movs	r6, r3
 8001d50:	020b      	lsls	r3, r1, #8
 8001d52:	d400      	bmi.n	8001d56 <__aeabi_dsub+0xfe>
 8001d54:	e23d      	b.n	80021d2 <__aeabi_dsub+0x57a>
 8001d56:	1c6a      	adds	r2, r5, #1
 8001d58:	4b91      	ldr	r3, [pc, #580]	; (8001fa0 <__aeabi_dsub+0x348>)
 8001d5a:	0555      	lsls	r5, r2, #21
 8001d5c:	0d6d      	lsrs	r5, r5, #21
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x10c>
 8001d62:	e119      	b.n	8001f98 <__aeabi_dsub+0x340>
 8001d64:	4a8f      	ldr	r2, [pc, #572]	; (8001fa4 <__aeabi_dsub+0x34c>)
 8001d66:	08f6      	lsrs	r6, r6, #3
 8001d68:	400a      	ands	r2, r1
 8001d6a:	0757      	lsls	r7, r2, #29
 8001d6c:	0252      	lsls	r2, r2, #9
 8001d6e:	4337      	orrs	r7, r6
 8001d70:	0b12      	lsrs	r2, r2, #12
 8001d72:	e09b      	b.n	8001eac <__aeabi_dsub+0x254>
 8001d74:	2e00      	cmp	r6, #0
 8001d76:	d000      	beq.n	8001d7a <__aeabi_dsub+0x122>
 8001d78:	e0c5      	b.n	8001f06 <__aeabi_dsub+0x2ae>
 8001d7a:	1c6e      	adds	r6, r5, #1
 8001d7c:	0576      	lsls	r6, r6, #21
 8001d7e:	0d76      	lsrs	r6, r6, #21
 8001d80:	2e01      	cmp	r6, #1
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x12e>
 8001d84:	e148      	b.n	8002018 <__aeabi_dsub+0x3c0>
 8001d86:	4667      	mov	r7, ip
 8001d88:	1a86      	subs	r6, r0, r2
 8001d8a:	1bcb      	subs	r3, r1, r7
 8001d8c:	42b0      	cmp	r0, r6
 8001d8e:	41bf      	sbcs	r7, r7
 8001d90:	427f      	negs	r7, r7
 8001d92:	46b8      	mov	r8, r7
 8001d94:	001f      	movs	r7, r3
 8001d96:	4643      	mov	r3, r8
 8001d98:	1aff      	subs	r7, r7, r3
 8001d9a:	003b      	movs	r3, r7
 8001d9c:	46b8      	mov	r8, r7
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	d500      	bpl.n	8001da4 <__aeabi_dsub+0x14c>
 8001da2:	e15f      	b.n	8002064 <__aeabi_dsub+0x40c>
 8001da4:	4337      	orrs	r7, r6
 8001da6:	d19a      	bne.n	8001cde <__aeabi_dsub+0x86>
 8001da8:	2200      	movs	r2, #0
 8001daa:	2400      	movs	r4, #0
 8001dac:	2500      	movs	r5, #0
 8001dae:	e079      	b.n	8001ea4 <__aeabi_dsub+0x24c>
 8001db0:	2e00      	cmp	r6, #0
 8001db2:	dc00      	bgt.n	8001db6 <__aeabi_dsub+0x15e>
 8001db4:	e0fa      	b.n	8001fac <__aeabi_dsub+0x354>
 8001db6:	2f00      	cmp	r7, #0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x164>
 8001dba:	e08d      	b.n	8001ed8 <__aeabi_dsub+0x280>
 8001dbc:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <__aeabi_dsub+0x348>)
 8001dbe:	429d      	cmp	r5, r3
 8001dc0:	d067      	beq.n	8001e92 <__aeabi_dsub+0x23a>
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	4667      	mov	r7, ip
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	431f      	orrs	r7, r3
 8001dca:	46bc      	mov	ip, r7
 8001dcc:	2e38      	cmp	r6, #56	; 0x38
 8001dce:	dc00      	bgt.n	8001dd2 <__aeabi_dsub+0x17a>
 8001dd0:	e152      	b.n	8002078 <__aeabi_dsub+0x420>
 8001dd2:	4663      	mov	r3, ip
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	1e5a      	subs	r2, r3, #1
 8001dd8:	4193      	sbcs	r3, r2
 8001dda:	181e      	adds	r6, r3, r0
 8001ddc:	4286      	cmp	r6, r0
 8001dde:	4180      	sbcs	r0, r0
 8001de0:	4240      	negs	r0, r0
 8001de2:	1809      	adds	r1, r1, r0
 8001de4:	020b      	lsls	r3, r1, #8
 8001de6:	d400      	bmi.n	8001dea <__aeabi_dsub+0x192>
 8001de8:	e0be      	b.n	8001f68 <__aeabi_dsub+0x310>
 8001dea:	4b6d      	ldr	r3, [pc, #436]	; (8001fa0 <__aeabi_dsub+0x348>)
 8001dec:	3501      	adds	r5, #1
 8001dee:	429d      	cmp	r5, r3
 8001df0:	d100      	bne.n	8001df4 <__aeabi_dsub+0x19c>
 8001df2:	e0d2      	b.n	8001f9a <__aeabi_dsub+0x342>
 8001df4:	4a6b      	ldr	r2, [pc, #428]	; (8001fa4 <__aeabi_dsub+0x34c>)
 8001df6:	0873      	lsrs	r3, r6, #1
 8001df8:	400a      	ands	r2, r1
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	400e      	ands	r6, r1
 8001dfe:	431e      	orrs	r6, r3
 8001e00:	0851      	lsrs	r1, r2, #1
 8001e02:	07d3      	lsls	r3, r2, #31
 8001e04:	2207      	movs	r2, #7
 8001e06:	431e      	orrs	r6, r3
 8001e08:	4032      	ands	r2, r6
 8001e0a:	e795      	b.n	8001d38 <__aeabi_dsub+0xe0>
 8001e0c:	001e      	movs	r6, r3
 8001e0e:	4316      	orrs	r6, r2
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x1bc>
 8001e12:	e745      	b.n	8001ca0 <__aeabi_dsub+0x48>
 8001e14:	e740      	b.n	8001c98 <__aeabi_dsub+0x40>
 8001e16:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <__aeabi_dsub+0x348>)
 8001e18:	429d      	cmp	r5, r3
 8001e1a:	d03a      	beq.n	8001e92 <__aeabi_dsub+0x23a>
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	4667      	mov	r7, ip
 8001e20:	041b      	lsls	r3, r3, #16
 8001e22:	431f      	orrs	r7, r3
 8001e24:	46bc      	mov	ip, r7
 8001e26:	2e38      	cmp	r6, #56	; 0x38
 8001e28:	dd00      	ble.n	8001e2c <__aeabi_dsub+0x1d4>
 8001e2a:	e0eb      	b.n	8002004 <__aeabi_dsub+0x3ac>
 8001e2c:	2e1f      	cmp	r6, #31
 8001e2e:	dc00      	bgt.n	8001e32 <__aeabi_dsub+0x1da>
 8001e30:	e13a      	b.n	80020a8 <__aeabi_dsub+0x450>
 8001e32:	0033      	movs	r3, r6
 8001e34:	4667      	mov	r7, ip
 8001e36:	3b20      	subs	r3, #32
 8001e38:	40df      	lsrs	r7, r3
 8001e3a:	003b      	movs	r3, r7
 8001e3c:	2e20      	cmp	r6, #32
 8001e3e:	d005      	beq.n	8001e4c <__aeabi_dsub+0x1f4>
 8001e40:	2740      	movs	r7, #64	; 0x40
 8001e42:	1bbf      	subs	r7, r7, r6
 8001e44:	4666      	mov	r6, ip
 8001e46:	40be      	lsls	r6, r7
 8001e48:	4332      	orrs	r2, r6
 8001e4a:	4690      	mov	r8, r2
 8001e4c:	4646      	mov	r6, r8
 8001e4e:	1e72      	subs	r2, r6, #1
 8001e50:	4196      	sbcs	r6, r2
 8001e52:	4333      	orrs	r3, r6
 8001e54:	e0da      	b.n	800200c <__aeabi_dsub+0x3b4>
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x204>
 8001e5a:	e214      	b.n	8002286 <__aeabi_dsub+0x62e>
 8001e5c:	4663      	mov	r3, ip
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x20c>
 8001e62:	e168      	b.n	8002136 <__aeabi_dsub+0x4de>
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	074e      	lsls	r6, r1, #29
 8001e68:	08c0      	lsrs	r0, r0, #3
 8001e6a:	08c9      	lsrs	r1, r1, #3
 8001e6c:	031b      	lsls	r3, r3, #12
 8001e6e:	4306      	orrs	r6, r0
 8001e70:	4219      	tst	r1, r3
 8001e72:	d008      	beq.n	8001e86 <__aeabi_dsub+0x22e>
 8001e74:	4660      	mov	r0, ip
 8001e76:	08c0      	lsrs	r0, r0, #3
 8001e78:	4218      	tst	r0, r3
 8001e7a:	d104      	bne.n	8001e86 <__aeabi_dsub+0x22e>
 8001e7c:	4663      	mov	r3, ip
 8001e7e:	0001      	movs	r1, r0
 8001e80:	08d2      	lsrs	r2, r2, #3
 8001e82:	075e      	lsls	r6, r3, #29
 8001e84:	4316      	orrs	r6, r2
 8001e86:	00f3      	lsls	r3, r6, #3
 8001e88:	4699      	mov	r9, r3
 8001e8a:	00c9      	lsls	r1, r1, #3
 8001e8c:	0f72      	lsrs	r2, r6, #29
 8001e8e:	4d44      	ldr	r5, [pc, #272]	; (8001fa0 <__aeabi_dsub+0x348>)
 8001e90:	4311      	orrs	r1, r2
 8001e92:	464b      	mov	r3, r9
 8001e94:	08de      	lsrs	r6, r3, #3
 8001e96:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <__aeabi_dsub+0x348>)
 8001e98:	074f      	lsls	r7, r1, #29
 8001e9a:	4337      	orrs	r7, r6
 8001e9c:	08ca      	lsrs	r2, r1, #3
 8001e9e:	429d      	cmp	r5, r3
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x24c>
 8001ea2:	e06e      	b.n	8001f82 <__aeabi_dsub+0x32a>
 8001ea4:	0312      	lsls	r2, r2, #12
 8001ea6:	056d      	lsls	r5, r5, #21
 8001ea8:	0b12      	lsrs	r2, r2, #12
 8001eaa:	0d6d      	lsrs	r5, r5, #21
 8001eac:	2100      	movs	r1, #0
 8001eae:	0312      	lsls	r2, r2, #12
 8001eb0:	0b13      	lsrs	r3, r2, #12
 8001eb2:	0d0a      	lsrs	r2, r1, #20
 8001eb4:	0512      	lsls	r2, r2, #20
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <__aeabi_dsub+0x350>)
 8001eba:	052d      	lsls	r5, r5, #20
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	432b      	orrs	r3, r5
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	07e4      	lsls	r4, r4, #31
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	4323      	orrs	r3, r4
 8001ec8:	0038      	movs	r0, r7
 8001eca:	0019      	movs	r1, r3
 8001ecc:	bc3c      	pop	{r2, r3, r4, r5}
 8001ece:	4690      	mov	r8, r2
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	46a2      	mov	sl, r4
 8001ed4:	46ab      	mov	fp, r5
 8001ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ed8:	4663      	mov	r3, ip
 8001eda:	4313      	orrs	r3, r2
 8001edc:	d011      	beq.n	8001f02 <__aeabi_dsub+0x2aa>
 8001ede:	1e73      	subs	r3, r6, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_dsub+0x28e>
 8001ee4:	e107      	b.n	80020f6 <__aeabi_dsub+0x49e>
 8001ee6:	1886      	adds	r6, r0, r2
 8001ee8:	4286      	cmp	r6, r0
 8001eea:	4180      	sbcs	r0, r0
 8001eec:	4461      	add	r1, ip
 8001eee:	4240      	negs	r0, r0
 8001ef0:	1809      	adds	r1, r1, r0
 8001ef2:	2501      	movs	r5, #1
 8001ef4:	020b      	lsls	r3, r1, #8
 8001ef6:	d537      	bpl.n	8001f68 <__aeabi_dsub+0x310>
 8001ef8:	2502      	movs	r5, #2
 8001efa:	e77b      	b.n	8001df4 <__aeabi_dsub+0x19c>
 8001efc:	003e      	movs	r6, r7
 8001efe:	4661      	mov	r1, ip
 8001f00:	4691      	mov	r9, r2
 8001f02:	0035      	movs	r5, r6
 8001f04:	e7c5      	b.n	8001e92 <__aeabi_dsub+0x23a>
 8001f06:	465c      	mov	r4, fp
 8001f08:	2d00      	cmp	r5, #0
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x2b6>
 8001f0c:	e0e1      	b.n	80020d2 <__aeabi_dsub+0x47a>
 8001f0e:	000b      	movs	r3, r1
 8001f10:	4303      	orrs	r3, r0
 8001f12:	d0f3      	beq.n	8001efc <__aeabi_dsub+0x2a4>
 8001f14:	1c73      	adds	r3, r6, #1
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x2c2>
 8001f18:	e1ac      	b.n	8002274 <__aeabi_dsub+0x61c>
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <__aeabi_dsub+0x348>)
 8001f1c:	429f      	cmp	r7, r3
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x2ca>
 8001f20:	e13a      	b.n	8002198 <__aeabi_dsub+0x540>
 8001f22:	43f3      	mvns	r3, r6
 8001f24:	2b38      	cmp	r3, #56	; 0x38
 8001f26:	dd00      	ble.n	8001f2a <__aeabi_dsub+0x2d2>
 8001f28:	e16f      	b.n	800220a <__aeabi_dsub+0x5b2>
 8001f2a:	2b1f      	cmp	r3, #31
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dsub+0x2d8>
 8001f2e:	e18c      	b.n	800224a <__aeabi_dsub+0x5f2>
 8001f30:	2520      	movs	r5, #32
 8001f32:	000e      	movs	r6, r1
 8001f34:	1aed      	subs	r5, r5, r3
 8001f36:	40ae      	lsls	r6, r5
 8001f38:	46b0      	mov	r8, r6
 8001f3a:	0006      	movs	r6, r0
 8001f3c:	46aa      	mov	sl, r5
 8001f3e:	40de      	lsrs	r6, r3
 8001f40:	4645      	mov	r5, r8
 8001f42:	4335      	orrs	r5, r6
 8001f44:	002e      	movs	r6, r5
 8001f46:	4655      	mov	r5, sl
 8001f48:	40d9      	lsrs	r1, r3
 8001f4a:	40a8      	lsls	r0, r5
 8001f4c:	4663      	mov	r3, ip
 8001f4e:	1e45      	subs	r5, r0, #1
 8001f50:	41a8      	sbcs	r0, r5
 8001f52:	1a5b      	subs	r3, r3, r1
 8001f54:	469c      	mov	ip, r3
 8001f56:	4330      	orrs	r0, r6
 8001f58:	1a16      	subs	r6, r2, r0
 8001f5a:	42b2      	cmp	r2, r6
 8001f5c:	4192      	sbcs	r2, r2
 8001f5e:	4663      	mov	r3, ip
 8001f60:	4252      	negs	r2, r2
 8001f62:	1a99      	subs	r1, r3, r2
 8001f64:	003d      	movs	r5, r7
 8001f66:	e6b4      	b.n	8001cd2 <__aeabi_dsub+0x7a>
 8001f68:	2207      	movs	r2, #7
 8001f6a:	4032      	ands	r2, r6
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d000      	beq.n	8001f72 <__aeabi_dsub+0x31a>
 8001f70:	e6e4      	b.n	8001d3c <__aeabi_dsub+0xe4>
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <__aeabi_dsub+0x348>)
 8001f74:	08f6      	lsrs	r6, r6, #3
 8001f76:	074f      	lsls	r7, r1, #29
 8001f78:	4337      	orrs	r7, r6
 8001f7a:	08ca      	lsrs	r2, r1, #3
 8001f7c:	429d      	cmp	r5, r3
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x32a>
 8001f80:	e790      	b.n	8001ea4 <__aeabi_dsub+0x24c>
 8001f82:	003b      	movs	r3, r7
 8001f84:	4313      	orrs	r3, r2
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dsub+0x332>
 8001f88:	e1a6      	b.n	80022d8 <__aeabi_dsub+0x680>
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	031b      	lsls	r3, r3, #12
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	0312      	lsls	r2, r2, #12
 8001f92:	0b12      	lsrs	r2, r2, #12
 8001f94:	4d02      	ldr	r5, [pc, #8]	; (8001fa0 <__aeabi_dsub+0x348>)
 8001f96:	e789      	b.n	8001eac <__aeabi_dsub+0x254>
 8001f98:	0015      	movs	r5, r2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2700      	movs	r7, #0
 8001f9e:	e785      	b.n	8001eac <__aeabi_dsub+0x254>
 8001fa0:	000007ff 	.word	0x000007ff
 8001fa4:	ff7fffff 	.word	0xff7fffff
 8001fa8:	800fffff 	.word	0x800fffff
 8001fac:	2e00      	cmp	r6, #0
 8001fae:	d000      	beq.n	8001fb2 <__aeabi_dsub+0x35a>
 8001fb0:	e0c7      	b.n	8002142 <__aeabi_dsub+0x4ea>
 8001fb2:	1c6b      	adds	r3, r5, #1
 8001fb4:	055e      	lsls	r6, r3, #21
 8001fb6:	0d76      	lsrs	r6, r6, #21
 8001fb8:	2e01      	cmp	r6, #1
 8001fba:	dc00      	bgt.n	8001fbe <__aeabi_dsub+0x366>
 8001fbc:	e0f0      	b.n	80021a0 <__aeabi_dsub+0x548>
 8001fbe:	4dc8      	ldr	r5, [pc, #800]	; (80022e0 <__aeabi_dsub+0x688>)
 8001fc0:	42ab      	cmp	r3, r5
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dsub+0x36e>
 8001fc4:	e0b9      	b.n	800213a <__aeabi_dsub+0x4e2>
 8001fc6:	1885      	adds	r5, r0, r2
 8001fc8:	000a      	movs	r2, r1
 8001fca:	4285      	cmp	r5, r0
 8001fcc:	4189      	sbcs	r1, r1
 8001fce:	4462      	add	r2, ip
 8001fd0:	4249      	negs	r1, r1
 8001fd2:	1851      	adds	r1, r2, r1
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	07ce      	lsls	r6, r1, #31
 8001fd8:	086d      	lsrs	r5, r5, #1
 8001fda:	432e      	orrs	r6, r5
 8001fdc:	0849      	lsrs	r1, r1, #1
 8001fde:	4032      	ands	r2, r6
 8001fe0:	001d      	movs	r5, r3
 8001fe2:	e6a9      	b.n	8001d38 <__aeabi_dsub+0xe0>
 8001fe4:	49bf      	ldr	r1, [pc, #764]	; (80022e4 <__aeabi_dsub+0x68c>)
 8001fe6:	1aed      	subs	r5, r5, r3
 8001fe8:	4011      	ands	r1, r2
 8001fea:	2207      	movs	r2, #7
 8001fec:	4032      	ands	r2, r6
 8001fee:	e6a3      	b.n	8001d38 <__aeabi_dsub+0xe0>
 8001ff0:	0032      	movs	r2, r6
 8001ff2:	3828      	subs	r0, #40	; 0x28
 8001ff4:	4082      	lsls	r2, r0
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	e686      	b.n	8001d08 <__aeabi_dsub+0xb0>
 8001ffa:	0030      	movs	r0, r6
 8001ffc:	f000 fab6 	bl	800256c <__clzsi2>
 8002000:	3020      	adds	r0, #32
 8002002:	e673      	b.n	8001cec <__aeabi_dsub+0x94>
 8002004:	4663      	mov	r3, ip
 8002006:	4313      	orrs	r3, r2
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	4193      	sbcs	r3, r2
 800200c:	1ac6      	subs	r6, r0, r3
 800200e:	42b0      	cmp	r0, r6
 8002010:	4180      	sbcs	r0, r0
 8002012:	4240      	negs	r0, r0
 8002014:	1a09      	subs	r1, r1, r0
 8002016:	e65c      	b.n	8001cd2 <__aeabi_dsub+0x7a>
 8002018:	000e      	movs	r6, r1
 800201a:	4667      	mov	r7, ip
 800201c:	4306      	orrs	r6, r0
 800201e:	4317      	orrs	r7, r2
 8002020:	2d00      	cmp	r5, #0
 8002022:	d15e      	bne.n	80020e2 <__aeabi_dsub+0x48a>
 8002024:	2e00      	cmp	r6, #0
 8002026:	d000      	beq.n	800202a <__aeabi_dsub+0x3d2>
 8002028:	e0f3      	b.n	8002212 <__aeabi_dsub+0x5ba>
 800202a:	2f00      	cmp	r7, #0
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x3d8>
 800202e:	e11e      	b.n	800226e <__aeabi_dsub+0x616>
 8002030:	465c      	mov	r4, fp
 8002032:	4661      	mov	r1, ip
 8002034:	4691      	mov	r9, r2
 8002036:	e72c      	b.n	8001e92 <__aeabi_dsub+0x23a>
 8002038:	4fa9      	ldr	r7, [pc, #676]	; (80022e0 <__aeabi_dsub+0x688>)
 800203a:	42be      	cmp	r6, r7
 800203c:	d07b      	beq.n	8002136 <__aeabi_dsub+0x4de>
 800203e:	001e      	movs	r6, r3
 8002040:	e6f1      	b.n	8001e26 <__aeabi_dsub+0x1ce>
 8002042:	0010      	movs	r0, r2
 8002044:	3d1f      	subs	r5, #31
 8002046:	40e8      	lsrs	r0, r5
 8002048:	2b20      	cmp	r3, #32
 800204a:	d003      	beq.n	8002054 <__aeabi_dsub+0x3fc>
 800204c:	2140      	movs	r1, #64	; 0x40
 800204e:	1acb      	subs	r3, r1, r3
 8002050:	409a      	lsls	r2, r3
 8002052:	4316      	orrs	r6, r2
 8002054:	1e73      	subs	r3, r6, #1
 8002056:	419e      	sbcs	r6, r3
 8002058:	2207      	movs	r2, #7
 800205a:	4306      	orrs	r6, r0
 800205c:	4032      	ands	r2, r6
 800205e:	2100      	movs	r1, #0
 8002060:	2500      	movs	r5, #0
 8002062:	e783      	b.n	8001f6c <__aeabi_dsub+0x314>
 8002064:	1a16      	subs	r6, r2, r0
 8002066:	4663      	mov	r3, ip
 8002068:	42b2      	cmp	r2, r6
 800206a:	4180      	sbcs	r0, r0
 800206c:	1a59      	subs	r1, r3, r1
 800206e:	4240      	negs	r0, r0
 8002070:	1a0b      	subs	r3, r1, r0
 8002072:	4698      	mov	r8, r3
 8002074:	465c      	mov	r4, fp
 8002076:	e632      	b.n	8001cde <__aeabi_dsub+0x86>
 8002078:	2e1f      	cmp	r6, #31
 800207a:	dd00      	ble.n	800207e <__aeabi_dsub+0x426>
 800207c:	e0ab      	b.n	80021d6 <__aeabi_dsub+0x57e>
 800207e:	2720      	movs	r7, #32
 8002080:	1bbb      	subs	r3, r7, r6
 8002082:	469a      	mov	sl, r3
 8002084:	4663      	mov	r3, ip
 8002086:	4657      	mov	r7, sl
 8002088:	40bb      	lsls	r3, r7
 800208a:	4699      	mov	r9, r3
 800208c:	0013      	movs	r3, r2
 800208e:	464f      	mov	r7, r9
 8002090:	40f3      	lsrs	r3, r6
 8002092:	431f      	orrs	r7, r3
 8002094:	003b      	movs	r3, r7
 8002096:	4657      	mov	r7, sl
 8002098:	40ba      	lsls	r2, r7
 800209a:	1e57      	subs	r7, r2, #1
 800209c:	41ba      	sbcs	r2, r7
 800209e:	4313      	orrs	r3, r2
 80020a0:	4662      	mov	r2, ip
 80020a2:	40f2      	lsrs	r2, r6
 80020a4:	1889      	adds	r1, r1, r2
 80020a6:	e698      	b.n	8001dda <__aeabi_dsub+0x182>
 80020a8:	2720      	movs	r7, #32
 80020aa:	1bbb      	subs	r3, r7, r6
 80020ac:	469a      	mov	sl, r3
 80020ae:	4663      	mov	r3, ip
 80020b0:	4657      	mov	r7, sl
 80020b2:	40bb      	lsls	r3, r7
 80020b4:	4699      	mov	r9, r3
 80020b6:	0013      	movs	r3, r2
 80020b8:	464f      	mov	r7, r9
 80020ba:	40f3      	lsrs	r3, r6
 80020bc:	431f      	orrs	r7, r3
 80020be:	003b      	movs	r3, r7
 80020c0:	4657      	mov	r7, sl
 80020c2:	40ba      	lsls	r2, r7
 80020c4:	1e57      	subs	r7, r2, #1
 80020c6:	41ba      	sbcs	r2, r7
 80020c8:	4313      	orrs	r3, r2
 80020ca:	4662      	mov	r2, ip
 80020cc:	40f2      	lsrs	r2, r6
 80020ce:	1a89      	subs	r1, r1, r2
 80020d0:	e79c      	b.n	800200c <__aeabi_dsub+0x3b4>
 80020d2:	4b83      	ldr	r3, [pc, #524]	; (80022e0 <__aeabi_dsub+0x688>)
 80020d4:	429f      	cmp	r7, r3
 80020d6:	d05f      	beq.n	8002198 <__aeabi_dsub+0x540>
 80020d8:	2580      	movs	r5, #128	; 0x80
 80020da:	042d      	lsls	r5, r5, #16
 80020dc:	4273      	negs	r3, r6
 80020de:	4329      	orrs	r1, r5
 80020e0:	e720      	b.n	8001f24 <__aeabi_dsub+0x2cc>
 80020e2:	2e00      	cmp	r6, #0
 80020e4:	d10c      	bne.n	8002100 <__aeabi_dsub+0x4a8>
 80020e6:	2f00      	cmp	r7, #0
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x494>
 80020ea:	e0d0      	b.n	800228e <__aeabi_dsub+0x636>
 80020ec:	465c      	mov	r4, fp
 80020ee:	4661      	mov	r1, ip
 80020f0:	4691      	mov	r9, r2
 80020f2:	4d7b      	ldr	r5, [pc, #492]	; (80022e0 <__aeabi_dsub+0x688>)
 80020f4:	e6cd      	b.n	8001e92 <__aeabi_dsub+0x23a>
 80020f6:	4f7a      	ldr	r7, [pc, #488]	; (80022e0 <__aeabi_dsub+0x688>)
 80020f8:	42be      	cmp	r6, r7
 80020fa:	d01c      	beq.n	8002136 <__aeabi_dsub+0x4de>
 80020fc:	001e      	movs	r6, r3
 80020fe:	e665      	b.n	8001dcc <__aeabi_dsub+0x174>
 8002100:	2f00      	cmp	r7, #0
 8002102:	d018      	beq.n	8002136 <__aeabi_dsub+0x4de>
 8002104:	08c0      	lsrs	r0, r0, #3
 8002106:	074e      	lsls	r6, r1, #29
 8002108:	4306      	orrs	r6, r0
 800210a:	2080      	movs	r0, #128	; 0x80
 800210c:	08c9      	lsrs	r1, r1, #3
 800210e:	0300      	lsls	r0, r0, #12
 8002110:	4201      	tst	r1, r0
 8002112:	d008      	beq.n	8002126 <__aeabi_dsub+0x4ce>
 8002114:	4663      	mov	r3, ip
 8002116:	08dc      	lsrs	r4, r3, #3
 8002118:	4204      	tst	r4, r0
 800211a:	d104      	bne.n	8002126 <__aeabi_dsub+0x4ce>
 800211c:	0021      	movs	r1, r4
 800211e:	46da      	mov	sl, fp
 8002120:	08d2      	lsrs	r2, r2, #3
 8002122:	075e      	lsls	r6, r3, #29
 8002124:	4316      	orrs	r6, r2
 8002126:	00f3      	lsls	r3, r6, #3
 8002128:	4699      	mov	r9, r3
 800212a:	2401      	movs	r4, #1
 800212c:	4653      	mov	r3, sl
 800212e:	00c9      	lsls	r1, r1, #3
 8002130:	0f72      	lsrs	r2, r6, #29
 8002132:	4311      	orrs	r1, r2
 8002134:	401c      	ands	r4, r3
 8002136:	4d6a      	ldr	r5, [pc, #424]	; (80022e0 <__aeabi_dsub+0x688>)
 8002138:	e6ab      	b.n	8001e92 <__aeabi_dsub+0x23a>
 800213a:	001d      	movs	r5, r3
 800213c:	2200      	movs	r2, #0
 800213e:	2700      	movs	r7, #0
 8002140:	e6b4      	b.n	8001eac <__aeabi_dsub+0x254>
 8002142:	2d00      	cmp	r5, #0
 8002144:	d159      	bne.n	80021fa <__aeabi_dsub+0x5a2>
 8002146:	000b      	movs	r3, r1
 8002148:	4303      	orrs	r3, r0
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x4f6>
 800214c:	e6d6      	b.n	8001efc <__aeabi_dsub+0x2a4>
 800214e:	1c73      	adds	r3, r6, #1
 8002150:	d100      	bne.n	8002154 <__aeabi_dsub+0x4fc>
 8002152:	e0b2      	b.n	80022ba <__aeabi_dsub+0x662>
 8002154:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <__aeabi_dsub+0x688>)
 8002156:	429f      	cmp	r7, r3
 8002158:	d01e      	beq.n	8002198 <__aeabi_dsub+0x540>
 800215a:	43f3      	mvns	r3, r6
 800215c:	2b38      	cmp	r3, #56	; 0x38
 800215e:	dc6f      	bgt.n	8002240 <__aeabi_dsub+0x5e8>
 8002160:	2b1f      	cmp	r3, #31
 8002162:	dd00      	ble.n	8002166 <__aeabi_dsub+0x50e>
 8002164:	e097      	b.n	8002296 <__aeabi_dsub+0x63e>
 8002166:	2520      	movs	r5, #32
 8002168:	000e      	movs	r6, r1
 800216a:	1aed      	subs	r5, r5, r3
 800216c:	40ae      	lsls	r6, r5
 800216e:	46b0      	mov	r8, r6
 8002170:	0006      	movs	r6, r0
 8002172:	46aa      	mov	sl, r5
 8002174:	40de      	lsrs	r6, r3
 8002176:	4645      	mov	r5, r8
 8002178:	4335      	orrs	r5, r6
 800217a:	002e      	movs	r6, r5
 800217c:	4655      	mov	r5, sl
 800217e:	40a8      	lsls	r0, r5
 8002180:	40d9      	lsrs	r1, r3
 8002182:	1e45      	subs	r5, r0, #1
 8002184:	41a8      	sbcs	r0, r5
 8002186:	448c      	add	ip, r1
 8002188:	4306      	orrs	r6, r0
 800218a:	18b6      	adds	r6, r6, r2
 800218c:	4296      	cmp	r6, r2
 800218e:	4192      	sbcs	r2, r2
 8002190:	4251      	negs	r1, r2
 8002192:	4461      	add	r1, ip
 8002194:	003d      	movs	r5, r7
 8002196:	e625      	b.n	8001de4 <__aeabi_dsub+0x18c>
 8002198:	003d      	movs	r5, r7
 800219a:	4661      	mov	r1, ip
 800219c:	4691      	mov	r9, r2
 800219e:	e678      	b.n	8001e92 <__aeabi_dsub+0x23a>
 80021a0:	000b      	movs	r3, r1
 80021a2:	4303      	orrs	r3, r0
 80021a4:	2d00      	cmp	r5, #0
 80021a6:	d000      	beq.n	80021aa <__aeabi_dsub+0x552>
 80021a8:	e655      	b.n	8001e56 <__aeabi_dsub+0x1fe>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f5      	beq.n	800219a <__aeabi_dsub+0x542>
 80021ae:	4663      	mov	r3, ip
 80021b0:	4313      	orrs	r3, r2
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x55e>
 80021b4:	e66d      	b.n	8001e92 <__aeabi_dsub+0x23a>
 80021b6:	1886      	adds	r6, r0, r2
 80021b8:	4286      	cmp	r6, r0
 80021ba:	4180      	sbcs	r0, r0
 80021bc:	4461      	add	r1, ip
 80021be:	4240      	negs	r0, r0
 80021c0:	1809      	adds	r1, r1, r0
 80021c2:	2200      	movs	r2, #0
 80021c4:	020b      	lsls	r3, r1, #8
 80021c6:	d400      	bmi.n	80021ca <__aeabi_dsub+0x572>
 80021c8:	e6d0      	b.n	8001f6c <__aeabi_dsub+0x314>
 80021ca:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <__aeabi_dsub+0x68c>)
 80021cc:	3501      	adds	r5, #1
 80021ce:	4019      	ands	r1, r3
 80021d0:	e5b2      	b.n	8001d38 <__aeabi_dsub+0xe0>
 80021d2:	46b1      	mov	r9, r6
 80021d4:	e65d      	b.n	8001e92 <__aeabi_dsub+0x23a>
 80021d6:	0033      	movs	r3, r6
 80021d8:	4667      	mov	r7, ip
 80021da:	3b20      	subs	r3, #32
 80021dc:	40df      	lsrs	r7, r3
 80021de:	003b      	movs	r3, r7
 80021e0:	2e20      	cmp	r6, #32
 80021e2:	d005      	beq.n	80021f0 <__aeabi_dsub+0x598>
 80021e4:	2740      	movs	r7, #64	; 0x40
 80021e6:	1bbf      	subs	r7, r7, r6
 80021e8:	4666      	mov	r6, ip
 80021ea:	40be      	lsls	r6, r7
 80021ec:	4332      	orrs	r2, r6
 80021ee:	4690      	mov	r8, r2
 80021f0:	4646      	mov	r6, r8
 80021f2:	1e72      	subs	r2, r6, #1
 80021f4:	4196      	sbcs	r6, r2
 80021f6:	4333      	orrs	r3, r6
 80021f8:	e5ef      	b.n	8001dda <__aeabi_dsub+0x182>
 80021fa:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <__aeabi_dsub+0x688>)
 80021fc:	429f      	cmp	r7, r3
 80021fe:	d0cb      	beq.n	8002198 <__aeabi_dsub+0x540>
 8002200:	2580      	movs	r5, #128	; 0x80
 8002202:	042d      	lsls	r5, r5, #16
 8002204:	4273      	negs	r3, r6
 8002206:	4329      	orrs	r1, r5
 8002208:	e7a8      	b.n	800215c <__aeabi_dsub+0x504>
 800220a:	4308      	orrs	r0, r1
 800220c:	1e41      	subs	r1, r0, #1
 800220e:	4188      	sbcs	r0, r1
 8002210:	e6a2      	b.n	8001f58 <__aeabi_dsub+0x300>
 8002212:	2f00      	cmp	r7, #0
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x5c0>
 8002216:	e63c      	b.n	8001e92 <__aeabi_dsub+0x23a>
 8002218:	4663      	mov	r3, ip
 800221a:	1a86      	subs	r6, r0, r2
 800221c:	1acf      	subs	r7, r1, r3
 800221e:	42b0      	cmp	r0, r6
 8002220:	419b      	sbcs	r3, r3
 8002222:	425b      	negs	r3, r3
 8002224:	1afb      	subs	r3, r7, r3
 8002226:	4698      	mov	r8, r3
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	d54e      	bpl.n	80022ca <__aeabi_dsub+0x672>
 800222c:	1a16      	subs	r6, r2, r0
 800222e:	4663      	mov	r3, ip
 8002230:	42b2      	cmp	r2, r6
 8002232:	4192      	sbcs	r2, r2
 8002234:	1a59      	subs	r1, r3, r1
 8002236:	4252      	negs	r2, r2
 8002238:	1a89      	subs	r1, r1, r2
 800223a:	465c      	mov	r4, fp
 800223c:	2200      	movs	r2, #0
 800223e:	e57b      	b.n	8001d38 <__aeabi_dsub+0xe0>
 8002240:	4301      	orrs	r1, r0
 8002242:	000e      	movs	r6, r1
 8002244:	1e71      	subs	r1, r6, #1
 8002246:	418e      	sbcs	r6, r1
 8002248:	e79f      	b.n	800218a <__aeabi_dsub+0x532>
 800224a:	001d      	movs	r5, r3
 800224c:	000e      	movs	r6, r1
 800224e:	3d20      	subs	r5, #32
 8002250:	40ee      	lsrs	r6, r5
 8002252:	46b0      	mov	r8, r6
 8002254:	2b20      	cmp	r3, #32
 8002256:	d004      	beq.n	8002262 <__aeabi_dsub+0x60a>
 8002258:	2540      	movs	r5, #64	; 0x40
 800225a:	1aeb      	subs	r3, r5, r3
 800225c:	4099      	lsls	r1, r3
 800225e:	4308      	orrs	r0, r1
 8002260:	4681      	mov	r9, r0
 8002262:	4648      	mov	r0, r9
 8002264:	4643      	mov	r3, r8
 8002266:	1e41      	subs	r1, r0, #1
 8002268:	4188      	sbcs	r0, r1
 800226a:	4318      	orrs	r0, r3
 800226c:	e674      	b.n	8001f58 <__aeabi_dsub+0x300>
 800226e:	2200      	movs	r2, #0
 8002270:	2400      	movs	r4, #0
 8002272:	e617      	b.n	8001ea4 <__aeabi_dsub+0x24c>
 8002274:	1a16      	subs	r6, r2, r0
 8002276:	4663      	mov	r3, ip
 8002278:	42b2      	cmp	r2, r6
 800227a:	4192      	sbcs	r2, r2
 800227c:	1a59      	subs	r1, r3, r1
 800227e:	4252      	negs	r2, r2
 8002280:	1a89      	subs	r1, r1, r2
 8002282:	003d      	movs	r5, r7
 8002284:	e525      	b.n	8001cd2 <__aeabi_dsub+0x7a>
 8002286:	4661      	mov	r1, ip
 8002288:	4691      	mov	r9, r2
 800228a:	4d15      	ldr	r5, [pc, #84]	; (80022e0 <__aeabi_dsub+0x688>)
 800228c:	e601      	b.n	8001e92 <__aeabi_dsub+0x23a>
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	2400      	movs	r4, #0
 8002292:	0312      	lsls	r2, r2, #12
 8002294:	e679      	b.n	8001f8a <__aeabi_dsub+0x332>
 8002296:	001d      	movs	r5, r3
 8002298:	000e      	movs	r6, r1
 800229a:	3d20      	subs	r5, #32
 800229c:	40ee      	lsrs	r6, r5
 800229e:	46b0      	mov	r8, r6
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d004      	beq.n	80022ae <__aeabi_dsub+0x656>
 80022a4:	2540      	movs	r5, #64	; 0x40
 80022a6:	1aeb      	subs	r3, r5, r3
 80022a8:	4099      	lsls	r1, r3
 80022aa:	4308      	orrs	r0, r1
 80022ac:	4681      	mov	r9, r0
 80022ae:	464e      	mov	r6, r9
 80022b0:	4643      	mov	r3, r8
 80022b2:	1e71      	subs	r1, r6, #1
 80022b4:	418e      	sbcs	r6, r1
 80022b6:	431e      	orrs	r6, r3
 80022b8:	e767      	b.n	800218a <__aeabi_dsub+0x532>
 80022ba:	1886      	adds	r6, r0, r2
 80022bc:	4296      	cmp	r6, r2
 80022be:	419b      	sbcs	r3, r3
 80022c0:	4461      	add	r1, ip
 80022c2:	425b      	negs	r3, r3
 80022c4:	18c9      	adds	r1, r1, r3
 80022c6:	003d      	movs	r5, r7
 80022c8:	e58c      	b.n	8001de4 <__aeabi_dsub+0x18c>
 80022ca:	4647      	mov	r7, r8
 80022cc:	4337      	orrs	r7, r6
 80022ce:	d0ce      	beq.n	800226e <__aeabi_dsub+0x616>
 80022d0:	2207      	movs	r2, #7
 80022d2:	4641      	mov	r1, r8
 80022d4:	4032      	ands	r2, r6
 80022d6:	e649      	b.n	8001f6c <__aeabi_dsub+0x314>
 80022d8:	2700      	movs	r7, #0
 80022da:	003a      	movs	r2, r7
 80022dc:	e5e6      	b.n	8001eac <__aeabi_dsub+0x254>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff

080022e8 <__aeabi_dcmpun>:
 80022e8:	b570      	push	{r4, r5, r6, lr}
 80022ea:	4e0c      	ldr	r6, [pc, #48]	; (800231c <__aeabi_dcmpun+0x34>)
 80022ec:	030d      	lsls	r5, r1, #12
 80022ee:	031c      	lsls	r4, r3, #12
 80022f0:	0049      	lsls	r1, r1, #1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	0b2d      	lsrs	r5, r5, #12
 80022f6:	0d49      	lsrs	r1, r1, #21
 80022f8:	0b24      	lsrs	r4, r4, #12
 80022fa:	0d5b      	lsrs	r3, r3, #21
 80022fc:	42b1      	cmp	r1, r6
 80022fe:	d008      	beq.n	8002312 <__aeabi_dcmpun+0x2a>
 8002300:	4906      	ldr	r1, [pc, #24]	; (800231c <__aeabi_dcmpun+0x34>)
 8002302:	2000      	movs	r0, #0
 8002304:	428b      	cmp	r3, r1
 8002306:	d103      	bne.n	8002310 <__aeabi_dcmpun+0x28>
 8002308:	4314      	orrs	r4, r2
 800230a:	0020      	movs	r0, r4
 800230c:	1e44      	subs	r4, r0, #1
 800230e:	41a0      	sbcs	r0, r4
 8002310:	bd70      	pop	{r4, r5, r6, pc}
 8002312:	4305      	orrs	r5, r0
 8002314:	2001      	movs	r0, #1
 8002316:	2d00      	cmp	r5, #0
 8002318:	d1fa      	bne.n	8002310 <__aeabi_dcmpun+0x28>
 800231a:	e7f1      	b.n	8002300 <__aeabi_dcmpun+0x18>
 800231c:	000007ff 	.word	0x000007ff

08002320 <__aeabi_d2iz>:
 8002320:	b530      	push	{r4, r5, lr}
 8002322:	4d14      	ldr	r5, [pc, #80]	; (8002374 <__aeabi_d2iz+0x54>)
 8002324:	030a      	lsls	r2, r1, #12
 8002326:	004b      	lsls	r3, r1, #1
 8002328:	0b12      	lsrs	r2, r2, #12
 800232a:	0d5b      	lsrs	r3, r3, #21
 800232c:	0fc9      	lsrs	r1, r1, #31
 800232e:	2400      	movs	r4, #0
 8002330:	42ab      	cmp	r3, r5
 8002332:	dd11      	ble.n	8002358 <__aeabi_d2iz+0x38>
 8002334:	4c10      	ldr	r4, [pc, #64]	; (8002378 <__aeabi_d2iz+0x58>)
 8002336:	42a3      	cmp	r3, r4
 8002338:	dc10      	bgt.n	800235c <__aeabi_d2iz+0x3c>
 800233a:	2480      	movs	r4, #128	; 0x80
 800233c:	0364      	lsls	r4, r4, #13
 800233e:	4322      	orrs	r2, r4
 8002340:	4c0e      	ldr	r4, [pc, #56]	; (800237c <__aeabi_d2iz+0x5c>)
 8002342:	1ae4      	subs	r4, r4, r3
 8002344:	2c1f      	cmp	r4, #31
 8002346:	dd0c      	ble.n	8002362 <__aeabi_d2iz+0x42>
 8002348:	480d      	ldr	r0, [pc, #52]	; (8002380 <__aeabi_d2iz+0x60>)
 800234a:	1ac3      	subs	r3, r0, r3
 800234c:	40da      	lsrs	r2, r3
 800234e:	0013      	movs	r3, r2
 8002350:	425c      	negs	r4, r3
 8002352:	2900      	cmp	r1, #0
 8002354:	d100      	bne.n	8002358 <__aeabi_d2iz+0x38>
 8002356:	001c      	movs	r4, r3
 8002358:	0020      	movs	r0, r4
 800235a:	bd30      	pop	{r4, r5, pc}
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <__aeabi_d2iz+0x64>)
 800235e:	18cc      	adds	r4, r1, r3
 8002360:	e7fa      	b.n	8002358 <__aeabi_d2iz+0x38>
 8002362:	4d09      	ldr	r5, [pc, #36]	; (8002388 <__aeabi_d2iz+0x68>)
 8002364:	40e0      	lsrs	r0, r4
 8002366:	46ac      	mov	ip, r5
 8002368:	4463      	add	r3, ip
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	4303      	orrs	r3, r0
 8002370:	e7ee      	b.n	8002350 <__aeabi_d2iz+0x30>
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	000003fe 	.word	0x000003fe
 8002378:	0000041d 	.word	0x0000041d
 800237c:	00000433 	.word	0x00000433
 8002380:	00000413 	.word	0x00000413
 8002384:	7fffffff 	.word	0x7fffffff
 8002388:	fffffbed 	.word	0xfffffbed

0800238c <__aeabi_i2d>:
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	2800      	cmp	r0, #0
 8002390:	d02d      	beq.n	80023ee <__aeabi_i2d+0x62>
 8002392:	17c3      	asrs	r3, r0, #31
 8002394:	18c5      	adds	r5, r0, r3
 8002396:	405d      	eors	r5, r3
 8002398:	0fc4      	lsrs	r4, r0, #31
 800239a:	0028      	movs	r0, r5
 800239c:	f000 f8e6 	bl	800256c <__clzsi2>
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <__aeabi_i2d+0x6c>)
 80023a2:	1a1b      	subs	r3, r3, r0
 80023a4:	055b      	lsls	r3, r3, #21
 80023a6:	0d5b      	lsrs	r3, r3, #21
 80023a8:	280a      	cmp	r0, #10
 80023aa:	dd15      	ble.n	80023d8 <__aeabi_i2d+0x4c>
 80023ac:	380b      	subs	r0, #11
 80023ae:	4085      	lsls	r5, r0
 80023b0:	2200      	movs	r2, #0
 80023b2:	032d      	lsls	r5, r5, #12
 80023b4:	0b2d      	lsrs	r5, r5, #12
 80023b6:	2100      	movs	r1, #0
 80023b8:	0010      	movs	r0, r2
 80023ba:	032d      	lsls	r5, r5, #12
 80023bc:	0d0a      	lsrs	r2, r1, #20
 80023be:	0b2d      	lsrs	r5, r5, #12
 80023c0:	0512      	lsls	r2, r2, #20
 80023c2:	432a      	orrs	r2, r5
 80023c4:	4d0d      	ldr	r5, [pc, #52]	; (80023fc <__aeabi_i2d+0x70>)
 80023c6:	051b      	lsls	r3, r3, #20
 80023c8:	402a      	ands	r2, r5
 80023ca:	4313      	orrs	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	07e4      	lsls	r4, r4, #31
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	4323      	orrs	r3, r4
 80023d4:	0019      	movs	r1, r3
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	0002      	movs	r2, r0
 80023da:	0029      	movs	r1, r5
 80023dc:	3215      	adds	r2, #21
 80023de:	4091      	lsls	r1, r2
 80023e0:	000a      	movs	r2, r1
 80023e2:	210b      	movs	r1, #11
 80023e4:	1a08      	subs	r0, r1, r0
 80023e6:	40c5      	lsrs	r5, r0
 80023e8:	032d      	lsls	r5, r5, #12
 80023ea:	0b2d      	lsrs	r5, r5, #12
 80023ec:	e7e3      	b.n	80023b6 <__aeabi_i2d+0x2a>
 80023ee:	2400      	movs	r4, #0
 80023f0:	2300      	movs	r3, #0
 80023f2:	2500      	movs	r5, #0
 80023f4:	2200      	movs	r2, #0
 80023f6:	e7de      	b.n	80023b6 <__aeabi_i2d+0x2a>
 80023f8:	0000041e 	.word	0x0000041e
 80023fc:	800fffff 	.word	0x800fffff

08002400 <__aeabi_ui2d>:
 8002400:	b510      	push	{r4, lr}
 8002402:	1e04      	subs	r4, r0, #0
 8002404:	d025      	beq.n	8002452 <__aeabi_ui2d+0x52>
 8002406:	f000 f8b1 	bl	800256c <__clzsi2>
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <__aeabi_ui2d+0x5c>)
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	055b      	lsls	r3, r3, #21
 8002410:	0d5b      	lsrs	r3, r3, #21
 8002412:	280a      	cmp	r0, #10
 8002414:	dd12      	ble.n	800243c <__aeabi_ui2d+0x3c>
 8002416:	380b      	subs	r0, #11
 8002418:	4084      	lsls	r4, r0
 800241a:	2200      	movs	r2, #0
 800241c:	0324      	lsls	r4, r4, #12
 800241e:	0b24      	lsrs	r4, r4, #12
 8002420:	2100      	movs	r1, #0
 8002422:	0010      	movs	r0, r2
 8002424:	0324      	lsls	r4, r4, #12
 8002426:	0d0a      	lsrs	r2, r1, #20
 8002428:	0b24      	lsrs	r4, r4, #12
 800242a:	0512      	lsls	r2, r2, #20
 800242c:	4322      	orrs	r2, r4
 800242e:	4c0c      	ldr	r4, [pc, #48]	; (8002460 <__aeabi_ui2d+0x60>)
 8002430:	051b      	lsls	r3, r3, #20
 8002432:	4022      	ands	r2, r4
 8002434:	4313      	orrs	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	0859      	lsrs	r1, r3, #1
 800243a:	bd10      	pop	{r4, pc}
 800243c:	0002      	movs	r2, r0
 800243e:	0021      	movs	r1, r4
 8002440:	3215      	adds	r2, #21
 8002442:	4091      	lsls	r1, r2
 8002444:	000a      	movs	r2, r1
 8002446:	210b      	movs	r1, #11
 8002448:	1a08      	subs	r0, r1, r0
 800244a:	40c4      	lsrs	r4, r0
 800244c:	0324      	lsls	r4, r4, #12
 800244e:	0b24      	lsrs	r4, r4, #12
 8002450:	e7e6      	b.n	8002420 <__aeabi_ui2d+0x20>
 8002452:	2300      	movs	r3, #0
 8002454:	2400      	movs	r4, #0
 8002456:	2200      	movs	r2, #0
 8002458:	e7e2      	b.n	8002420 <__aeabi_ui2d+0x20>
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	0000041e 	.word	0x0000041e
 8002460:	800fffff 	.word	0x800fffff

08002464 <__aeabi_d2f>:
 8002464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002466:	004c      	lsls	r4, r1, #1
 8002468:	0d64      	lsrs	r4, r4, #21
 800246a:	030b      	lsls	r3, r1, #12
 800246c:	1c62      	adds	r2, r4, #1
 800246e:	0a5b      	lsrs	r3, r3, #9
 8002470:	0f46      	lsrs	r6, r0, #29
 8002472:	0552      	lsls	r2, r2, #21
 8002474:	0fc9      	lsrs	r1, r1, #31
 8002476:	431e      	orrs	r6, r3
 8002478:	00c5      	lsls	r5, r0, #3
 800247a:	0d52      	lsrs	r2, r2, #21
 800247c:	2a01      	cmp	r2, #1
 800247e:	dd29      	ble.n	80024d4 <__aeabi_d2f+0x70>
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <__aeabi_d2f+0xfc>)
 8002482:	18e7      	adds	r7, r4, r3
 8002484:	2ffe      	cmp	r7, #254	; 0xfe
 8002486:	dc1c      	bgt.n	80024c2 <__aeabi_d2f+0x5e>
 8002488:	2f00      	cmp	r7, #0
 800248a:	dd3b      	ble.n	8002504 <__aeabi_d2f+0xa0>
 800248c:	0180      	lsls	r0, r0, #6
 800248e:	1e43      	subs	r3, r0, #1
 8002490:	4198      	sbcs	r0, r3
 8002492:	2207      	movs	r2, #7
 8002494:	00f3      	lsls	r3, r6, #3
 8002496:	0f6d      	lsrs	r5, r5, #29
 8002498:	4303      	orrs	r3, r0
 800249a:	432b      	orrs	r3, r5
 800249c:	401a      	ands	r2, r3
 800249e:	2a00      	cmp	r2, #0
 80024a0:	d004      	beq.n	80024ac <__aeabi_d2f+0x48>
 80024a2:	220f      	movs	r2, #15
 80024a4:	401a      	ands	r2, r3
 80024a6:	2a04      	cmp	r2, #4
 80024a8:	d000      	beq.n	80024ac <__aeabi_d2f+0x48>
 80024aa:	3304      	adds	r3, #4
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	04d2      	lsls	r2, r2, #19
 80024b0:	401a      	ands	r2, r3
 80024b2:	d024      	beq.n	80024fe <__aeabi_d2f+0x9a>
 80024b4:	3701      	adds	r7, #1
 80024b6:	b2fa      	uxtb	r2, r7
 80024b8:	2fff      	cmp	r7, #255	; 0xff
 80024ba:	d002      	beq.n	80024c2 <__aeabi_d2f+0x5e>
 80024bc:	019b      	lsls	r3, r3, #6
 80024be:	0a58      	lsrs	r0, r3, #9
 80024c0:	e001      	b.n	80024c6 <__aeabi_d2f+0x62>
 80024c2:	22ff      	movs	r2, #255	; 0xff
 80024c4:	2000      	movs	r0, #0
 80024c6:	0240      	lsls	r0, r0, #9
 80024c8:	05d2      	lsls	r2, r2, #23
 80024ca:	0a40      	lsrs	r0, r0, #9
 80024cc:	07c9      	lsls	r1, r1, #31
 80024ce:	4310      	orrs	r0, r2
 80024d0:	4308      	orrs	r0, r1
 80024d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d4:	4335      	orrs	r5, r6
 80024d6:	2c00      	cmp	r4, #0
 80024d8:	d104      	bne.n	80024e4 <__aeabi_d2f+0x80>
 80024da:	2d00      	cmp	r5, #0
 80024dc:	d10a      	bne.n	80024f4 <__aeabi_d2f+0x90>
 80024de:	2200      	movs	r2, #0
 80024e0:	2000      	movs	r0, #0
 80024e2:	e7f0      	b.n	80024c6 <__aeabi_d2f+0x62>
 80024e4:	2d00      	cmp	r5, #0
 80024e6:	d0ec      	beq.n	80024c2 <__aeabi_d2f+0x5e>
 80024e8:	2080      	movs	r0, #128	; 0x80
 80024ea:	03c0      	lsls	r0, r0, #15
 80024ec:	4330      	orrs	r0, r6
 80024ee:	22ff      	movs	r2, #255	; 0xff
 80024f0:	e7e9      	b.n	80024c6 <__aeabi_d2f+0x62>
 80024f2:	2400      	movs	r4, #0
 80024f4:	2300      	movs	r3, #0
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	0a58      	lsrs	r0, r3, #9
 80024fa:	b2e2      	uxtb	r2, r4
 80024fc:	e7e3      	b.n	80024c6 <__aeabi_d2f+0x62>
 80024fe:	08db      	lsrs	r3, r3, #3
 8002500:	003c      	movs	r4, r7
 8002502:	e7f8      	b.n	80024f6 <__aeabi_d2f+0x92>
 8002504:	003b      	movs	r3, r7
 8002506:	3317      	adds	r3, #23
 8002508:	dbf3      	blt.n	80024f2 <__aeabi_d2f+0x8e>
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	4333      	orrs	r3, r6
 8002510:	261e      	movs	r6, #30
 8002512:	1bf6      	subs	r6, r6, r7
 8002514:	2e1f      	cmp	r6, #31
 8002516:	dd14      	ble.n	8002542 <__aeabi_d2f+0xde>
 8002518:	2202      	movs	r2, #2
 800251a:	4252      	negs	r2, r2
 800251c:	1bd7      	subs	r7, r2, r7
 800251e:	001a      	movs	r2, r3
 8002520:	40fa      	lsrs	r2, r7
 8002522:	0017      	movs	r7, r2
 8002524:	2e20      	cmp	r6, #32
 8002526:	d004      	beq.n	8002532 <__aeabi_d2f+0xce>
 8002528:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <__aeabi_d2f+0x100>)
 800252a:	4694      	mov	ip, r2
 800252c:	4464      	add	r4, ip
 800252e:	40a3      	lsls	r3, r4
 8002530:	431d      	orrs	r5, r3
 8002532:	002b      	movs	r3, r5
 8002534:	1e5d      	subs	r5, r3, #1
 8002536:	41ab      	sbcs	r3, r5
 8002538:	2207      	movs	r2, #7
 800253a:	433b      	orrs	r3, r7
 800253c:	401a      	ands	r2, r3
 800253e:	2700      	movs	r7, #0
 8002540:	e7ad      	b.n	800249e <__aeabi_d2f+0x3a>
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <__aeabi_d2f+0x104>)
 8002544:	0028      	movs	r0, r5
 8002546:	18a2      	adds	r2, r4, r2
 8002548:	4095      	lsls	r5, r2
 800254a:	4093      	lsls	r3, r2
 800254c:	1e6c      	subs	r4, r5, #1
 800254e:	41a5      	sbcs	r5, r4
 8002550:	40f0      	lsrs	r0, r6
 8002552:	2207      	movs	r2, #7
 8002554:	432b      	orrs	r3, r5
 8002556:	4303      	orrs	r3, r0
 8002558:	401a      	ands	r2, r3
 800255a:	2700      	movs	r7, #0
 800255c:	e79f      	b.n	800249e <__aeabi_d2f+0x3a>
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	fffffc80 	.word	0xfffffc80
 8002564:	fffffca2 	.word	0xfffffca2
 8002568:	fffffc82 	.word	0xfffffc82

0800256c <__clzsi2>:
 800256c:	211c      	movs	r1, #28
 800256e:	2301      	movs	r3, #1
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	4298      	cmp	r0, r3
 8002574:	d301      	bcc.n	800257a <__clzsi2+0xe>
 8002576:	0c00      	lsrs	r0, r0, #16
 8002578:	3910      	subs	r1, #16
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	4298      	cmp	r0, r3
 800257e:	d301      	bcc.n	8002584 <__clzsi2+0x18>
 8002580:	0a00      	lsrs	r0, r0, #8
 8002582:	3908      	subs	r1, #8
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	4298      	cmp	r0, r3
 8002588:	d301      	bcc.n	800258e <__clzsi2+0x22>
 800258a:	0900      	lsrs	r0, r0, #4
 800258c:	3904      	subs	r1, #4
 800258e:	a202      	add	r2, pc, #8	; (adr r2, 8002598 <__clzsi2+0x2c>)
 8002590:	5c10      	ldrb	r0, [r2, r0]
 8002592:	1840      	adds	r0, r0, r1
 8002594:	4770      	bx	lr
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	02020304 	.word	0x02020304
 800259c:	01010101 	.word	0x01010101
	...

080025a8 <__clzdi2>:
 80025a8:	b510      	push	{r4, lr}
 80025aa:	2900      	cmp	r1, #0
 80025ac:	d103      	bne.n	80025b6 <__clzdi2+0xe>
 80025ae:	f7ff ffdd 	bl	800256c <__clzsi2>
 80025b2:	3020      	adds	r0, #32
 80025b4:	e002      	b.n	80025bc <__clzdi2+0x14>
 80025b6:	1c08      	adds	r0, r1, #0
 80025b8:	f7ff ffd8 	bl	800256c <__clzsi2>
 80025bc:	bd10      	pop	{r4, pc}
 80025be:	46c0      	nop			; (mov r8, r8)

080025c0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80025c6:	003b      	movs	r3, r7
 80025c8:	0018      	movs	r0, r3
 80025ca:	2308      	movs	r3, #8
 80025cc:	001a      	movs	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f008 fc5f 	bl	800ae92 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80025d4:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <MX_ADC_Init+0xd0>)
 80025d6:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <MX_ADC_Init+0xd4>)
 80025d8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <MX_ADC_Init+0xd0>)
 80025dc:	2200      	movs	r2, #0
 80025de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <MX_ADC_Init+0xd0>)
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	05d2      	lsls	r2, r2, #23
 80025e6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80025e8:	4b29      	ldr	r3, [pc, #164]	; (8002690 <MX_ADC_Init+0xd0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5 ;
 80025ee:	4b28      	ldr	r3, [pc, #160]	; (8002690 <MX_ADC_Init+0xd0>)
 80025f0:	2202      	movs	r2, #2
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <MX_ADC_Init+0xd0>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025fa:	4b25      	ldr	r3, [pc, #148]	; (8002690 <MX_ADC_Init+0xd0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002600:	4b23      	ldr	r3, [pc, #140]	; (8002690 <MX_ADC_Init+0xd0>)
 8002602:	2220      	movs	r2, #32
 8002604:	2101      	movs	r1, #1
 8002606:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <MX_ADC_Init+0xd0>)
 800260a:	2221      	movs	r2, #33	; 0x21
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <MX_ADC_Init+0xd0>)
 8002612:	2200      	movs	r2, #0
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <MX_ADC_Init+0xd0>)
 8002618:	22c2      	movs	r2, #194	; 0xc2
 800261a:	32ff      	adds	r2, #255	; 0xff
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <MX_ADC_Init+0xd0>)
 8002620:	222c      	movs	r2, #44	; 0x2c
 8002622:	2100      	movs	r1, #0
 8002624:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <MX_ADC_Init+0xd0>)
 8002628:	2204      	movs	r2, #4
 800262a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <MX_ADC_Init+0xd0>)
 800262e:	2200      	movs	r2, #0
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <MX_ADC_Init+0xd0>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <MX_ADC_Init+0xd0>)
 800263a:	2200      	movs	r2, #0
 800263c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <MX_ADC_Init+0xd0>)
 8002640:	2200      	movs	r2, #0
 8002642:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <MX_ADC_Init+0xd0>)
 8002646:	0018      	movs	r0, r3
 8002648:	f001 fee4 	bl	8004414 <HAL_ADC_Init>
 800264c:	0003      	movs	r3, r0
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	4193      	sbcs	r3, r2
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_ADC_Init+0x9c>
  {
    Error_Handler();
 8002658:	f001 fac4 	bl	8003be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800265c:	003b      	movs	r3, r7
 800265e:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <MX_ADC_Init+0xd8>)
 8002660:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002662:	003b      	movs	r3, r7
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	0152      	lsls	r2, r2, #5
 8002668:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800266a:	003a      	movs	r2, r7
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <MX_ADC_Init+0xd0>)
 800266e:	0011      	movs	r1, r2
 8002670:	0018      	movs	r0, r3
 8002672:	f002 f8a3 	bl	80047bc <HAL_ADC_ConfigChannel>
 8002676:	0003      	movs	r3, r0
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	4193      	sbcs	r3, r2
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_ADC_Init+0xc6>
  {
    Error_Handler();
 8002682:	f001 faaf 	bl	8003be4 <Error_Handler>
  }

}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b002      	add	sp, #8
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	20000230 	.word	0x20000230
 8002694:	40012400 	.word	0x40012400
 8002698:	08000004 	.word	0x08000004

0800269c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	230c      	movs	r3, #12
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	0018      	movs	r0, r3
 80026aa:	2314      	movs	r3, #20
 80026ac:	001a      	movs	r2, r3
 80026ae:	2100      	movs	r1, #0
 80026b0:	f008 fbef 	bl	800ae92 <memset>
  if(adcHandle->Instance==ADC1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a15      	ldr	r2, [pc, #84]	; (8002710 <HAL_ADC_MspInit+0x74>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d123      	bne.n	8002706 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_ADC_MspInit+0x78>)
 80026c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_ADC_MspInit+0x78>)
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	0089      	lsls	r1, r1, #2
 80026c8:	430a      	orrs	r2, r1
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_ADC_MspInit+0x78>)
 80026ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_ADC_MspInit+0x78>)
 80026d2:	2101      	movs	r1, #1
 80026d4:	430a      	orrs	r2, r1
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_ADC_MspInit+0x78>)
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	2201      	movs	r2, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = BAT_Pin;
 80026e4:	210c      	movs	r1, #12
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	2204      	movs	r2, #4
 80026ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2203      	movs	r2, #3
 80026f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_GPIO_Port, &GPIO_InitStruct);
 80026f8:	187a      	adds	r2, r7, r1
 80026fa:	23a0      	movs	r3, #160	; 0xa0
 80026fc:	05db      	lsls	r3, r3, #23
 80026fe:	0011      	movs	r1, r2
 8002700:	0018      	movs	r0, r3
 8002702:	f002 fb75 	bl	8004df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b008      	add	sp, #32
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	40012400 	.word	0x40012400
 8002714:	40021000 	.word	0x40021000

08002718 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b08b      	sub	sp, #44	; 0x2c
 800271c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271e:	2414      	movs	r4, #20
 8002720:	193b      	adds	r3, r7, r4
 8002722:	0018      	movs	r0, r3
 8002724:	2314      	movs	r3, #20
 8002726:	001a      	movs	r2, r3
 8002728:	2100      	movs	r1, #0
 800272a:	f008 fbb2 	bl	800ae92 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <MX_GPIO_Init+0x1a4>)
 8002730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002732:	4b62      	ldr	r3, [pc, #392]	; (80028bc <MX_GPIO_Init+0x1a4>)
 8002734:	2104      	movs	r1, #4
 8002736:	430a      	orrs	r2, r1
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c
 800273a:	4b60      	ldr	r3, [pc, #384]	; (80028bc <MX_GPIO_Init+0x1a4>)
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	2204      	movs	r2, #4
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	4b5d      	ldr	r3, [pc, #372]	; (80028bc <MX_GPIO_Init+0x1a4>)
 8002748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274a:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <MX_GPIO_Init+0x1a4>)
 800274c:	2101      	movs	r1, #1
 800274e:	430a      	orrs	r2, r1
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c
 8002752:	4b5a      	ldr	r3, [pc, #360]	; (80028bc <MX_GPIO_Init+0x1a4>)
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	2201      	movs	r2, #1
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	4b57      	ldr	r3, [pc, #348]	; (80028bc <MX_GPIO_Init+0x1a4>)
 8002760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002762:	4b56      	ldr	r3, [pc, #344]	; (80028bc <MX_GPIO_Init+0x1a4>)
 8002764:	2102      	movs	r1, #2
 8002766:	430a      	orrs	r2, r1
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
 800276a:	4b54      	ldr	r3, [pc, #336]	; (80028bc <MX_GPIO_Init+0x1a4>)
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	2202      	movs	r2, #2
 8002770:	4013      	ands	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002776:	4b51      	ldr	r3, [pc, #324]	; (80028bc <MX_GPIO_Init+0x1a4>)
 8002778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277a:	4b50      	ldr	r3, [pc, #320]	; (80028bc <MX_GPIO_Init+0x1a4>)
 800277c:	2108      	movs	r1, #8
 800277e:	430a      	orrs	r2, r1
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c
 8002782:	4b4e      	ldr	r3, [pc, #312]	; (80028bc <MX_GPIO_Init+0x1a4>)
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	2208      	movs	r2, #8
 8002788:	4013      	ands	r3, r2
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|BUZZER_Pin|GPIO_PIN_8
 800278e:	494c      	ldr	r1, [pc, #304]	; (80028c0 <MX_GPIO_Init+0x1a8>)
 8002790:	23a0      	movs	r3, #160	; 0xa0
 8002792:	05db      	lsls	r3, r3, #23
 8002794:	2200      	movs	r2, #0
 8002796:	0018      	movs	r0, r3
 8002798:	f002 fcc5 	bl	8005126 <HAL_GPIO_WritePin>
                          |LED_SIM7600_Comm_Pin|LRWAN_RESRT_Pin|LED_LowVol_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIM7600_PWRKEY_Pin|SIM7600_FLIGHTMODE_Pin|SIM7600_RESET_Pin|SIM7600_ONOFF_Pin
 800279c:	4949      	ldr	r1, [pc, #292]	; (80028c4 <MX_GPIO_Init+0x1ac>)
 800279e:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <MX_GPIO_Init+0x1b0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	0018      	movs	r0, r3
 80027a4:	f002 fcbf 	bl	8005126 <HAL_GPIO_WritePin>
                          |LRWAN_ONOFF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, GPIO_PIN_RESET);
 80027a8:	4b48      	ldr	r3, [pc, #288]	; (80028cc <MX_GPIO_Init+0x1b4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	2140      	movs	r1, #64	; 0x40
 80027ae:	0018      	movs	r0, r3
 80027b0:	f002 fcb9 	bl	8005126 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80027b4:	193b      	adds	r3, r7, r4
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	0192      	lsls	r2, r2, #6
 80027ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	4a44      	ldr	r2, [pc, #272]	; (80028d0 <MX_GPIO_Init+0x1b8>)
 80027c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c2:	193b      	adds	r3, r7, r4
 80027c4:	2201      	movs	r2, #1
 80027c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80027c8:	193b      	adds	r3, r7, r4
 80027ca:	4a40      	ldr	r2, [pc, #256]	; (80028cc <MX_GPIO_Init+0x1b4>)
 80027cc:	0019      	movs	r1, r3
 80027ce:	0010      	movs	r0, r2
 80027d0:	f002 fb0e 	bl	8004df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_BUTTON_Pin|STOP_BUTTON_Pin;
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	2203      	movs	r2, #3
 80027d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <MX_GPIO_Init+0x1b8>)
 80027de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e0:	193b      	adds	r3, r7, r4
 80027e2:	2201      	movs	r2, #1
 80027e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	193a      	adds	r2, r7, r4
 80027e8:	23a0      	movs	r3, #160	; 0xa0
 80027ea:	05db      	lsls	r3, r3, #23
 80027ec:	0011      	movs	r1, r2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f002 fafe 	bl	8004df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|BUZZER_Pin|LED_SIM7600_Comm_Pin
 80027f4:	193b      	adds	r3, r7, r4
 80027f6:	4a37      	ldr	r2, [pc, #220]	; (80028d4 <MX_GPIO_Init+0x1bc>)
 80027f8:	601a      	str	r2, [r3, #0]
                          |LRWAN_RESRT_Pin|LED_LowVol_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	193b      	adds	r3, r7, r4
 80027fc:	2201      	movs	r2, #1
 80027fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	193b      	adds	r3, r7, r4
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	193b      	adds	r3, r7, r4
 8002808:	2203      	movs	r2, #3
 800280a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	193a      	adds	r2, r7, r4
 800280e:	23a0      	movs	r3, #160	; 0xa0
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f002 faeb 	bl	8004df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SIM7600_PWRKEY_Pin|SIM7600_FLIGHTMODE_Pin|SIM7600_RESET_Pin|SIM7600_ONOFF_Pin
 800281a:	0021      	movs	r1, r4
 800281c:	187b      	adds	r3, r7, r1
 800281e:	4a29      	ldr	r2, [pc, #164]	; (80028c4 <MX_GPIO_Init+0x1ac>)
 8002820:	601a      	str	r2, [r3, #0]
                          |LRWAN_ONOFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002822:	187b      	adds	r3, r7, r1
 8002824:	2201      	movs	r2, #1
 8002826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282e:	187b      	adds	r3, r7, r1
 8002830:	2203      	movs	r2, #3
 8002832:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	000c      	movs	r4, r1
 8002836:	187b      	adds	r3, r7, r1
 8002838:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <MX_GPIO_Init+0x1b0>)
 800283a:	0019      	movs	r1, r3
 800283c:	0010      	movs	r0, r2
 800283e:	f002 fad7 	bl	8004df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Working_Status_Pin;
 8002842:	0021      	movs	r1, r4
 8002844:	187b      	adds	r3, r7, r1
 8002846:	2240      	movs	r2, #64	; 0x40
 8002848:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284a:	187b      	adds	r3, r7, r1
 800284c:	2201      	movs	r2, #1
 800284e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	187b      	adds	r3, r7, r1
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2203      	movs	r2, #3
 800285a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_Working_Status_GPIO_Port, &GPIO_InitStruct);
 800285c:	000c      	movs	r4, r1
 800285e:	187b      	adds	r3, r7, r1
 8002860:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <MX_GPIO_Init+0x1b4>)
 8002862:	0019      	movs	r1, r3
 8002864:	0010      	movs	r0, r2
 8002866:	f002 fac3 	bl	8004df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800286a:	0021      	movs	r1, r4
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	0052      	lsls	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002874:	187b      	adds	r3, r7, r1
 8002876:	2201      	movs	r2, #1
 8002878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287a:	187b      	adds	r3, r7, r1
 800287c:	2201      	movs	r2, #1
 800287e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	187b      	adds	r3, r7, r1
 8002882:	2203      	movs	r2, #3
 8002884:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002886:	187a      	adds	r2, r7, r1
 8002888:	23a0      	movs	r3, #160	; 0xa0
 800288a:	05db      	lsls	r3, r3, #23
 800288c:	0011      	movs	r1, r2
 800288e:	0018      	movs	r0, r3
 8002890:	f002 faae 	bl	8004df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2100      	movs	r1, #0
 8002898:	2005      	movs	r0, #5
 800289a:	f002 f9ef 	bl	8004c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800289e:	2005      	movs	r0, #5
 80028a0:	f002 fa01 	bl	8004ca6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	2007      	movs	r0, #7
 80028aa:	f002 f9e7 	bl	8004c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80028ae:	2007      	movs	r0, #7
 80028b0:	f002 f9f9 	bl	8004ca6 <HAL_NVIC_EnableIRQ>

}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b00b      	add	sp, #44	; 0x2c
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	00000f38 	.word	0x00000f38
 80028c4:	0000c007 	.word	0x0000c007
 80028c8:	50000400 	.word	0x50000400
 80028cc:	50000800 	.word	0x50000800
 80028d0:	10210000 	.word	0x10210000
 80028d4:	00000e38 	.word	0x00000e38

080028d8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80028dc:	4b21      	ldr	r3, [pc, #132]	; (8002964 <MX_I2C1_Init+0x8c>)
 80028de:	4a22      	ldr	r2, [pc, #136]	; (8002968 <MX_I2C1_Init+0x90>)
 80028e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <MX_I2C1_Init+0x8c>)
 80028e4:	4a21      	ldr	r2, [pc, #132]	; (800296c <MX_I2C1_Init+0x94>)
 80028e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <MX_I2C1_Init+0x8c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <MX_I2C1_Init+0x8c>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <MX_I2C1_Init+0x8c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <MX_I2C1_Init+0x8c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002900:	4b18      	ldr	r3, [pc, #96]	; (8002964 <MX_I2C1_Init+0x8c>)
 8002902:	2200      	movs	r2, #0
 8002904:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002906:	4b17      	ldr	r3, [pc, #92]	; (8002964 <MX_I2C1_Init+0x8c>)
 8002908:	2200      	movs	r2, #0
 800290a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <MX_I2C1_Init+0x8c>)
 800290e:	2200      	movs	r2, #0
 8002910:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <MX_I2C1_Init+0x8c>)
 8002914:	0018      	movs	r0, r3
 8002916:	f002 fc5b 	bl	80051d0 <HAL_I2C_Init>
 800291a:	0003      	movs	r3, r0
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	4193      	sbcs	r3, r2
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_I2C1_Init+0x52>
  {
    Error_Handler();
 8002926:	f001 f95d 	bl	8003be4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <MX_I2C1_Init+0x8c>)
 800292c:	2100      	movs	r1, #0
 800292e:	0018      	movs	r0, r3
 8002930:	f003 f87e 	bl	8005a30 <HAL_I2CEx_ConfigAnalogFilter>
 8002934:	0003      	movs	r3, r0
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	4193      	sbcs	r3, r2
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_I2C1_Init+0x6c>
  {
    Error_Handler();
 8002940:	f001 f950 	bl	8003be4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <MX_I2C1_Init+0x8c>)
 8002946:	2100      	movs	r1, #0
 8002948:	0018      	movs	r0, r3
 800294a:	f003 f8bd 	bl	8005ac8 <HAL_I2CEx_ConfigDigitalFilter>
 800294e:	0003      	movs	r3, r0
 8002950:	1e5a      	subs	r2, r3, #1
 8002952:	4193      	sbcs	r3, r2
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_I2C1_Init+0x86>
  {
    Error_Handler();
 800295a:	f001 f943 	bl	8003be4 <Error_Handler>
  }

}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2000028c 	.word	0x2000028c
 8002968:	40005400 	.word	0x40005400
 800296c:	00300f38 	.word	0x00300f38

08002970 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8002974:	4b21      	ldr	r3, [pc, #132]	; (80029fc <MX_I2C2_Init+0x8c>)
 8002976:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <MX_I2C2_Init+0x90>)
 8002978:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F38;
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <MX_I2C2_Init+0x8c>)
 800297c:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <MX_I2C2_Init+0x94>)
 800297e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002980:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <MX_I2C2_Init+0x8c>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <MX_I2C2_Init+0x8c>)
 8002988:	2201      	movs	r2, #1
 800298a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <MX_I2C2_Init+0x8c>)
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <MX_I2C2_Init+0x8c>)
 8002994:	2200      	movs	r2, #0
 8002996:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002998:	4b18      	ldr	r3, [pc, #96]	; (80029fc <MX_I2C2_Init+0x8c>)
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <MX_I2C2_Init+0x8c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <MX_I2C2_Init+0x8c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <MX_I2C2_Init+0x8c>)
 80029ac:	0018      	movs	r0, r3
 80029ae:	f002 fc0f 	bl	80051d0 <HAL_I2C_Init>
 80029b2:	0003      	movs	r3, r0
 80029b4:	1e5a      	subs	r2, r3, #1
 80029b6:	4193      	sbcs	r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_I2C2_Init+0x52>
  {
    Error_Handler();
 80029be:	f001 f911 	bl	8003be4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <MX_I2C2_Init+0x8c>)
 80029c4:	2100      	movs	r1, #0
 80029c6:	0018      	movs	r0, r3
 80029c8:	f003 f832 	bl	8005a30 <HAL_I2CEx_ConfigAnalogFilter>
 80029cc:	0003      	movs	r3, r0
 80029ce:	1e5a      	subs	r2, r3, #1
 80029d0:	4193      	sbcs	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_I2C2_Init+0x6c>
  {
    Error_Handler();
 80029d8:	f001 f904 	bl	8003be4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80029dc:	4b07      	ldr	r3, [pc, #28]	; (80029fc <MX_I2C2_Init+0x8c>)
 80029de:	2100      	movs	r1, #0
 80029e0:	0018      	movs	r0, r3
 80029e2:	f003 f871 	bl	8005ac8 <HAL_I2CEx_ConfigDigitalFilter>
 80029e6:	0003      	movs	r3, r0
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	4193      	sbcs	r3, r2
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_I2C2_Init+0x86>
  {
    Error_Handler();
 80029f2:	f001 f8f7 	bl	8003be4 <Error_Handler>
  }

}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200002d8 	.word	0x200002d8
 8002a00:	40005800 	.word	0x40005800
 8002a04:	00300f38 	.word	0x00300f38

08002a08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	2314      	movs	r3, #20
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	0018      	movs	r0, r3
 8002a16:	2314      	movs	r3, #20
 8002a18:	001a      	movs	r2, r3
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	f008 fa39 	bl	800ae92 <memset>
  if(i2cHandle->Instance==I2C1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a30      	ldr	r2, [pc, #192]	; (8002ae8 <HAL_I2C_MspInit+0xe0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d12a      	bne.n	8002a80 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_I2C_MspInit+0xe4>)
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_I2C_MspInit+0xe4>)
 8002a30:	2102      	movs	r1, #2
 8002a32:	430a      	orrs	r2, r1
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a36:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_I2C_MspInit+0xe4>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a42:	2114      	movs	r1, #20
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	22c0      	movs	r2, #192	; 0xc0
 8002a48:	0092      	lsls	r2, r2, #2
 8002a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2212      	movs	r2, #18
 8002a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2201      	movs	r2, #1
 8002a56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2204      	movs	r2, #4
 8002a62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_I2C_MspInit+0xe8>)
 8002a68:	0019      	movs	r1, r3
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	f002 f9c0 	bl	8004df0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_I2C_MspInit+0xe4>)
 8002a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_I2C_MspInit+0xe4>)
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	0389      	lsls	r1, r1, #14
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002a7e:	e02e      	b.n	8002ade <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_I2C_MspInit+0xec>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d129      	bne.n	8002ade <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_I2C_MspInit+0xe4>)
 8002a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_I2C_MspInit+0xe4>)
 8002a90:	2102      	movs	r1, #2
 8002a92:	430a      	orrs	r2, r1
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_I2C_MspInit+0xe4>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002aa2:	2114      	movs	r1, #20
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	22c0      	movs	r2, #192	; 0xc0
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2212      	movs	r2, #18
 8002ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2203      	movs	r2, #3
 8002abc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2206      	movs	r2, #6
 8002ac2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_I2C_MspInit+0xe8>)
 8002ac8:	0019      	movs	r1, r3
 8002aca:	0010      	movs	r0, r2
 8002acc:	f002 f990 	bl	8004df0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_I2C_MspInit+0xe4>)
 8002ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_I2C_MspInit+0xe4>)
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	03c9      	lsls	r1, r1, #15
 8002ada:	430a      	orrs	r2, r1
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b00a      	add	sp, #40	; 0x28
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40005400 	.word	0x40005400
 8002aec:	40021000 	.word	0x40021000
 8002af0:	50000400 	.word	0x50000400
 8002af4:	40005800 	.word	0x40005800

08002af8 <_Z18waitForNextTriggerv>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/*__________________________________________ San sang kich hoat ___________________________________________________*/
void waitForNextTrigger() {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af02      	add	r7, sp, #8
	SSD1306_Clear_Data();
 8002afe:	f008 f864 	bl	800abca <SSD1306_Clear_Data>
	SSD1306_Putstring(3,5, (char*)"SAN SANG KICH HOAT", &Font_5x7, SSD1306_COLOR_WHITE);
 8002b02:	4909      	ldr	r1, [pc, #36]	; (8002b28 <_Z18waitForNextTriggerv+0x30>)
 8002b04:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <_Z18waitForNextTriggerv+0x34>)
 8002b06:	2301      	movs	r3, #1
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	000b      	movs	r3, r1
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	2003      	movs	r0, #3
 8002b10:	f007 fe08 	bl	800a724 <SSD1306_Putstring>
	SYSTEM.println("SAN SANG KICH HOAT");
 8002b14:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <_Z18waitForNextTriggerv+0x34>)
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <_Z18waitForNextTriggerv+0x38>)
 8002b18:	0011      	movs	r1, r2
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f005 fdbc 	bl	8008698 <_ZN5debug7printlnEPKc>
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	2000003c 	.word	0x2000003c
 8002b2c:	0800ea90 	.word	0x0800ea90
 8002b30:	200012f0 	.word	0x200012f0

08002b34 <HAL_UART_RxCpltCallback>:


/*__________________________________________Xử lí ngắt UART___________________________________________________*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	if ( huart -> Instance == USART1 ) {
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_UART_RxCpltCallback+0x34>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d103      	bne.n	8002b4e <HAL_UART_RxCpltCallback+0x1a>
		SIM7600E.IRQhandler() ;
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_UART_RxCpltCallback+0x38>)
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f006 f8eb 	bl	8008d24 <_ZN7sim7x0010IRQhandlerEv>
	}
	if(huart->Instance == USART4){
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <HAL_UART_RxCpltCallback+0x3c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d103      	bne.n	8002b60 <HAL_UART_RxCpltCallback+0x2c>
		LRWAN.IRQhandler() ;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_UART_RxCpltCallback+0x40>)
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f005 fde0 	bl	8008720 <_ZN5lrwan10IRQhandlerEv>
	}
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40013800 	.word	0x40013800
 8002b6c:	20000324 	.word	0x20000324
 8002b70:	40004c00 	.word	0x40004c00
 8002b74:	200012f4 	.word	0x200012f4

08002b78 <HAL_GPIO_EXTI_Callback>:


/*____________________________________Xử lí ngắt của các nút nhấn______________________________________________*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	0002      	movs	r2, r0
 8002b80:	1dbb      	adds	r3, r7, #6
 8002b82:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin==WARNING_BUTTON_Pin){
 8002b84:	1dbb      	adds	r3, r7, #6
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d160      	bne.n	8002c4e <HAL_GPIO_EXTI_Callback+0xd6>
		// Vì vi điều khiển mới thức dậy và systick đã dừng trước lúc ngủ nên phải config lại systick
		SystemClock_Config ();
 8002b8c:	f000 ffa4 	bl	8003ad8 <_Z18SystemClock_Configv>
		HAL_ResumeTick();
 8002b90:	f001 fc32 	bl	80043f8 <HAL_ResumeTick>

		if((stopProcess == 0)){
 8002b94:	4b62      	ldr	r3, [pc, #392]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d11a      	bne.n	8002bd2 <HAL_GPIO_EXTI_Callback+0x5a>
			if(warningProcess == 0){
 8002b9c:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10c      	bne.n	8002bbe <HAL_GPIO_EXTI_Callback+0x46>
				warningProcess=BTN_START_WARNING_PRESSED;
 8002ba4:	4b5f      	ldr	r3, [pc, #380]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
				SSD1306_Putstring(4, 5, (char*)"SAP TOI : CANH BAO", &Font_5x7, SSD1306_COLOR_WHITE);
 8002baa:	495f      	ldr	r1, [pc, #380]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002bac:	4a5f      	ldr	r2, [pc, #380]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002bae:	2301      	movs	r3, #1
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	000b      	movs	r3, r1
 8002bb4:	2105      	movs	r1, #5
 8002bb6:	2004      	movs	r0, #4
 8002bb8:	f007 fdb4 	bl	800a724 <SSD1306_Putstring>
 8002bbc:	e012      	b.n	8002be4 <HAL_GPIO_EXTI_Callback+0x6c>
			} else{
				SSD1306_Putstring(4, 5, (char*)"DA AN CANH BAO", &Font_5x7, SSD1306_COLOR_WHITE);
 8002bbe:	495a      	ldr	r1, [pc, #360]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002bc0:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	000b      	movs	r3, r1
 8002bc8:	2105      	movs	r1, #5
 8002bca:	2004      	movs	r0, #4
 8002bcc:	f007 fdaa 	bl	800a724 <SSD1306_Putstring>
 8002bd0:	e008      	b.n	8002be4 <HAL_GPIO_EXTI_Callback+0x6c>
			}
		}else {
			SSD1306_Putstring(4, 25, (char*)"VUI LONG CHO!", &Font_5x7, SSD1306_COLOR_WHITE);
 8002bd2:	4955      	ldr	r1, [pc, #340]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	000b      	movs	r3, r1
 8002bdc:	2119      	movs	r1, #25
 8002bde:	2004      	movs	r0, #4
 8002be0:	f007 fda0 	bl	800a724 <SSD1306_Putstring>
		}


		for(uint16_t i=0;i<10000;i++);
 8002be4:	230e      	movs	r3, #14
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2200      	movs	r2, #0
 8002bea:	801a      	strh	r2, [r3, #0]
 8002bec:	230e      	movs	r3, #14
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	4a51      	ldr	r2, [pc, #324]	; (8002d38 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d806      	bhi.n	8002c06 <HAL_GPIO_EXTI_Callback+0x8e>
 8002bf8:	210e      	movs	r1, #14
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	881a      	ldrh	r2, [r3, #0]
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	3201      	adds	r2, #1
 8002c02:	801a      	strh	r2, [r3, #0]
 8002c04:	e7f2      	b.n	8002bec <HAL_GPIO_EXTI_Callback+0x74>
		while(HAL_GPIO_ReadPin(WARNING_BUTTON_GPIO_Port, WARNING_BUTTON_Pin)==0);
 8002c06:	23a0      	movs	r3, #160	; 0xa0
 8002c08:	05db      	lsls	r3, r3, #23
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f002 fa6d 	bl	80050ec <HAL_GPIO_ReadPin>
 8002c12:	0003      	movs	r3, r0
 8002c14:	425a      	negs	r2, r3
 8002c16:	4153      	adcs	r3, r2
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d000      	beq.n	8002c20 <HAL_GPIO_EXTI_Callback+0xa8>
 8002c1e:	e7f2      	b.n	8002c06 <HAL_GPIO_EXTI_Callback+0x8e>
		for(uint16_t i=0;i<10000;i++);
 8002c20:	230c      	movs	r3, #12
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2200      	movs	r2, #0
 8002c26:	801a      	strh	r2, [r3, #0]
 8002c28:	230c      	movs	r3, #12
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	4a42      	ldr	r2, [pc, #264]	; (8002d38 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d806      	bhi.n	8002c42 <HAL_GPIO_EXTI_Callback+0xca>
 8002c34:	210c      	movs	r1, #12
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	881a      	ldrh	r2, [r3, #0]
 8002c3a:	187b      	adds	r3, r7, r1
 8002c3c:	3201      	adds	r2, #1
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	e7f2      	b.n	8002c28 <HAL_GPIO_EXTI_Callback+0xb0>
		EXTI->PR |= WARNING_BUTTON_Pin;
 8002c42:	4b3e      	ldr	r3, [pc, #248]	; (8002d3c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002c48:	2101      	movs	r1, #1
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	615a      	str	r2, [r3, #20]
	}
	if(GPIO_Pin==STOP_BUTTON_Pin){
 8002c4e:	1dbb      	adds	r3, r7, #6
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d160      	bne.n	8002d18 <HAL_GPIO_EXTI_Callback+0x1a0>
		// Vì vi điều khiển mới thức dậy và systick đã dừng trước lúc ngủ nên phải config lại systick
		SystemClock_Config ();
 8002c56:	f000 ff3f 	bl	8003ad8 <_Z18SystemClock_Configv>
		HAL_ResumeTick();
 8002c5a:	f001 fbcd 	bl	80043f8 <HAL_ResumeTick>

		if( warningProcess==0 ){
 8002c5e:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11a      	bne.n	8002c9c <HAL_GPIO_EXTI_Callback+0x124>
			if(stopProcess == 0){
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10c      	bne.n	8002c88 <HAL_GPIO_EXTI_Callback+0x110>
				stopProcess =BTN_STOP_WARNING_PRESSED;
 8002c6e:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002c70:	2202      	movs	r2, #2
 8002c72:	701a      	strb	r2, [r3, #0]
				SSD1306_Putstring(4, 5, (char*)"SAP TOI : DUNG ", &Font_5x7, SSD1306_COLOR_WHITE);
 8002c74:	492c      	ldr	r1, [pc, #176]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002c76:	4a32      	ldr	r2, [pc, #200]	; (8002d40 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002c78:	2301      	movs	r3, #1
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	000b      	movs	r3, r1
 8002c7e:	2105      	movs	r1, #5
 8002c80:	2004      	movs	r0, #4
 8002c82:	f007 fd4f 	bl	800a724 <SSD1306_Putstring>
 8002c86:	e012      	b.n	8002cae <HAL_GPIO_EXTI_Callback+0x136>
			}else{
				SSD1306_Putstring(4, 5, (char*)"DA AN NUT DUNG ", &Font_5x7, SSD1306_COLOR_WHITE);
 8002c88:	4927      	ldr	r1, [pc, #156]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002c8a:	4a2e      	ldr	r2, [pc, #184]	; (8002d44 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	000b      	movs	r3, r1
 8002c92:	2105      	movs	r1, #5
 8002c94:	2004      	movs	r0, #4
 8002c96:	f007 fd45 	bl	800a724 <SSD1306_Putstring>
 8002c9a:	e008      	b.n	8002cae <HAL_GPIO_EXTI_Callback+0x136>
			}
		}else {
			SSD1306_Putstring(4, 25, (char*)"VUI LONG CHO!", &Font_5x7, SSD1306_COLOR_WHITE);
 8002c9c:	4922      	ldr	r1, [pc, #136]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002c9e:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	000b      	movs	r3, r1
 8002ca6:	2119      	movs	r1, #25
 8002ca8:	2004      	movs	r0, #4
 8002caa:	f007 fd3b 	bl	800a724 <SSD1306_Putstring>
		}

		for(uint16_t i=0;i<10000;i++);
 8002cae:	230a      	movs	r3, #10
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	230a      	movs	r3, #10
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	4a1e      	ldr	r2, [pc, #120]	; (8002d38 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d806      	bhi.n	8002cd0 <HAL_GPIO_EXTI_Callback+0x158>
 8002cc2:	210a      	movs	r1, #10
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	881a      	ldrh	r2, [r3, #0]
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	3201      	adds	r2, #1
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e7f2      	b.n	8002cb6 <HAL_GPIO_EXTI_Callback+0x13e>
		while(HAL_GPIO_ReadPin(STOP_BUTTON_GPIO_Port, STOP_BUTTON_Pin)==0);
 8002cd0:	23a0      	movs	r3, #160	; 0xa0
 8002cd2:	05db      	lsls	r3, r3, #23
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f002 fa08 	bl	80050ec <HAL_GPIO_ReadPin>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	425a      	negs	r2, r3
 8002ce0:	4153      	adcs	r3, r2
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d000      	beq.n	8002cea <HAL_GPIO_EXTI_Callback+0x172>
 8002ce8:	e7f2      	b.n	8002cd0 <HAL_GPIO_EXTI_Callback+0x158>
		for(uint16_t i=0;i<10000;i++);
 8002cea:	2308      	movs	r3, #8
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2200      	movs	r2, #0
 8002cf0:	801a      	strh	r2, [r3, #0]
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d806      	bhi.n	8002d0c <HAL_GPIO_EXTI_Callback+0x194>
 8002cfe:	2108      	movs	r1, #8
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	187b      	adds	r3, r7, r1
 8002d06:	3201      	adds	r2, #1
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	e7f2      	b.n	8002cf2 <HAL_GPIO_EXTI_Callback+0x17a>
		EXTI->PR |= STOP_BUTTON_Pin;
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002d12:	2102      	movs	r1, #2
 8002d14:	430a      	orrs	r2, r1
 8002d16:	615a      	str	r2, [r3, #20]
	}
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20001af1 	.word	0x20001af1
 8002d24:	20001af0 	.word	0x20001af0
 8002d28:	2000003c 	.word	0x2000003c
 8002d2c:	0800eaa4 	.word	0x0800eaa4
 8002d30:	0800eab8 	.word	0x0800eab8
 8002d34:	0800eac8 	.word	0x0800eac8
 8002d38:	0000270f 	.word	0x0000270f
 8002d3c:	40010400 	.word	0x40010400
 8002d40:	0800ead8 	.word	0x0800ead8
 8002d44:	0800eae8 	.word	0x0800eae8

08002d48 <_Z7readPinv>:
/* USER CODE BEGIN 0 */


/*_____________________________________________Đọc dữ liệu Pin____________________________________________________*/

char* readPin() {
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0

	 static char bat[3];
	 uint16_t adc;
	 float battery;
	 HAL_ADC_Start(&hadc);
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <_Z7readPinv+0xb0>)
 8002d50:	0018      	movs	r0, r3
 8002d52:	f001 fcd3 	bl	80046fc <HAL_ADC_Start>
	 adc=HAL_ADC_GetValue(&hadc);
 8002d56:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <_Z7readPinv+0xb0>)
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f001 fd23 	bl	80047a4 <HAL_ADC_GetValue>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	1dbb      	adds	r3, r7, #6
 8002d62:	801a      	strh	r2, [r3, #0]
	 battery=(((adc-1625.0)/2060.0)*100);
 8002d64:	1dbb      	adds	r3, r7, #6
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff fb0f 	bl	800238c <__aeabi_i2d>
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <_Z7readPinv+0xb4>)
 8002d72:	f7fe ff71 	bl	8001c58 <__aeabi_dsub>
 8002d76:	0003      	movs	r3, r0
 8002d78:	000c      	movs	r4, r1
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	0021      	movs	r1, r4
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <_Z7readPinv+0xb8>)
 8002d82:	f7fe f8ed 	bl	8000f60 <__aeabi_ddiv>
 8002d86:	0003      	movs	r3, r0
 8002d88:	000c      	movs	r4, r1
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	0021      	movs	r1, r4
 8002d8e:	2200      	movs	r2, #0
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <_Z7readPinv+0xbc>)
 8002d92:	f7fe fcef 	bl	8001774 <__aeabi_dmul>
 8002d96:	0003      	movs	r3, r0
 8002d98:	000c      	movs	r4, r1
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	0021      	movs	r1, r4
 8002d9e:	f7ff fb61 	bl	8002464 <__aeabi_d2f>
 8002da2:	1c03      	adds	r3, r0, #0
 8002da4:	603b      	str	r3, [r7, #0]
	 if(battery>99){
 8002da6:	4918      	ldr	r1, [pc, #96]	; (8002e08 <_Z7readPinv+0xc0>)
 8002da8:	6838      	ldr	r0, [r7, #0]
 8002daa:	f7fd fb99 	bl	80004e0 <__aeabi_fcmpgt>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d006      	beq.n	8002dc0 <_Z7readPinv+0x78>
		 sprintf(bat,"%d",99);
 8002db2:	4916      	ldr	r1, [pc, #88]	; (8002e0c <_Z7readPinv+0xc4>)
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <_Z7readPinv+0xc8>)
 8002db6:	2263      	movs	r2, #99	; 0x63
 8002db8:	0018      	movs	r0, r3
 8002dba:	f008 ff8d 	bl	800bcd8 <siprintf>
 8002dbe:	e015      	b.n	8002dec <_Z7readPinv+0xa4>
	 }else if(battery<0){
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	6838      	ldr	r0, [r7, #0]
 8002dc4:	f7fd fb78 	bl	80004b8 <__aeabi_fcmplt>
 8002dc8:	1e03      	subs	r3, r0, #0
 8002dca:	d006      	beq.n	8002dda <_Z7readPinv+0x92>
		 sprintf(bat,"%d",0);
 8002dcc:	490f      	ldr	r1, [pc, #60]	; (8002e0c <_Z7readPinv+0xc4>)
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <_Z7readPinv+0xc8>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f008 ff80 	bl	800bcd8 <siprintf>
 8002dd8:	e008      	b.n	8002dec <_Z7readPinv+0xa4>
	 }else{
		 sprintf(bat,"%d",(int)battery);
 8002dda:	6838      	ldr	r0, [r7, #0]
 8002ddc:	f7fd fd84 	bl	80008e8 <__aeabi_f2iz>
 8002de0:	0002      	movs	r2, r0
 8002de2:	490a      	ldr	r1, [pc, #40]	; (8002e0c <_Z7readPinv+0xc4>)
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <_Z7readPinv+0xc8>)
 8002de6:	0018      	movs	r0, r3
 8002de8:	f008 ff76 	bl	800bcd8 <siprintf>
	 }
	 return bat;
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <_Z7readPinv+0xc8>)
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b003      	add	sp, #12
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	20000230 	.word	0x20000230
 8002dfc:	40996400 	.word	0x40996400
 8002e00:	40a01800 	.word	0x40a01800
 8002e04:	40590000 	.word	0x40590000
 8002e08:	42c60000 	.word	0x42c60000
 8002e0c:	0800eaf8 	.word	0x0800eaf8
 8002e10:	20001b04 	.word	0x20001b04

08002e14 <_Z9preHeaderv>:


/*_________________________Hiển thị cột sóng viễn thông, biểu tượng lrwan, thời lượng pin __________________________*/
void preHeader(){
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b090      	sub	sp, #64	; 0x40
 8002e18:	af02      	add	r7, sp, #8
	SSD1306_Clear_Header();
 8002e1a:	f007 fee6 	bl	800abea <SSD1306_Clear_Header>
	SSD1306_DrawBitmap(0, 0, simSignal, 15, 15, SSD1306_COLOR_WHITE );
 8002e1e:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <_Z9preHeaderv+0xac>)
 8002e20:	2301      	movs	r3, #1
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	230f      	movs	r3, #15
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	230f      	movs	r3, #15
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f007 f8fb 	bl	800a028 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8002e32:	f007 fa65 	bl	800a300 <SSD1306_UpdateScreen>
	// Hiển thị Pin
	char bat[50]="";
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	222e      	movs	r2, #46	; 0x2e
 8002e40:	2100      	movs	r1, #0
 8002e42:	0018      	movs	r0, r3
 8002e44:	f008 f825 	bl	800ae92 <memset>
	strcat( bat, readPin());
 8002e48:	f7ff ff7e 	bl	8002d48 <_Z7readPinv>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f008 ff60 	bl	800bd18 <strcat>

	if (atoi( bat )>20){
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f007 ffd6 	bl	800ae0c <atoi>
 8002e60:	0003      	movs	r3, r0
 8002e62:	2201      	movs	r2, #1
 8002e64:	2b14      	cmp	r3, #20
 8002e66:	dc01      	bgt.n	8002e6c <_Z9preHeaderv+0x58>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	1c1a      	adds	r2, r3, #0
 8002e6c:	b2d3      	uxtb	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <_Z9preHeaderv+0x74>
	SSD1306_DrawBitmap( 90, 1, fullBat, 14, 15, SSD1306_COLOR_WHITE );
 8002e72:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <_Z9preHeaderv+0xb0>)
 8002e74:	2301      	movs	r3, #1
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	230f      	movs	r3, #15
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	230e      	movs	r3, #14
 8002e7e:	2101      	movs	r1, #1
 8002e80:	205a      	movs	r0, #90	; 0x5a
 8002e82:	f007 f8d1 	bl	800a028 <SSD1306_DrawBitmap>
 8002e86:	e009      	b.n	8002e9c <_Z9preHeaderv+0x88>
	}else {
	SSD1306_DrawBitmap( 90, 1, lowBat, 9, 15, SSD1306_COLOR_WHITE );
 8002e88:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <_Z9preHeaderv+0xb4>)
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	230f      	movs	r3, #15
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2309      	movs	r3, #9
 8002e94:	2101      	movs	r1, #1
 8002e96:	205a      	movs	r0, #90	; 0x5a
 8002e98:	f007 f8c6 	bl	800a028 <SSD1306_DrawBitmap>
	}

//	strcat(bat,"%");
//	SSD1306_GotoXY ( 103, 5);
//	SSD1306_Puts ( (char*)bat, &Font_5x7, SSD1306_COLOR_WHITE );
	SSD1306_UpdateScreen();
 8002e9c:	f007 fa30 	bl	800a300 <SSD1306_UpdateScreen>

	// Hiển thị cây cột sóng

	SSD1306_DrawBitmap( 40, 1, signal, 23, 15, SSD1306_COLOR_WHITE );
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <_Z9preHeaderv+0xb8>)
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	230f      	movs	r3, #15
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2317      	movs	r3, #23
 8002eac:	2101      	movs	r1, #1
 8002eae:	2028      	movs	r0, #40	; 0x28
 8002eb0:	f007 f8ba 	bl	800a028 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8002eb4:	f007 fa24 	bl	800a300 <SSD1306_UpdateScreen>
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b00e      	add	sp, #56	; 0x38
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	0800f828 	.word	0x0800f828
 8002ec4:	0800f7b8 	.word	0x0800f7b8
 8002ec8:	0800f7d8 	.word	0x0800f7d8
 8002ecc:	0800f7f8 	.word	0x0800f7f8

08002ed0 <_Z13displayHeaderv>:

/*_______________________ Hiển thị sóng viễn thông, tình trạng kết nối lrwan, thời lượng pin __________________________*/
void displayHeader(){
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b090      	sub	sp, #64	; 0x40
 8002ed4:	af02      	add	r7, sp, #8
	SSD1306_Clear_Header();
 8002ed6:	f007 fe88 	bl	800abea <SSD1306_Clear_Header>

	// Hiển thị cột sóng
	SSD1306_DrawBitmap(0, 0, simSignal, 15, 15, SSD1306_COLOR_WHITE );
 8002eda:	4a62      	ldr	r2, [pc, #392]	; (8003064 <_Z13displayHeaderv+0x194>)
 8002edc:	2301      	movs	r3, #1
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	230f      	movs	r3, #15
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f007 f89d 	bl	800a028 <SSD1306_DrawBitmap>
	if ( SIM7600E.getIntCSQ() > 6 ){
 8002eee:	4b5e      	ldr	r3, [pc, #376]	; (8003068 <_Z13displayHeaderv+0x198>)
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f006 feaf 	bl	8009c54 <_ZN7sim7x009getIntCSQEv>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	2201      	movs	r2, #1
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	dc01      	bgt.n	8002f02 <_Z13displayHeaderv+0x32>
 8002efe:	2300      	movs	r3, #0
 8002f00:	1c1a      	adds	r2, r3, #0
 8002f02:	b2d3      	uxtb	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <_Z13displayHeaderv+0x48>
		SSD1306_DrawFilledRectangle(13, 10, 2, 5, SSD1306_COLOR_WHITE );
 8002f08:	2301      	movs	r3, #1
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2305      	movs	r3, #5
 8002f0e:	2202      	movs	r2, #2
 8002f10:	210a      	movs	r1, #10
 8002f12:	200d      	movs	r0, #13
 8002f14:	f007 fde4 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	}
	if ( SIM7600E.getIntCSQ() > 12 ){
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <_Z13displayHeaderv+0x198>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f006 fe9a 	bl	8009c54 <_ZN7sim7x009getIntCSQEv>
 8002f20:	0003      	movs	r3, r0
 8002f22:	2201      	movs	r2, #1
 8002f24:	2b0c      	cmp	r3, #12
 8002f26:	dc01      	bgt.n	8002f2c <_Z13displayHeaderv+0x5c>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	1c1a      	adds	r2, r3, #0
 8002f2c:	b2d3      	uxtb	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <_Z13displayHeaderv+0x72>
		SSD1306_DrawFilledRectangle(17, 7, 2, 8, SSD1306_COLOR_WHITE );
 8002f32:	2301      	movs	r3, #1
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2308      	movs	r3, #8
 8002f38:	2202      	movs	r2, #2
 8002f3a:	2107      	movs	r1, #7
 8002f3c:	2011      	movs	r0, #17
 8002f3e:	f007 fdcf 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	}
	if ( SIM7600E.getIntCSQ() > 18){
 8002f42:	4b49      	ldr	r3, [pc, #292]	; (8003068 <_Z13displayHeaderv+0x198>)
 8002f44:	0018      	movs	r0, r3
 8002f46:	f006 fe85 	bl	8009c54 <_ZN7sim7x009getIntCSQEv>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2b12      	cmp	r3, #18
 8002f50:	dc01      	bgt.n	8002f56 <_Z13displayHeaderv+0x86>
 8002f52:	2300      	movs	r3, #0
 8002f54:	1c1a      	adds	r2, r3, #0
 8002f56:	b2d3      	uxtb	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <_Z13displayHeaderv+0x9c>
		SSD1306_DrawFilledRectangle(21, 4, 2, 11, SSD1306_COLOR_WHITE );
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	230b      	movs	r3, #11
 8002f62:	2202      	movs	r2, #2
 8002f64:	2104      	movs	r1, #4
 8002f66:	2015      	movs	r0, #21
 8002f68:	f007 fdba 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	}
	if ( SIM7600E.getIntCSQ() > 24){
 8002f6c:	4b3e      	ldr	r3, [pc, #248]	; (8003068 <_Z13displayHeaderv+0x198>)
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f006 fe70 	bl	8009c54 <_ZN7sim7x009getIntCSQEv>
 8002f74:	0003      	movs	r3, r0
 8002f76:	2201      	movs	r2, #1
 8002f78:	2b18      	cmp	r3, #24
 8002f7a:	dc01      	bgt.n	8002f80 <_Z13displayHeaderv+0xb0>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	1c1a      	adds	r2, r3, #0
 8002f80:	b2d3      	uxtb	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <_Z13displayHeaderv+0xc6>
		SSD1306_DrawFilledRectangle(25, 1, 2, 14, SSD1306_COLOR_WHITE );
 8002f86:	2301      	movs	r3, #1
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	230e      	movs	r3, #14
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	2101      	movs	r1, #1
 8002f90:	2019      	movs	r0, #25
 8002f92:	f007 fda5 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	}
	SSD1306_UpdateScreen();
 8002f96:	f007 f9b3 	bl	800a300 <SSD1306_UpdateScreen>

	// Hiển thị Pin
	char bat[50]="";
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	222e      	movs	r2, #46	; 0x2e
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f007 ff73 	bl	800ae92 <memset>
	strcat( bat, readPin());
 8002fac:	f7ff fecc 	bl	8002d48 <_Z7readPinv>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	1d3b      	adds	r3, r7, #4
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f008 feae 	bl	800bd18 <strcat>

	if (atoi( bat )>20){
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f007 ff24 	bl	800ae0c <atoi>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	2b14      	cmp	r3, #20
 8002fca:	dc01      	bgt.n	8002fd0 <_Z13displayHeaderv+0x100>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	1c1a      	adds	r2, r3, #0
 8002fd0:	b2d3      	uxtb	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <_Z13displayHeaderv+0x11c>
	SSD1306_DrawBitmap( 90, 1, fullBat, 14, 15, SSD1306_COLOR_WHITE );
 8002fd6:	4a25      	ldr	r2, [pc, #148]	; (800306c <_Z13displayHeaderv+0x19c>)
 8002fd8:	2301      	movs	r3, #1
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	230f      	movs	r3, #15
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	230e      	movs	r3, #14
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	205a      	movs	r0, #90	; 0x5a
 8002fe6:	f007 f81f 	bl	800a028 <SSD1306_DrawBitmap>
 8002fea:	e00f      	b.n	800300c <_Z13displayHeaderv+0x13c>
	}else {
	SSD1306_DrawBitmap( 90, 1, lowBat, 9, 15, SSD1306_COLOR_WHITE );
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <_Z13displayHeaderv+0x1a0>)
 8002fee:	2301      	movs	r3, #1
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	230f      	movs	r3, #15
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2309      	movs	r3, #9
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	205a      	movs	r0, #90	; 0x5a
 8002ffc:	f007 f814 	bl	800a028 <SSD1306_DrawBitmap>
	SIM7600E.sendSMS(LOW_BAT_PHONE_NUMBER_1, LOW_BAT_MSG);
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <_Z13displayHeaderv+0x1a4>)
 8003002:	491d      	ldr	r1, [pc, #116]	; (8003078 <_Z13displayHeaderv+0x1a8>)
 8003004:	4b18      	ldr	r3, [pc, #96]	; (8003068 <_Z13displayHeaderv+0x198>)
 8003006:	0018      	movs	r0, r3
 8003008:	f006 fe9c 	bl	8009d44 <_ZN7sim7x007sendSMSEPKcS1_>
	}

	strcat(bat,"%");
 800300c:	1d3b      	adds	r3, r7, #4
 800300e:	0018      	movs	r0, r3
 8003010:	f7fd f87a 	bl	8000108 <strlen>
 8003014:	0003      	movs	r3, r0
 8003016:	001a      	movs	r2, r3
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	189a      	adds	r2, r3, r2
 800301c:	4b17      	ldr	r3, [pc, #92]	; (800307c <_Z13displayHeaderv+0x1ac>)
 800301e:	0010      	movs	r0, r2
 8003020:	0019      	movs	r1, r3
 8003022:	2302      	movs	r3, #2
 8003024:	001a      	movs	r2, r3
 8003026:	f007 ff2b 	bl	800ae80 <memcpy>
	SSD1306_GotoXY ( 103, 5);
 800302a:	2105      	movs	r1, #5
 800302c:	2067      	movs	r0, #103	; 0x67
 800302e:	f007 fa23 	bl	800a478 <SSD1306_GotoXY>
	SSD1306_Puts ( (char*)bat, &Font_5x7, SSD1306_COLOR_WHITE );
 8003032:	4913      	ldr	r1, [pc, #76]	; (8003080 <_Z13displayHeaderv+0x1b0>)
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	2201      	movs	r2, #1
 8003038:	0018      	movs	r0, r3
 800303a:	f007 fb49 	bl	800a6d0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800303e:	f007 f95f 	bl	800a300 <SSD1306_UpdateScreen>

	// Hiển thị cây cột sóng
	SSD1306_DrawBitmap( 40, 1, signal, 23, 15, SSD1306_COLOR_WHITE );
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <_Z13displayHeaderv+0x1b4>)
 8003044:	2301      	movs	r3, #1
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	230f      	movs	r3, #15
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2317      	movs	r3, #23
 800304e:	2101      	movs	r1, #1
 8003050:	2028      	movs	r0, #40	; 0x28
 8003052:	f006 ffe9 	bl	800a028 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8003056:	f007 f953 	bl	800a300 <SSD1306_UpdateScreen>
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b00e      	add	sp, #56	; 0x38
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	0800f828 	.word	0x0800f828
 8003068:	20000324 	.word	0x20000324
 800306c:	0800f7b8 	.word	0x0800f7b8
 8003070:	0800f7d8 	.word	0x0800f7d8
 8003074:	0800eafc 	.word	0x0800eafc
 8003078:	0800eb04 	.word	0x0800eb04
 800307c:	0800eb10 	.word	0x0800eb10
 8003080:	2000003c 	.word	0x2000003c
 8003084:	0800f7f8 	.word	0x0800f7f8

08003088 <_Z18simCheckingRespondPKc>:


/*____________________Kiểm tra sim đã hoàn thành cảnh báo chưa, nếu chưa thì cảnh báo bằng lrwan_______________________*/

bool simCheckingRespond(const char* resMsg){
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

	if ( SIM7600E.checkingRespond( resMsg, 20000) == 1 ){
 8003090:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <_Z18simCheckingRespondPKc+0x48>)
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <_Z18simCheckingRespondPKc+0x4c>)
 8003096:	0018      	movs	r0, r3
 8003098:	f006 f992 	bl	80093c0 <_ZN7sim7x0015checkingRespondEPKcm>
 800309c:	0003      	movs	r3, r0
 800309e:	3b01      	subs	r3, #1
 80030a0:	425a      	negs	r2, r3
 80030a2:	4153      	adcs	r3, r2
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <_Z18simCheckingRespondPKc+0x32>
	   SYSTEM.println( "OK" );
 80030aa:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <_Z18simCheckingRespondPKc+0x50>)
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <_Z18simCheckingRespondPKc+0x54>)
 80030ae:	0011      	movs	r1, r2
 80030b0:	0018      	movs	r0, r3
 80030b2:	f005 faf1 	bl	8008698 <_ZN5debug7printlnEPKc>
	   return 1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e006      	b.n	80030c8 <_Z18simCheckingRespondPKc+0x40>
	}else {

		SYSTEM.println("Button was not responded by SIM");
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <_Z18simCheckingRespondPKc+0x58>)
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <_Z18simCheckingRespondPKc+0x54>)
 80030be:	0011      	movs	r1, r2
 80030c0:	0018      	movs	r0, r3
 80030c2:	f005 fae9 	bl	8008698 <_ZN5debug7printlnEPKc>
		return 0;
 80030c6:	2300      	movs	r3, #0
	}
	return 0 ;
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	00004e20 	.word	0x00004e20
 80030d4:	20000324 	.word	0x20000324
 80030d8:	0800eb14 	.word	0x0800eb14
 80030dc:	200012f0 	.word	0x200012f0
 80030e0:	0800eb18 	.word	0x0800eb18

080030e4 <_Z27lrwanSendAndCheckingRespondPKcS0_>:


/*_____________________________________Kiểm tra lrwan đã hoàn thành cảnh báo chưa_______________________________________*/
//
int lrwanSendAndCheckingRespond(const char* sms, const char* expectAnswer ){
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b093      	sub	sp, #76	; 0x4c
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]

	char payload[50]={0};
 80030ee:	240c      	movs	r4, #12
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	0018      	movs	r0, r3
 80030f4:	2332      	movs	r3, #50	; 0x32
 80030f6:	001a      	movs	r2, r3
 80030f8:	2100      	movs	r1, #0
 80030fa:	f007 feca 	bl	800ae92 <memset>
	strcat(payload,sms);
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	193b      	adds	r3, r7, r4
 8003102:	0011      	movs	r1, r2
 8003104:	0018      	movs	r0, r3
 8003106:	f008 fe07 	bl	800bd18 <strcat>
	strcat(payload,"\r");
 800310a:	193b      	adds	r3, r7, r4
 800310c:	0018      	movs	r0, r3
 800310e:	f7fc fffb 	bl	8000108 <strlen>
 8003112:	0003      	movs	r3, r0
 8003114:	001a      	movs	r2, r3
 8003116:	193b      	adds	r3, r7, r4
 8003118:	189a      	adds	r2, r3, r2
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <_Z27lrwanSendAndCheckingRespondPKcS0_+0x74>)
 800311c:	0010      	movs	r0, r2
 800311e:	0019      	movs	r1, r3
 8003120:	2302      	movs	r3, #2
 8003122:	001a      	movs	r2, r3
 8003124:	f007 feac 	bl	800ae80 <memcpy>

	// setup payload dữ liệu gửi lora
	if(LRWAN.sendData(sms,expectAnswer,20000,3)!=0){
 8003128:	4c0c      	ldr	r4, [pc, #48]	; (800315c <_Z27lrwanSendAndCheckingRespondPKcS0_+0x78>)
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	480c      	ldr	r0, [pc, #48]	; (8003160 <_Z27lrwanSendAndCheckingRespondPKcS0_+0x7c>)
 8003130:	2303      	movs	r3, #3
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	0023      	movs	r3, r4
 8003136:	f005 fd4f 	bl	8008bd8 <_ZN5lrwan8sendDataEPKcS1_ii>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d001      	beq.n	8003142 <_Z27lrwanSendAndCheckingRespondPKcS0_+0x5e>
		return 1;
 800313e:	2301      	movs	r3, #1
 8003140:	e006      	b.n	8003150 <_Z27lrwanSendAndCheckingRespondPKcS0_+0x6c>
	}else{
		SYSTEM.println("!!!!Failed to send by LORAWAN!!!\n");
 8003142:	4a08      	ldr	r2, [pc, #32]	; (8003164 <_Z27lrwanSendAndCheckingRespondPKcS0_+0x80>)
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <_Z27lrwanSendAndCheckingRespondPKcS0_+0x84>)
 8003146:	0011      	movs	r1, r2
 8003148:	0018      	movs	r0, r3
 800314a:	f005 faa5 	bl	8008698 <_ZN5debug7printlnEPKc>
		return 0;
 800314e:	2300      	movs	r3, #0
	}
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b011      	add	sp, #68	; 0x44
 8003156:	bd90      	pop	{r4, r7, pc}
 8003158:	0800eb38 	.word	0x0800eb38
 800315c:	00004e20 	.word	0x00004e20
 8003160:	200012f4 	.word	0x200012f4
 8003164:	0800eb3c 	.word	0x0800eb3c
 8003168:	200012f0 	.word	0x200012f0

0800316c <_Z17prepareForProcessv>:

}


/*_________________________________________________Ngắt nguồn SIM, AT MEGA_______________________________________________*/
void prepareForProcess(){
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_ONOFF_GPIO_Port, SIM7600_ONOFF_Pin, (GPIO_PinState)1);
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	01db      	lsls	r3, r3, #7
 8003174:	4813      	ldr	r0, [pc, #76]	; (80031c4 <_Z17prepareForProcessv+0x58>)
 8003176:	2201      	movs	r2, #1
 8003178:	0019      	movs	r1, r3
 800317a:	f001 ffd4 	bl	8005126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LRWAN_ONOFF_GPIO_Port, LRWAN_ONOFF_Pin, (GPIO_PinState)1);
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	4810      	ldr	r0, [pc, #64]	; (80031c4 <_Z17prepareForProcessv+0x58>)
 8003184:	2201      	movs	r2, #1
 8003186:	0019      	movs	r1, r3
 8003188:	f001 ffcd 	bl	8005126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( SIM7600_FLIGHTMODE_GPIO_Port, SIM7600_FLIGHTMODE_Pin, (GPIO_PinState)0) ;
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <_Z17prepareForProcessv+0x58>)
 800318e:	2200      	movs	r2, #0
 8003190:	2102      	movs	r1, #2
 8003192:	0018      	movs	r0, r3
 8003194:	f001 ffc7 	bl	8005126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( SIM7600_PWRKEY_GPIO_Port, SIM7600_PWRKEY_Pin, (GPIO_PinState)1) ;
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <_Z17prepareForProcessv+0x58>)
 800319a:	2201      	movs	r2, #1
 800319c:	2101      	movs	r1, #1
 800319e:	0018      	movs	r0, r3
 80031a0:	f001 ffc1 	bl	8005126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( SIM7600_RESET_GPIO_Port, SIM7600_RESET_Pin, (GPIO_PinState)0) ;
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <_Z17prepareForProcessv+0x58>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	2104      	movs	r1, #4
 80031aa:	0018      	movs	r0, r3
 80031ac:	f001 ffbb 	bl	8005126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin,(GPIO_PinState)0);
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <_Z17prepareForProcessv+0x5c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	2140      	movs	r1, #64	; 0x40
 80031b6:	0018      	movs	r0, r3
 80031b8:	f001 ffb5 	bl	8005126 <HAL_GPIO_WritePin>


}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	50000400 	.word	0x50000400
 80031c8:	50000800 	.word	0x50000800

080031cc <_Z4initv>:

/*____________________________________________Khởi tạo các thông số, Sim, lrwan, oled_____________________________________*/

void init(){
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af02      	add	r7, sp, #8

	SSD1306_Init();
 80031d2:	f006 ffc7 	bl	800a164 <SSD1306_Init>
	SSD1306_Clear();
 80031d6:	f007 fcee 	bl	800abb6 <SSD1306_Clear>
	SSD1306_DrawBitmap(2, 16, logo, 128, 35, SSD1306_COLOR_WHITE);
 80031da:	4a23      	ldr	r2, [pc, #140]	; (8003268 <_Z4initv+0x9c>)
 80031dc:	2301      	movs	r3, #1
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	2323      	movs	r3, #35	; 0x23
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	2110      	movs	r1, #16
 80031e8:	2002      	movs	r0, #2
 80031ea:	f006 ff1d 	bl	800a028 <SSD1306_DrawBitmap>
	SSD1306_Putstring(4,15, (char*)"DANG KHOI DONG...", &Font_5x7, SSD1306_COLOR_WHITE);
 80031ee:	491f      	ldr	r1, [pc, #124]	; (800326c <_Z4initv+0xa0>)
 80031f0:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <_Z4initv+0xa4>)
 80031f2:	2301      	movs	r3, #1
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	000b      	movs	r3, r1
 80031f8:	210f      	movs	r1, #15
 80031fa:	2004      	movs	r0, #4
 80031fc:	f007 fa92 	bl	800a724 <SSD1306_Putstring>
	SSD1306_UpdateScreen();
 8003200:	f007 f87e 	bl	800a300 <SSD1306_UpdateScreen>
	// Hiển thị logo
	prepareForProcess();
 8003204:	f7ff ffb2 	bl	800316c <_Z17prepareForProcessv>
	preHeader();
 8003208:	f7ff fe04 	bl	8002e14 <_Z9preHeaderv>
	LRWAN.init() ;
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <_Z4initv+0xa8>)
 800320e:	0018      	movs	r0, r3
 8003210:	f005 fcce 	bl	8008bb0 <_ZN5lrwan4initEv>
	if(SIM7600E.init(30000)==1){
 8003214:	4a18      	ldr	r2, [pc, #96]	; (8003278 <_Z4initv+0xac>)
 8003216:	4b19      	ldr	r3, [pc, #100]	; (800327c <_Z4initv+0xb0>)
 8003218:	0011      	movs	r1, r2
 800321a:	0018      	movs	r0, r3
 800321c:	f005 fe64 	bl	8008ee8 <_ZN7sim7x004initEi>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d009      	beq.n	8003238 <_Z4initv+0x6c>
		SSD1306_Putstring(4,5, (char*)"HOAN THANH KHOI DONG!", &Font_5x7, SSD1306_COLOR_WHITE);
 8003224:	4911      	ldr	r1, [pc, #68]	; (800326c <_Z4initv+0xa0>)
 8003226:	4a16      	ldr	r2, [pc, #88]	; (8003280 <_Z4initv+0xb4>)
 8003228:	2301      	movs	r3, #1
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	000b      	movs	r3, r1
 800322e:	2105      	movs	r1, #5
 8003230:	2004      	movs	r0, #4
 8003232:	f007 fa77 	bl	800a724 <SSD1306_Putstring>
 8003236:	e008      	b.n	800324a <_Z4initv+0x7e>
	}else
		SSD1306_Putstring(4,30, (char*)"SIM BI LOI!", &Font_5x7, SSD1306_COLOR_WHITE);
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <_Z4initv+0xa0>)
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <_Z4initv+0xb8>)
 800323c:	2301      	movs	r3, #1
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	000b      	movs	r3, r1
 8003242:	211e      	movs	r1, #30
 8003244:	2004      	movs	r0, #4
 8003246:	f007 fa6d 	bl	800a724 <SSD1306_Putstring>
	// hiển thị header sau khi khởi động xong
	displayHeader();
 800324a:	f7ff fe41 	bl	8002ed0 <_Z13displayHeaderv>
	SYSTEM.println("DONE INIT");
 800324e:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <_Z4initv+0xbc>)
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <_Z4initv+0xc0>)
 8003252:	0011      	movs	r1, r2
 8003254:	0018      	movs	r0, r3
 8003256:	f005 fa1f 	bl	8008698 <_ZN5debug7printlnEPKc>
	HAL_Delay(TIME_MSG_DISPLAY);
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <_Z4initv+0xc4>)
 800325c:	0018      	movs	r0, r3
 800325e:	f001 f8a9 	bl	80043b4 <HAL_Delay>
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	0800f848 	.word	0x0800f848
 800326c:	2000003c 	.word	0x2000003c
 8003270:	0800eb60 	.word	0x0800eb60
 8003274:	200012f4 	.word	0x200012f4
 8003278:	00007530 	.word	0x00007530
 800327c:	20000324 	.word	0x20000324
 8003280:	0800eb74 	.word	0x0800eb74
 8003284:	0800eb8c 	.word	0x0800eb8c
 8003288:	0800eb98 	.word	0x0800eb98
 800328c:	200012f0 	.word	0x200012f0
 8003290:	00001388 	.word	0x00001388

08003294 <_Z15lrwanUpdateDatav>:
}


/*______________________________________________Gửi dữ liệu thiết bị bằng lrwan___________________________________________*/

void lrwanUpdateData(){
 8003294:	b5b0      	push	{r4, r5, r7, lr}
 8003296:	b09e      	sub	sp, #120	; 0x78
 8003298:	af02      	add	r7, sp, #8

		char* csqData = SIM7600E.getCSQ() ;
 800329a:	4b48      	ldr	r3, [pc, #288]	; (80033bc <_Z15lrwanUpdateDatav+0x128>)
 800329c:	0018      	movs	r0, r3
 800329e:	f006 fbfd 	bl	8009a9c <_ZN7sim7x006getCSQEv>
 80032a2:	0003      	movs	r3, r0
 80032a4:	66fb      	str	r3, [r7, #108]	; 0x6c
		char* pin = readPin();
 80032a6:	f7ff fd4f 	bl	8002d48 <_Z7readPinv>
 80032aa:	0003      	movs	r3, r0
 80032ac:	66bb      	str	r3, [r7, #104]	; 0x68
		char lwPayload[100]="MS+PERDATA:";
 80032ae:	1d39      	adds	r1, r7, #4
 80032b0:	4a43      	ldr	r2, [pc, #268]	; (80033c0 <_Z15lrwanUpdateDatav+0x12c>)
 80032b2:	000b      	movs	r3, r1
 80032b4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80032b6:	c331      	stmia	r3!, {r0, r4, r5}
 80032b8:	000b      	movs	r3, r1
 80032ba:	330c      	adds	r3, #12
 80032bc:	2258      	movs	r2, #88	; 0x58
 80032be:	2100      	movs	r1, #0
 80032c0:	0018      	movs	r0, r3
 80032c2:	f007 fde6 	bl	800ae92 <memset>
		strcat(lwPayload,csqData);
 80032c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032c8:	1d3b      	adds	r3, r7, #4
 80032ca:	0011      	movs	r1, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	f008 fd23 	bl	800bd18 <strcat>
		strcat(lwPayload,pin);
 80032d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	0011      	movs	r1, r2
 80032d8:	0018      	movs	r0, r3
 80032da:	f008 fd1d 	bl	800bd18 <strcat>
		strcat(lwPayload,"\r");
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7fc ff11 	bl	8000108 <strlen>
 80032e6:	0003      	movs	r3, r0
 80032e8:	001a      	movs	r2, r3
 80032ea:	1d3b      	adds	r3, r7, #4
 80032ec:	189a      	adds	r2, r3, r2
 80032ee:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <_Z15lrwanUpdateDatav+0x130>)
 80032f0:	0010      	movs	r0, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	2302      	movs	r3, #2
 80032f6:	001a      	movs	r2, r3
 80032f8:	f007 fdc2 	bl	800ae80 <memcpy>

		// setup payload để gửi dữ liệu qua atmega
		SSD1306_Clear_Status2();
 80032fc:	f007 fcbd 	bl	800ac7a <SSD1306_Clear_Status2>
		SSD1306_Putstring(4, 5, (char*)"                        ", &Font_5x7, SSD1306_COLOR_WHITE);
 8003300:	4931      	ldr	r1, [pc, #196]	; (80033c8 <_Z15lrwanUpdateDatav+0x134>)
 8003302:	4a32      	ldr	r2, [pc, #200]	; (80033cc <_Z15lrwanUpdateDatav+0x138>)
 8003304:	2301      	movs	r3, #1
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	000b      	movs	r3, r1
 800330a:	2105      	movs	r1, #5
 800330c:	2004      	movs	r0, #4
 800330e:	f007 fa09 	bl	800a724 <SSD1306_Putstring>
		SSD1306_Putstring(2, 5, (char*)"______CAP NHAT______", &Font_5x7, SSD1306_COLOR_WHITE);
 8003312:	492d      	ldr	r1, [pc, #180]	; (80033c8 <_Z15lrwanUpdateDatav+0x134>)
 8003314:	4a2e      	ldr	r2, [pc, #184]	; (80033d0 <_Z15lrwanUpdateDatav+0x13c>)
 8003316:	2301      	movs	r3, #1
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	000b      	movs	r3, r1
 800331c:	2105      	movs	r1, #5
 800331e:	2002      	movs	r0, #2
 8003320:	f007 fa00 	bl	800a724 <SSD1306_Putstring>
		HAL_Delay(100);
 8003324:	2064      	movs	r0, #100	; 0x64
 8003326:	f001 f845 	bl	80043b4 <HAL_Delay>
		SSD1306_Putstring(3, 5, (char*)"LoRa/LoRaWAN ... ", &Font_5x7, SSD1306_COLOR_WHITE);
 800332a:	4927      	ldr	r1, [pc, #156]	; (80033c8 <_Z15lrwanUpdateDatav+0x134>)
 800332c:	4a29      	ldr	r2, [pc, #164]	; (80033d4 <_Z15lrwanUpdateDatav+0x140>)
 800332e:	2301      	movs	r3, #1
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	000b      	movs	r3, r1
 8003334:	2105      	movs	r1, #5
 8003336:	2003      	movs	r0, #3
 8003338:	f007 f9f4 	bl	800a724 <SSD1306_Putstring>

		if ( LRWAN.sendData(lwPayload, LRWAN_DATA_RES_MSG, 8000,3 )){
 800333c:	23fa      	movs	r3, #250	; 0xfa
 800333e:	015c      	lsls	r4, r3, #5
 8003340:	4a25      	ldr	r2, [pc, #148]	; (80033d8 <_Z15lrwanUpdateDatav+0x144>)
 8003342:	1d39      	adds	r1, r7, #4
 8003344:	4825      	ldr	r0, [pc, #148]	; (80033dc <_Z15lrwanUpdateDatav+0x148>)
 8003346:	2303      	movs	r3, #3
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	0023      	movs	r3, r4
 800334c:	f005 fc44 	bl	8008bd8 <_ZN5lrwan8sendDataEPKcS1_ii>
 8003350:	1e03      	subs	r3, r0, #0
 8003352:	d009      	beq.n	8003368 <_Z15lrwanUpdateDatav+0xd4>
			SSD1306_Putstring(4, 5, (char*)"-> HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 8003354:	491c      	ldr	r1, [pc, #112]	; (80033c8 <_Z15lrwanUpdateDatav+0x134>)
 8003356:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <_Z15lrwanUpdateDatav+0x14c>)
 8003358:	2301      	movs	r3, #1
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	000b      	movs	r3, r1
 800335e:	2105      	movs	r1, #5
 8003360:	2004      	movs	r0, #4
 8003362:	f007 f9df 	bl	800a724 <SSD1306_Putstring>
 8003366:	e008      	b.n	800337a <_Z15lrwanUpdateDatav+0xe6>
		}else {
			SSD1306_Putstring(4, 5, (char*)"-> THAT BAI!", &Font_5x7, SSD1306_COLOR_WHITE);
 8003368:	4917      	ldr	r1, [pc, #92]	; (80033c8 <_Z15lrwanUpdateDatav+0x134>)
 800336a:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <_Z15lrwanUpdateDatav+0x150>)
 800336c:	2301      	movs	r3, #1
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	000b      	movs	r3, r1
 8003372:	2105      	movs	r1, #5
 8003374:	2004      	movs	r0, #4
 8003376:	f007 f9d5 	bl	800a724 <SSD1306_Putstring>
		}
		HAL_Delay(500);
 800337a:	23fa      	movs	r3, #250	; 0xfa
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	0018      	movs	r0, r3
 8003380:	f001 f818 	bl	80043b4 <HAL_Delay>
		memset ( csqData, 0, strlen(csqData) ) ;
 8003384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003386:	0018      	movs	r0, r3
 8003388:	f7fc febe 	bl	8000108 <strlen>
 800338c:	0002      	movs	r2, r0
 800338e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003390:	2100      	movs	r1, #0
 8003392:	0018      	movs	r0, r3
 8003394:	f007 fd7d 	bl	800ae92 <memset>
		memset ( pin, 0, strlen(pin) ) ;
 8003398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800339a:	0018      	movs	r0, r3
 800339c:	f7fc feb4 	bl	8000108 <strlen>
 80033a0:	0002      	movs	r2, r0
 80033a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a4:	2100      	movs	r1, #0
 80033a6:	0018      	movs	r0, r3
 80033a8:	f007 fd73 	bl	800ae92 <memset>
		HAL_Delay(TIME_MSG_DISPLAY);
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <_Z15lrwanUpdateDatav+0x154>)
 80033ae:	0018      	movs	r0, r3
 80033b0:	f001 f800 	bl	80043b4 <HAL_Delay>
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b01c      	add	sp, #112	; 0x70
 80033ba:	bdb0      	pop	{r4, r5, r7, pc}
 80033bc:	20000324 	.word	0x20000324
 80033c0:	0800ec1c 	.word	0x0800ec1c
 80033c4:	0800eb38 	.word	0x0800eb38
 80033c8:	2000003c 	.word	0x2000003c
 80033cc:	0800eba4 	.word	0x0800eba4
 80033d0:	0800ebc0 	.word	0x0800ebc0
 80033d4:	0800ebd8 	.word	0x0800ebd8
 80033d8:	0800ebec 	.word	0x0800ebec
 80033dc:	200012f4 	.word	0x200012f4
 80033e0:	0800ebfc 	.word	0x0800ebfc
 80033e4:	0800ec0c 	.word	0x0800ec0c
 80033e8:	00001388 	.word	0x00001388

080033ec <_Z15MQTTPublishDatav>:


/*_____________________________________________Gửi dữ liệu thiết bị bằng SIM______________________________________________*/

void MQTTPublishData(){
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b09e      	sub	sp, #120	; 0x78
 80033f0:	af02      	add	r7, sp, #8

		char* csqData = SIM7600E.getCSQ() ;
 80033f2:	4b44      	ldr	r3, [pc, #272]	; (8003504 <_Z15MQTTPublishDatav+0x118>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f006 fb51 	bl	8009a9c <_ZN7sim7x006getCSQEv>
 80033fa:	0003      	movs	r3, r0
 80033fc:	66fb      	str	r3, [r7, #108]	; 0x6c
		char* pin = readPin();
 80033fe:	f7ff fca3 	bl	8002d48 <_Z7readPinv>
 8003402:	0003      	movs	r3, r0
 8003404:	66bb      	str	r3, [r7, #104]	; 0x68
		char lwPayload[100]="{\"data\": \"BA+PERDATA:";
 8003406:	1d39      	adds	r1, r7, #4
 8003408:	4a3f      	ldr	r2, [pc, #252]	; (8003508 <_Z15MQTTPublishDatav+0x11c>)
 800340a:	000b      	movs	r3, r1
 800340c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800340e:	c331      	stmia	r3!, {r0, r4, r5}
 8003410:	ca11      	ldmia	r2!, {r0, r4}
 8003412:	c311      	stmia	r3!, {r0, r4}
 8003414:	8812      	ldrh	r2, [r2, #0]
 8003416:	801a      	strh	r2, [r3, #0]
 8003418:	2316      	movs	r3, #22
 800341a:	18cb      	adds	r3, r1, r3
 800341c:	224e      	movs	r2, #78	; 0x4e
 800341e:	2100      	movs	r1, #0
 8003420:	0018      	movs	r0, r3
 8003422:	f007 fd36 	bl	800ae92 <memset>
		strcat(lwPayload,csqData);
 8003426:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	0011      	movs	r1, r2
 800342c:	0018      	movs	r0, r3
 800342e:	f008 fc73 	bl	800bd18 <strcat>
		strcat(lwPayload,pin);
 8003432:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	0011      	movs	r1, r2
 8003438:	0018      	movs	r0, r3
 800343a:	f008 fc6d 	bl	800bd18 <strcat>
		strcat(lwPayload,"\"}\r");
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	0018      	movs	r0, r3
 8003442:	f7fc fe61 	bl	8000108 <strlen>
 8003446:	0003      	movs	r3, r0
 8003448:	001a      	movs	r2, r3
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	189a      	adds	r2, r3, r2
 800344e:	4b2f      	ldr	r3, [pc, #188]	; (800350c <_Z15MQTTPublishDatav+0x120>)
 8003450:	0010      	movs	r0, r2
 8003452:	0019      	movs	r1, r3
 8003454:	2304      	movs	r3, #4
 8003456:	001a      	movs	r2, r3
 8003458:	f007 fd12 	bl	800ae80 <memcpy>

		// setup payload để gửi dữ liệu lên broker
		SSD1306_Clear_Data();
 800345c:	f007 fbb5 	bl	800abca <SSD1306_Clear_Data>
		SSD1306_Putstring(2, 5, (char*)"______CAP NHAT______", &Font_5x7, SSD1306_COLOR_WHITE);
 8003460:	492b      	ldr	r1, [pc, #172]	; (8003510 <_Z15MQTTPublishDatav+0x124>)
 8003462:	4a2c      	ldr	r2, [pc, #176]	; (8003514 <_Z15MQTTPublishDatav+0x128>)
 8003464:	2301      	movs	r3, #1
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	000b      	movs	r3, r1
 800346a:	2105      	movs	r1, #5
 800346c:	2002      	movs	r0, #2
 800346e:	f007 f959 	bl	800a724 <SSD1306_Putstring>
		HAL_Delay(100);
 8003472:	2064      	movs	r0, #100	; 0x64
 8003474:	f000 ff9e 	bl	80043b4 <HAL_Delay>
		SSD1306_Putstring(3, 5, (char*)"3G/4G LTE ... ", &Font_5x7, SSD1306_COLOR_WHITE);
 8003478:	4925      	ldr	r1, [pc, #148]	; (8003510 <_Z15MQTTPublishDatav+0x124>)
 800347a:	4a27      	ldr	r2, [pc, #156]	; (8003518 <_Z15MQTTPublishDatav+0x12c>)
 800347c:	2301      	movs	r3, #1
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	000b      	movs	r3, r1
 8003482:	2105      	movs	r1, #5
 8003484:	2003      	movs	r0, #3
 8003486:	f007 f94d 	bl	800a724 <SSD1306_Putstring>

		if(SIM7600E.mqttUpdateData(lwPayload)){
 800348a:	1d3a      	adds	r2, r7, #4
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <_Z15MQTTPublishDatav+0x118>)
 800348e:	0011      	movs	r1, r2
 8003490:	0018      	movs	r0, r3
 8003492:	f006 fd51 	bl	8009f38 <_ZN7sim7x0014mqttUpdateDataEPKc>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d009      	beq.n	80034ae <_Z15MQTTPublishDatav+0xc2>
		   SSD1306_Putstring(4, 5, (char*)"-> HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 800349a:	491d      	ldr	r1, [pc, #116]	; (8003510 <_Z15MQTTPublishDatav+0x124>)
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <_Z15MQTTPublishDatav+0x130>)
 800349e:	2301      	movs	r3, #1
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	000b      	movs	r3, r1
 80034a4:	2105      	movs	r1, #5
 80034a6:	2004      	movs	r0, #4
 80034a8:	f007 f93c 	bl	800a724 <SSD1306_Putstring>
 80034ac:	e008      	b.n	80034c0 <_Z15MQTTPublishDatav+0xd4>
		}else {
			SSD1306_Putstring(4, 5, (char*)"-> THAT BAI!", &Font_5x7, SSD1306_COLOR_WHITE);
 80034ae:	4918      	ldr	r1, [pc, #96]	; (8003510 <_Z15MQTTPublishDatav+0x124>)
 80034b0:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <_Z15MQTTPublishDatav+0x134>)
 80034b2:	2301      	movs	r3, #1
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	000b      	movs	r3, r1
 80034b8:	2105      	movs	r1, #5
 80034ba:	2004      	movs	r0, #4
 80034bc:	f007 f932 	bl	800a724 <SSD1306_Putstring>
		}
		HAL_Delay(500);
 80034c0:	23fa      	movs	r3, #250	; 0xfa
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	0018      	movs	r0, r3
 80034c6:	f000 ff75 	bl	80043b4 <HAL_Delay>
		memset ( csqData, 0, strlen(csqData) ) ;
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7fc fe1b 	bl	8000108 <strlen>
 80034d2:	0002      	movs	r2, r0
 80034d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d6:	2100      	movs	r1, #0
 80034d8:	0018      	movs	r0, r3
 80034da:	f007 fcda 	bl	800ae92 <memset>
		memset ( pin, 0, strlen(pin) ) ;
 80034de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7fc fe11 	bl	8000108 <strlen>
 80034e6:	0002      	movs	r2, r0
 80034e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ea:	2100      	movs	r1, #0
 80034ec:	0018      	movs	r0, r3
 80034ee:	f007 fcd0 	bl	800ae92 <memset>
		HAL_Delay(TIME_MSG_DISPLAY);
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <_Z15MQTTPublishDatav+0x138>)
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 ff5d 	bl	80043b4 <HAL_Delay>

}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b01c      	add	sp, #112	; 0x70
 8003500:	bdb0      	pop	{r4, r5, r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	20000324 	.word	0x20000324
 8003508:	0800ec94 	.word	0x0800ec94
 800350c:	0800ec80 	.word	0x0800ec80
 8003510:	2000003c 	.word	0x2000003c
 8003514:	0800ebc0 	.word	0x0800ebc0
 8003518:	0800ec84 	.word	0x0800ec84
 800351c:	0800ebfc 	.word	0x0800ebfc
 8003520:	0800ec0c 	.word	0x0800ec0c
 8003524:	00001388 	.word	0x00001388

08003528 <_Z7OS_loopv>:


/*__________________________________________Hàm chính chạy chương trình_____________________________________________*/

void OS_loop(){
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b085      	sub	sp, #20
 800352c:	af02      	add	r7, sp, #8
	if (  SIM7600E.rxDone_FLAG == true  ){
 800352e:	4be5      	ldr	r3, [pc, #916]	; (80038c4 <_Z7OS_loopv+0x39c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d014      	beq.n	8003560 <_Z7OS_loopv+0x38>
		SYSTEM.println("\n==================================================") ;
 8003536:	4ae4      	ldr	r2, [pc, #912]	; (80038c8 <_Z7OS_loopv+0x3a0>)
 8003538:	4be4      	ldr	r3, [pc, #912]	; (80038cc <_Z7OS_loopv+0x3a4>)
 800353a:	0011      	movs	r1, r2
 800353c:	0018      	movs	r0, r3
 800353e:	f005 f8ab 	bl	8008698 <_ZN5debug7printlnEPKc>
		sim7600Event = SIM7600E.identifyEvent() ;
 8003542:	4ce3      	ldr	r4, [pc, #908]	; (80038d0 <_Z7OS_loopv+0x3a8>)
 8003544:	003b      	movs	r3, r7
 8003546:	4adf      	ldr	r2, [pc, #892]	; (80038c4 <_Z7OS_loopv+0x39c>)
 8003548:	0011      	movs	r1, r2
 800354a:	0018      	movs	r0, r3
 800354c:	f005 fe5c 	bl	8009208 <_ZN7sim7x0013identifyEventEv>
 8003550:	003a      	movs	r2, r7
 8003552:	0023      	movs	r3, r4
 8003554:	ca03      	ldmia	r2!, {r0, r1}
 8003556:	c303      	stmia	r3!, {r0, r1}
		SIM7600E.memreset() ;
 8003558:	4bda      	ldr	r3, [pc, #872]	; (80038c4 <_Z7OS_loopv+0x39c>)
 800355a:	0018      	movs	r0, r3
 800355c:	f005 fe3a 	bl	80091d4 <_ZN7sim7x008memresetEv>
	}

	if (  LRWAN.rxDone_FLAG == true  ){
 8003560:	4bdc      	ldr	r3, [pc, #880]	; (80038d4 <_Z7OS_loopv+0x3ac>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d014      	beq.n	8003592 <_Z7OS_loopv+0x6a>
		SYSTEM.println("\n==================================================") ;
 8003568:	4ad7      	ldr	r2, [pc, #860]	; (80038c8 <_Z7OS_loopv+0x3a0>)
 800356a:	4bd8      	ldr	r3, [pc, #864]	; (80038cc <_Z7OS_loopv+0x3a4>)
 800356c:	0011      	movs	r1, r2
 800356e:	0018      	movs	r0, r3
 8003570:	f005 f892 	bl	8008698 <_ZN5debug7printlnEPKc>
		lrwanEvent = LRWAN.identifyEvent() ;
 8003574:	4cd8      	ldr	r4, [pc, #864]	; (80038d8 <_Z7OS_loopv+0x3b0>)
 8003576:	003b      	movs	r3, r7
 8003578:	4ad6      	ldr	r2, [pc, #856]	; (80038d4 <_Z7OS_loopv+0x3ac>)
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f005 fa2b 	bl	80089d8 <_ZN5lrwan13identifyEventEv>
 8003582:	003a      	movs	r2, r7
 8003584:	0023      	movs	r3, r4
 8003586:	ca03      	ldmia	r2!, {r0, r1}
 8003588:	c303      	stmia	r3!, {r0, r1}
		LRWAN.memreset() ;
 800358a:	4bd2      	ldr	r3, [pc, #840]	; (80038d4 <_Z7OS_loopv+0x3ac>)
 800358c:	0018      	movs	r0, r3
 800358e:	f005 f94b 	bl	8008828 <_ZN5lrwan8memresetEv>
	}

	// kiển tra trạng thái nếu không làm công việc gì thì sẽ ngủ
	while(warningProcess!=0 || stopProcess!=0 || updateProcess!=0){
 8003592:	4bd2      	ldr	r3, [pc, #840]	; (80038dc <_Z7OS_loopv+0x3b4>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d108      	bne.n	80035ac <_Z7OS_loopv+0x84>
 800359a:	4bd1      	ldr	r3, [pc, #836]	; (80038e0 <_Z7OS_loopv+0x3b8>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <_Z7OS_loopv+0x84>
 80035a2:	4bd0      	ldr	r3, [pc, #832]	; (80038e4 <_Z7OS_loopv+0x3bc>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d100      	bne.n	80035ac <_Z7OS_loopv+0x84>
 80035aa:	e246      	b.n	8003a3a <_Z7OS_loopv+0x512>
		// kiểm tra trạng thái nút cảnh báo
		HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin,(GPIO_PinState)0);
 80035ac:	4bce      	ldr	r3, [pc, #824]	; (80038e8 <_Z7OS_loopv+0x3c0>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	2140      	movs	r1, #64	; 0x40
 80035b2:	0018      	movs	r0, r3
 80035b4:	f001 fdb7 	bl	8005126 <HAL_GPIO_WritePin>
		switch(warningProcess) {
 80035b8:	4bc8      	ldr	r3, [pc, #800]	; (80038dc <_Z7OS_loopv+0x3b4>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b07      	cmp	r3, #7
 80035be:	d900      	bls.n	80035c2 <_Z7OS_loopv+0x9a>
 80035c0:	e0d4      	b.n	800376c <_Z7OS_loopv+0x244>
 80035c2:	009a      	lsls	r2, r3, #2
 80035c4:	4bc9      	ldr	r3, [pc, #804]	; (80038ec <_Z7OS_loopv+0x3c4>)
 80035c6:	18d3      	adds	r3, r2, r3
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	469f      	mov	pc, r3
			case BTN_START_WARNING_PRESSED:
				warningProcess = SEND_CMD_BY_SIM;
 80035cc:	4bc3      	ldr	r3, [pc, #780]	; (80038dc <_Z7OS_loopv+0x3b4>)
 80035ce:	2203      	movs	r2, #3
 80035d0:	701a      	strb	r2, [r3, #0]
				SYSTEM.println("ENTER START WARNING PROCESS");
 80035d2:	4ac7      	ldr	r2, [pc, #796]	; (80038f0 <_Z7OS_loopv+0x3c8>)
 80035d4:	4bbd      	ldr	r3, [pc, #756]	; (80038cc <_Z7OS_loopv+0x3a4>)
 80035d6:	0011      	movs	r1, r2
 80035d8:	0018      	movs	r0, r3
 80035da:	f005 f85d 	bl	8008698 <_ZN5debug7printlnEPKc>
				break;
 80035de:	e0c5      	b.n	800376c <_Z7OS_loopv+0x244>

			// Đầu tiên, gửi cảnh báo qua SMS trước
			case SEND_CMD_BY_SIM:
				SSD1306_Clear_Data();
 80035e0:	f007 faf3 	bl	800abca <SSD1306_Clear_Data>
				SSD1306_Putstring(2, 5, (char*)"______CANH BAO______", &Font_5x7, SSD1306_COLOR_WHITE);
 80035e4:	49c3      	ldr	r1, [pc, #780]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 80035e6:	4ac4      	ldr	r2, [pc, #784]	; (80038f8 <_Z7OS_loopv+0x3d0>)
 80035e8:	2301      	movs	r3, #1
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	000b      	movs	r3, r1
 80035ee:	2105      	movs	r1, #5
 80035f0:	2002      	movs	r0, #2
 80035f2:	f007 f897 	bl	800a724 <SSD1306_Putstring>
				SSD1306_Putstring(3, 5, (char*)"Dang gui SMS... ", &Font_5x7, SSD1306_COLOR_WHITE);
 80035f6:	49bf      	ldr	r1, [pc, #764]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 80035f8:	4ac0      	ldr	r2, [pc, #768]	; (80038fc <_Z7OS_loopv+0x3d4>)
 80035fa:	2301      	movs	r3, #1
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	000b      	movs	r3, r1
 8003600:	2105      	movs	r1, #5
 8003602:	2003      	movs	r0, #3
 8003604:	f007 f88e 	bl	800a724 <SSD1306_Putstring>
				SYSTEM.println("Send SMS ...");
 8003608:	4abd      	ldr	r2, [pc, #756]	; (8003900 <_Z7OS_loopv+0x3d8>)
 800360a:	4bb0      	ldr	r3, [pc, #704]	; (80038cc <_Z7OS_loopv+0x3a4>)
 800360c:	0011      	movs	r1, r2
 800360e:	0018      	movs	r0, r3
 8003610:	f005 f842 	bl	8008698 <_ZN5debug7printlnEPKc>
				SIM7600E.sendSMS(DATALOGGER_NUMBER, SIM_WARNING_MSG);
 8003614:	4abb      	ldr	r2, [pc, #748]	; (8003904 <_Z7OS_loopv+0x3dc>)
 8003616:	49bc      	ldr	r1, [pc, #752]	; (8003908 <_Z7OS_loopv+0x3e0>)
 8003618:	4baa      	ldr	r3, [pc, #680]	; (80038c4 <_Z7OS_loopv+0x39c>)
 800361a:	0018      	movs	r0, r3
 800361c:	f006 fb92 	bl	8009d44 <_ZN7sim7x007sendSMSEPKcS1_>
				warningProcess=SIM_CHECKING_RESPOND;
 8003620:	4bae      	ldr	r3, [pc, #696]	; (80038dc <_Z7OS_loopv+0x3b4>)
 8003622:	2204      	movs	r2, #4
 8003624:	701a      	strb	r2, [r3, #0]
				break;
 8003626:	e0a1      	b.n	800376c <_Z7OS_loopv+0x244>
				// Sau đó, chờ Datalogger phản hồi qua SMS

			case SIM_CHECKING_RESPOND:
				//nếu gửi thành công thì startProcess = SEND_CMD_COMPLETED, thất bại thì tiếp tục gửi bằng lora
				if(simCheckingRespond("OK")){
 8003628:	4bb8      	ldr	r3, [pc, #736]	; (800390c <_Z7OS_loopv+0x3e4>)
 800362a:	0018      	movs	r0, r3
 800362c:	f7ff fd2c 	bl	8003088 <_Z18simCheckingRespondPKc>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d018      	beq.n	8003666 <_Z7OS_loopv+0x13e>
					HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, GPIO_PIN_SET);
 8003634:	4bac      	ldr	r3, [pc, #688]	; (80038e8 <_Z7OS_loopv+0x3c0>)
 8003636:	2201      	movs	r2, #1
 8003638:	2140      	movs	r1, #64	; 0x40
 800363a:	0018      	movs	r0, r3
 800363c:	f001 fd73 	bl	8005126 <HAL_GPIO_WritePin>
					SSD1306_Putstring(4, 5, (char*)"-> HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 8003640:	49ac      	ldr	r1, [pc, #688]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 8003642:	4ab3      	ldr	r2, [pc, #716]	; (8003910 <_Z7OS_loopv+0x3e8>)
 8003644:	2301      	movs	r3, #1
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	000b      	movs	r3, r1
 800364a:	2105      	movs	r1, #5
 800364c:	2004      	movs	r0, #4
 800364e:	f007 f869 	bl	800a724 <SSD1306_Putstring>
					SYSTEM.println("SMS SENT SUCCESS");
 8003652:	4ab0      	ldr	r2, [pc, #704]	; (8003914 <_Z7OS_loopv+0x3ec>)
 8003654:	4b9d      	ldr	r3, [pc, #628]	; (80038cc <_Z7OS_loopv+0x3a4>)
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f005 f81d 	bl	8008698 <_ZN5debug7printlnEPKc>
					warningProcess = SEND_CMD_COMPLETED;
 800365e:	4b9f      	ldr	r3, [pc, #636]	; (80038dc <_Z7OS_loopv+0x3b4>)
 8003660:	2207      	movs	r2, #7
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	e011      	b.n	800368a <_Z7OS_loopv+0x162>
				}else{
					SSD1306_Putstring(4, 5, (char*)"-> THAT BAI!", &Font_5x7, SSD1306_COLOR_WHITE);
 8003666:	49a3      	ldr	r1, [pc, #652]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 8003668:	4aab      	ldr	r2, [pc, #684]	; (8003918 <_Z7OS_loopv+0x3f0>)
 800366a:	2301      	movs	r3, #1
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	000b      	movs	r3, r1
 8003670:	2105      	movs	r1, #5
 8003672:	2004      	movs	r0, #4
 8003674:	f007 f856 	bl	800a724 <SSD1306_Putstring>
					SYSTEM.println("SMS SENT FAILED");
 8003678:	4aa8      	ldr	r2, [pc, #672]	; (800391c <_Z7OS_loopv+0x3f4>)
 800367a:	4b94      	ldr	r3, [pc, #592]	; (80038cc <_Z7OS_loopv+0x3a4>)
 800367c:	0011      	movs	r1, r2
 800367e:	0018      	movs	r0, r3
 8003680:	f005 f80a 	bl	8008698 <_ZN5debug7printlnEPKc>
					warningProcess = SEND_CMD_BY_LRWAN;
 8003684:	4b95      	ldr	r3, [pc, #596]	; (80038dc <_Z7OS_loopv+0x3b4>)
 8003686:	2205      	movs	r2, #5
 8003688:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(TIME_MSG_DISPLAY);
 800368a:	4ba5      	ldr	r3, [pc, #660]	; (8003920 <_Z7OS_loopv+0x3f8>)
 800368c:	0018      	movs	r0, r3
 800368e:	f000 fe91 	bl	80043b4 <HAL_Delay>
				break;
 8003692:	e06b      	b.n	800376c <_Z7OS_loopv+0x244>

			case SEND_CMD_BY_LRWAN:
				SSD1306_Putstring(2, 5, (char*)"______CANH BAO______", &Font_5x7, SSD1306_COLOR_WHITE);
 8003694:	4997      	ldr	r1, [pc, #604]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 8003696:	4a98      	ldr	r2, [pc, #608]	; (80038f8 <_Z7OS_loopv+0x3d0>)
 8003698:	2301      	movs	r3, #1
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	000b      	movs	r3, r1
 800369e:	2105      	movs	r1, #5
 80036a0:	2002      	movs	r0, #2
 80036a2:	f007 f83f 	bl	800a724 <SSD1306_Putstring>
				SSD1306_Putstring(3, 5, (char*)"Dang gui LoRaWAN... ", &Font_5x7, SSD1306_COLOR_WHITE);
 80036a6:	4993      	ldr	r1, [pc, #588]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 80036a8:	4a9e      	ldr	r2, [pc, #632]	; (8003924 <_Z7OS_loopv+0x3fc>)
 80036aa:	2301      	movs	r3, #1
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	000b      	movs	r3, r1
 80036b0:	2105      	movs	r1, #5
 80036b2:	2003      	movs	r0, #3
 80036b4:	f007 f836 	bl	800a724 <SSD1306_Putstring>
				SYSTEM.println("SEND BY LORAWAN");
 80036b8:	4a9b      	ldr	r2, [pc, #620]	; (8003928 <_Z7OS_loopv+0x400>)
 80036ba:	4b84      	ldr	r3, [pc, #528]	; (80038cc <_Z7OS_loopv+0x3a4>)
 80036bc:	0011      	movs	r1, r2
 80036be:	0018      	movs	r0, r3
 80036c0:	f004 ffea 	bl	8008698 <_ZN5debug7printlnEPKc>
				SSD1306_Clear_Bottom();
 80036c4:	f007 faa9 	bl	800ac1a <SSD1306_Clear_Bottom>
				warningProcess = LRWAN_CHECKING_RESPOND;
 80036c8:	4b84      	ldr	r3, [pc, #528]	; (80038dc <_Z7OS_loopv+0x3b4>)
 80036ca:	2206      	movs	r2, #6
 80036cc:	701a      	strb	r2, [r3, #0]
				break;
 80036ce:	e04d      	b.n	800376c <_Z7OS_loopv+0x244>

			case LRWAN_CHECKING_RESPOND:
				//nếu gửi thành công thì startProcess = SEND_CMD_COMPLETED, thất bại thì startProcess = IDLE
				if(lrwanSendAndCheckingRespond(LRWAN_WARNING_MSG,LRWAN_WARNING_RES_MSG)){
 80036d0:	4a96      	ldr	r2, [pc, #600]	; (800392c <_Z7OS_loopv+0x404>)
 80036d2:	4b97      	ldr	r3, [pc, #604]	; (8003930 <_Z7OS_loopv+0x408>)
 80036d4:	0011      	movs	r1, r2
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff fd04 	bl	80030e4 <_Z27lrwanSendAndCheckingRespondPKcS0_>
 80036dc:	0003      	movs	r3, r0
 80036de:	1e5a      	subs	r2, r3, #1
 80036e0:	4193      	sbcs	r3, r2
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d018      	beq.n	800371a <_Z7OS_loopv+0x1f2>
					HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, GPIO_PIN_SET);
 80036e8:	4b7f      	ldr	r3, [pc, #508]	; (80038e8 <_Z7OS_loopv+0x3c0>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	2140      	movs	r1, #64	; 0x40
 80036ee:	0018      	movs	r0, r3
 80036f0:	f001 fd19 	bl	8005126 <HAL_GPIO_WritePin>
					SSD1306_Putstring(4, 5, (char*)"-> HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 80036f4:	497f      	ldr	r1, [pc, #508]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 80036f6:	4a86      	ldr	r2, [pc, #536]	; (8003910 <_Z7OS_loopv+0x3e8>)
 80036f8:	2301      	movs	r3, #1
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	000b      	movs	r3, r1
 80036fe:	2105      	movs	r1, #5
 8003700:	2004      	movs	r0, #4
 8003702:	f007 f80f 	bl	800a724 <SSD1306_Putstring>
					SYSTEM.println("SEND BY LORAWAN SUCCESS");
 8003706:	4a8b      	ldr	r2, [pc, #556]	; (8003934 <_Z7OS_loopv+0x40c>)
 8003708:	4b70      	ldr	r3, [pc, #448]	; (80038cc <_Z7OS_loopv+0x3a4>)
 800370a:	0011      	movs	r1, r2
 800370c:	0018      	movs	r0, r3
 800370e:	f004 ffc3 	bl	8008698 <_ZN5debug7printlnEPKc>
					warningProcess = SEND_CMD_COMPLETED;
 8003712:	4b72      	ldr	r3, [pc, #456]	; (80038dc <_Z7OS_loopv+0x3b4>)
 8003714:	2207      	movs	r2, #7
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e017      	b.n	800374a <_Z7OS_loopv+0x222>
				}else{
					SSD1306_Putstring(4, 5, (char*)"-> THAT BAI!", &Font_5x7, SSD1306_COLOR_WHITE);
 800371a:	4976      	ldr	r1, [pc, #472]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 800371c:	4a7e      	ldr	r2, [pc, #504]	; (8003918 <_Z7OS_loopv+0x3f0>)
 800371e:	2301      	movs	r3, #1
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	000b      	movs	r3, r1
 8003724:	2105      	movs	r1, #5
 8003726:	2004      	movs	r0, #4
 8003728:	f006 fffc 	bl	800a724 <SSD1306_Putstring>
					SYSTEM.println("SEND BY LORAWAN FAILED");
 800372c:	4a82      	ldr	r2, [pc, #520]	; (8003938 <_Z7OS_loopv+0x410>)
 800372e:	4b67      	ldr	r3, [pc, #412]	; (80038cc <_Z7OS_loopv+0x3a4>)
 8003730:	0011      	movs	r1, r2
 8003732:	0018      	movs	r0, r3
 8003734:	f004 ffb0 	bl	8008698 <_ZN5debug7printlnEPKc>
					SYSTEM.println("WARNING FAILED");
 8003738:	4a80      	ldr	r2, [pc, #512]	; (800393c <_Z7OS_loopv+0x414>)
 800373a:	4b64      	ldr	r3, [pc, #400]	; (80038cc <_Z7OS_loopv+0x3a4>)
 800373c:	0011      	movs	r1, r2
 800373e:	0018      	movs	r0, r3
 8003740:	f004 ffaa 	bl	8008698 <_ZN5debug7printlnEPKc>
					warningProcess = IDLE;
 8003744:	4b65      	ldr	r3, [pc, #404]	; (80038dc <_Z7OS_loopv+0x3b4>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(TIME_MSG_DISPLAY);
 800374a:	4b75      	ldr	r3, [pc, #468]	; (8003920 <_Z7OS_loopv+0x3f8>)
 800374c:	0018      	movs	r0, r3
 800374e:	f000 fe31 	bl	80043b4 <HAL_Delay>
				break;
 8003752:	e00b      	b.n	800376c <_Z7OS_loopv+0x244>
			case SEND_CMD_COMPLETED:

				SYSTEM.println("DONE WARNING PROCESS");
 8003754:	4a7a      	ldr	r2, [pc, #488]	; (8003940 <_Z7OS_loopv+0x418>)
 8003756:	4b5d      	ldr	r3, [pc, #372]	; (80038cc <_Z7OS_loopv+0x3a4>)
 8003758:	0011      	movs	r1, r2
 800375a:	0018      	movs	r0, r3
 800375c:	f004 ff9c 	bl	8008698 <_ZN5debug7printlnEPKc>
				waitForNextTrigger() ;
 8003760:	f7ff f9ca 	bl	8002af8 <_Z18waitForNextTriggerv>
				warningProcess=IDLE;
 8003764:	4b5d      	ldr	r3, [pc, #372]	; (80038dc <_Z7OS_loopv+0x3b4>)
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]

				break;
 800376a:	46c0      	nop			; (mov r8, r8)
		}
		// kiểm tra trạng thái nút dừng cảnh báo
		switch(stopProcess){
 800376c:	4b5c      	ldr	r3, [pc, #368]	; (80038e0 <_Z7OS_loopv+0x3b8>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b07      	cmp	r3, #7
 8003772:	d900      	bls.n	8003776 <_Z7OS_loopv+0x24e>
 8003774:	e123      	b.n	80039be <_Z7OS_loopv+0x496>
 8003776:	009a      	lsls	r2, r3, #2
 8003778:	4b72      	ldr	r3, [pc, #456]	; (8003944 <_Z7OS_loopv+0x41c>)
 800377a:	18d3      	adds	r3, r2, r3
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	469f      	mov	pc, r3

			case BTN_STOP_WARNING_PRESSED:
				stopProcess = SEND_CMD_BY_SIM;
 8003780:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <_Z7OS_loopv+0x3b8>)
 8003782:	2203      	movs	r2, #3
 8003784:	701a      	strb	r2, [r3, #0]
				SYSTEM.println("ENTER STOP WARNING PROCESS");
 8003786:	4a70      	ldr	r2, [pc, #448]	; (8003948 <_Z7OS_loopv+0x420>)
 8003788:	4b50      	ldr	r3, [pc, #320]	; (80038cc <_Z7OS_loopv+0x3a4>)
 800378a:	0011      	movs	r1, r2
 800378c:	0018      	movs	r0, r3
 800378e:	f004 ff83 	bl	8008698 <_ZN5debug7printlnEPKc>
				break;
 8003792:	e114      	b.n	80039be <_Z7OS_loopv+0x496>

			case SEND_CMD_BY_SIM:

				SSD1306_Clear_Data();
 8003794:	f007 fa19 	bl	800abca <SSD1306_Clear_Data>
				SSD1306_Putstring(2, 5, (char*)"____DUNG CANH BAO____", &Font_5x7, SSD1306_COLOR_WHITE);
 8003798:	4956      	ldr	r1, [pc, #344]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 800379a:	4a6c      	ldr	r2, [pc, #432]	; (800394c <_Z7OS_loopv+0x424>)
 800379c:	2301      	movs	r3, #1
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	000b      	movs	r3, r1
 80037a2:	2105      	movs	r1, #5
 80037a4:	2002      	movs	r0, #2
 80037a6:	f006 ffbd 	bl	800a724 <SSD1306_Putstring>
				SSD1306_Putstring(3, 5, (char*)"Dang gui SMS... ", &Font_5x7, SSD1306_COLOR_WHITE);
 80037aa:	4952      	ldr	r1, [pc, #328]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 80037ac:	4a53      	ldr	r2, [pc, #332]	; (80038fc <_Z7OS_loopv+0x3d4>)
 80037ae:	2301      	movs	r3, #1
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	000b      	movs	r3, r1
 80037b4:	2105      	movs	r1, #5
 80037b6:	2003      	movs	r0, #3
 80037b8:	f006 ffb4 	bl	800a724 <SSD1306_Putstring>
				SYSTEM.println("Send SMS ...");
 80037bc:	4a50      	ldr	r2, [pc, #320]	; (8003900 <_Z7OS_loopv+0x3d8>)
 80037be:	4b43      	ldr	r3, [pc, #268]	; (80038cc <_Z7OS_loopv+0x3a4>)
 80037c0:	0011      	movs	r1, r2
 80037c2:	0018      	movs	r0, r3
 80037c4:	f004 ff68 	bl	8008698 <_ZN5debug7printlnEPKc>
				SIM7600E.sendSMS(DATALOGGER_NUMBER, SIM_STOP_MSG);
 80037c8:	4a61      	ldr	r2, [pc, #388]	; (8003950 <_Z7OS_loopv+0x428>)
 80037ca:	494f      	ldr	r1, [pc, #316]	; (8003908 <_Z7OS_loopv+0x3e0>)
 80037cc:	4b3d      	ldr	r3, [pc, #244]	; (80038c4 <_Z7OS_loopv+0x39c>)
 80037ce:	0018      	movs	r0, r3
 80037d0:	f006 fab8 	bl	8009d44 <_ZN7sim7x007sendSMSEPKcS1_>
				stopProcess=SIM_CHECKING_RESPOND;
 80037d4:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <_Z7OS_loopv+0x3b8>)
 80037d6:	2204      	movs	r2, #4
 80037d8:	701a      	strb	r2, [r3, #0]
				break;
 80037da:	e0f0      	b.n	80039be <_Z7OS_loopv+0x496>

			case SIM_CHECKING_RESPOND:
				//nếu gửi thành công thì startProcess = SEND_CMD_COMPLETED, thất bại thì tiếp tục gửi bằng lora
				if(simCheckingRespond("OK")){
 80037dc:	4b4b      	ldr	r3, [pc, #300]	; (800390c <_Z7OS_loopv+0x3e4>)
 80037de:	0018      	movs	r0, r3
 80037e0:	f7ff fc52 	bl	8003088 <_Z18simCheckingRespondPKc>
 80037e4:	1e03      	subs	r3, r0, #0
 80037e6:	d018      	beq.n	800381a <_Z7OS_loopv+0x2f2>
					HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, GPIO_PIN_SET);
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <_Z7OS_loopv+0x3c0>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	2140      	movs	r1, #64	; 0x40
 80037ee:	0018      	movs	r0, r3
 80037f0:	f001 fc99 	bl	8005126 <HAL_GPIO_WritePin>
					SSD1306_Putstring(4, 5, (char*)"-> HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 80037f4:	493f      	ldr	r1, [pc, #252]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 80037f6:	4a46      	ldr	r2, [pc, #280]	; (8003910 <_Z7OS_loopv+0x3e8>)
 80037f8:	2301      	movs	r3, #1
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	000b      	movs	r3, r1
 80037fe:	2105      	movs	r1, #5
 8003800:	2004      	movs	r0, #4
 8003802:	f006 ff8f 	bl	800a724 <SSD1306_Putstring>
					SYSTEM.println("SMS SENT SUCCESS");
 8003806:	4a43      	ldr	r2, [pc, #268]	; (8003914 <_Z7OS_loopv+0x3ec>)
 8003808:	4b30      	ldr	r3, [pc, #192]	; (80038cc <_Z7OS_loopv+0x3a4>)
 800380a:	0011      	movs	r1, r2
 800380c:	0018      	movs	r0, r3
 800380e:	f004 ff43 	bl	8008698 <_ZN5debug7printlnEPKc>
					stopProcess = SEND_CMD_COMPLETED;
 8003812:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <_Z7OS_loopv+0x3b8>)
 8003814:	2207      	movs	r2, #7
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e011      	b.n	800383e <_Z7OS_loopv+0x316>
				}else{
					SSD1306_Putstring(4, 5, (char*)"-> THAT BAI!", &Font_5x7, SSD1306_COLOR_WHITE);
 800381a:	4936      	ldr	r1, [pc, #216]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 800381c:	4a3e      	ldr	r2, [pc, #248]	; (8003918 <_Z7OS_loopv+0x3f0>)
 800381e:	2301      	movs	r3, #1
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	000b      	movs	r3, r1
 8003824:	2105      	movs	r1, #5
 8003826:	2004      	movs	r0, #4
 8003828:	f006 ff7c 	bl	800a724 <SSD1306_Putstring>
					SYSTEM.println("SMS SENT FAILED");
 800382c:	4a3b      	ldr	r2, [pc, #236]	; (800391c <_Z7OS_loopv+0x3f4>)
 800382e:	4b27      	ldr	r3, [pc, #156]	; (80038cc <_Z7OS_loopv+0x3a4>)
 8003830:	0011      	movs	r1, r2
 8003832:	0018      	movs	r0, r3
 8003834:	f004 ff30 	bl	8008698 <_ZN5debug7printlnEPKc>
					stopProcess = SEND_CMD_BY_LRWAN;
 8003838:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <_Z7OS_loopv+0x3b8>)
 800383a:	2205      	movs	r2, #5
 800383c:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(TIME_MSG_DISPLAY);
 800383e:	4b38      	ldr	r3, [pc, #224]	; (8003920 <_Z7OS_loopv+0x3f8>)
 8003840:	0018      	movs	r0, r3
 8003842:	f000 fdb7 	bl	80043b4 <HAL_Delay>
				break;
 8003846:	e0ba      	b.n	80039be <_Z7OS_loopv+0x496>

			case SEND_CMD_BY_LRWAN:

				SSD1306_Putstring(2, 5, (char*)"____DUNG CANH BAO____", &Font_5x7, SSD1306_COLOR_WHITE);
 8003848:	492a      	ldr	r1, [pc, #168]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 800384a:	4a40      	ldr	r2, [pc, #256]	; (800394c <_Z7OS_loopv+0x424>)
 800384c:	2301      	movs	r3, #1
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	000b      	movs	r3, r1
 8003852:	2105      	movs	r1, #5
 8003854:	2002      	movs	r0, #2
 8003856:	f006 ff65 	bl	800a724 <SSD1306_Putstring>
				SSD1306_Putstring(3, 5, (char*)"Dang gui LoRaWAN... ", &Font_5x7, SSD1306_COLOR_WHITE);
 800385a:	4926      	ldr	r1, [pc, #152]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 800385c:	4a31      	ldr	r2, [pc, #196]	; (8003924 <_Z7OS_loopv+0x3fc>)
 800385e:	2301      	movs	r3, #1
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	000b      	movs	r3, r1
 8003864:	2105      	movs	r1, #5
 8003866:	2003      	movs	r0, #3
 8003868:	f006 ff5c 	bl	800a724 <SSD1306_Putstring>
				SYSTEM.println("SEND BY LORAWAN");
 800386c:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <_Z7OS_loopv+0x400>)
 800386e:	4b17      	ldr	r3, [pc, #92]	; (80038cc <_Z7OS_loopv+0x3a4>)
 8003870:	0011      	movs	r1, r2
 8003872:	0018      	movs	r0, r3
 8003874:	f004 ff10 	bl	8008698 <_ZN5debug7printlnEPKc>
				SSD1306_Clear_Bottom();
 8003878:	f007 f9cf 	bl	800ac1a <SSD1306_Clear_Bottom>
				stopProcess = LRWAN_CHECKING_RESPOND;
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <_Z7OS_loopv+0x3b8>)
 800387e:	2206      	movs	r2, #6
 8003880:	701a      	strb	r2, [r3, #0]
				break;
 8003882:	e09c      	b.n	80039be <_Z7OS_loopv+0x496>

			case LRWAN_CHECKING_RESPOND:
				//nếu gửi thành công thì stopProcess = SEND_CMD_COMPLETED, thất bại thì stopProcess = IDLE
				if(lrwanSendAndCheckingRespond(LRWAN_STOP_MSG,LRWAN_STOP_RES_MSG)){
 8003884:	4a33      	ldr	r2, [pc, #204]	; (8003954 <_Z7OS_loopv+0x42c>)
 8003886:	4b34      	ldr	r3, [pc, #208]	; (8003958 <_Z7OS_loopv+0x430>)
 8003888:	0011      	movs	r1, r2
 800388a:	0018      	movs	r0, r3
 800388c:	f7ff fc2a 	bl	80030e4 <_Z27lrwanSendAndCheckingRespondPKcS0_>
 8003890:	0003      	movs	r3, r0
 8003892:	1e5a      	subs	r2, r3, #1
 8003894:	4193      	sbcs	r3, r2
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d061      	beq.n	8003960 <_Z7OS_loopv+0x438>
					SSD1306_Putstring(4, 5, (char*)"-> HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 800389c:	4915      	ldr	r1, [pc, #84]	; (80038f4 <_Z7OS_loopv+0x3cc>)
 800389e:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <_Z7OS_loopv+0x3e8>)
 80038a0:	2301      	movs	r3, #1
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	000b      	movs	r3, r1
 80038a6:	2105      	movs	r1, #5
 80038a8:	2004      	movs	r0, #4
 80038aa:	f006 ff3b 	bl	800a724 <SSD1306_Putstring>
					SYSTEM.println("SENT BY LORAWAN SUCCESS");
 80038ae:	4a2b      	ldr	r2, [pc, #172]	; (800395c <_Z7OS_loopv+0x434>)
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <_Z7OS_loopv+0x3a4>)
 80038b2:	0011      	movs	r1, r2
 80038b4:	0018      	movs	r0, r3
 80038b6:	f004 feef 	bl	8008698 <_ZN5debug7printlnEPKc>
					stopProcess = SEND_CMD_COMPLETED;
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <_Z7OS_loopv+0x3b8>)
 80038bc:	2207      	movs	r2, #7
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e066      	b.n	8003990 <_Z7OS_loopv+0x468>
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	20000324 	.word	0x20000324
 80038c8:	0800ecf8 	.word	0x0800ecf8
 80038cc:	200012f0 	.word	0x200012f0
 80038d0:	20001af4 	.word	0x20001af4
 80038d4:	200012f4 	.word	0x200012f4
 80038d8:	20001afc 	.word	0x20001afc
 80038dc:	20001af0 	.word	0x20001af0
 80038e0:	20001af1 	.word	0x20001af1
 80038e4:	20001af2 	.word	0x20001af2
 80038e8:	50000800 	.word	0x50000800
 80038ec:	0800fa78 	.word	0x0800fa78
 80038f0:	0800ed2c 	.word	0x0800ed2c
 80038f4:	2000003c 	.word	0x2000003c
 80038f8:	0800ed48 	.word	0x0800ed48
 80038fc:	0800ed60 	.word	0x0800ed60
 8003900:	0800ed74 	.word	0x0800ed74
 8003904:	0800ed84 	.word	0x0800ed84
 8003908:	0800ed90 	.word	0x0800ed90
 800390c:	0800eb14 	.word	0x0800eb14
 8003910:	0800ebfc 	.word	0x0800ebfc
 8003914:	0800ed9c 	.word	0x0800ed9c
 8003918:	0800ec0c 	.word	0x0800ec0c
 800391c:	0800edb0 	.word	0x0800edb0
 8003920:	00001388 	.word	0x00001388
 8003924:	0800edc0 	.word	0x0800edc0
 8003928:	0800edd8 	.word	0x0800edd8
 800392c:	0800ede8 	.word	0x0800ede8
 8003930:	0800edf8 	.word	0x0800edf8
 8003934:	0800ee08 	.word	0x0800ee08
 8003938:	0800ee20 	.word	0x0800ee20
 800393c:	0800ee38 	.word	0x0800ee38
 8003940:	0800ee48 	.word	0x0800ee48
 8003944:	0800fa98 	.word	0x0800fa98
 8003948:	0800ee60 	.word	0x0800ee60
 800394c:	0800ee7c 	.word	0x0800ee7c
 8003950:	0800ee94 	.word	0x0800ee94
 8003954:	0800ee9c 	.word	0x0800ee9c
 8003958:	0800eeac 	.word	0x0800eeac
 800395c:	0800eebc 	.word	0x0800eebc
				}else{
					SSD1306_Putstring(4, 5, (char*)"-> THAT BAI!", &Font_5x7, SSD1306_COLOR_WHITE);
 8003960:	4938      	ldr	r1, [pc, #224]	; (8003a44 <_Z7OS_loopv+0x51c>)
 8003962:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <_Z7OS_loopv+0x520>)
 8003964:	2301      	movs	r3, #1
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	000b      	movs	r3, r1
 800396a:	2105      	movs	r1, #5
 800396c:	2004      	movs	r0, #4
 800396e:	f006 fed9 	bl	800a724 <SSD1306_Putstring>
					SYSTEM.println("SENT BY LORAWAN FAILED");
 8003972:	4a36      	ldr	r2, [pc, #216]	; (8003a4c <_Z7OS_loopv+0x524>)
 8003974:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <_Z7OS_loopv+0x528>)
 8003976:	0011      	movs	r1, r2
 8003978:	0018      	movs	r0, r3
 800397a:	f004 fe8d 	bl	8008698 <_ZN5debug7printlnEPKc>
					SYSTEM.println("STOP WARNING FAILED");
 800397e:	4a35      	ldr	r2, [pc, #212]	; (8003a54 <_Z7OS_loopv+0x52c>)
 8003980:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <_Z7OS_loopv+0x528>)
 8003982:	0011      	movs	r1, r2
 8003984:	0018      	movs	r0, r3
 8003986:	f004 fe87 	bl	8008698 <_ZN5debug7printlnEPKc>
					stopProcess = IDLE;
 800398a:	4b33      	ldr	r3, [pc, #204]	; (8003a58 <_Z7OS_loopv+0x530>)
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(TIME_MSG_DISPLAY);
 8003990:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <_Z7OS_loopv+0x534>)
 8003992:	0018      	movs	r0, r3
 8003994:	f000 fd0e 	bl	80043b4 <HAL_Delay>
				break;
 8003998:	e011      	b.n	80039be <_Z7OS_loopv+0x496>

			case SEND_CMD_COMPLETED:
				HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, GPIO_PIN_SET);
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <_Z7OS_loopv+0x538>)
 800399c:	2201      	movs	r2, #1
 800399e:	2140      	movs	r1, #64	; 0x40
 80039a0:	0018      	movs	r0, r3
 80039a2:	f001 fbc0 	bl	8005126 <HAL_GPIO_WritePin>
				SYSTEM.println("DONE STOP WARNING PROCESS");
 80039a6:	4a2f      	ldr	r2, [pc, #188]	; (8003a64 <_Z7OS_loopv+0x53c>)
 80039a8:	4b29      	ldr	r3, [pc, #164]	; (8003a50 <_Z7OS_loopv+0x528>)
 80039aa:	0011      	movs	r1, r2
 80039ac:	0018      	movs	r0, r3
 80039ae:	f004 fe73 	bl	8008698 <_ZN5debug7printlnEPKc>
				waitForNextTrigger() ;
 80039b2:	f7ff f8a1 	bl	8002af8 <_Z18waitForNextTriggerv>
				stopProcess=IDLE;
 80039b6:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <_Z7OS_loopv+0x530>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
				break;
 80039bc:	46c0      	nop			; (mov r8, r8)
		}
		// kiểm tra trạng thái gửi dữ liệu thiết bị lên server
		switch(updateProcess){
 80039be:	4b2a      	ldr	r3, [pc, #168]	; (8003a68 <_Z7OS_loopv+0x540>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d002      	beq.n	80039cc <_Z7OS_loopv+0x4a4>
 80039c6:	2b09      	cmp	r3, #9
 80039c8:	d01a      	beq.n	8003a00 <_Z7OS_loopv+0x4d8>
 80039ca:	e035      	b.n	8003a38 <_Z7OS_loopv+0x510>
			case MQTT_PUBLIC_DATA:
				if( warningProcess==0 && stopProcess==0 ){
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <_Z7OS_loopv+0x544>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d111      	bne.n	80039f8 <_Z7OS_loopv+0x4d0>
 80039d4:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <_Z7OS_loopv+0x530>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10d      	bne.n	80039f8 <_Z7OS_loopv+0x4d0>
					SYSTEM.println("START UPDATE DATA BY SIM");
 80039dc:	4a24      	ldr	r2, [pc, #144]	; (8003a70 <_Z7OS_loopv+0x548>)
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <_Z7OS_loopv+0x528>)
 80039e0:	0011      	movs	r1, r2
 80039e2:	0018      	movs	r0, r3
 80039e4:	f004 fe58 	bl	8008698 <_ZN5debug7printlnEPKc>
					MQTTPublishData();
 80039e8:	f7ff fd00 	bl	80033ec <_Z15MQTTPublishDatav>
					SYSTEM.println("DONE UPDATE DATA BY SIM");
 80039ec:	4a21      	ldr	r2, [pc, #132]	; (8003a74 <_Z7OS_loopv+0x54c>)
 80039ee:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <_Z7OS_loopv+0x528>)
 80039f0:	0011      	movs	r1, r2
 80039f2:	0018      	movs	r0, r3
 80039f4:	f004 fe50 	bl	8008698 <_ZN5debug7printlnEPKc>
				}
				updateProcess=LRWAN_UPDATE_DATA;
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <_Z7OS_loopv+0x540>)
 80039fa:	2209      	movs	r2, #9
 80039fc:	701a      	strb	r2, [r3, #0]
				break;
 80039fe:	e01b      	b.n	8003a38 <_Z7OS_loopv+0x510>
			case LRWAN_UPDATE_DATA:
				if(  warningProcess==0 && stopProcess==0 ){
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <_Z7OS_loopv+0x544>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d111      	bne.n	8003a2c <_Z7OS_loopv+0x504>
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <_Z7OS_loopv+0x530>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10d      	bne.n	8003a2c <_Z7OS_loopv+0x504>
					SYSTEM.println("START UPDATE DATA BY lORAWAN");
 8003a10:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <_Z7OS_loopv+0x550>)
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <_Z7OS_loopv+0x528>)
 8003a14:	0011      	movs	r1, r2
 8003a16:	0018      	movs	r0, r3
 8003a18:	f004 fe3e 	bl	8008698 <_ZN5debug7printlnEPKc>
					lrwanUpdateData();
 8003a1c:	f7ff fc3a 	bl	8003294 <_Z15lrwanUpdateDatav>
					SYSTEM.println("DONE UPDATE DATA BY lORAWAN");
 8003a20:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <_Z7OS_loopv+0x554>)
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <_Z7OS_loopv+0x528>)
 8003a24:	0011      	movs	r1, r2
 8003a26:	0018      	movs	r0, r3
 8003a28:	f004 fe36 	bl	8008698 <_ZN5debug7printlnEPKc>
				}
				waitForNextTrigger() ;
 8003a2c:	f7ff f864 	bl	8002af8 <_Z18waitForNextTriggerv>
				updateProcess=IDLE;
 8003a30:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <_Z7OS_loopv+0x540>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
				break;
 8003a36:	46c0      	nop			; (mov r8, r8)
	while(warningProcess!=0 || stopProcess!=0 || updateProcess!=0){
 8003a38:	e5ab      	b.n	8003592 <_Z7OS_loopv+0x6a>
			}
		}
	// khi đã kiểm tra và hoàn tất các công việc thì bước vào trạng thái ngủ
//	enterStopMode();
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b003      	add	sp, #12
 8003a40:	bd90      	pop	{r4, r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	2000003c 	.word	0x2000003c
 8003a48:	0800ec0c 	.word	0x0800ec0c
 8003a4c:	0800eed4 	.word	0x0800eed4
 8003a50:	200012f0 	.word	0x200012f0
 8003a54:	0800eeec 	.word	0x0800eeec
 8003a58:	20001af1 	.word	0x20001af1
 8003a5c:	00001388 	.word	0x00001388
 8003a60:	50000800 	.word	0x50000800
 8003a64:	0800ef00 	.word	0x0800ef00
 8003a68:	20001af2 	.word	0x20001af2
 8003a6c:	20001af0 	.word	0x20001af0
 8003a70:	0800ef1c 	.word	0x0800ef1c
 8003a74:	0800ef38 	.word	0x0800ef38
 8003a78:	0800ef50 	.word	0x0800ef50
 8003a7c:	0800ef70 	.word	0x0800ef70

08003a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a84:	f000 fc26 	bl	80042d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a88:	f000 f826 	bl	8003ad8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a8c:	f7fe fe44 	bl	8002718 <MX_GPIO_Init>
  MX_ADC_Init();
 8003a90:	f7fe fd96 	bl	80025c0 <MX_ADC_Init>
  MX_TIM2_Init();
 8003a94:	f000 f9e8 	bl	8003e68 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003a98:	f000 fa6e 	bl	8003f78 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 8003a9c:	f000 faa0 	bl	8003fe0 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8003aa0:	f000 fad2 	bl	8004048 <MX_USART5_UART_Init>
  MX_RTC_Init();
 8003aa4:	f000 f8de 	bl	8003c64 <MX_RTC_Init>
  MX_I2C1_Init();
 8003aa8:	f7fe ff16 	bl	80028d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003aac:	f7fe ff60 	bl	8002970 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  updateProcess=MQTT_PUBLIC_DATA;
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <main+0x50>)
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	701a      	strb	r2, [r3, #0]
  /* Cấu hình thời gian cho RTC với chu kì ngắt 120s */
//  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 120, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
//    {
//      Error_Handler();
//    }
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <main+0x54>)
 8003ab8:	2100      	movs	r1, #0
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 ff9c 	bl	80049f8 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	init();
 8003ac0:	f7ff fb84 	bl	80031cc <_Z4initv>
	SSD1306_Clear_Data();
 8003ac4:	f007 f881 	bl	800abca <SSD1306_Clear_Data>
  while (1)
  {
	  OS_loop();
 8003ac8:	f7ff fd2e 	bl	8003528 <_Z7OS_loopv>
 8003acc:	e7fc      	b.n	8003ac8 <main+0x48>
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	20001af2 	.word	0x20001af2
 8003ad4:	20000230 	.word	0x20000230

08003ad8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b09f      	sub	sp, #124	; 0x7c
 8003adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ade:	2440      	movs	r4, #64	; 0x40
 8003ae0:	193b      	adds	r3, r7, r4
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	2338      	movs	r3, #56	; 0x38
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	2100      	movs	r1, #0
 8003aea:	f007 f9d2 	bl	800ae92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aee:	232c      	movs	r3, #44	; 0x2c
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	0018      	movs	r0, r3
 8003af4:	2314      	movs	r3, #20
 8003af6:	001a      	movs	r2, r3
 8003af8:	2100      	movs	r1, #0
 8003afa:	f007 f9ca 	bl	800ae92 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	0018      	movs	r0, r3
 8003b02:	2328      	movs	r3, #40	; 0x28
 8003b04:	001a      	movs	r2, r3
 8003b06:	2100      	movs	r1, #0
 8003b08:	f007 f9c3 	bl	800ae92 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b0c:	4b33      	ldr	r3, [pc, #204]	; (8003bdc <_Z18SystemClock_Configv+0x104>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a33      	ldr	r2, [pc, #204]	; (8003be0 <_Z18SystemClock_Configv+0x108>)
 8003b12:	401a      	ands	r2, r3
 8003b14:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <_Z18SystemClock_Configv+0x104>)
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	0109      	lsls	r1, r1, #4
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003b1e:	0021      	movs	r1, r4
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	220a      	movs	r2, #10
 8003b24:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	2201      	movs	r2, #1
 8003b2a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	2210      	movs	r2, #16
 8003b30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2201      	movs	r2, #1
 8003b36:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b3e:	187b      	adds	r3, r7, r1
 8003b40:	2200      	movs	r2, #0
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	2280      	movs	r2, #128	; 0x80
 8003b48:	02d2      	lsls	r2, r2, #11
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	03d2      	lsls	r2, r2, #15
 8003b52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b54:	187b      	adds	r3, r7, r1
 8003b56:	0018      	movs	r0, r3
 8003b58:	f002 f802 	bl	8005b60 <HAL_RCC_OscConfig>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	1e5a      	subs	r2, r3, #1
 8003b60:	4193      	sbcs	r3, r2
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8003b68:	f000 f83c 	bl	8003be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	187b      	adds	r3, r7, r1
 8003b70:	220f      	movs	r2, #15
 8003b72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b74:	187b      	adds	r3, r7, r1
 8003b76:	2203      	movs	r2, #3
 8003b78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b7a:	187b      	adds	r3, r7, r1
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	2200      	movs	r2, #0
 8003b84:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b86:	187b      	adds	r3, r7, r1
 8003b88:	2200      	movs	r2, #0
 8003b8a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	2101      	movs	r1, #1
 8003b90:	0018      	movs	r0, r3
 8003b92:	f002 fbbb 	bl	800630c <HAL_RCC_ClockConfig>
 8003b96:	0003      	movs	r3, r0
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	4193      	sbcs	r3, r2
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8003ba2:	f000 f81f 	bl	8003be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8003ba6:	1d3b      	adds	r3, r7, #4
 8003ba8:	2221      	movs	r2, #33	; 0x21
 8003baa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bac:	1d3b      	adds	r3, r7, #4
 8003bae:	2200      	movs	r2, #0
 8003bb0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	0292      	lsls	r2, r2, #10
 8003bb8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f002 fdc5 	bl	800674c <HAL_RCCEx_PeriphCLKConfig>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	1e5a      	subs	r2, r3, #1
 8003bc6:	4193      	sbcs	r3, r2
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <_Z18SystemClock_Configv+0xfa>
  {
    Error_Handler();
 8003bce:	f000 f809 	bl	8003be4 <Error_Handler>
  }
}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b01f      	add	sp, #124	; 0x7c
 8003bd8:	bd90      	pop	{r4, r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	ffffe7ff 	.word	0xffffe7ff

08003be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003be8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bea:	e7fe      	b.n	8003bea <Error_Handler+0x6>

08003bec <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d115      	bne.n	8003c28 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d111      	bne.n	8003c28 <_Z41__static_initialization_and_destruction_0ii+0x3c>
sim7x00 SIM7600E(&huart1) ;
 8003c04:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003c08:	0011      	movs	r1, r2
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f005 f870 	bl	8008cf0 <_ZN7sim7x00C1EP20__UART_HandleTypeDef>
debug   SYSTEM(&huart5) ;
 8003c10:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003c14:	0011      	movs	r1, r2
 8003c16:	0018      	movs	r0, r3
 8003c18:	f004 fd1a 	bl	8008650 <_ZN5debugC1EP20__UART_HandleTypeDef>
lrwan   LRWAN(&huart4) ;
 8003c1c:	4a09      	ldr	r2, [pc, #36]	; (8003c44 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003c20:	0011      	movs	r1, r2
 8003c22:	0018      	movs	r0, r3
 8003c24:	f004 fd64 	bl	80086f0 <_ZN5lrwanC1EP20__UART_HandleTypeDef>
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	0000ffff 	.word	0x0000ffff
 8003c34:	20001b70 	.word	0x20001b70
 8003c38:	20000324 	.word	0x20000324
 8003c3c:	20001c78 	.word	0x20001c78
 8003c40:	200012f0 	.word	0x200012f0
 8003c44:	20001bf4 	.word	0x20001bf4
 8003c48:	200012f4 	.word	0x200012f4

08003c4c <_GLOBAL__sub_I_SIM7600E>:
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <_GLOBAL__sub_I_SIM7600E+0x14>)
 8003c52:	0019      	movs	r1, r3
 8003c54:	2001      	movs	r0, #1
 8003c56:	f7ff ffc9 	bl	8003bec <_Z41__static_initialization_and_destruction_0ii>
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	0000ffff 	.word	0x0000ffff

08003c64 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c68:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <MX_RTC_Init+0x54>)
 8003c6a:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <MX_RTC_Init+0x58>)
 8003c6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <MX_RTC_Init+0x54>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003c74:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <MX_RTC_Init+0x54>)
 8003c76:	227f      	movs	r2, #127	; 0x7f
 8003c78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <MX_RTC_Init+0x54>)
 8003c7c:	22ff      	movs	r2, #255	; 0xff
 8003c7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <MX_RTC_Init+0x54>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <MX_RTC_Init+0x54>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <MX_RTC_Init+0x54>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <MX_RTC_Init+0x54>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <MX_RTC_Init+0x54>)
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f002 feca 	bl	8006a34 <HAL_RTC_Init>
 8003ca0:	0003      	movs	r3, r0
 8003ca2:	1e5a      	subs	r2, r3, #1
 8003ca4:	4193      	sbcs	r3, r2
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8003cac:	f7ff ff9a 	bl	8003be4 <Error_Handler>
//  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
//  {
//    Error_Handler();
//  }

}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	20001b08 	.word	0x20001b08
 8003cbc:	40002800 	.word	0x40002800

08003cc0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <HAL_RTC_MspInit+0x38>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <HAL_RTC_MspInit+0x3c>)
 8003cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RTC_MspInit+0x3c>)
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	02c9      	lsls	r1, r1, #11
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 3, 0);
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2103      	movs	r1, #3
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f000 ffc9 	bl	8004c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003cea:	2002      	movs	r0, #2
 8003cec:	f000 ffdb 	bl	8004ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40002800 	.word	0x40002800
 8003cfc:	40021000 	.word	0x40021000

08003d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_MspInit+0x24>)
 8003d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_MspInit+0x24>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_MspInit+0x24>)
 8003d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <HAL_MspInit+0x24>)
 8003d16:	2180      	movs	r1, #128	; 0x80
 8003d18:	0549      	lsls	r1, r1, #21
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000

08003d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d2c:	e7fe      	b.n	8003d2c <NMI_Handler+0x4>

08003d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d32:	e7fe      	b.n	8003d32 <HardFault_Handler+0x4>

08003d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d4c:	f000 fb16 	bl	800437c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d50:	46c0      	nop			; (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <RTC_IRQHandler+0x14>)
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f002 ff58 	bl	8006c14 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	20001b08 	.word	0x20001b08

08003d70 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003d74:	2001      	movs	r0, #1
 8003d76:	f001 fa0f 	bl	8005198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003d7a:	2002      	movs	r0, #2
 8003d7c:	f001 fa0c 	bl	8005198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f001 fa02 	bl	8005198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <USART4_5_IRQHandler+0x1c>)
 8003da2:	0018      	movs	r0, r3
 8003da4:	f003 fc12 	bl	80075cc <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <USART4_5_IRQHandler+0x20>)
 8003daa:	0018      	movs	r0, r3
 8003dac:	f003 fc0e 	bl	80075cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	20001bf4 	.word	0x20001bf4
 8003dbc:	20001c78 	.word	0x20001c78

08003dc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <TIM2_IRQHandler+0x14>)
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f002 ff96 	bl	8006cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	20001b30 	.word	0x20001b30

08003dd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <USART1_IRQHandler+0x14>)
 8003dde:	0018      	movs	r0, r3
 8003de0:	f003 fbf4 	bl	80075cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	20001b70 	.word	0x20001b70

08003df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <_sbrk+0x5c>)
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <_sbrk+0x60>)
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e04:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <_sbrk+0x64>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <_sbrk+0x64>)
 8003e0e:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <_sbrk+0x68>)
 8003e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <_sbrk+0x64>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	18d3      	adds	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d207      	bcs.n	8003e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e20:	f006 fffa 	bl	800ae18 <__errno>
 8003e24:	0003      	movs	r3, r0
 8003e26:	220c      	movs	r2, #12
 8003e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	425b      	negs	r3, r3
 8003e2e:	e009      	b.n	8003e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e30:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <_sbrk+0x64>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <_sbrk+0x64>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	18d2      	adds	r2, r2, r3
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <_sbrk+0x64>)
 8003e40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e42:	68fb      	ldr	r3, [r7, #12]
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b006      	add	sp, #24
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20005000 	.word	0x20005000
 8003e50:	00000400 	.word	0x00000400
 8003e54:	20001b2c 	.word	0x20001b2c
 8003e58:	20002928 	.word	0x20002928

08003e5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e6e:	2310      	movs	r3, #16
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	0018      	movs	r0, r3
 8003e74:	2308      	movs	r3, #8
 8003e76:	001a      	movs	r2, r3
 8003e78:	2100      	movs	r1, #0
 8003e7a:	f007 f80a 	bl	800ae92 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e7e:	003b      	movs	r3, r7
 8003e80:	0018      	movs	r0, r3
 8003e82:	2310      	movs	r3, #16
 8003e84:	001a      	movs	r2, r3
 8003e86:	2100      	movs	r1, #0
 8003e88:	f007 f803 	bl	800ae92 <memset>

  htim2.Instance = TIM2;
 8003e8c:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <MX_TIM2_Init+0xc8>)
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	05d2      	lsls	r2, r2, #23
 8003e92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8003e94:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <MX_TIM2_Init+0xc8>)
 8003e96:	4a27      	ldr	r2, [pc, #156]	; (8003f34 <MX_TIM2_Init+0xcc>)
 8003e98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e9a:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <MX_TIM2_Init+0xc8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003ea0:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <MX_TIM2_Init+0xc8>)
 8003ea2:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <MX_TIM2_Init+0xd0>)
 8003ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <MX_TIM2_Init+0xc8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <MX_TIM2_Init+0xc8>)
 8003eae:	2280      	movs	r2, #128	; 0x80
 8003eb0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <MX_TIM2_Init+0xc8>)
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f002 fedf 	bl	8006c78 <HAL_TIM_OC_Init>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	4193      	sbcs	r3, r2
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003ec6:	f7ff fe8d 	bl	8003be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eca:	2110      	movs	r1, #16
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ed8:	187a      	adds	r2, r7, r1
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <MX_TIM2_Init+0xc8>)
 8003edc:	0011      	movs	r1, r2
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f003 f9c2 	bl	8007268 <HAL_TIMEx_MasterConfigSynchronization>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	1e5a      	subs	r2, r3, #1
 8003ee8:	4193      	sbcs	r3, r2
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003ef0:	f7ff fe78 	bl	8003be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003ef4:	003b      	movs	r3, r7
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003efa:	003b      	movs	r3, r7
 8003efc:	2200      	movs	r2, #0
 8003efe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f00:	003b      	movs	r3, r7
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f06:	003b      	movs	r3, r7
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f0c:	0039      	movs	r1, r7
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <MX_TIM2_Init+0xc8>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	0018      	movs	r0, r3
 8003f14:	f002 ffd8 	bl	8006ec8 <HAL_TIM_OC_ConfigChannel>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	1e5a      	subs	r2, r3, #1
 8003f1c:	4193      	sbcs	r3, r2
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8003f24:	f7ff fe5e 	bl	8003be4 <Error_Handler>
  }

}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b006      	add	sp, #24
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20001b30 	.word	0x20001b30
 8003f34:	00007cff 	.word	0x00007cff
 8003f38:	000003e7 	.word	0x000003e7

08003f3c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	05db      	lsls	r3, r3, #23
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d10d      	bne.n	8003f6c <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <HAL_TIM_OC_MspInit+0x38>)
 8003f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f54:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <HAL_TIM_OC_MspInit+0x38>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2103      	movs	r1, #3
 8003f60:	200f      	movs	r0, #15
 8003f62:	f000 fe8b 	bl	8004c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f66:	200f      	movs	r0, #15
 8003f68:	f000 fe9d 	bl	8004ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b002      	add	sp, #8
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000

08003f78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart5;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003f7c:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003f7e:	4a17      	ldr	r2, [pc, #92]	; (8003fdc <MX_USART1_UART_Init+0x64>)
 8003f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003f84:	22e1      	movs	r2, #225	; 0xe1
 8003f86:	0252      	lsls	r2, r2, #9
 8003f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f90:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <MX_USART1_UART_Init+0x60>)
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f003 f9b1 	bl	8007324 <HAL_UART_Init>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	1e5a      	subs	r2, r3, #1
 8003fc6:	4193      	sbcs	r3, r2
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003fce:	f7ff fe09 	bl	8003be4 <Error_Handler>
  }

}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20001b70 	.word	0x20001b70
 8003fdc:	40013800 	.word	0x40013800

08003fe0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0

  huart4.Instance = USART4;
 8003fe4:	4b16      	ldr	r3, [pc, #88]	; (8004040 <MX_USART4_UART_Init+0x60>)
 8003fe6:	4a17      	ldr	r2, [pc, #92]	; (8004044 <MX_USART4_UART_Init+0x64>)
 8003fe8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <MX_USART4_UART_Init+0x60>)
 8003fec:	2296      	movs	r2, #150	; 0x96
 8003fee:	0192      	lsls	r2, r2, #6
 8003ff0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <MX_USART4_UART_Init+0x60>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <MX_USART4_UART_Init+0x60>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <MX_USART4_UART_Init+0x60>)
 8004000:	2200      	movs	r2, #0
 8004002:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004004:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <MX_USART4_UART_Init+0x60>)
 8004006:	220c      	movs	r2, #12
 8004008:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <MX_USART4_UART_Init+0x60>)
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <MX_USART4_UART_Init+0x60>)
 8004012:	2200      	movs	r2, #0
 8004014:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <MX_USART4_UART_Init+0x60>)
 8004018:	2200      	movs	r2, #0
 800401a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <MX_USART4_UART_Init+0x60>)
 800401e:	2200      	movs	r2, #0
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <MX_USART4_UART_Init+0x60>)
 8004024:	0018      	movs	r0, r3
 8004026:	f003 f97d 	bl	8007324 <HAL_UART_Init>
 800402a:	0003      	movs	r3, r0
 800402c:	1e5a      	subs	r2, r3, #1
 800402e:	4193      	sbcs	r3, r2
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_USART4_UART_Init+0x5a>
  {
    Error_Handler();
 8004036:	f7ff fdd5 	bl	8003be4 <Error_Handler>
  }

}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20001bf4 	.word	0x20001bf4
 8004044:	40004c00 	.word	0x40004c00

08004048 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0

  huart5.Instance = USART5;
 800404c:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 800404e:	4a17      	ldr	r2, [pc, #92]	; (80040ac <MX_USART5_UART_Init+0x64>)
 8004050:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 8004054:	22e1      	movs	r2, #225	; 0xe1
 8004056:	0252      	lsls	r2, r2, #9
 8004058:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 800405c:	2200      	movs	r2, #0
 800405e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 8004062:	2200      	movs	r2, #0
 8004064:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 8004068:	2200      	movs	r2, #0
 800406a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 800406e:	220c      	movs	r2, #12
 8004070:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 8004074:	2200      	movs	r2, #0
 8004076:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 800407a:	2200      	movs	r2, #0
 800407c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 8004080:	2200      	movs	r2, #0
 8004082:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 8004086:	2200      	movs	r2, #0
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <MX_USART5_UART_Init+0x60>)
 800408c:	0018      	movs	r0, r3
 800408e:	f003 f949 	bl	8007324 <HAL_UART_Init>
 8004092:	0003      	movs	r3, r0
 8004094:	1e5a      	subs	r2, r3, #1
 8004096:	4193      	sbcs	r3, r2
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <MX_USART5_UART_Init+0x5a>
  {
    Error_Handler();
 800409e:	f7ff fda1 	bl	8003be4 <Error_Handler>
  }

}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20001c78 	.word	0x20001c78
 80040ac:	40005000 	.word	0x40005000

080040b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b08d      	sub	sp, #52	; 0x34
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b8:	231c      	movs	r3, #28
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	0018      	movs	r0, r3
 80040be:	2314      	movs	r3, #20
 80040c0:	001a      	movs	r2, r3
 80040c2:	2100      	movs	r1, #0
 80040c4:	f006 fee5 	bl	800ae92 <memset>
  if(uartHandle->Instance==USART1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a65      	ldr	r2, [pc, #404]	; (8004264 <HAL_UART_MspInit+0x1b4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d131      	bne.n	8004136 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040d2:	4b65      	ldr	r3, [pc, #404]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80040d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d6:	4b64      	ldr	r3, [pc, #400]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	01c9      	lsls	r1, r1, #7
 80040dc:	430a      	orrs	r2, r1
 80040de:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e0:	4b61      	ldr	r3, [pc, #388]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80040e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e4:	4b60      	ldr	r3, [pc, #384]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80040e6:	2102      	movs	r1, #2
 80040e8:	430a      	orrs	r2, r1
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80040ec:	4b5e      	ldr	r3, [pc, #376]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	2202      	movs	r2, #2
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM7600_TX_Pin|SIM7600_RX_Pin;
 80040f8:	211c      	movs	r1, #28
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	22c0      	movs	r2, #192	; 0xc0
 80040fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004100:	187b      	adds	r3, r7, r1
 8004102:	2202      	movs	r2, #2
 8004104:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004106:	187b      	adds	r3, r7, r1
 8004108:	2200      	movs	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410c:	187b      	adds	r3, r7, r1
 800410e:	2203      	movs	r2, #3
 8004110:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004112:	187b      	adds	r3, r7, r1
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004118:	187b      	adds	r3, r7, r1
 800411a:	4a54      	ldr	r2, [pc, #336]	; (800426c <HAL_UART_MspInit+0x1bc>)
 800411c:	0019      	movs	r1, r3
 800411e:	0010      	movs	r0, r2
 8004120:	f000 fe66 	bl	8004df0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8004124:	2200      	movs	r2, #0
 8004126:	2101      	movs	r1, #1
 8004128:	201b      	movs	r0, #27
 800412a:	f000 fda7 	bl	8004c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800412e:	201b      	movs	r0, #27
 8004130:	f000 fdb9 	bl	8004ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 8004134:	e091      	b.n	800425a <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART4)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a4d      	ldr	r2, [pc, #308]	; (8004270 <HAL_UART_MspInit+0x1c0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d132      	bne.n	80041a6 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART4_CLK_ENABLE();
 8004140:	4b49      	ldr	r3, [pc, #292]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 8004142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004144:	4b48      	ldr	r3, [pc, #288]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 8004146:	2180      	movs	r1, #128	; 0x80
 8004148:	0309      	lsls	r1, r1, #12
 800414a:	430a      	orrs	r2, r1
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800414e:	4b46      	ldr	r3, [pc, #280]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	4b45      	ldr	r3, [pc, #276]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 8004154:	2104      	movs	r1, #4
 8004156:	430a      	orrs	r2, r1
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c
 800415a:	4b43      	ldr	r3, [pc, #268]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	2204      	movs	r2, #4
 8004160:	4013      	ands	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LRWAN_TX_Pin|LRWAN_RX_Pin;
 8004166:	211c      	movs	r1, #28
 8004168:	187b      	adds	r3, r7, r1
 800416a:	22c0      	movs	r2, #192	; 0xc0
 800416c:	0112      	lsls	r2, r2, #4
 800416e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004170:	187b      	adds	r3, r7, r1
 8004172:	2202      	movs	r2, #2
 8004174:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004176:	187b      	adds	r3, r7, r1
 8004178:	2200      	movs	r2, #0
 800417a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800417c:	187b      	adds	r3, r7, r1
 800417e:	2203      	movs	r2, #3
 8004180:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8004182:	187b      	adds	r3, r7, r1
 8004184:	2206      	movs	r2, #6
 8004186:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004188:	187b      	adds	r3, r7, r1
 800418a:	4a3a      	ldr	r2, [pc, #232]	; (8004274 <HAL_UART_MspInit+0x1c4>)
 800418c:	0019      	movs	r1, r3
 800418e:	0010      	movs	r0, r2
 8004190:	f000 fe2e 	bl	8004df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 2, 0);
 8004194:	2200      	movs	r2, #0
 8004196:	2102      	movs	r1, #2
 8004198:	200e      	movs	r0, #14
 800419a:	f000 fd6f 	bl	8004c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800419e:	200e      	movs	r0, #14
 80041a0:	f000 fd81 	bl	8004ca6 <HAL_NVIC_EnableIRQ>
}
 80041a4:	e059      	b.n	800425a <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART5)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a33      	ldr	r2, [pc, #204]	; (8004278 <HAL_UART_MspInit+0x1c8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d154      	bne.n	800425a <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART5_CLK_ENABLE();
 80041b0:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80041b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b4:	4b2c      	ldr	r3, [pc, #176]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80041b6:	2180      	movs	r1, #128	; 0x80
 80041b8:	0349      	lsls	r1, r1, #13
 80041ba:	430a      	orrs	r2, r1
 80041bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041be:	4b2a      	ldr	r3, [pc, #168]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80041c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c2:	4b29      	ldr	r3, [pc, #164]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80041c4:	2104      	movs	r1, #4
 80041c6:	430a      	orrs	r2, r1
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80041ca:	4b27      	ldr	r3, [pc, #156]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	2204      	movs	r2, #4
 80041d0:	4013      	ands	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80041d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041da:	4b23      	ldr	r3, [pc, #140]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80041dc:	2108      	movs	r1, #8
 80041de:	430a      	orrs	r2, r1
 80041e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80041e2:	4b21      	ldr	r3, [pc, #132]	; (8004268 <HAL_UART_MspInit+0x1b8>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	2208      	movs	r2, #8
 80041e8:	4013      	ands	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 80041ee:	211c      	movs	r1, #28
 80041f0:	187b      	adds	r3, r7, r1
 80041f2:	2280      	movs	r2, #128	; 0x80
 80041f4:	0152      	lsls	r2, r2, #5
 80041f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	2202      	movs	r2, #2
 80041fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fe:	187b      	adds	r3, r7, r1
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004204:	187b      	adds	r3, r7, r1
 8004206:	2203      	movs	r2, #3
 8004208:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 800420a:	187b      	adds	r3, r7, r1
 800420c:	2202      	movs	r2, #2
 800420e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8004210:	000c      	movs	r4, r1
 8004212:	187b      	adds	r3, r7, r1
 8004214:	4a17      	ldr	r2, [pc, #92]	; (8004274 <HAL_UART_MspInit+0x1c4>)
 8004216:	0019      	movs	r1, r3
 8004218:	0010      	movs	r0, r2
 800421a:	f000 fde9 	bl	8004df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 800421e:	0021      	movs	r1, r4
 8004220:	187b      	adds	r3, r7, r1
 8004222:	2204      	movs	r2, #4
 8004224:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004226:	187b      	adds	r3, r7, r1
 8004228:	2202      	movs	r2, #2
 800422a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	187b      	adds	r3, r7, r1
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004232:	187b      	adds	r3, r7, r1
 8004234:	2203      	movs	r2, #3
 8004236:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8004238:	187b      	adds	r3, r7, r1
 800423a:	2206      	movs	r2, #6
 800423c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 800423e:	187b      	adds	r3, r7, r1
 8004240:	4a0e      	ldr	r2, [pc, #56]	; (800427c <HAL_UART_MspInit+0x1cc>)
 8004242:	0019      	movs	r1, r3
 8004244:	0010      	movs	r0, r2
 8004246:	f000 fdd3 	bl	8004df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 2, 0);
 800424a:	2200      	movs	r2, #0
 800424c:	2102      	movs	r1, #2
 800424e:	200e      	movs	r0, #14
 8004250:	f000 fd14 	bl	8004c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8004254:	200e      	movs	r0, #14
 8004256:	f000 fd26 	bl	8004ca6 <HAL_NVIC_EnableIRQ>
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b00d      	add	sp, #52	; 0x34
 8004260:	bd90      	pop	{r4, r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	40013800 	.word	0x40013800
 8004268:	40021000 	.word	0x40021000
 800426c:	50000400 	.word	0x50000400
 8004270:	40004c00 	.word	0x40004c00
 8004274:	50000800 	.word	0x50000800
 8004278:	40005000 	.word	0x40005000
 800427c:	50000c00 	.word	0x50000c00

08004280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004280:	480d      	ldr	r0, [pc, #52]	; (80042b8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004282:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004284:	480d      	ldr	r0, [pc, #52]	; (80042bc <LoopForever+0x6>)
  ldr r1, =_edata
 8004286:	490e      	ldr	r1, [pc, #56]	; (80042c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004288:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <LoopForever+0xe>)
  movs r3, #0
 800428a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800428c:	e002      	b.n	8004294 <LoopCopyDataInit>

0800428e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800428e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004292:	3304      	adds	r3, #4

08004294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004298:	d3f9      	bcc.n	800428e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800429a:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800429c:	4c0b      	ldr	r4, [pc, #44]	; (80042cc <LoopForever+0x16>)
  movs r3, #0
 800429e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042a0:	e001      	b.n	80042a6 <LoopFillZerobss>

080042a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042a4:	3204      	adds	r2, #4

080042a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042a8:	d3fb      	bcc.n	80042a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80042aa:	f7ff fdd7 	bl	8003e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ae:	f006 fdb9 	bl	800ae24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042b2:	f7ff fbe5 	bl	8003a80 <main>

080042b6 <LoopForever>:

LoopForever:
    b LoopForever
 80042b6:	e7fe      	b.n	80042b6 <LoopForever>
   ldr   r0, =_estack
 80042b8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80042bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80042c4:	0801023c 	.word	0x0801023c
  ldr r2, =_sbss
 80042c8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80042cc:	20002928 	.word	0x20002928

080042d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042d0:	e7fe      	b.n	80042d0 <ADC1_COMP_IRQHandler>
	...

080042d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042da:	1dfb      	adds	r3, r7, #7
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_Init+0x3c>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <HAL_Init+0x3c>)
 80042e6:	2140      	movs	r1, #64	; 0x40
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042ec:	2000      	movs	r0, #0
 80042ee:	f000 f811 	bl	8004314 <HAL_InitTick>
 80042f2:	1e03      	subs	r3, r0, #0
 80042f4:	d003      	beq.n	80042fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80042f6:	1dfb      	adds	r3, r7, #7
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e001      	b.n	8004302 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042fe:	f7ff fcff 	bl	8003d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004302:	1dfb      	adds	r3, r7, #7
 8004304:	781b      	ldrb	r3, [r3, #0]
}
 8004306:	0018      	movs	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	b002      	add	sp, #8
 800430c:	bd80      	pop	{r7, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	40022000 	.word	0x40022000

08004314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_InitTick+0x5c>)
 800431e:	681c      	ldr	r4, [r3, #0]
 8004320:	4b14      	ldr	r3, [pc, #80]	; (8004374 <HAL_InitTick+0x60>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	0019      	movs	r1, r3
 8004326:	23fa      	movs	r3, #250	; 0xfa
 8004328:	0098      	lsls	r0, r3, #2
 800432a:	f7fb feff 	bl	800012c <__udivsi3>
 800432e:	0003      	movs	r3, r0
 8004330:	0019      	movs	r1, r3
 8004332:	0020      	movs	r0, r4
 8004334:	f7fb fefa 	bl	800012c <__udivsi3>
 8004338:	0003      	movs	r3, r0
 800433a:	0018      	movs	r0, r3
 800433c:	f000 fcc3 	bl	8004cc6 <HAL_SYSTICK_Config>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e00f      	b.n	8004368 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d80b      	bhi.n	8004366 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	2301      	movs	r3, #1
 8004352:	425b      	negs	r3, r3
 8004354:	2200      	movs	r2, #0
 8004356:	0018      	movs	r0, r3
 8004358:	f000 fc90 	bl	8004c7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_InitTick+0x64>)
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b003      	add	sp, #12
 800436e:	bd90      	pop	{r4, r7, pc}
 8004370:	20000000 	.word	0x20000000
 8004374:	20000008 	.word	0x20000008
 8004378:	20000004 	.word	0x20000004

0800437c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_IncTick+0x1c>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	001a      	movs	r2, r3
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_IncTick+0x20>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	18d2      	adds	r2, r2, r3
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <HAL_IncTick+0x20>)
 800438e:	601a      	str	r2, [r3, #0]
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	20000008 	.word	0x20000008
 800439c:	20002920 	.word	0x20002920

080043a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  return uwTick;
 80043a4:	4b02      	ldr	r3, [pc, #8]	; (80043b0 <HAL_GetTick+0x10>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	20002920 	.word	0x20002920

080043b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043bc:	f7ff fff0 	bl	80043a0 <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3301      	adds	r3, #1
 80043cc:	d005      	beq.n	80043da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_Delay+0x40>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	001a      	movs	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	f7ff ffe0 	bl	80043a0 <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d8f7      	bhi.n	80043dc <HAL_Delay+0x28>
  {
  }
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b004      	add	sp, #16
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000008 	.word	0x20000008

080043f8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <HAL_ResumeTick+0x18>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_ResumeTick+0x18>)
 8004402:	2102      	movs	r1, #2
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]
}
 8004408:	46c0      	nop			; (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	e000e010 	.word	0xe000e010

08004414 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e159      	b.n	80046da <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2250      	movs	r2, #80	; 0x50
 8004438:	2100      	movs	r1, #0
 800443a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	0018      	movs	r0, r3
 8004440:	f7fe f92c 	bl	800269c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	2210      	movs	r2, #16
 800444a:	4013      	ands	r3, r2
 800444c:	2b10      	cmp	r3, #16
 800444e:	d005      	beq.n	800445c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2204      	movs	r2, #4
 8004458:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800445a:	d00b      	beq.n	8004474 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	2210      	movs	r2, #16
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2250      	movs	r2, #80	; 0x50
 800446c:	2100      	movs	r1, #0
 800446e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e132      	b.n	80046da <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	4a9a      	ldr	r2, [pc, #616]	; (80046e4 <HAL_ADC_Init+0x2d0>)
 800447a:	4013      	ands	r3, r2
 800447c:	2202      	movs	r2, #2
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2203      	movs	r2, #3
 800448c:	4013      	ands	r3, r2
 800448e:	2b01      	cmp	r3, #1
 8004490:	d108      	bne.n	80044a4 <HAL_ADC_Init+0x90>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2201      	movs	r2, #1
 800449a:	4013      	ands	r3, r2
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_ADC_Init+0x90>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <HAL_ADC_Init+0x92>
 80044a4:	2300      	movs	r3, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d149      	bne.n	800453e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	23c0      	movs	r3, #192	; 0xc0
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d00b      	beq.n	80044ce <HAL_ADC_Init+0xba>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	05db      	lsls	r3, r3, #23
 80044be:	429a      	cmp	r2, r3
 80044c0:	d005      	beq.n	80044ce <HAL_ADC_Init+0xba>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d111      	bne.n	80044f2 <HAL_ADC_Init+0xde>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	0092      	lsls	r2, r2, #2
 80044da:	0892      	lsrs	r2, r2, #2
 80044dc:	611a      	str	r2, [r3, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6919      	ldr	r1, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	611a      	str	r2, [r3, #16]
 80044f0:	e014      	b.n	800451c <HAL_ADC_Init+0x108>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	0092      	lsls	r2, r2, #2
 80044fe:	0892      	lsrs	r2, r2, #2
 8004500:	611a      	str	r2, [r3, #16]
 8004502:	4b79      	ldr	r3, [pc, #484]	; (80046e8 <HAL_ADC_Init+0x2d4>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b78      	ldr	r3, [pc, #480]	; (80046e8 <HAL_ADC_Init+0x2d4>)
 8004508:	4978      	ldr	r1, [pc, #480]	; (80046ec <HAL_ADC_Init+0x2d8>)
 800450a:	400a      	ands	r2, r1
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <HAL_ADC_Init+0x2d4>)
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	4b74      	ldr	r3, [pc, #464]	; (80046e8 <HAL_ADC_Init+0x2d4>)
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2118      	movs	r1, #24
 8004528:	438a      	bics	r2, r1
 800452a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68d9      	ldr	r1, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800453e:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <HAL_ADC_Init+0x2d4>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b69      	ldr	r3, [pc, #420]	; (80046e8 <HAL_ADC_Init+0x2d4>)
 8004544:	496a      	ldr	r1, [pc, #424]	; (80046f0 <HAL_ADC_Init+0x2dc>)
 8004546:	400a      	ands	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800454a:	4b67      	ldr	r3, [pc, #412]	; (80046e8 <HAL_ADC_Init+0x2d4>)
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	065a      	lsls	r2, r3, #25
 8004554:	4b64      	ldr	r3, [pc, #400]	; (80046e8 <HAL_ADC_Init+0x2d4>)
 8004556:	430a      	orrs	r2, r1
 8004558:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	055b      	lsls	r3, r3, #21
 8004564:	4013      	ands	r3, r2
 8004566:	d108      	bne.n	800457a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	0549      	lsls	r1, r1, #21
 8004576:	430a      	orrs	r2, r1
 8004578:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	495b      	ldr	r1, [pc, #364]	; (80046f4 <HAL_ADC_Init+0x2e0>)
 8004586:	400a      	ands	r2, r1
 8004588:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68d9      	ldr	r1, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d101      	bne.n	80045a0 <HAL_ADC_Init+0x18c>
 800459c:	2304      	movs	r3, #4
 800459e:	e000      	b.n	80045a2 <HAL_ADC_Init+0x18e>
 80045a0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80045a2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2020      	movs	r0, #32
 80045a8:	5c1b      	ldrb	r3, [r3, r0]
 80045aa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80045ac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	202c      	movs	r0, #44	; 0x2c
 80045b2:	5c1b      	ldrb	r3, [r3, r0]
 80045b4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80045b6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80045bc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80045c4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80045cc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045da:	23c2      	movs	r3, #194	; 0xc2
 80045dc:	33ff      	adds	r3, #255	; 0xff
 80045de:	429a      	cmp	r2, r3
 80045e0:	d00b      	beq.n	80045fa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68d9      	ldr	r1, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2221      	movs	r2, #33	; 0x21
 80045fe:	5c9b      	ldrb	r3, [r3, r2]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d11a      	bne.n	800463a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	5c9b      	ldrb	r3, [r3, r2]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2180      	movs	r1, #128	; 0x80
 800461a:	0249      	lsls	r1, r1, #9
 800461c:	430a      	orrs	r2, r1
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	e00b      	b.n	800463a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	2220      	movs	r2, #32
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	2201      	movs	r2, #1
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d11f      	bne.n	8004682 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	492a      	ldr	r1, [pc, #168]	; (80046f8 <HAL_ADC_Init+0x2e4>)
 800464e:	400a      	ands	r2, r1
 8004650:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6919      	ldr	r1, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004660:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004666:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2101      	movs	r1, #1
 800467c:	430a      	orrs	r2, r1
 800467e:	611a      	str	r2, [r3, #16]
 8004680:	e00e      	b.n	80046a0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2201      	movs	r2, #1
 800468a:	4013      	ands	r3, r2
 800468c:	2b01      	cmp	r3, #1
 800468e:	d107      	bne.n	80046a0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2101      	movs	r1, #1
 800469c:	438a      	bics	r2, r1
 800469e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2107      	movs	r1, #7
 80046ac:	438a      	bics	r2, r1
 80046ae:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6959      	ldr	r1, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	2203      	movs	r2, #3
 80046ce:	4393      	bics	r3, r2
 80046d0:	2201      	movs	r2, #1
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b002      	add	sp, #8
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	fffffefd 	.word	0xfffffefd
 80046e8:	40012708 	.word	0x40012708
 80046ec:	ffc3ffff 	.word	0xffc3ffff
 80046f0:	fdffffff 	.word	0xfdffffff
 80046f4:	fffe0219 	.word	0xfffe0219
 80046f8:	fffffc03 	.word	0xfffffc03

080046fc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004704:	230f      	movs	r3, #15
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2204      	movs	r2, #4
 8004714:	4013      	ands	r3, r2
 8004716:	d138      	bne.n	800478a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2250      	movs	r2, #80	; 0x50
 800471c:	5c9b      	ldrb	r3, [r3, r2]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_ADC_Start+0x2a>
 8004722:	2302      	movs	r3, #2
 8004724:	e038      	b.n	8004798 <HAL_ADC_Start+0x9c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2250      	movs	r2, #80	; 0x50
 800472a:	2101      	movs	r1, #1
 800472c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d007      	beq.n	8004746 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004736:	230f      	movs	r3, #15
 8004738:	18fc      	adds	r4, r7, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f000 f8dd 	bl	80048fc <ADC_Enable>
 8004742:	0003      	movs	r3, r0
 8004744:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004746:	230f      	movs	r3, #15
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d120      	bne.n	8004792 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004754:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <HAL_ADC_Start+0xa4>)
 8004756:	4013      	ands	r3, r2
 8004758:	2280      	movs	r2, #128	; 0x80
 800475a:	0052      	lsls	r2, r2, #1
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2250      	movs	r2, #80	; 0x50
 800476c:	2100      	movs	r1, #0
 800476e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	221c      	movs	r2, #28
 8004776:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2104      	movs	r1, #4
 8004784:	430a      	orrs	r2, r1
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	e003      	b.n	8004792 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800478a:	230f      	movs	r3, #15
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	2202      	movs	r2, #2
 8004790:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004792:	230f      	movs	r3, #15
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	781b      	ldrb	r3, [r3, #0]
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b005      	add	sp, #20
 800479e:	bd90      	pop	{r4, r7, pc}
 80047a0:	fffff0fe 	.word	0xfffff0fe

080047a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b002      	add	sp, #8
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2250      	movs	r2, #80	; 0x50
 80047ca:	5c9b      	ldrb	r3, [r3, r2]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x18>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e085      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x124>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2250      	movs	r2, #80	; 0x50
 80047d8:	2101      	movs	r1, #1
 80047da:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2204      	movs	r2, #4
 80047e4:	4013      	ands	r3, r2
 80047e6:	d00b      	beq.n	8004800 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	2220      	movs	r2, #32
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2250      	movs	r2, #80	; 0x50
 80047f8:	2100      	movs	r1, #0
 80047fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e06f      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4a38      	ldr	r2, [pc, #224]	; (80048e8 <HAL_ADC_ConfigChannel+0x12c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d035      	beq.n	8004876 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	035b      	lsls	r3, r3, #13
 8004816:	0b5a      	lsrs	r2, r3, #13
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	02db      	lsls	r3, r3, #11
 8004828:	4013      	ands	r3, r2
 800482a:	d009      	beq.n	8004840 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800482c:	4b2f      	ldr	r3, [pc, #188]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	0409      	lsls	r1, r1, #16
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800483a:	200a      	movs	r0, #10
 800483c:	f000 f8be 	bl	80049bc <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	4013      	ands	r3, r2
 800484a:	d006      	beq.n	800485a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800484c:	4b27      	ldr	r3, [pc, #156]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b26      	ldr	r3, [pc, #152]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 8004852:	2180      	movs	r1, #128	; 0x80
 8004854:	03c9      	lsls	r1, r1, #15
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	025b      	lsls	r3, r3, #9
 8004862:	4013      	ands	r3, r2
 8004864:	d037      	beq.n	80048d6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8004866:	4b21      	ldr	r3, [pc, #132]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 800486c:	2180      	movs	r1, #128	; 0x80
 800486e:	0449      	lsls	r1, r1, #17
 8004870:	430a      	orrs	r2, r1
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e02f      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	035b      	lsls	r3, r3, #13
 8004882:	0b5b      	lsrs	r3, r3, #13
 8004884:	43d9      	mvns	r1, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	400a      	ands	r2, r1
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	02db      	lsls	r3, r3, #11
 8004896:	4013      	ands	r3, r2
 8004898:	d005      	beq.n	80048a6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800489a:	4b14      	ldr	r3, [pc, #80]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 80048a0:	4913      	ldr	r1, [pc, #76]	; (80048f0 <HAL_ADC_ConfigChannel+0x134>)
 80048a2:	400a      	ands	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	029b      	lsls	r3, r3, #10
 80048ae:	4013      	ands	r3, r2
 80048b0:	d005      	beq.n	80048be <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80048b2:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 80048b8:	490e      	ldr	r1, [pc, #56]	; (80048f4 <HAL_ADC_ConfigChannel+0x138>)
 80048ba:	400a      	ands	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	2380      	movs	r3, #128	; 0x80
 80048c4:	025b      	lsls	r3, r3, #9
 80048c6:	4013      	ands	r3, r2
 80048c8:	d005      	beq.n	80048d6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b07      	ldr	r3, [pc, #28]	; (80048ec <HAL_ADC_ConfigChannel+0x130>)
 80048d0:	4909      	ldr	r1, [pc, #36]	; (80048f8 <HAL_ADC_ConfigChannel+0x13c>)
 80048d2:	400a      	ands	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2250      	movs	r2, #80	; 0x50
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b002      	add	sp, #8
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	00001001 	.word	0x00001001
 80048ec:	40012708 	.word	0x40012708
 80048f0:	ff7fffff 	.word	0xff7fffff
 80048f4:	ffbfffff 	.word	0xffbfffff
 80048f8:	feffffff 	.word	0xfeffffff

080048fc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2203      	movs	r2, #3
 8004910:	4013      	ands	r3, r2
 8004912:	2b01      	cmp	r3, #1
 8004914:	d108      	bne.n	8004928 <ADC_Enable+0x2c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2201      	movs	r2, #1
 800491e:	4013      	ands	r3, r2
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <ADC_Enable+0x2c>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <ADC_Enable+0x2e>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d13f      	bne.n	80049ae <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <ADC_Enable+0xbc>)
 8004936:	4013      	ands	r3, r2
 8004938:	d00d      	beq.n	8004956 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	2210      	movs	r2, #16
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494a:	2201      	movs	r2, #1
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e02c      	b.n	80049b0 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2101      	movs	r1, #1
 8004962:	430a      	orrs	r2, r1
 8004964:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004966:	2001      	movs	r0, #1
 8004968:	f000 f828 	bl	80049bc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800496c:	f7ff fd18 	bl	80043a0 <HAL_GetTick>
 8004970:	0003      	movs	r3, r0
 8004972:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004974:	e014      	b.n	80049a0 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004976:	f7ff fd13 	bl	80043a0 <HAL_GetTick>
 800497a:	0002      	movs	r2, r0
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b0a      	cmp	r3, #10
 8004982:	d90d      	bls.n	80049a0 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	2210      	movs	r2, #16
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	2201      	movs	r2, #1
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e007      	b.n	80049b0 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d1e3      	bne.n	8004976 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b004      	add	sp, #16
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	80000017 	.word	0x80000017

080049bc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <ADC_DelayMicroSecond+0x34>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	490a      	ldr	r1, [pc, #40]	; (80049f4 <ADC_DelayMicroSecond+0x38>)
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7fb fbae 	bl	800012c <__udivsi3>
 80049d0:	0003      	movs	r3, r0
 80049d2:	001a      	movs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4353      	muls	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80049da:	e002      	b.n	80049e2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3b01      	subs	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f9      	bne.n	80049dc <ADC_DelayMicroSecond+0x20>
  } 
}
 80049e8:	46c0      	nop			; (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b004      	add	sp, #16
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000000 	.word	0x20000000
 80049f4:	000f4240 	.word	0x000f4240

080049f8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a02:	2317      	movs	r3, #23
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2250      	movs	r2, #80	; 0x50
 8004a16:	5c9b      	ldrb	r3, [r3, r2]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_ADCEx_Calibration_Start+0x28>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e07a      	b.n	8004b16 <HAL_ADCEx_Calibration_Start+0x11e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2250      	movs	r2, #80	; 0x50
 8004a24:	2101      	movs	r1, #1
 8004a26:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2203      	movs	r2, #3
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d108      	bne.n	8004a48 <HAL_ADCEx_Calibration_Start+0x50>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_ADCEx_Calibration_Start+0x50>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_ADCEx_Calibration_Start+0x52>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d152      	bne.n	8004af4 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	4a33      	ldr	r2, [pc, #204]	; (8004b20 <HAL_ADCEx_Calibration_Start+0x128>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	2202      	movs	r2, #2
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2203      	movs	r2, #3
 8004a66:	4013      	ands	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2103      	movs	r1, #3
 8004a76:	438a      	bics	r2, r1
 8004a78:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2180      	movs	r1, #128	; 0x80
 8004a86:	0609      	lsls	r1, r1, #24
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004a8c:	f7ff fc88 	bl	80043a0 <HAL_GetTick>
 8004a90:	0003      	movs	r3, r0
 8004a92:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004a94:	e014      	b.n	8004ac0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004a96:	f7ff fc83 	bl	80043a0 <HAL_GetTick>
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b0a      	cmp	r3, #10
 8004aa2:	d90d      	bls.n	8004ac0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	2212      	movs	r2, #18
 8004aaa:	4393      	bics	r3, r2
 8004aac:	2210      	movs	r2, #16
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2250      	movs	r2, #80	; 0x50
 8004ab8:	2100      	movs	r1, #0
 8004aba:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e02a      	b.n	8004b16 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0fdb      	lsrs	r3, r3, #31
 8004ac8:	07da      	lsls	r2, r3, #31
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d0e1      	beq.n	8004a96 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68d9      	ldr	r1, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	4393      	bics	r3, r2
 8004aea:	2201      	movs	r2, #1
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
 8004af2:	e009      	b.n	8004b08 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	2220      	movs	r2, #32
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8004b00:	2317      	movs	r3, #23
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2250      	movs	r2, #80	; 0x50
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004b10:	2317      	movs	r3, #23
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	781b      	ldrb	r3, [r3, #0]
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b006      	add	sp, #24
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	fffffefd 	.word	0xfffffefd

08004b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	0002      	movs	r2, r0
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b30:	1dfb      	adds	r3, r7, #7
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b7f      	cmp	r3, #127	; 0x7f
 8004b36:	d809      	bhi.n	8004b4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b38:	1dfb      	adds	r3, r7, #7
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	231f      	movs	r3, #31
 8004b40:	401a      	ands	r2, r3
 8004b42:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <__NVIC_EnableIRQ+0x30>)
 8004b44:	2101      	movs	r1, #1
 8004b46:	4091      	lsls	r1, r2
 8004b48:	000a      	movs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]
  }
}
 8004b4c:	46c0      	nop			; (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	e000e100 	.word	0xe000e100

08004b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	0002      	movs	r2, r0
 8004b60:	6039      	str	r1, [r7, #0]
 8004b62:	1dfb      	adds	r3, r7, #7
 8004b64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b66:	1dfb      	adds	r3, r7, #7
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b6c:	d828      	bhi.n	8004bc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b6e:	4a2f      	ldr	r2, [pc, #188]	; (8004c2c <__NVIC_SetPriority+0xd4>)
 8004b70:	1dfb      	adds	r3, r7, #7
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	b25b      	sxtb	r3, r3
 8004b76:	089b      	lsrs	r3, r3, #2
 8004b78:	33c0      	adds	r3, #192	; 0xc0
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	589b      	ldr	r3, [r3, r2]
 8004b7e:	1dfa      	adds	r2, r7, #7
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	0011      	movs	r1, r2
 8004b84:	2203      	movs	r2, #3
 8004b86:	400a      	ands	r2, r1
 8004b88:	00d2      	lsls	r2, r2, #3
 8004b8a:	21ff      	movs	r1, #255	; 0xff
 8004b8c:	4091      	lsls	r1, r2
 8004b8e:	000a      	movs	r2, r1
 8004b90:	43d2      	mvns	r2, r2
 8004b92:	401a      	ands	r2, r3
 8004b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	019b      	lsls	r3, r3, #6
 8004b9a:	22ff      	movs	r2, #255	; 0xff
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	1dfb      	adds	r3, r7, #7
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	4003      	ands	r3, r0
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bac:	481f      	ldr	r0, [pc, #124]	; (8004c2c <__NVIC_SetPriority+0xd4>)
 8004bae:	1dfb      	adds	r3, r7, #7
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	089b      	lsrs	r3, r3, #2
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	33c0      	adds	r3, #192	; 0xc0
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004bbe:	e031      	b.n	8004c24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bc0:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <__NVIC_SetPriority+0xd8>)
 8004bc2:	1dfb      	adds	r3, r7, #7
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	230f      	movs	r3, #15
 8004bca:	400b      	ands	r3, r1
 8004bcc:	3b08      	subs	r3, #8
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	3306      	adds	r3, #6
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	18d3      	adds	r3, r2, r3
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1dfa      	adds	r2, r7, #7
 8004bdc:	7812      	ldrb	r2, [r2, #0]
 8004bde:	0011      	movs	r1, r2
 8004be0:	2203      	movs	r2, #3
 8004be2:	400a      	ands	r2, r1
 8004be4:	00d2      	lsls	r2, r2, #3
 8004be6:	21ff      	movs	r1, #255	; 0xff
 8004be8:	4091      	lsls	r1, r2
 8004bea:	000a      	movs	r2, r1
 8004bec:	43d2      	mvns	r2, r2
 8004bee:	401a      	ands	r2, r3
 8004bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	22ff      	movs	r2, #255	; 0xff
 8004bf8:	401a      	ands	r2, r3
 8004bfa:	1dfb      	adds	r3, r7, #7
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	2303      	movs	r3, #3
 8004c02:	4003      	ands	r3, r0
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c08:	4809      	ldr	r0, [pc, #36]	; (8004c30 <__NVIC_SetPriority+0xd8>)
 8004c0a:	1dfb      	adds	r3, r7, #7
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	001c      	movs	r4, r3
 8004c10:	230f      	movs	r3, #15
 8004c12:	4023      	ands	r3, r4
 8004c14:	3b08      	subs	r3, #8
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	3306      	adds	r3, #6
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	18c3      	adds	r3, r0, r3
 8004c20:	3304      	adds	r3, #4
 8004c22:	601a      	str	r2, [r3, #0]
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b003      	add	sp, #12
 8004c2a:	bd90      	pop	{r4, r7, pc}
 8004c2c:	e000e100 	.word	0xe000e100
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	4a0c      	ldr	r2, [pc, #48]	; (8004c74 <SysTick_Config+0x40>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c46:	2301      	movs	r3, #1
 8004c48:	e010      	b.n	8004c6c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <SysTick_Config+0x44>)
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	3a01      	subs	r2, #1
 8004c50:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c52:	2301      	movs	r3, #1
 8004c54:	425b      	negs	r3, r3
 8004c56:	2103      	movs	r1, #3
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7ff ff7d 	bl	8004b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <SysTick_Config+0x44>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <SysTick_Config+0x44>)
 8004c66:	2207      	movs	r2, #7
 8004c68:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b002      	add	sp, #8
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	00ffffff 	.word	0x00ffffff
 8004c78:	e000e010 	.word	0xe000e010

08004c7c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	210f      	movs	r1, #15
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	1c02      	adds	r2, r0, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b25b      	sxtb	r3, r3
 8004c96:	0011      	movs	r1, r2
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff ff5d 	bl	8004b58 <__NVIC_SetPriority>
}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b004      	add	sp, #16
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	0002      	movs	r2, r0
 8004cae:	1dfb      	adds	r3, r7, #7
 8004cb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cb2:	1dfb      	adds	r3, r7, #7
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7ff ff33 	bl	8004b24 <__NVIC_EnableIRQ>
}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7ff ffaf 	bl	8004c34 <SysTick_Config>
 8004cd6:	0003      	movs	r3, r0
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b002      	add	sp, #8
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce8:	230f      	movs	r3, #15
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2225      	movs	r2, #37	; 0x25
 8004cf4:	5c9b      	ldrb	r3, [r3, r2]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d008      	beq.n	8004d0e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2224      	movs	r2, #36	; 0x24
 8004d06:	2100      	movs	r1, #0
 8004d08:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e024      	b.n	8004d58 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	210e      	movs	r1, #14
 8004d1a:	438a      	bics	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2101      	movs	r1, #1
 8004d2a:	438a      	bics	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	221c      	movs	r2, #28
 8004d34:	401a      	ands	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	4091      	lsls	r1, r2
 8004d3e:	000a      	movs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2225      	movs	r2, #37	; 0x25
 8004d46:	2101      	movs	r1, #1
 8004d48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2224      	movs	r2, #36	; 0x24
 8004d4e:	2100      	movs	r1, #0
 8004d50:	5499      	strb	r1, [r3, r2]

    return status;
 8004d52:	230f      	movs	r3, #15
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004d58:	0018      	movs	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b004      	add	sp, #16
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d68:	230f      	movs	r3, #15
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2225      	movs	r2, #37	; 0x25
 8004d74:	5c9b      	ldrb	r3, [r3, r2]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d007      	beq.n	8004d8c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2204      	movs	r2, #4
 8004d80:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d82:	230f      	movs	r3, #15
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	e02a      	b.n	8004de2 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	210e      	movs	r1, #14
 8004d98:	438a      	bics	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2101      	movs	r1, #1
 8004da8:	438a      	bics	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db0:	221c      	movs	r2, #28
 8004db2:	401a      	ands	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	2101      	movs	r1, #1
 8004dba:	4091      	lsls	r1, r2
 8004dbc:	000a      	movs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2225      	movs	r2, #37	; 0x25
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2224      	movs	r2, #36	; 0x24
 8004dcc:	2100      	movs	r1, #0
 8004dce:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	0010      	movs	r0, r2
 8004de0:	4798      	blx	r3
    }
  }
  return status;
 8004de2:	230f      	movs	r3, #15
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	781b      	ldrb	r3, [r3, #0]
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b004      	add	sp, #16
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004e06:	e155      	b.n	80050b4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4091      	lsls	r1, r2
 8004e12:	000a      	movs	r2, r1
 8004e14:	4013      	ands	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d100      	bne.n	8004e20 <HAL_GPIO_Init+0x30>
 8004e1e:	e146      	b.n	80050ae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d00b      	beq.n	8004e40 <HAL_GPIO_Init+0x50>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d007      	beq.n	8004e40 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e34:	2b11      	cmp	r3, #17
 8004e36:	d003      	beq.n	8004e40 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b12      	cmp	r3, #18
 8004e3e:	d130      	bne.n	8004ea2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	0013      	movs	r3, r2
 8004e50:	43da      	mvns	r2, r3
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4013      	ands	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	409a      	lsls	r2, r3
 8004e62:	0013      	movs	r3, r2
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e76:	2201      	movs	r2, #1
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	0013      	movs	r3, r2
 8004e7e:	43da      	mvns	r2, r3
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4013      	ands	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	401a      	ands	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	409a      	lsls	r2, r3
 8004e94:	0013      	movs	r3, r2
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	2203      	movs	r2, #3
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	0013      	movs	r3, r2
 8004eb2:	43da      	mvns	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	0013      	movs	r3, r2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_Init+0xf2>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b12      	cmp	r3, #18
 8004ee0:	d123      	bne.n	8004f2a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	08da      	lsrs	r2, r3, #3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3208      	adds	r2, #8
 8004eea:	0092      	lsls	r2, r2, #2
 8004eec:	58d3      	ldr	r3, [r2, r3]
 8004eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2207      	movs	r2, #7
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	220f      	movs	r2, #15
 8004efa:	409a      	lsls	r2, r3
 8004efc:	0013      	movs	r3, r2
 8004efe:	43da      	mvns	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4013      	ands	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2107      	movs	r1, #7
 8004f0e:	400b      	ands	r3, r1
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	409a      	lsls	r2, r3
 8004f14:	0013      	movs	r3, r2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	08da      	lsrs	r2, r3, #3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3208      	adds	r2, #8
 8004f24:	0092      	lsls	r2, r2, #2
 8004f26:	6939      	ldr	r1, [r7, #16]
 8004f28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	2203      	movs	r2, #3
 8004f36:	409a      	lsls	r2, r3
 8004f38:	0013      	movs	r3, r2
 8004f3a:	43da      	mvns	r2, r3
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2203      	movs	r2, #3
 8004f48:	401a      	ands	r2, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	0013      	movs	r3, r2
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	055b      	lsls	r3, r3, #21
 8004f66:	4013      	ands	r3, r2
 8004f68:	d100      	bne.n	8004f6c <HAL_GPIO_Init+0x17c>
 8004f6a:	e0a0      	b.n	80050ae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f6c:	4b57      	ldr	r3, [pc, #348]	; (80050cc <HAL_GPIO_Init+0x2dc>)
 8004f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f70:	4b56      	ldr	r3, [pc, #344]	; (80050cc <HAL_GPIO_Init+0x2dc>)
 8004f72:	2101      	movs	r1, #1
 8004f74:	430a      	orrs	r2, r1
 8004f76:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f78:	4a55      	ldr	r2, [pc, #340]	; (80050d0 <HAL_GPIO_Init+0x2e0>)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	089b      	lsrs	r3, r3, #2
 8004f7e:	3302      	adds	r3, #2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	589b      	ldr	r3, [r3, r2]
 8004f84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2203      	movs	r2, #3
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	220f      	movs	r2, #15
 8004f90:	409a      	lsls	r2, r3
 8004f92:	0013      	movs	r3, r2
 8004f94:	43da      	mvns	r2, r3
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	23a0      	movs	r3, #160	; 0xa0
 8004fa0:	05db      	lsls	r3, r3, #23
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d01f      	beq.n	8004fe6 <HAL_GPIO_Init+0x1f6>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a4a      	ldr	r2, [pc, #296]	; (80050d4 <HAL_GPIO_Init+0x2e4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d019      	beq.n	8004fe2 <HAL_GPIO_Init+0x1f2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a49      	ldr	r2, [pc, #292]	; (80050d8 <HAL_GPIO_Init+0x2e8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_GPIO_Init+0x1ee>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a48      	ldr	r2, [pc, #288]	; (80050dc <HAL_GPIO_Init+0x2ec>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00d      	beq.n	8004fda <HAL_GPIO_Init+0x1ea>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a47      	ldr	r2, [pc, #284]	; (80050e0 <HAL_GPIO_Init+0x2f0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <HAL_GPIO_Init+0x1e6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a46      	ldr	r2, [pc, #280]	; (80050e4 <HAL_GPIO_Init+0x2f4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_GPIO_Init+0x1e2>
 8004fce:	2305      	movs	r3, #5
 8004fd0:	e00a      	b.n	8004fe8 <HAL_GPIO_Init+0x1f8>
 8004fd2:	2306      	movs	r3, #6
 8004fd4:	e008      	b.n	8004fe8 <HAL_GPIO_Init+0x1f8>
 8004fd6:	2304      	movs	r3, #4
 8004fd8:	e006      	b.n	8004fe8 <HAL_GPIO_Init+0x1f8>
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e004      	b.n	8004fe8 <HAL_GPIO_Init+0x1f8>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e002      	b.n	8004fe8 <HAL_GPIO_Init+0x1f8>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_GPIO_Init+0x1f8>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	2103      	movs	r1, #3
 8004fec:	400a      	ands	r2, r1
 8004fee:	0092      	lsls	r2, r2, #2
 8004ff0:	4093      	lsls	r3, r2
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ff8:	4935      	ldr	r1, [pc, #212]	; (80050d0 <HAL_GPIO_Init+0x2e0>)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	3302      	adds	r3, #2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005006:	4b38      	ldr	r3, [pc, #224]	; (80050e8 <HAL_GPIO_Init+0x2f8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	43da      	mvns	r2, r3
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	2380      	movs	r3, #128	; 0x80
 800501c:	025b      	lsls	r3, r3, #9
 800501e:	4013      	ands	r3, r2
 8005020:	d003      	beq.n	800502a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800502a:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <HAL_GPIO_Init+0x2f8>)
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <HAL_GPIO_Init+0x2f8>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	43da      	mvns	r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4013      	ands	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	029b      	lsls	r3, r3, #10
 8005048:	4013      	ands	r3, r2
 800504a:	d003      	beq.n	8005054 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005054:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <HAL_GPIO_Init+0x2f8>)
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800505a:	4b23      	ldr	r3, [pc, #140]	; (80050e8 <HAL_GPIO_Init+0x2f8>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	43da      	mvns	r2, r3
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4013      	ands	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	2380      	movs	r3, #128	; 0x80
 8005070:	035b      	lsls	r3, r3, #13
 8005072:	4013      	ands	r3, r2
 8005074:	d003      	beq.n	800507e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800507e:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <HAL_GPIO_Init+0x2f8>)
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005084:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <HAL_GPIO_Init+0x2f8>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	43da      	mvns	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4013      	ands	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	039b      	lsls	r3, r3, #14
 800509c:	4013      	ands	r3, r2
 800509e:	d003      	beq.n	80050a8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <HAL_GPIO_Init+0x2f8>)
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	3301      	adds	r3, #1
 80050b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	40da      	lsrs	r2, r3
 80050bc:	1e13      	subs	r3, r2, #0
 80050be:	d000      	beq.n	80050c2 <HAL_GPIO_Init+0x2d2>
 80050c0:	e6a2      	b.n	8004e08 <HAL_GPIO_Init+0x18>
  }
}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b006      	add	sp, #24
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40010000 	.word	0x40010000
 80050d4:	50000400 	.word	0x50000400
 80050d8:	50000800 	.word	0x50000800
 80050dc:	50000c00 	.word	0x50000c00
 80050e0:	50001000 	.word	0x50001000
 80050e4:	50001c00 	.word	0x50001c00
 80050e8:	40010400 	.word	0x40010400

080050ec <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	000a      	movs	r2, r1
 80050f6:	1cbb      	adds	r3, r7, #2
 80050f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	1cba      	adds	r2, r7, #2
 8005100:	8812      	ldrh	r2, [r2, #0]
 8005102:	4013      	ands	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005106:	230f      	movs	r3, #15
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e003      	b.n	8005118 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005110:	230f      	movs	r3, #15
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005118:	230f      	movs	r3, #15
 800511a:	18fb      	adds	r3, r7, r3
 800511c:	781b      	ldrb	r3, [r3, #0]
}
 800511e:	0018      	movs	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	b004      	add	sp, #16
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	0008      	movs	r0, r1
 8005130:	0011      	movs	r1, r2
 8005132:	1cbb      	adds	r3, r7, #2
 8005134:	1c02      	adds	r2, r0, #0
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	1c7b      	adds	r3, r7, #1
 800513a:	1c0a      	adds	r2, r1, #0
 800513c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800513e:	1c7b      	adds	r3, r7, #1
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005146:	1cbb      	adds	r3, r7, #2
 8005148:	881a      	ldrh	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800514e:	e003      	b.n	8005158 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005150:	1cbb      	adds	r3, r7, #2
 8005152:	881a      	ldrh	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	000a      	movs	r2, r1
 800516a:	1cbb      	adds	r3, r7, #2
 800516c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005174:	1cbb      	adds	r3, r7, #2
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4013      	ands	r3, r2
 800517c:	041a      	lsls	r2, r3, #16
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	43db      	mvns	r3, r3
 8005182:	1cb9      	adds	r1, r7, #2
 8005184:	8809      	ldrh	r1, [r1, #0]
 8005186:	400b      	ands	r3, r1
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	619a      	str	r2, [r3, #24]
}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	46bd      	mov	sp, r7
 8005192:	b004      	add	sp, #16
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	0002      	movs	r2, r0
 80051a0:	1dbb      	adds	r3, r7, #6
 80051a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	1dba      	adds	r2, r7, #6
 80051aa:	8812      	ldrh	r2, [r2, #0]
 80051ac:	4013      	ands	r3, r2
 80051ae:	d008      	beq.n	80051c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80051b2:	1dba      	adds	r2, r7, #6
 80051b4:	8812      	ldrh	r2, [r2, #0]
 80051b6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051b8:	1dbb      	adds	r3, r7, #6
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	0018      	movs	r0, r3
 80051be:	f7fd fcdb 	bl	8002b78 <HAL_GPIO_EXTI_Callback>
  }
}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b002      	add	sp, #8
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	40010400 	.word	0x40010400

080051d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e082      	b.n	80052e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2241      	movs	r2, #65	; 0x41
 80051e6:	5c9b      	ldrb	r3, [r3, r2]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d107      	bne.n	80051fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2240      	movs	r2, #64	; 0x40
 80051f2:	2100      	movs	r1, #0
 80051f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7fd fc05 	bl	8002a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2241      	movs	r2, #65	; 0x41
 8005202:	2124      	movs	r1, #36	; 0x24
 8005204:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2101      	movs	r1, #1
 8005212:	438a      	bics	r2, r1
 8005214:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4934      	ldr	r1, [pc, #208]	; (80052f0 <HAL_I2C_Init+0x120>)
 8005220:	400a      	ands	r2, r1
 8005222:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4931      	ldr	r1, [pc, #196]	; (80052f4 <HAL_I2C_Init+0x124>)
 8005230:	400a      	ands	r2, r1
 8005232:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d108      	bne.n	800524e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	0209      	lsls	r1, r1, #8
 8005248:	430a      	orrs	r2, r1
 800524a:	609a      	str	r2, [r3, #8]
 800524c:	e007      	b.n	800525e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2184      	movs	r1, #132	; 0x84
 8005258:	0209      	lsls	r1, r1, #8
 800525a:	430a      	orrs	r2, r1
 800525c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d104      	bne.n	8005270 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2280      	movs	r2, #128	; 0x80
 800526c:	0112      	lsls	r2, r2, #4
 800526e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	491f      	ldr	r1, [pc, #124]	; (80052f8 <HAL_I2C_Init+0x128>)
 800527c:	430a      	orrs	r2, r1
 800527e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	491a      	ldr	r1, [pc, #104]	; (80052f4 <HAL_I2C_Init+0x124>)
 800528c:	400a      	ands	r2, r1
 800528e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	431a      	orrs	r2, r3
 800529a:	0011      	movs	r1, r2
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	021a      	lsls	r2, r3, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69d9      	ldr	r1, [r3, #28]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1a      	ldr	r2, [r3, #32]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2101      	movs	r1, #1
 80052c6:	430a      	orrs	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2241      	movs	r2, #65	; 0x41
 80052d4:	2120      	movs	r1, #32
 80052d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2242      	movs	r2, #66	; 0x42
 80052e2:	2100      	movs	r1, #0
 80052e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	0018      	movs	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b002      	add	sp, #8
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	f0ffffff 	.word	0xf0ffffff
 80052f4:	ffff7fff 	.word	0xffff7fff
 80052f8:	02008000 	.word	0x02008000

080052fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052fc:	b590      	push	{r4, r7, lr}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	0008      	movs	r0, r1
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	0019      	movs	r1, r3
 800530a:	230a      	movs	r3, #10
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	1c02      	adds	r2, r0, #0
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	2308      	movs	r3, #8
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	1c0a      	adds	r2, r1, #0
 8005318:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2241      	movs	r2, #65	; 0x41
 800531e:	5c9b      	ldrb	r3, [r3, r2]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b20      	cmp	r3, #32
 8005324:	d000      	beq.n	8005328 <HAL_I2C_Master_Transmit+0x2c>
 8005326:	e0e7      	b.n	80054f8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2240      	movs	r2, #64	; 0x40
 800532c:	5c9b      	ldrb	r3, [r3, r2]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_I2C_Master_Transmit+0x3a>
 8005332:	2302      	movs	r3, #2
 8005334:	e0e1      	b.n	80054fa <HAL_I2C_Master_Transmit+0x1fe>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2240      	movs	r2, #64	; 0x40
 800533a:	2101      	movs	r1, #1
 800533c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800533e:	f7ff f82f 	bl	80043a0 <HAL_GetTick>
 8005342:	0003      	movs	r3, r0
 8005344:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	0219      	lsls	r1, r3, #8
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2319      	movs	r3, #25
 8005352:	2201      	movs	r2, #1
 8005354:	f000 fa16 	bl	8005784 <I2C_WaitOnFlagUntilTimeout>
 8005358:	1e03      	subs	r3, r0, #0
 800535a:	d001      	beq.n	8005360 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0cc      	b.n	80054fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2241      	movs	r2, #65	; 0x41
 8005364:	2121      	movs	r1, #33	; 0x21
 8005366:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2242      	movs	r2, #66	; 0x42
 800536c:	2110      	movs	r1, #16
 800536e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2208      	movs	r2, #8
 8005380:	18ba      	adds	r2, r7, r2
 8005382:	8812      	ldrh	r2, [r2, #0]
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	2bff      	cmp	r3, #255	; 0xff
 8005394:	d911      	bls.n	80053ba <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	22ff      	movs	r2, #255	; 0xff
 800539a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	045c      	lsls	r4, r3, #17
 80053a6:	230a      	movs	r3, #10
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	8819      	ldrh	r1, [r3, #0]
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	4b55      	ldr	r3, [pc, #340]	; (8005504 <HAL_I2C_Master_Transmit+0x208>)
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	0023      	movs	r3, r4
 80053b4:	f000 fb06 	bl	80059c4 <I2C_TransferConfig>
 80053b8:	e075      	b.n	80054a6 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	049c      	lsls	r4, r3, #18
 80053ce:	230a      	movs	r3, #10
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	8819      	ldrh	r1, [r3, #0]
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <HAL_I2C_Master_Transmit+0x208>)
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	0023      	movs	r3, r4
 80053dc:	f000 faf2 	bl	80059c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80053e0:	e061      	b.n	80054a6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0018      	movs	r0, r3
 80053ea:	f000 fa0a 	bl	8005802 <I2C_WaitOnTXISFlagUntilTimeout>
 80053ee:	1e03      	subs	r3, r0, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e081      	b.n	80054fa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	781a      	ldrb	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d03a      	beq.n	80054a6 <HAL_I2C_Master_Transmit+0x1aa>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d136      	bne.n	80054a6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	0013      	movs	r3, r2
 8005442:	2200      	movs	r2, #0
 8005444:	2180      	movs	r1, #128	; 0x80
 8005446:	f000 f99d 	bl	8005784 <I2C_WaitOnFlagUntilTimeout>
 800544a:	1e03      	subs	r3, r0, #0
 800544c:	d001      	beq.n	8005452 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e053      	b.n	80054fa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	2bff      	cmp	r3, #255	; 0xff
 800545a:	d911      	bls.n	8005480 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	22ff      	movs	r2, #255	; 0xff
 8005460:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005466:	b2da      	uxtb	r2, r3
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	045c      	lsls	r4, r3, #17
 800546c:	230a      	movs	r3, #10
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	8819      	ldrh	r1, [r3, #0]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	2300      	movs	r3, #0
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	0023      	movs	r3, r4
 800547a:	f000 faa3 	bl	80059c4 <I2C_TransferConfig>
 800547e:	e012      	b.n	80054a6 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548e:	b2da      	uxtb	r2, r3
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	049c      	lsls	r4, r3, #18
 8005494:	230a      	movs	r3, #10
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	8819      	ldrh	r1, [r3, #0]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	2300      	movs	r3, #0
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	0023      	movs	r3, r4
 80054a2:	f000 fa8f 	bl	80059c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d198      	bne.n	80053e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	0018      	movs	r0, r3
 80054b8:	f000 f9e2 	bl	8005880 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054bc:	1e03      	subs	r3, r0, #0
 80054be:	d001      	beq.n	80054c4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e01a      	b.n	80054fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2220      	movs	r2, #32
 80054ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	490c      	ldr	r1, [pc, #48]	; (8005508 <HAL_I2C_Master_Transmit+0x20c>)
 80054d8:	400a      	ands	r2, r1
 80054da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2241      	movs	r2, #65	; 0x41
 80054e0:	2120      	movs	r1, #32
 80054e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2242      	movs	r2, #66	; 0x42
 80054e8:	2100      	movs	r1, #0
 80054ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2240      	movs	r2, #64	; 0x40
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	0018      	movs	r0, r3
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b007      	add	sp, #28
 8005500:	bd90      	pop	{r4, r7, pc}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	80002000 	.word	0x80002000
 8005508:	fe00e800 	.word	0xfe00e800

0800550c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	230a      	movs	r3, #10
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	1c0a      	adds	r2, r1, #0
 800551e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2241      	movs	r2, #65	; 0x41
 8005528:	5c9b      	ldrb	r3, [r3, r2]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b20      	cmp	r3, #32
 800552e:	d000      	beq.n	8005532 <HAL_I2C_IsDeviceReady+0x26>
 8005530:	e0fe      	b.n	8005730 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	2380      	movs	r3, #128	; 0x80
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	401a      	ands	r2, r3
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	429a      	cmp	r2, r3
 8005544:	d101      	bne.n	800554a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005546:	2302      	movs	r3, #2
 8005548:	e0f3      	b.n	8005732 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2240      	movs	r2, #64	; 0x40
 800554e:	5c9b      	ldrb	r3, [r3, r2]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_I2C_IsDeviceReady+0x4c>
 8005554:	2302      	movs	r3, #2
 8005556:	e0ec      	b.n	8005732 <HAL_I2C_IsDeviceReady+0x226>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2240      	movs	r2, #64	; 0x40
 800555c:	2101      	movs	r1, #1
 800555e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2241      	movs	r2, #65	; 0x41
 8005564:	2124      	movs	r1, #36	; 0x24
 8005566:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d107      	bne.n	8005586 <HAL_I2C_IsDeviceReady+0x7a>
 8005576:	230a      	movs	r3, #10
 8005578:	18fb      	adds	r3, r7, r3
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	059b      	lsls	r3, r3, #22
 800557e:	0d9b      	lsrs	r3, r3, #22
 8005580:	4a6e      	ldr	r2, [pc, #440]	; (800573c <HAL_I2C_IsDeviceReady+0x230>)
 8005582:	431a      	orrs	r2, r3
 8005584:	e007      	b.n	8005596 <HAL_I2C_IsDeviceReady+0x8a>
 8005586:	230a      	movs	r3, #10
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	059b      	lsls	r3, r3, #22
 800558e:	0d9b      	lsrs	r3, r3, #22
 8005590:	22a0      	movs	r2, #160	; 0xa0
 8005592:	0192      	lsls	r2, r2, #6
 8005594:	431a      	orrs	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800559c:	f7fe ff00 	bl	80043a0 <HAL_GetTick>
 80055a0:	0003      	movs	r3, r0
 80055a2:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	2220      	movs	r2, #32
 80055ac:	4013      	ands	r3, r2
 80055ae:	3b20      	subs	r3, #32
 80055b0:	425a      	negs	r2, r3
 80055b2:	4153      	adcs	r3, r2
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	231f      	movs	r3, #31
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2210      	movs	r2, #16
 80055c4:	4013      	ands	r3, r2
 80055c6:	3b10      	subs	r3, #16
 80055c8:	425a      	negs	r2, r3
 80055ca:	4153      	adcs	r3, r2
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	231e      	movs	r3, #30
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80055d4:	e035      	b.n	8005642 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	d01a      	beq.n	8005612 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055dc:	f7fe fee0 	bl	80043a0 <HAL_GetTick>
 80055e0:	0002      	movs	r2, r0
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d302      	bcc.n	80055f2 <HAL_I2C_IsDeviceReady+0xe6>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10f      	bne.n	8005612 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2241      	movs	r2, #65	; 0x41
 80055f6:	2120      	movs	r1, #32
 80055f8:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	2220      	movs	r2, #32
 8005600:	431a      	orrs	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2240      	movs	r2, #64	; 0x40
 800560a:	2100      	movs	r1, #0
 800560c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e08f      	b.n	8005732 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	2220      	movs	r2, #32
 800561a:	4013      	ands	r3, r2
 800561c:	3b20      	subs	r3, #32
 800561e:	425a      	negs	r2, r3
 8005620:	4153      	adcs	r3, r2
 8005622:	b2da      	uxtb	r2, r3
 8005624:	231f      	movs	r3, #31
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2210      	movs	r2, #16
 8005632:	4013      	ands	r3, r2
 8005634:	3b10      	subs	r3, #16
 8005636:	425a      	negs	r2, r3
 8005638:	4153      	adcs	r3, r2
 800563a:	b2da      	uxtb	r2, r3
 800563c:	231e      	movs	r3, #30
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005642:	231f      	movs	r3, #31
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_I2C_IsDeviceReady+0x14a>
 800564c:	231e      	movs	r3, #30
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0bf      	beq.n	80055d6 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2210      	movs	r2, #16
 800565e:	4013      	ands	r3, r2
 8005660:	2b10      	cmp	r3, #16
 8005662:	d01a      	beq.n	800569a <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	0013      	movs	r3, r2
 800566e:	2200      	movs	r2, #0
 8005670:	2120      	movs	r1, #32
 8005672:	f000 f887 	bl	8005784 <I2C_WaitOnFlagUntilTimeout>
 8005676:	1e03      	subs	r3, r0, #0
 8005678:	d001      	beq.n	800567e <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e059      	b.n	8005732 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2220      	movs	r2, #32
 8005684:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2241      	movs	r2, #65	; 0x41
 800568a:	2120      	movs	r1, #32
 800568c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2240      	movs	r2, #64	; 0x40
 8005692:	2100      	movs	r1, #0
 8005694:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	e04b      	b.n	8005732 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	0013      	movs	r3, r2
 80056a4:	2200      	movs	r2, #0
 80056a6:	2120      	movs	r1, #32
 80056a8:	f000 f86c 	bl	8005784 <I2C_WaitOnFlagUntilTimeout>
 80056ac:	1e03      	subs	r3, r0, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e03e      	b.n	8005732 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2210      	movs	r2, #16
 80056ba:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2220      	movs	r2, #32
 80056c2:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d119      	bne.n	8005700 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	01c9      	lsls	r1, r1, #7
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	0013      	movs	r3, r2
 80056e8:	2200      	movs	r2, #0
 80056ea:	2120      	movs	r1, #32
 80056ec:	f000 f84a 	bl	8005784 <I2C_WaitOnFlagUntilTimeout>
 80056f0:	1e03      	subs	r3, r0, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e01c      	b.n	8005732 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2220      	movs	r2, #32
 80056fe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	3301      	adds	r3, #1
 8005704:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d900      	bls.n	8005710 <HAL_I2C_IsDeviceReady+0x204>
 800570e:	e72e      	b.n	800556e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2241      	movs	r2, #65	; 0x41
 8005714:	2120      	movs	r1, #32
 8005716:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571c:	2220      	movs	r2, #32
 800571e:	431a      	orrs	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2240      	movs	r2, #64	; 0x40
 8005728:	2100      	movs	r1, #0
 800572a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
  }
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b008      	add	sp, #32
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	02002000 	.word	0x02002000

08005740 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2202      	movs	r2, #2
 8005750:	4013      	ands	r3, r2
 8005752:	2b02      	cmp	r3, #2
 8005754:	d103      	bne.n	800575e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2201      	movs	r2, #1
 8005766:	4013      	ands	r3, r2
 8005768:	2b01      	cmp	r3, #1
 800576a:	d007      	beq.n	800577c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2101      	movs	r1, #1
 8005778:	430a      	orrs	r2, r1
 800577a:	619a      	str	r2, [r3, #24]
  }
}
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	46bd      	mov	sp, r7
 8005780:	b002      	add	sp, #8
 8005782:	bd80      	pop	{r7, pc}

08005784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	1dfb      	adds	r3, r7, #7
 8005792:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005794:	e021      	b.n	80057da <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	d01e      	beq.n	80057da <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579c:	f7fe fe00 	bl	80043a0 <HAL_GetTick>
 80057a0:	0002      	movs	r2, r0
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d302      	bcc.n	80057b2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d113      	bne.n	80057da <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	2220      	movs	r2, #32
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2241      	movs	r2, #65	; 0x41
 80057c2:	2120      	movs	r1, #32
 80057c4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2242      	movs	r2, #66	; 0x42
 80057ca:	2100      	movs	r1, #0
 80057cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2240      	movs	r2, #64	; 0x40
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e00f      	b.n	80057fa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	425a      	negs	r2, r3
 80057ea:	4153      	adcs	r3, r2
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	001a      	movs	r2, r3
 80057f0:	1dfb      	adds	r3, r7, #7
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d0ce      	beq.n	8005796 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b004      	add	sp, #16
 8005800:	bd80      	pop	{r7, pc}

08005802 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800580e:	e02b      	b.n	8005868 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	0018      	movs	r0, r3
 8005818:	f000 f86e 	bl	80058f8 <I2C_IsAcknowledgeFailed>
 800581c:	1e03      	subs	r3, r0, #0
 800581e:	d001      	beq.n	8005824 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e029      	b.n	8005878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	3301      	adds	r3, #1
 8005828:	d01e      	beq.n	8005868 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582a:	f7fe fdb9 	bl	80043a0 <HAL_GetTick>
 800582e:	0002      	movs	r2, r0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d113      	bne.n	8005868 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	2220      	movs	r2, #32
 8005846:	431a      	orrs	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2241      	movs	r2, #65	; 0x41
 8005850:	2120      	movs	r1, #32
 8005852:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2242      	movs	r2, #66	; 0x42
 8005858:	2100      	movs	r1, #0
 800585a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2240      	movs	r2, #64	; 0x40
 8005860:	2100      	movs	r1, #0
 8005862:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e007      	b.n	8005878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2202      	movs	r2, #2
 8005870:	4013      	ands	r3, r2
 8005872:	2b02      	cmp	r3, #2
 8005874:	d1cc      	bne.n	8005810 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	0018      	movs	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	b004      	add	sp, #16
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800588c:	e028      	b.n	80058e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	0018      	movs	r0, r3
 8005896:	f000 f82f 	bl	80058f8 <I2C_IsAcknowledgeFailed>
 800589a:	1e03      	subs	r3, r0, #0
 800589c:	d001      	beq.n	80058a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e026      	b.n	80058f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a2:	f7fe fd7d 	bl	80043a0 <HAL_GetTick>
 80058a6:	0002      	movs	r2, r0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d302      	bcc.n	80058b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d113      	bne.n	80058e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058bc:	2220      	movs	r2, #32
 80058be:	431a      	orrs	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2241      	movs	r2, #65	; 0x41
 80058c8:	2120      	movs	r1, #32
 80058ca:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2242      	movs	r2, #66	; 0x42
 80058d0:	2100      	movs	r1, #0
 80058d2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2240      	movs	r2, #64	; 0x40
 80058d8:	2100      	movs	r1, #0
 80058da:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e007      	b.n	80058f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	2220      	movs	r2, #32
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d1cf      	bne.n	800588e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	0018      	movs	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b004      	add	sp, #16
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2210      	movs	r2, #16
 800590c:	4013      	ands	r3, r2
 800590e:	2b10      	cmp	r3, #16
 8005910:	d151      	bne.n	80059b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005912:	e021      	b.n	8005958 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	3301      	adds	r3, #1
 8005918:	d01e      	beq.n	8005958 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591a:	f7fe fd41 	bl	80043a0 <HAL_GetTick>
 800591e:	0002      	movs	r2, r0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <I2C_IsAcknowledgeFailed+0x38>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d113      	bne.n	8005958 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005934:	2220      	movs	r2, #32
 8005936:	431a      	orrs	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2241      	movs	r2, #65	; 0x41
 8005940:	2120      	movs	r1, #32
 8005942:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2242      	movs	r2, #66	; 0x42
 8005948:	2100      	movs	r1, #0
 800594a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2240      	movs	r2, #64	; 0x40
 8005950:	2100      	movs	r1, #0
 8005952:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e02f      	b.n	80059b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	2220      	movs	r2, #32
 8005960:	4013      	ands	r3, r2
 8005962:	2b20      	cmp	r3, #32
 8005964:	d1d6      	bne.n	8005914 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2210      	movs	r2, #16
 800596c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2220      	movs	r2, #32
 8005974:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	0018      	movs	r0, r3
 800597a:	f7ff fee1 	bl	8005740 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	490d      	ldr	r1, [pc, #52]	; (80059c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800598a:	400a      	ands	r2, r1
 800598c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	2204      	movs	r2, #4
 8005994:	431a      	orrs	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2241      	movs	r2, #65	; 0x41
 800599e:	2120      	movs	r1, #32
 80059a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2242      	movs	r2, #66	; 0x42
 80059a6:	2100      	movs	r1, #0
 80059a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2240      	movs	r2, #64	; 0x40
 80059ae:	2100      	movs	r1, #0
 80059b0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	0018      	movs	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b004      	add	sp, #16
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	fe00e800 	.word	0xfe00e800

080059c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	0008      	movs	r0, r1
 80059ce:	0011      	movs	r1, r2
 80059d0:	607b      	str	r3, [r7, #4]
 80059d2:	240a      	movs	r4, #10
 80059d4:	193b      	adds	r3, r7, r4
 80059d6:	1c02      	adds	r2, r0, #0
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	2009      	movs	r0, #9
 80059dc:	183b      	adds	r3, r7, r0
 80059de:	1c0a      	adds	r2, r1, #0
 80059e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	6a3a      	ldr	r2, [r7, #32]
 80059ea:	0d51      	lsrs	r1, r2, #21
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	00d2      	lsls	r2, r2, #3
 80059f0:	400a      	ands	r2, r1
 80059f2:	490e      	ldr	r1, [pc, #56]	; (8005a2c <I2C_TransferConfig+0x68>)
 80059f4:	430a      	orrs	r2, r1
 80059f6:	43d2      	mvns	r2, r2
 80059f8:	401a      	ands	r2, r3
 80059fa:	0011      	movs	r1, r2
 80059fc:	193b      	adds	r3, r7, r4
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	059b      	lsls	r3, r3, #22
 8005a02:	0d9a      	lsrs	r2, r3, #22
 8005a04:	183b      	adds	r3, r7, r0
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	0418      	lsls	r0, r3, #16
 8005a0a:	23ff      	movs	r3, #255	; 0xff
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	4003      	ands	r3, r0
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b005      	add	sp, #20
 8005a28:	bd90      	pop	{r4, r7, pc}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	03ff63ff 	.word	0x03ff63ff

08005a30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2241      	movs	r2, #65	; 0x41
 8005a3e:	5c9b      	ldrb	r3, [r3, r2]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d138      	bne.n	8005ab8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2240      	movs	r2, #64	; 0x40
 8005a4a:	5c9b      	ldrb	r3, [r3, r2]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e032      	b.n	8005aba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2240      	movs	r2, #64	; 0x40
 8005a58:	2101      	movs	r1, #1
 8005a5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2241      	movs	r2, #65	; 0x41
 8005a60:	2124      	movs	r1, #36	; 0x24
 8005a62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2101      	movs	r1, #1
 8005a70:	438a      	bics	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4911      	ldr	r1, [pc, #68]	; (8005ac4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005a80:	400a      	ands	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6819      	ldr	r1, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2241      	movs	r2, #65	; 0x41
 8005aa8:	2120      	movs	r1, #32
 8005aaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e000      	b.n	8005aba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ab8:	2302      	movs	r3, #2
  }
}
 8005aba:	0018      	movs	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b002      	add	sp, #8
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	ffffefff 	.word	0xffffefff

08005ac8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2241      	movs	r2, #65	; 0x41
 8005ad6:	5c9b      	ldrb	r3, [r3, r2]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d139      	bne.n	8005b52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2240      	movs	r2, #64	; 0x40
 8005ae2:	5c9b      	ldrb	r3, [r3, r2]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e033      	b.n	8005b54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2240      	movs	r2, #64	; 0x40
 8005af0:	2101      	movs	r1, #1
 8005af2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2241      	movs	r2, #65	; 0x41
 8005af8:	2124      	movs	r1, #36	; 0x24
 8005afa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2101      	movs	r1, #1
 8005b08:	438a      	bics	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a11      	ldr	r2, [pc, #68]	; (8005b5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2101      	movs	r1, #1
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2241      	movs	r2, #65	; 0x41
 8005b42:	2120      	movs	r1, #32
 8005b44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2240      	movs	r2, #64	; 0x40
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e000      	b.n	8005b54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b52:	2302      	movs	r3, #2
  }
}
 8005b54:	0018      	movs	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b004      	add	sp, #16
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	fffff0ff 	.word	0xfffff0ff

08005b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b60:	b5b0      	push	{r4, r5, r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d102      	bne.n	8005b74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f000 fbc2 	bl	80062f8 <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b74:	4bca      	ldr	r3, [pc, #808]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	220c      	movs	r2, #12
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b7e:	4bc8      	ldr	r3, [pc, #800]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	2380      	movs	r3, #128	; 0x80
 8005b84:	025b      	lsls	r3, r3, #9
 8005b86:	4013      	ands	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	4013      	ands	r3, r2
 8005b92:	d100      	bne.n	8005b96 <HAL_RCC_OscConfig+0x36>
 8005b94:	e07e      	b.n	8005c94 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d007      	beq.n	8005bac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2b0c      	cmp	r3, #12
 8005ba0:	d112      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x68>
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	025b      	lsls	r3, r3, #9
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d10d      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bac:	4bbc      	ldr	r3, [pc, #752]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d100      	bne.n	8005bba <HAL_RCC_OscConfig+0x5a>
 8005bb8:	e06b      	b.n	8005c92 <HAL_RCC_OscConfig+0x132>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d167      	bne.n	8005c92 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f000 fb98 	bl	80062f8 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	2380      	movs	r3, #128	; 0x80
 8005bce:	025b      	lsls	r3, r3, #9
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d107      	bne.n	8005be4 <HAL_RCC_OscConfig+0x84>
 8005bd4:	4bb2      	ldr	r3, [pc, #712]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	4bb1      	ldr	r3, [pc, #708]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005bda:	2180      	movs	r1, #128	; 0x80
 8005bdc:	0249      	lsls	r1, r1, #9
 8005bde:	430a      	orrs	r2, r1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e027      	b.n	8005c34 <HAL_RCC_OscConfig+0xd4>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	23a0      	movs	r3, #160	; 0xa0
 8005bea:	02db      	lsls	r3, r3, #11
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d10e      	bne.n	8005c0e <HAL_RCC_OscConfig+0xae>
 8005bf0:	4bab      	ldr	r3, [pc, #684]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	4baa      	ldr	r3, [pc, #680]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005bf6:	2180      	movs	r1, #128	; 0x80
 8005bf8:	02c9      	lsls	r1, r1, #11
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	4ba8      	ldr	r3, [pc, #672]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4ba7      	ldr	r3, [pc, #668]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005c04:	2180      	movs	r1, #128	; 0x80
 8005c06:	0249      	lsls	r1, r1, #9
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e012      	b.n	8005c34 <HAL_RCC_OscConfig+0xd4>
 8005c0e:	4ba4      	ldr	r3, [pc, #656]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	4ba3      	ldr	r3, [pc, #652]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005c14:	49a3      	ldr	r1, [pc, #652]	; (8005ea4 <HAL_RCC_OscConfig+0x344>)
 8005c16:	400a      	ands	r2, r1
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	4ba1      	ldr	r3, [pc, #644]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	025b      	lsls	r3, r3, #9
 8005c22:	4013      	ands	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4b9d      	ldr	r3, [pc, #628]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	4b9c      	ldr	r3, [pc, #624]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005c2e:	499e      	ldr	r1, [pc, #632]	; (8005ea8 <HAL_RCC_OscConfig+0x348>)
 8005c30:	400a      	ands	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d015      	beq.n	8005c68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3c:	f7fe fbb0 	bl	80043a0 <HAL_GetTick>
 8005c40:	0003      	movs	r3, r0
 8005c42:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c44:	e009      	b.n	8005c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c46:	f7fe fbab 	bl	80043a0 <HAL_GetTick>
 8005c4a:	0002      	movs	r2, r0
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b64      	cmp	r3, #100	; 0x64
 8005c52:	d902      	bls.n	8005c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	f000 fb4f 	bl	80062f8 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c5a:	4b91      	ldr	r3, [pc, #580]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	2380      	movs	r3, #128	; 0x80
 8005c60:	029b      	lsls	r3, r3, #10
 8005c62:	4013      	ands	r3, r2
 8005c64:	d0ef      	beq.n	8005c46 <HAL_RCC_OscConfig+0xe6>
 8005c66:	e015      	b.n	8005c94 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c68:	f7fe fb9a 	bl	80043a0 <HAL_GetTick>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c72:	f7fe fb95 	bl	80043a0 <HAL_GetTick>
 8005c76:	0002      	movs	r2, r0
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b64      	cmp	r3, #100	; 0x64
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e339      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c84:	4b86      	ldr	r3, [pc, #536]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	029b      	lsls	r3, r3, #10
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d1f0      	bne.n	8005c72 <HAL_RCC_OscConfig+0x112>
 8005c90:	e000      	b.n	8005c94 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c92:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d100      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x140>
 8005c9e:	e09a      	b.n	8005dd6 <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	2220      	movs	r2, #32
 8005caa:	4013      	ands	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005cae:	4b7c      	ldr	r3, [pc, #496]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b7b      	ldr	r3, [pc, #492]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005cb4:	2120      	movs	r1, #32
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	4393      	bics	r3, r2
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d005      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b0c      	cmp	r3, #12
 8005ccc:	d13f      	bne.n	8005d4e <HAL_RCC_OscConfig+0x1ee>
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d13c      	bne.n	8005d4e <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005cd4:	4b72      	ldr	r3, [pc, #456]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2204      	movs	r2, #4
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x188>
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e307      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce8:	4b6d      	ldr	r3, [pc, #436]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a6f      	ldr	r2, [pc, #444]	; (8005eac <HAL_RCC_OscConfig+0x34c>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	021a      	lsls	r2, r3, #8
 8005cf8:	4b69      	ldr	r3, [pc, #420]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005cfe:	4b68      	ldr	r3, [pc, #416]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2209      	movs	r2, #9
 8005d04:	4393      	bics	r3, r2
 8005d06:	0019      	movs	r1, r3
 8005d08:	4b65      	ldr	r3, [pc, #404]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d10:	f000 fc44 	bl	800659c <HAL_RCC_GetSysClockFreq>
 8005d14:	0001      	movs	r1, r0
 8005d16:	4b62      	ldr	r3, [pc, #392]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	091b      	lsrs	r3, r3, #4
 8005d1c:	220f      	movs	r2, #15
 8005d1e:	4013      	ands	r3, r2
 8005d20:	4a63      	ldr	r2, [pc, #396]	; (8005eb0 <HAL_RCC_OscConfig+0x350>)
 8005d22:	5cd3      	ldrb	r3, [r2, r3]
 8005d24:	000a      	movs	r2, r1
 8005d26:	40da      	lsrs	r2, r3
 8005d28:	4b62      	ldr	r3, [pc, #392]	; (8005eb4 <HAL_RCC_OscConfig+0x354>)
 8005d2a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005d2c:	4b62      	ldr	r3, [pc, #392]	; (8005eb8 <HAL_RCC_OscConfig+0x358>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2513      	movs	r5, #19
 8005d32:	197c      	adds	r4, r7, r5
 8005d34:	0018      	movs	r0, r3
 8005d36:	f7fe faed 	bl	8004314 <HAL_InitTick>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005d3e:	197b      	adds	r3, r7, r5
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d047      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x276>
      {
        return status;
 8005d46:	2313      	movs	r3, #19
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	e2d4      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d027      	beq.n	8005da4 <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005d54:	4b52      	ldr	r3, [pc, #328]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2209      	movs	r2, #9
 8005d5a:	4393      	bics	r3, r2
 8005d5c:	0019      	movs	r1, r3
 8005d5e:	4b50      	ldr	r3, [pc, #320]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	430a      	orrs	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d66:	f7fe fb1b 	bl	80043a0 <HAL_GetTick>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d70:	f7fe fb16 	bl	80043a0 <HAL_GetTick>
 8005d74:	0002      	movs	r2, r0
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e2ba      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d82:	4b47      	ldr	r3, [pc, #284]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2204      	movs	r2, #4
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d0f1      	beq.n	8005d70 <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d8c:	4b44      	ldr	r3, [pc, #272]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	4a46      	ldr	r2, [pc, #280]	; (8005eac <HAL_RCC_OscConfig+0x34c>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	0019      	movs	r1, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	021a      	lsls	r2, r3, #8
 8005d9c:	4b40      	ldr	r3, [pc, #256]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	e018      	b.n	8005dd6 <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005da4:	4b3e      	ldr	r3, [pc, #248]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b3d      	ldr	r3, [pc, #244]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005daa:	2101      	movs	r1, #1
 8005dac:	438a      	bics	r2, r1
 8005dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db0:	f7fe faf6 	bl	80043a0 <HAL_GetTick>
 8005db4:	0003      	movs	r3, r0
 8005db6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dba:	f7fe faf1 	bl	80043a0 <HAL_GetTick>
 8005dbe:	0002      	movs	r2, r0
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e295      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dcc:	4b34      	ldr	r3, [pc, #208]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d1f1      	bne.n	8005dba <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2210      	movs	r2, #16
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d100      	bne.n	8005de2 <HAL_RCC_OscConfig+0x282>
 8005de0:	e0a3      	b.n	8005f2a <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d141      	bne.n	8005e6c <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005de8:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4013      	ands	r3, r2
 8005df2:	d005      	beq.n	8005e00 <HAL_RCC_OscConfig+0x2a0>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e27b      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e00:	4b27      	ldr	r3, [pc, #156]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4a2d      	ldr	r2, [pc, #180]	; (8005ebc <HAL_RCC_OscConfig+0x35c>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e0e:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005e10:	430a      	orrs	r2, r1
 8005e12:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e14:	4b22      	ldr	r3, [pc, #136]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	0a19      	lsrs	r1, r3, #8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	061a      	lsls	r2, r3, #24
 8005e22:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005e24:	430a      	orrs	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	0b5b      	lsrs	r3, r3, #13
 8005e2e:	3301      	adds	r3, #1
 8005e30:	2280      	movs	r2, #128	; 0x80
 8005e32:	0212      	lsls	r2, r2, #8
 8005e34:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	091b      	lsrs	r3, r3, #4
 8005e3c:	210f      	movs	r1, #15
 8005e3e:	400b      	ands	r3, r1
 8005e40:	491b      	ldr	r1, [pc, #108]	; (8005eb0 <HAL_RCC_OscConfig+0x350>)
 8005e42:	5ccb      	ldrb	r3, [r1, r3]
 8005e44:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005e46:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <HAL_RCC_OscConfig+0x354>)
 8005e48:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <HAL_RCC_OscConfig+0x358>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2513      	movs	r5, #19
 8005e50:	197c      	adds	r4, r7, r5
 8005e52:	0018      	movs	r0, r3
 8005e54:	f7fe fa5e 	bl	8004314 <HAL_InitTick>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005e5c:	197b      	adds	r3, r7, r5
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d062      	beq.n	8005f2a <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 8005e64:	2313      	movs	r3, #19
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	e245      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d040      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e74:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <HAL_RCC_OscConfig+0x340>)
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	0049      	lsls	r1, r1, #1
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e82:	f7fe fa8d 	bl	80043a0 <HAL_GetTick>
 8005e86:	0003      	movs	r3, r0
 8005e88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e8a:	e019      	b.n	8005ec0 <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e8c:	f7fe fa88 	bl	80043a0 <HAL_GetTick>
 8005e90:	0002      	movs	r2, r0
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d912      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e22c      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	fffeffff 	.word	0xfffeffff
 8005ea8:	fffbffff 	.word	0xfffbffff
 8005eac:	ffffe0ff 	.word	0xffffe0ff
 8005eb0:	0800fab8 	.word	0x0800fab8
 8005eb4:	20000000 	.word	0x20000000
 8005eb8:	20000004 	.word	0x20000004
 8005ebc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005ec0:	4bc6      	ldr	r3, [pc, #792]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d0df      	beq.n	8005e8c <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ecc:	4bc3      	ldr	r3, [pc, #780]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	4ac3      	ldr	r2, [pc, #780]	; (80061e0 <HAL_RCC_OscConfig+0x680>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	0019      	movs	r1, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eda:	4bc0      	ldr	r3, [pc, #768]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005edc:	430a      	orrs	r2, r1
 8005ede:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ee0:	4bbe      	ldr	r3, [pc, #760]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	0a19      	lsrs	r1, r3, #8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	061a      	lsls	r2, r3, #24
 8005eee:	4bbb      	ldr	r3, [pc, #748]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
 8005ef4:	e019      	b.n	8005f2a <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ef6:	4bb9      	ldr	r3, [pc, #740]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4bb8      	ldr	r3, [pc, #736]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005efc:	49b9      	ldr	r1, [pc, #740]	; (80061e4 <HAL_RCC_OscConfig+0x684>)
 8005efe:	400a      	ands	r2, r1
 8005f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f02:	f7fe fa4d 	bl	80043a0 <HAL_GetTick>
 8005f06:	0003      	movs	r3, r0
 8005f08:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f0c:	f7fe fa48 	bl	80043a0 <HAL_GetTick>
 8005f10:	0002      	movs	r2, r0
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e1ec      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005f1e:	4baf      	ldr	r3, [pc, #700]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	2380      	movs	r3, #128	; 0x80
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4013      	ands	r3, r2
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2208      	movs	r2, #8
 8005f30:	4013      	ands	r3, r2
 8005f32:	d036      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d019      	beq.n	8005f70 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f3c:	4ba7      	ldr	r3, [pc, #668]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f40:	4ba6      	ldr	r3, [pc, #664]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005f42:	2101      	movs	r1, #1
 8005f44:	430a      	orrs	r2, r1
 8005f46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f48:	f7fe fa2a 	bl	80043a0 <HAL_GetTick>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f52:	f7fe fa25 	bl	80043a0 <HAL_GetTick>
 8005f56:	0002      	movs	r2, r0
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e1c9      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f64:	4b9d      	ldr	r3, [pc, #628]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f68:	2202      	movs	r2, #2
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d0f1      	beq.n	8005f52 <HAL_RCC_OscConfig+0x3f2>
 8005f6e:	e018      	b.n	8005fa2 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f70:	4b9a      	ldr	r3, [pc, #616]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f74:	4b99      	ldr	r3, [pc, #612]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005f76:	2101      	movs	r1, #1
 8005f78:	438a      	bics	r2, r1
 8005f7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f7c:	f7fe fa10 	bl	80043a0 <HAL_GetTick>
 8005f80:	0003      	movs	r3, r0
 8005f82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f86:	f7fe fa0b 	bl	80043a0 <HAL_GetTick>
 8005f8a:	0002      	movs	r2, r0
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e1af      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f98:	4b90      	ldr	r3, [pc, #576]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d1f1      	bne.n	8005f86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d100      	bne.n	8005fae <HAL_RCC_OscConfig+0x44e>
 8005fac:	e0af      	b.n	800610e <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fae:	2323      	movs	r3, #35	; 0x23
 8005fb0:	18fb      	adds	r3, r7, r3
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fb6:	4b89      	ldr	r3, [pc, #548]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fba:	2380      	movs	r3, #128	; 0x80
 8005fbc:	055b      	lsls	r3, r3, #21
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d10a      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc2:	4b86      	ldr	r3, [pc, #536]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc6:	4b85      	ldr	r3, [pc, #532]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8005fc8:	2180      	movs	r1, #128	; 0x80
 8005fca:	0549      	lsls	r1, r1, #21
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005fd0:	2323      	movs	r3, #35	; 0x23
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd8:	4b83      	ldr	r3, [pc, #524]	; (80061e8 <HAL_RCC_OscConfig+0x688>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	d11a      	bne.n	800601a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fe4:	4b80      	ldr	r3, [pc, #512]	; (80061e8 <HAL_RCC_OscConfig+0x688>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b7f      	ldr	r3, [pc, #508]	; (80061e8 <HAL_RCC_OscConfig+0x688>)
 8005fea:	2180      	movs	r1, #128	; 0x80
 8005fec:	0049      	lsls	r1, r1, #1
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff2:	f7fe f9d5 	bl	80043a0 <HAL_GetTick>
 8005ff6:	0003      	movs	r3, r0
 8005ff8:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffc:	f7fe f9d0 	bl	80043a0 <HAL_GetTick>
 8006000:	0002      	movs	r2, r0
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b64      	cmp	r3, #100	; 0x64
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e174      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600e:	4b76      	ldr	r3, [pc, #472]	; (80061e8 <HAL_RCC_OscConfig+0x688>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	2380      	movs	r3, #128	; 0x80
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	4013      	ands	r3, r2
 8006018:	d0f0      	beq.n	8005ffc <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	2380      	movs	r3, #128	; 0x80
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	429a      	cmp	r2, r3
 8006024:	d107      	bne.n	8006036 <HAL_RCC_OscConfig+0x4d6>
 8006026:	4b6d      	ldr	r3, [pc, #436]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800602a:	4b6c      	ldr	r3, [pc, #432]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 800602c:	2180      	movs	r1, #128	; 0x80
 800602e:	0049      	lsls	r1, r1, #1
 8006030:	430a      	orrs	r2, r1
 8006032:	651a      	str	r2, [r3, #80]	; 0x50
 8006034:	e031      	b.n	800609a <HAL_RCC_OscConfig+0x53a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10c      	bne.n	8006058 <HAL_RCC_OscConfig+0x4f8>
 800603e:	4b67      	ldr	r3, [pc, #412]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006042:	4b66      	ldr	r3, [pc, #408]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006044:	4967      	ldr	r1, [pc, #412]	; (80061e4 <HAL_RCC_OscConfig+0x684>)
 8006046:	400a      	ands	r2, r1
 8006048:	651a      	str	r2, [r3, #80]	; 0x50
 800604a:	4b64      	ldr	r3, [pc, #400]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 800604c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800604e:	4b63      	ldr	r3, [pc, #396]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006050:	4966      	ldr	r1, [pc, #408]	; (80061ec <HAL_RCC_OscConfig+0x68c>)
 8006052:	400a      	ands	r2, r1
 8006054:	651a      	str	r2, [r3, #80]	; 0x50
 8006056:	e020      	b.n	800609a <HAL_RCC_OscConfig+0x53a>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	23a0      	movs	r3, #160	; 0xa0
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	429a      	cmp	r2, r3
 8006062:	d10e      	bne.n	8006082 <HAL_RCC_OscConfig+0x522>
 8006064:	4b5d      	ldr	r3, [pc, #372]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006068:	4b5c      	ldr	r3, [pc, #368]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 800606a:	2180      	movs	r1, #128	; 0x80
 800606c:	00c9      	lsls	r1, r1, #3
 800606e:	430a      	orrs	r2, r1
 8006070:	651a      	str	r2, [r3, #80]	; 0x50
 8006072:	4b5a      	ldr	r3, [pc, #360]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006074:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006076:	4b59      	ldr	r3, [pc, #356]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006078:	2180      	movs	r1, #128	; 0x80
 800607a:	0049      	lsls	r1, r1, #1
 800607c:	430a      	orrs	r2, r1
 800607e:	651a      	str	r2, [r3, #80]	; 0x50
 8006080:	e00b      	b.n	800609a <HAL_RCC_OscConfig+0x53a>
 8006082:	4b56      	ldr	r3, [pc, #344]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006086:	4b55      	ldr	r3, [pc, #340]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006088:	4956      	ldr	r1, [pc, #344]	; (80061e4 <HAL_RCC_OscConfig+0x684>)
 800608a:	400a      	ands	r2, r1
 800608c:	651a      	str	r2, [r3, #80]	; 0x50
 800608e:	4b53      	ldr	r3, [pc, #332]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006092:	4b52      	ldr	r3, [pc, #328]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006094:	4955      	ldr	r1, [pc, #340]	; (80061ec <HAL_RCC_OscConfig+0x68c>)
 8006096:	400a      	ands	r2, r1
 8006098:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d015      	beq.n	80060ce <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a2:	f7fe f97d 	bl	80043a0 <HAL_GetTick>
 80060a6:	0003      	movs	r3, r0
 80060a8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060aa:	e009      	b.n	80060c0 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ac:	f7fe f978 	bl	80043a0 <HAL_GetTick>
 80060b0:	0002      	movs	r2, r0
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	4a4e      	ldr	r2, [pc, #312]	; (80061f0 <HAL_RCC_OscConfig+0x690>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e11b      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060c0:	4b46      	ldr	r3, [pc, #280]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 80060c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4013      	ands	r3, r2
 80060ca:	d0ef      	beq.n	80060ac <HAL_RCC_OscConfig+0x54c>
 80060cc:	e014      	b.n	80060f8 <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ce:	f7fe f967 	bl	80043a0 <HAL_GetTick>
 80060d2:	0003      	movs	r3, r0
 80060d4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060d6:	e009      	b.n	80060ec <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d8:	f7fe f962 	bl	80043a0 <HAL_GetTick>
 80060dc:	0002      	movs	r2, r0
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	4a43      	ldr	r2, [pc, #268]	; (80061f0 <HAL_RCC_OscConfig+0x690>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e105      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060ec:	4b3b      	ldr	r3, [pc, #236]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 80060ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4013      	ands	r3, r2
 80060f6:	d1ef      	bne.n	80060d8 <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060f8:	2323      	movs	r3, #35	; 0x23
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d105      	bne.n	800610e <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006102:	4b36      	ldr	r3, [pc, #216]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006106:	4b35      	ldr	r3, [pc, #212]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006108:	493a      	ldr	r1, [pc, #232]	; (80061f4 <HAL_RCC_OscConfig+0x694>)
 800610a:	400a      	ands	r2, r1
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2220      	movs	r2, #32
 8006114:	4013      	ands	r3, r2
 8006116:	d049      	beq.n	80061ac <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d026      	beq.n	800616e <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006120:	4b2e      	ldr	r3, [pc, #184]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	4b2d      	ldr	r3, [pc, #180]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006126:	2101      	movs	r1, #1
 8006128:	430a      	orrs	r2, r1
 800612a:	609a      	str	r2, [r3, #8]
 800612c:	4b2b      	ldr	r3, [pc, #172]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 800612e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006130:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006132:	2101      	movs	r1, #1
 8006134:	430a      	orrs	r2, r1
 8006136:	635a      	str	r2, [r3, #52]	; 0x34
 8006138:	4b2f      	ldr	r3, [pc, #188]	; (80061f8 <HAL_RCC_OscConfig+0x698>)
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <HAL_RCC_OscConfig+0x698>)
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	0189      	lsls	r1, r1, #6
 8006142:	430a      	orrs	r2, r1
 8006144:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006146:	f7fe f92b 	bl	80043a0 <HAL_GetTick>
 800614a:	0003      	movs	r3, r0
 800614c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006150:	f7fe f926 	bl	80043a0 <HAL_GetTick>
 8006154:	0002      	movs	r2, r0
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e0ca      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006162:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2202      	movs	r2, #2
 8006168:	4013      	ands	r3, r2
 800616a:	d0f1      	beq.n	8006150 <HAL_RCC_OscConfig+0x5f0>
 800616c:	e01e      	b.n	80061ac <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800616e:	4b1b      	ldr	r3, [pc, #108]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	4b1a      	ldr	r3, [pc, #104]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 8006174:	2101      	movs	r1, #1
 8006176:	438a      	bics	r2, r1
 8006178:	609a      	str	r2, [r3, #8]
 800617a:	4b1f      	ldr	r3, [pc, #124]	; (80061f8 <HAL_RCC_OscConfig+0x698>)
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <HAL_RCC_OscConfig+0x698>)
 8006180:	491e      	ldr	r1, [pc, #120]	; (80061fc <HAL_RCC_OscConfig+0x69c>)
 8006182:	400a      	ands	r2, r1
 8006184:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006186:	f7fe f90b 	bl	80043a0 <HAL_GetTick>
 800618a:	0003      	movs	r3, r0
 800618c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006190:	f7fe f906 	bl	80043a0 <HAL_GetTick>
 8006194:	0002      	movs	r2, r0
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e0aa      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061a2:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2202      	movs	r2, #2
 80061a8:	4013      	ands	r3, r2
 80061aa:	d1f1      	bne.n	8006190 <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d100      	bne.n	80061b6 <HAL_RCC_OscConfig+0x656>
 80061b4:	e09f      	b.n	80062f6 <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	2b0c      	cmp	r3, #12
 80061ba:	d100      	bne.n	80061be <HAL_RCC_OscConfig+0x65e>
 80061bc:	e078      	b.n	80062b0 <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d159      	bne.n	800627a <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b04      	ldr	r3, [pc, #16]	; (80061dc <HAL_RCC_OscConfig+0x67c>)
 80061cc:	490c      	ldr	r1, [pc, #48]	; (8006200 <HAL_RCC_OscConfig+0x6a0>)
 80061ce:	400a      	ands	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d2:	f7fe f8e5 	bl	80043a0 <HAL_GetTick>
 80061d6:	0003      	movs	r3, r0
 80061d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80061da:	e01c      	b.n	8006216 <HAL_RCC_OscConfig+0x6b6>
 80061dc:	40021000 	.word	0x40021000
 80061e0:	ffff1fff 	.word	0xffff1fff
 80061e4:	fffffeff 	.word	0xfffffeff
 80061e8:	40007000 	.word	0x40007000
 80061ec:	fffffbff 	.word	0xfffffbff
 80061f0:	00001388 	.word	0x00001388
 80061f4:	efffffff 	.word	0xefffffff
 80061f8:	40010000 	.word	0x40010000
 80061fc:	ffffdfff 	.word	0xffffdfff
 8006200:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006204:	f7fe f8cc 	bl	80043a0 <HAL_GetTick>
 8006208:	0002      	movs	r2, r0
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e070      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006216:	4b3a      	ldr	r3, [pc, #232]	; (8006300 <HAL_RCC_OscConfig+0x7a0>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	049b      	lsls	r3, r3, #18
 800621e:	4013      	ands	r3, r2
 8006220:	d1f0      	bne.n	8006204 <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006222:	4b37      	ldr	r3, [pc, #220]	; (8006300 <HAL_RCC_OscConfig+0x7a0>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	4a37      	ldr	r2, [pc, #220]	; (8006304 <HAL_RCC_OscConfig+0x7a4>)
 8006228:	4013      	ands	r3, r2
 800622a:	0019      	movs	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623a:	431a      	orrs	r2, r3
 800623c:	4b30      	ldr	r3, [pc, #192]	; (8006300 <HAL_RCC_OscConfig+0x7a0>)
 800623e:	430a      	orrs	r2, r1
 8006240:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006242:	4b2f      	ldr	r3, [pc, #188]	; (8006300 <HAL_RCC_OscConfig+0x7a0>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b2e      	ldr	r3, [pc, #184]	; (8006300 <HAL_RCC_OscConfig+0x7a0>)
 8006248:	2180      	movs	r1, #128	; 0x80
 800624a:	0449      	lsls	r1, r1, #17
 800624c:	430a      	orrs	r2, r1
 800624e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006250:	f7fe f8a6 	bl	80043a0 <HAL_GetTick>
 8006254:	0003      	movs	r3, r0
 8006256:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800625a:	f7fe f8a1 	bl	80043a0 <HAL_GetTick>
 800625e:	0002      	movs	r2, r0
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e045      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800626c:	4b24      	ldr	r3, [pc, #144]	; (8006300 <HAL_RCC_OscConfig+0x7a0>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	2380      	movs	r3, #128	; 0x80
 8006272:	049b      	lsls	r3, r3, #18
 8006274:	4013      	ands	r3, r2
 8006276:	d0f0      	beq.n	800625a <HAL_RCC_OscConfig+0x6fa>
 8006278:	e03d      	b.n	80062f6 <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627a:	4b21      	ldr	r3, [pc, #132]	; (8006300 <HAL_RCC_OscConfig+0x7a0>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b20      	ldr	r3, [pc, #128]	; (8006300 <HAL_RCC_OscConfig+0x7a0>)
 8006280:	4921      	ldr	r1, [pc, #132]	; (8006308 <HAL_RCC_OscConfig+0x7a8>)
 8006282:	400a      	ands	r2, r1
 8006284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006286:	f7fe f88b 	bl	80043a0 <HAL_GetTick>
 800628a:	0003      	movs	r3, r0
 800628c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006290:	f7fe f886 	bl	80043a0 <HAL_GetTick>
 8006294:	0002      	movs	r2, r0
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e02a      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80062a2:	4b17      	ldr	r3, [pc, #92]	; (8006300 <HAL_RCC_OscConfig+0x7a0>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	049b      	lsls	r3, r3, #18
 80062aa:	4013      	ands	r3, r2
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0x730>
 80062ae:	e022      	b.n	80062f6 <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e01d      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80062bc:	4b10      	ldr	r3, [pc, #64]	; (8006300 <HAL_RCC_OscConfig+0x7a0>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	025b      	lsls	r3, r3, #9
 80062c8:	401a      	ands	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d10f      	bne.n	80062f2 <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	23f0      	movs	r3, #240	; 0xf0
 80062d6:	039b      	lsls	r3, r3, #14
 80062d8:	401a      	ands	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062de:	429a      	cmp	r2, r3
 80062e0:	d107      	bne.n	80062f2 <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	23c0      	movs	r3, #192	; 0xc0
 80062e6:	041b      	lsls	r3, r3, #16
 80062e8:	401a      	ands	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d001      	beq.n	80062f6 <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	0018      	movs	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b00a      	add	sp, #40	; 0x28
 80062fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006300:	40021000 	.word	0x40021000
 8006304:	ff02ffff 	.word	0xff02ffff
 8006308:	feffffff 	.word	0xfeffffff

0800630c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800630c:	b5b0      	push	{r4, r5, r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e129      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006320:	4b96      	ldr	r3, [pc, #600]	; (800657c <HAL_RCC_ClockConfig+0x270>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2201      	movs	r2, #1
 8006326:	4013      	ands	r3, r2
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d91e      	bls.n	800636c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632e:	4b93      	ldr	r3, [pc, #588]	; (800657c <HAL_RCC_ClockConfig+0x270>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2201      	movs	r2, #1
 8006334:	4393      	bics	r3, r2
 8006336:	0019      	movs	r1, r3
 8006338:	4b90      	ldr	r3, [pc, #576]	; (800657c <HAL_RCC_ClockConfig+0x270>)
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006340:	f7fe f82e 	bl	80043a0 <HAL_GetTick>
 8006344:	0003      	movs	r3, r0
 8006346:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006348:	e009      	b.n	800635e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800634a:	f7fe f829 	bl	80043a0 <HAL_GetTick>
 800634e:	0002      	movs	r2, r0
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	4a8a      	ldr	r2, [pc, #552]	; (8006580 <HAL_RCC_ClockConfig+0x274>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e10a      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800635e:	4b87      	ldr	r3, [pc, #540]	; (800657c <HAL_RCC_ClockConfig+0x270>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2201      	movs	r2, #1
 8006364:	4013      	ands	r3, r2
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d1ee      	bne.n	800634a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2202      	movs	r2, #2
 8006372:	4013      	ands	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006376:	4b83      	ldr	r3, [pc, #524]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	22f0      	movs	r2, #240	; 0xf0
 800637c:	4393      	bics	r3, r2
 800637e:	0019      	movs	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	4b7f      	ldr	r3, [pc, #508]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 8006386:	430a      	orrs	r2, r1
 8006388:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2201      	movs	r2, #1
 8006390:	4013      	ands	r3, r2
 8006392:	d100      	bne.n	8006396 <HAL_RCC_ClockConfig+0x8a>
 8006394:	e089      	b.n	80064aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d107      	bne.n	80063ae <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800639e:	4b79      	ldr	r3, [pc, #484]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	2380      	movs	r3, #128	; 0x80
 80063a4:	029b      	lsls	r3, r3, #10
 80063a6:	4013      	ands	r3, r2
 80063a8:	d120      	bne.n	80063ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e0e2      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d107      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063b6:	4b73      	ldr	r3, [pc, #460]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	2380      	movs	r3, #128	; 0x80
 80063bc:	049b      	lsls	r3, r3, #18
 80063be:	4013      	ands	r3, r2
 80063c0:	d114      	bne.n	80063ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e0d6      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d106      	bne.n	80063dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063ce:	4b6d      	ldr	r3, [pc, #436]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2204      	movs	r2, #4
 80063d4:	4013      	ands	r3, r2
 80063d6:	d109      	bne.n	80063ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e0cb      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80063dc:	4b69      	ldr	r3, [pc, #420]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4013      	ands	r3, r2
 80063e6:	d101      	bne.n	80063ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e0c3      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ec:	4b65      	ldr	r3, [pc, #404]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2203      	movs	r2, #3
 80063f2:	4393      	bics	r3, r2
 80063f4:	0019      	movs	r1, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	4b62      	ldr	r3, [pc, #392]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 80063fc:	430a      	orrs	r2, r1
 80063fe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006400:	f7fd ffce 	bl	80043a0 <HAL_GetTick>
 8006404:	0003      	movs	r3, r0
 8006406:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d111      	bne.n	8006434 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006410:	e009      	b.n	8006426 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006412:	f7fd ffc5 	bl	80043a0 <HAL_GetTick>
 8006416:	0002      	movs	r2, r0
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	4a58      	ldr	r2, [pc, #352]	; (8006580 <HAL_RCC_ClockConfig+0x274>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e0a6      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006426:	4b57      	ldr	r3, [pc, #348]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	220c      	movs	r2, #12
 800642c:	4013      	ands	r3, r2
 800642e:	2b08      	cmp	r3, #8
 8006430:	d1ef      	bne.n	8006412 <HAL_RCC_ClockConfig+0x106>
 8006432:	e03a      	b.n	80064aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b03      	cmp	r3, #3
 800643a:	d111      	bne.n	8006460 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800643c:	e009      	b.n	8006452 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800643e:	f7fd ffaf 	bl	80043a0 <HAL_GetTick>
 8006442:	0002      	movs	r2, r0
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	4a4d      	ldr	r2, [pc, #308]	; (8006580 <HAL_RCC_ClockConfig+0x274>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e090      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006452:	4b4c      	ldr	r3, [pc, #304]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	220c      	movs	r2, #12
 8006458:	4013      	ands	r3, r2
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d1ef      	bne.n	800643e <HAL_RCC_ClockConfig+0x132>
 800645e:	e024      	b.n	80064aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d11b      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006468:	e009      	b.n	800647e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800646a:	f7fd ff99 	bl	80043a0 <HAL_GetTick>
 800646e:	0002      	movs	r2, r0
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	4a42      	ldr	r2, [pc, #264]	; (8006580 <HAL_RCC_ClockConfig+0x274>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d901      	bls.n	800647e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e07a      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800647e:	4b41      	ldr	r3, [pc, #260]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	220c      	movs	r2, #12
 8006484:	4013      	ands	r3, r2
 8006486:	2b04      	cmp	r3, #4
 8006488:	d1ef      	bne.n	800646a <HAL_RCC_ClockConfig+0x15e>
 800648a:	e00e      	b.n	80064aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800648c:	f7fd ff88 	bl	80043a0 <HAL_GetTick>
 8006490:	0002      	movs	r2, r0
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	4a3a      	ldr	r2, [pc, #232]	; (8006580 <HAL_RCC_ClockConfig+0x274>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e069      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80064a0:	4b38      	ldr	r3, [pc, #224]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	220c      	movs	r2, #12
 80064a6:	4013      	ands	r3, r2
 80064a8:	d1f0      	bne.n	800648c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064aa:	4b34      	ldr	r3, [pc, #208]	; (800657c <HAL_RCC_ClockConfig+0x270>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2201      	movs	r2, #1
 80064b0:	4013      	ands	r3, r2
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d21e      	bcs.n	80064f6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b8:	4b30      	ldr	r3, [pc, #192]	; (800657c <HAL_RCC_ClockConfig+0x270>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2201      	movs	r2, #1
 80064be:	4393      	bics	r3, r2
 80064c0:	0019      	movs	r1, r3
 80064c2:	4b2e      	ldr	r3, [pc, #184]	; (800657c <HAL_RCC_ClockConfig+0x270>)
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064ca:	f7fd ff69 	bl	80043a0 <HAL_GetTick>
 80064ce:	0003      	movs	r3, r0
 80064d0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d2:	e009      	b.n	80064e8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d4:	f7fd ff64 	bl	80043a0 <HAL_GetTick>
 80064d8:	0002      	movs	r2, r0
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	4a28      	ldr	r2, [pc, #160]	; (8006580 <HAL_RCC_ClockConfig+0x274>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e045      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e8:	4b24      	ldr	r3, [pc, #144]	; (800657c <HAL_RCC_ClockConfig+0x270>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2201      	movs	r2, #1
 80064ee:	4013      	ands	r3, r2
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d1ee      	bne.n	80064d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2204      	movs	r2, #4
 80064fc:	4013      	ands	r3, r2
 80064fe:	d009      	beq.n	8006514 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006500:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	4a20      	ldr	r2, [pc, #128]	; (8006588 <HAL_RCC_ClockConfig+0x27c>)
 8006506:	4013      	ands	r3, r2
 8006508:	0019      	movs	r1, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	4b1d      	ldr	r3, [pc, #116]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 8006510:	430a      	orrs	r2, r1
 8006512:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2208      	movs	r2, #8
 800651a:	4013      	ands	r3, r2
 800651c:	d00a      	beq.n	8006534 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800651e:	4b19      	ldr	r3, [pc, #100]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	4a1a      	ldr	r2, [pc, #104]	; (800658c <HAL_RCC_ClockConfig+0x280>)
 8006524:	4013      	ands	r3, r2
 8006526:	0019      	movs	r1, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	00da      	lsls	r2, r3, #3
 800652e:	4b15      	ldr	r3, [pc, #84]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 8006530:	430a      	orrs	r2, r1
 8006532:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006534:	f000 f832 	bl	800659c <HAL_RCC_GetSysClockFreq>
 8006538:	0001      	movs	r1, r0
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <HAL_RCC_ClockConfig+0x278>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	091b      	lsrs	r3, r3, #4
 8006540:	220f      	movs	r2, #15
 8006542:	4013      	ands	r3, r2
 8006544:	4a12      	ldr	r2, [pc, #72]	; (8006590 <HAL_RCC_ClockConfig+0x284>)
 8006546:	5cd3      	ldrb	r3, [r2, r3]
 8006548:	000a      	movs	r2, r1
 800654a:	40da      	lsrs	r2, r3
 800654c:	4b11      	ldr	r3, [pc, #68]	; (8006594 <HAL_RCC_ClockConfig+0x288>)
 800654e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <HAL_RCC_ClockConfig+0x28c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	250b      	movs	r5, #11
 8006556:	197c      	adds	r4, r7, r5
 8006558:	0018      	movs	r0, r3
 800655a:	f7fd fedb 	bl	8004314 <HAL_InitTick>
 800655e:	0003      	movs	r3, r0
 8006560:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006562:	197b      	adds	r3, r7, r5
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 800656a:	230b      	movs	r3, #11
 800656c:	18fb      	adds	r3, r7, r3
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	e000      	b.n	8006574 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	0018      	movs	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	b004      	add	sp, #16
 800657a:	bdb0      	pop	{r4, r5, r7, pc}
 800657c:	40022000 	.word	0x40022000
 8006580:	00001388 	.word	0x00001388
 8006584:	40021000 	.word	0x40021000
 8006588:	fffff8ff 	.word	0xfffff8ff
 800658c:	ffffc7ff 	.word	0xffffc7ff
 8006590:	0800fab8 	.word	0x0800fab8
 8006594:	20000000 	.word	0x20000000
 8006598:	20000004 	.word	0x20000004

0800659c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800659c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659e:	b08f      	sub	sp, #60	; 0x3c
 80065a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80065a2:	4b4a      	ldr	r3, [pc, #296]	; (80066cc <HAL_RCC_GetSysClockFreq+0x130>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065aa:	230c      	movs	r3, #12
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d00f      	beq.n	80065d2 <HAL_RCC_GetSysClockFreq+0x36>
 80065b2:	2b0c      	cmp	r3, #12
 80065b4:	d010      	beq.n	80065d8 <HAL_RCC_GetSysClockFreq+0x3c>
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d000      	beq.n	80065bc <HAL_RCC_GetSysClockFreq+0x20>
 80065ba:	e073      	b.n	80066a4 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80065bc:	4b43      	ldr	r3, [pc, #268]	; (80066cc <HAL_RCC_GetSysClockFreq+0x130>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2210      	movs	r2, #16
 80065c2:	4013      	ands	r3, r2
 80065c4:	d002      	beq.n	80065cc <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80065c6:	4b42      	ldr	r3, [pc, #264]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x134>)
 80065c8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80065ca:	e079      	b.n	80066c0 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 80065cc:	4b41      	ldr	r3, [pc, #260]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80065ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80065d0:	e076      	b.n	80066c0 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065d2:	4b41      	ldr	r3, [pc, #260]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80065d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80065d6:	e073      	b.n	80066c0 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	0c9a      	lsrs	r2, r3, #18
 80065dc:	230f      	movs	r3, #15
 80065de:	401a      	ands	r2, r3
 80065e0:	4b3e      	ldr	r3, [pc, #248]	; (80066dc <HAL_RCC_GetSysClockFreq+0x140>)
 80065e2:	5c9b      	ldrb	r3, [r3, r2]
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	0d9a      	lsrs	r2, r3, #22
 80065ea:	2303      	movs	r3, #3
 80065ec:	4013      	ands	r3, r2
 80065ee:	3301      	adds	r3, #1
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065f2:	4b36      	ldr	r3, [pc, #216]	; (80066cc <HAL_RCC_GetSysClockFreq+0x130>)
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	2380      	movs	r3, #128	; 0x80
 80065f8:	025b      	lsls	r3, r3, #9
 80065fa:	4013      	ands	r3, r2
 80065fc:	d019      	beq.n	8006632 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	2300      	movs	r3, #0
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	4a34      	ldr	r2, [pc, #208]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006608:	2300      	movs	r3, #0
 800660a:	69b8      	ldr	r0, [r7, #24]
 800660c:	69f9      	ldr	r1, [r7, #28]
 800660e:	f7f9 ff9b 	bl	8000548 <__aeabi_lmul>
 8006612:	0003      	movs	r3, r0
 8006614:	000c      	movs	r4, r1
 8006616:	0018      	movs	r0, r3
 8006618:	0021      	movs	r1, r4
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f7f9 ff6f 	bl	8000508 <__aeabi_uldivmod>
 800662a:	0003      	movs	r3, r0
 800662c:	000c      	movs	r4, r1
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
 8006630:	e035      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006632:	4b26      	ldr	r3, [pc, #152]	; (80066cc <HAL_RCC_GetSysClockFreq+0x130>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2210      	movs	r2, #16
 8006638:	4013      	ands	r3, r2
 800663a:	d019      	beq.n	8006670 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	60bb      	str	r3, [r7, #8]
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	4a22      	ldr	r2, [pc, #136]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8006646:	2300      	movs	r3, #0
 8006648:	68b8      	ldr	r0, [r7, #8]
 800664a:	68f9      	ldr	r1, [r7, #12]
 800664c:	f7f9 ff7c 	bl	8000548 <__aeabi_lmul>
 8006650:	0003      	movs	r3, r0
 8006652:	000c      	movs	r4, r1
 8006654:	0018      	movs	r0, r3
 8006656:	0021      	movs	r1, r4
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	2300      	movs	r3, #0
 800665e:	607b      	str	r3, [r7, #4]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f7f9 ff50 	bl	8000508 <__aeabi_uldivmod>
 8006668:	0003      	movs	r3, r0
 800666a:	000c      	movs	r4, r1
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
 800666e:	e016      	b.n	800669e <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	0018      	movs	r0, r3
 8006674:	2300      	movs	r3, #0
 8006676:	0019      	movs	r1, r3
 8006678:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800667a:	2300      	movs	r3, #0
 800667c:	f7f9 ff64 	bl	8000548 <__aeabi_lmul>
 8006680:	0003      	movs	r3, r0
 8006682:	000c      	movs	r4, r1
 8006684:	0018      	movs	r0, r3
 8006686:	0021      	movs	r1, r4
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	001d      	movs	r5, r3
 800668c:	2300      	movs	r3, #0
 800668e:	001e      	movs	r6, r3
 8006690:	002a      	movs	r2, r5
 8006692:	0033      	movs	r3, r6
 8006694:	f7f9 ff38 	bl	8000508 <__aeabi_uldivmod>
 8006698:	0003      	movs	r3, r0
 800669a:	000c      	movs	r4, r1
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800669e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80066a2:	e00d      	b.n	80066c0 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80066a4:	4b09      	ldr	r3, [pc, #36]	; (80066cc <HAL_RCC_GetSysClockFreq+0x130>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	0b5b      	lsrs	r3, r3, #13
 80066aa:	2207      	movs	r2, #7
 80066ac:	4013      	ands	r3, r2
 80066ae:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	3301      	adds	r3, #1
 80066b4:	2280      	movs	r2, #128	; 0x80
 80066b6:	0212      	lsls	r2, r2, #8
 80066b8:	409a      	lsls	r2, r3
 80066ba:	0013      	movs	r3, r2
 80066bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80066be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80066c2:	0018      	movs	r0, r3
 80066c4:	46bd      	mov	sp, r7
 80066c6:	b00f      	add	sp, #60	; 0x3c
 80066c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	40021000 	.word	0x40021000
 80066d0:	003d0900 	.word	0x003d0900
 80066d4:	00f42400 	.word	0x00f42400
 80066d8:	007a1200 	.word	0x007a1200
 80066dc:	0800fad0 	.word	0x0800fad0

080066e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066e4:	4b02      	ldr	r3, [pc, #8]	; (80066f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80066e6:	681b      	ldr	r3, [r3, #0]
}
 80066e8:	0018      	movs	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	20000000 	.word	0x20000000

080066f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066f8:	f7ff fff2 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 80066fc:	0001      	movs	r1, r0
 80066fe:	4b06      	ldr	r3, [pc, #24]	; (8006718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	0a1b      	lsrs	r3, r3, #8
 8006704:	2207      	movs	r2, #7
 8006706:	4013      	ands	r3, r2
 8006708:	4a04      	ldr	r2, [pc, #16]	; (800671c <HAL_RCC_GetPCLK1Freq+0x28>)
 800670a:	5cd3      	ldrb	r3, [r2, r3]
 800670c:	40d9      	lsrs	r1, r3
 800670e:	000b      	movs	r3, r1
}
 8006710:	0018      	movs	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	40021000 	.word	0x40021000
 800671c:	0800fac8 	.word	0x0800fac8

08006720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006724:	f7ff ffdc 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 8006728:	0001      	movs	r1, r0
 800672a:	4b06      	ldr	r3, [pc, #24]	; (8006744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	0adb      	lsrs	r3, r3, #11
 8006730:	2207      	movs	r2, #7
 8006732:	4013      	ands	r3, r2
 8006734:	4a04      	ldr	r2, [pc, #16]	; (8006748 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006736:	5cd3      	ldrb	r3, [r2, r3]
 8006738:	40d9      	lsrs	r1, r3
 800673a:	000b      	movs	r3, r1
}
 800673c:	0018      	movs	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	40021000 	.word	0x40021000
 8006748:	0800fac8 	.word	0x0800fac8

0800674c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006754:	2317      	movs	r3, #23
 8006756:	18fb      	adds	r3, r7, r3
 8006758:	2200      	movs	r2, #0
 800675a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2220      	movs	r2, #32
 8006762:	4013      	ands	r3, r2
 8006764:	d106      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	2380      	movs	r3, #128	; 0x80
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	4013      	ands	r3, r2
 8006770:	d100      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006772:	e0d9      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006774:	4ba4      	ldr	r3, [pc, #656]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006778:	2380      	movs	r3, #128	; 0x80
 800677a:	055b      	lsls	r3, r3, #21
 800677c:	4013      	ands	r3, r2
 800677e:	d10a      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006780:	4ba1      	ldr	r3, [pc, #644]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006784:	4ba0      	ldr	r3, [pc, #640]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006786:	2180      	movs	r1, #128	; 0x80
 8006788:	0549      	lsls	r1, r1, #21
 800678a:	430a      	orrs	r2, r1
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800678e:	2317      	movs	r3, #23
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	2201      	movs	r2, #1
 8006794:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006796:	4b9d      	ldr	r3, [pc, #628]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	2380      	movs	r3, #128	; 0x80
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	4013      	ands	r3, r2
 80067a0:	d11a      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a2:	4b9a      	ldr	r3, [pc, #616]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b99      	ldr	r3, [pc, #612]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80067a8:	2180      	movs	r1, #128	; 0x80
 80067aa:	0049      	lsls	r1, r1, #1
 80067ac:	430a      	orrs	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067b0:	f7fd fdf6 	bl	80043a0 <HAL_GetTick>
 80067b4:	0003      	movs	r3, r0
 80067b6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b8:	e008      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ba:	f7fd fdf1 	bl	80043a0 <HAL_GetTick>
 80067be:	0002      	movs	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b64      	cmp	r3, #100	; 0x64
 80067c6:	d901      	bls.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e118      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067cc:	4b8f      	ldr	r3, [pc, #572]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	2380      	movs	r3, #128	; 0x80
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	4013      	ands	r3, r2
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80067d8:	4b8b      	ldr	r3, [pc, #556]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	23c0      	movs	r3, #192	; 0xc0
 80067de:	039b      	lsls	r3, r3, #14
 80067e0:	4013      	ands	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	23c0      	movs	r3, #192	; 0xc0
 80067ea:	039b      	lsls	r3, r3, #14
 80067ec:	4013      	ands	r3, r2
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d107      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	23c0      	movs	r3, #192	; 0xc0
 80067fa:	039b      	lsls	r3, r3, #14
 80067fc:	4013      	ands	r3, r2
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	429a      	cmp	r2, r3
 8006802:	d013      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	23c0      	movs	r3, #192	; 0xc0
 800680a:	029b      	lsls	r3, r3, #10
 800680c:	401a      	ands	r2, r3
 800680e:	23c0      	movs	r3, #192	; 0xc0
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	429a      	cmp	r2, r3
 8006814:	d10a      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006816:	4b7c      	ldr	r3, [pc, #496]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	2380      	movs	r3, #128	; 0x80
 800681c:	029b      	lsls	r3, r3, #10
 800681e:	401a      	ands	r2, r3
 8006820:	2380      	movs	r3, #128	; 0x80
 8006822:	029b      	lsls	r3, r3, #10
 8006824:	429a      	cmp	r2, r3
 8006826:	d101      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e0e8      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800682c:	4b76      	ldr	r3, [pc, #472]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800682e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006830:	23c0      	movs	r3, #192	; 0xc0
 8006832:	029b      	lsls	r3, r3, #10
 8006834:	4013      	ands	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d049      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	23c0      	movs	r3, #192	; 0xc0
 8006844:	029b      	lsls	r3, r3, #10
 8006846:	4013      	ands	r3, r2
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	429a      	cmp	r2, r3
 800684c:	d004      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2220      	movs	r2, #32
 8006854:	4013      	ands	r3, r2
 8006856:	d10d      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	23c0      	movs	r3, #192	; 0xc0
 800685e:	029b      	lsls	r3, r3, #10
 8006860:	4013      	ands	r3, r2
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d034      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	2380      	movs	r3, #128	; 0x80
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	4013      	ands	r3, r2
 8006872:	d02e      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006874:	4b64      	ldr	r3, [pc, #400]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006878:	4a65      	ldr	r2, [pc, #404]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800687a:	4013      	ands	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800687e:	4b62      	ldr	r3, [pc, #392]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006882:	4b61      	ldr	r3, [pc, #388]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006884:	2180      	movs	r1, #128	; 0x80
 8006886:	0309      	lsls	r1, r1, #12
 8006888:	430a      	orrs	r2, r1
 800688a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800688c:	4b5e      	ldr	r3, [pc, #376]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800688e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006890:	4b5d      	ldr	r3, [pc, #372]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006892:	4960      	ldr	r1, [pc, #384]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006894:	400a      	ands	r2, r1
 8006896:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006898:	4b5b      	ldr	r3, [pc, #364]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	4013      	ands	r3, r2
 80068a6:	d014      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a8:	f7fd fd7a 	bl	80043a0 <HAL_GetTick>
 80068ac:	0003      	movs	r3, r0
 80068ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b0:	e009      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b2:	f7fd fd75 	bl	80043a0 <HAL_GetTick>
 80068b6:	0002      	movs	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	4a56      	ldr	r2, [pc, #344]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e09b      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068c6:	4b50      	ldr	r3, [pc, #320]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4013      	ands	r3, r2
 80068d0:	d0ef      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	23c0      	movs	r3, #192	; 0xc0
 80068d8:	029b      	lsls	r3, r3, #10
 80068da:	401a      	ands	r2, r3
 80068dc:	23c0      	movs	r3, #192	; 0xc0
 80068de:	029b      	lsls	r3, r3, #10
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d10c      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80068e4:	4b48      	ldr	r3, [pc, #288]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a4c      	ldr	r2, [pc, #304]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	0019      	movs	r1, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	23c0      	movs	r3, #192	; 0xc0
 80068f4:	039b      	lsls	r3, r3, #14
 80068f6:	401a      	ands	r2, r3
 80068f8:	4b43      	ldr	r3, [pc, #268]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80068fa:	430a      	orrs	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	4b42      	ldr	r3, [pc, #264]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006900:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	23c0      	movs	r3, #192	; 0xc0
 8006908:	029b      	lsls	r3, r3, #10
 800690a:	401a      	ands	r2, r3
 800690c:	4b3e      	ldr	r3, [pc, #248]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800690e:	430a      	orrs	r2, r1
 8006910:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006912:	2317      	movs	r3, #23
 8006914:	18fb      	adds	r3, r7, r3
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d105      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800691c:	4b3a      	ldr	r3, [pc, #232]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800691e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006920:	4b39      	ldr	r3, [pc, #228]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006922:	493f      	ldr	r1, [pc, #252]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006924:	400a      	ands	r2, r1
 8006926:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2201      	movs	r2, #1
 800692e:	4013      	ands	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006932:	4b35      	ldr	r3, [pc, #212]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	2203      	movs	r2, #3
 8006938:	4393      	bics	r3, r2
 800693a:	0019      	movs	r1, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	4b31      	ldr	r3, [pc, #196]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006942:	430a      	orrs	r2, r1
 8006944:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2202      	movs	r2, #2
 800694c:	4013      	ands	r3, r2
 800694e:	d009      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006950:	4b2d      	ldr	r3, [pc, #180]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006954:	220c      	movs	r2, #12
 8006956:	4393      	bics	r3, r2
 8006958:	0019      	movs	r1, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	4b2a      	ldr	r3, [pc, #168]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006960:	430a      	orrs	r2, r1
 8006962:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2204      	movs	r2, #4
 800696a:	4013      	ands	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800696e:	4b26      	ldr	r3, [pc, #152]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006972:	4a2c      	ldr	r2, [pc, #176]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006974:	4013      	ands	r3, r2
 8006976:	0019      	movs	r1, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695a      	ldr	r2, [r3, #20]
 800697c:	4b22      	ldr	r3, [pc, #136]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800697e:	430a      	orrs	r2, r1
 8006980:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2208      	movs	r2, #8
 8006988:	4013      	ands	r3, r2
 800698a:	d009      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800698c:	4b1e      	ldr	r3, [pc, #120]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800698e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006990:	4a25      	ldr	r2, [pc, #148]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006992:	4013      	ands	r3, r2
 8006994:	0019      	movs	r1, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	4b1b      	ldr	r3, [pc, #108]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800699c:	430a      	orrs	r2, r1
 800699e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	4013      	ands	r3, r2
 80069aa:	d009      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069ac:	4b16      	ldr	r3, [pc, #88]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80069ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b0:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	0019      	movs	r1, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69da      	ldr	r2, [r3, #28]
 80069ba:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80069bc:	430a      	orrs	r2, r1
 80069be:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2240      	movs	r2, #64	; 0x40
 80069c6:	4013      	ands	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069ca:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80069cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ce:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	0019      	movs	r1, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069d8:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80069da:	430a      	orrs	r2, r1
 80069dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2280      	movs	r2, #128	; 0x80
 80069e4:	4013      	ands	r3, r2
 80069e6:	d009      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80069e8:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80069ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ec:	4a10      	ldr	r2, [pc, #64]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	0019      	movs	r1, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1a      	ldr	r2, [r3, #32]
 80069f6:	4b04      	ldr	r3, [pc, #16]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80069f8:	430a      	orrs	r2, r1
 80069fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	0018      	movs	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b006      	add	sp, #24
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	40007000 	.word	0x40007000
 8006a10:	fffcffff 	.word	0xfffcffff
 8006a14:	fff7ffff 	.word	0xfff7ffff
 8006a18:	00001388 	.word	0x00001388
 8006a1c:	ffcfffff 	.word	0xffcfffff
 8006a20:	efffffff 	.word	0xefffffff
 8006a24:	fffff3ff 	.word	0xfffff3ff
 8006a28:	ffffcfff 	.word	0xffffcfff
 8006a2c:	fbffffff 	.word	0xfbffffff
 8006a30:	fff3ffff 	.word	0xfff3ffff

08006a34 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e08e      	b.n	8006b64 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2221      	movs	r2, #33	; 0x21
 8006a4a:	5c9b      	ldrb	r3, [r3, r2]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d107      	bne.n	8006a62 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	2100      	movs	r1, #0
 8006a58:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f7fd f92f 	bl	8003cc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2221      	movs	r2, #33	; 0x21
 8006a66:	2102      	movs	r1, #2
 8006a68:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	22ca      	movs	r2, #202	; 0xca
 8006a70:	625a      	str	r2, [r3, #36]	; 0x24
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2253      	movs	r2, #83	; 0x53
 8006a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f000 f89e 	bl	8006bbe <RTC_EnterInitMode>
 8006a82:	1e03      	subs	r3, r0, #0
 8006a84:	d009      	beq.n	8006a9a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	22ff      	movs	r2, #255	; 0xff
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2221      	movs	r2, #33	; 0x21
 8006a92:	2104      	movs	r1, #4
 8006a94:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e064      	b.n	8006b64 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4931      	ldr	r1, [pc, #196]	; (8006b6c <HAL_RTC_Init+0x138>)
 8006aa6:	400a      	ands	r2, r1
 8006aa8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6899      	ldr	r1, [r3, #8]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	68d2      	ldr	r2, [r2, #12]
 8006ad0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6919      	ldr	r1, [r3, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	041a      	lsls	r2, r3, #16
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	438a      	bics	r2, r1
 8006af4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2103      	movs	r1, #3
 8006b02:	438a      	bics	r2, r1
 8006b04:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2220      	movs	r2, #32
 8006b26:	4013      	ands	r3, r2
 8006b28:	d113      	bne.n	8006b52 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f000 f81f 	bl	8006b70 <HAL_RTC_WaitForSynchro>
 8006b32:	1e03      	subs	r3, r0, #0
 8006b34:	d00d      	beq.n	8006b52 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	22ff      	movs	r2, #255	; 0xff
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2221      	movs	r2, #33	; 0x21
 8006b42:	2104      	movs	r1, #4
 8006b44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e008      	b.n	8006b64 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	22ff      	movs	r2, #255	; 0xff
 8006b58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2221      	movs	r2, #33	; 0x21
 8006b5e:	2101      	movs	r1, #1
 8006b60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b62:	2300      	movs	r3, #0
  }
}
 8006b64:	0018      	movs	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	b002      	add	sp, #8
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	ff8fffbf 	.word	0xff8fffbf

08006b70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	21a0      	movs	r1, #160	; 0xa0
 8006b84:	438a      	bics	r2, r1
 8006b86:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006b88:	f7fd fc0a 	bl	80043a0 <HAL_GetTick>
 8006b8c:	0003      	movs	r3, r0
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b90:	e00a      	b.n	8006ba8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b92:	f7fd fc05 	bl	80043a0 <HAL_GetTick>
 8006b96:	0002      	movs	r2, r0
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	1ad2      	subs	r2, r2, r3
 8006b9c:	23fa      	movs	r3, #250	; 0xfa
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e006      	b.n	8006bb6 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	d0ee      	beq.n	8006b92 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	b004      	add	sp, #16
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	2240      	movs	r2, #64	; 0x40
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d11a      	bne.n	8006c08 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4252      	negs	r2, r2
 8006bda:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006bdc:	f7fd fbe0 	bl	80043a0 <HAL_GetTick>
 8006be0:	0003      	movs	r3, r0
 8006be2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006be4:	e00a      	b.n	8006bfc <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006be6:	f7fd fbdb 	bl	80043a0 <HAL_GetTick>
 8006bea:	0002      	movs	r2, r0
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1ad2      	subs	r2, r2, r3
 8006bf0:	23fa      	movs	r3, #250	; 0xfa
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d901      	bls.n	8006bfc <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e006      	b.n	8006c0a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	2240      	movs	r2, #64	; 0x40
 8006c04:	4013      	ands	r3, r2
 8006c06:	d0ee      	beq.n	8006be6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	b004      	add	sp, #16
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	2380      	movs	r3, #128	; 0x80
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	4013      	ands	r3, r2
 8006c28:	d00d      	beq.n	8006c46 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f000 f81b 	bl	8006c68 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	22ff      	movs	r2, #255	; 0xff
 8006c3a:	401a      	ands	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4907      	ldr	r1, [pc, #28]	; (8006c60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8006c42:	430a      	orrs	r2, r1
 8006c44:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8006c48:	2280      	movs	r2, #128	; 0x80
 8006c4a:	0352      	lsls	r2, r2, #13
 8006c4c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2221      	movs	r2, #33	; 0x21
 8006c52:	2101      	movs	r1, #1
 8006c54:	5499      	strb	r1, [r3, r2]
}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	b002      	add	sp, #8
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	fffffb7f 	.word	0xfffffb7f
 8006c64:	40010400 	.word	0x40010400

08006c68 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006c70:	46c0      	nop			; (mov r8, r8)
 8006c72:	46bd      	mov	sp, r7
 8006c74:	b002      	add	sp, #8
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e032      	b.n	8006cf0 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2239      	movs	r2, #57	; 0x39
 8006c8e:	5c9b      	ldrb	r3, [r3, r2]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2238      	movs	r2, #56	; 0x38
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f7fd f94b 	bl	8003f3c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2239      	movs	r2, #57	; 0x39
 8006caa:	2102      	movs	r1, #2
 8006cac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	0010      	movs	r0, r2
 8006cba:	f000 f973 	bl	8006fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	223e      	movs	r2, #62	; 0x3e
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	223a      	movs	r2, #58	; 0x3a
 8006cca:	2101      	movs	r1, #1
 8006ccc:	5499      	strb	r1, [r3, r2]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	223b      	movs	r2, #59	; 0x3b
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	5499      	strb	r1, [r3, r2]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	223c      	movs	r2, #60	; 0x3c
 8006cda:	2101      	movs	r1, #1
 8006cdc:	5499      	strb	r1, [r3, r2]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	223d      	movs	r2, #61	; 0x3d
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2239      	movs	r2, #57	; 0x39
 8006cea:	2101      	movs	r1, #1
 8006cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2202      	movs	r2, #2
 8006d08:	4013      	ands	r3, r2
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d124      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	2202      	movs	r2, #2
 8006d16:	4013      	ands	r3, r2
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d11d      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2203      	movs	r2, #3
 8006d22:	4252      	negs	r2, r2
 8006d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2203      	movs	r2, #3
 8006d34:	4013      	ands	r3, r2
 8006d36:	d004      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f000 f91a 	bl	8006f74 <HAL_TIM_IC_CaptureCallback>
 8006d40:	e007      	b.n	8006d52 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	0018      	movs	r0, r3
 8006d46:	f000 f90d 	bl	8006f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f000 f919 	bl	8006f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2204      	movs	r2, #4
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d125      	bne.n	8006db2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d11e      	bne.n	8006db2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2205      	movs	r2, #5
 8006d7a:	4252      	negs	r2, r2
 8006d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2202      	movs	r2, #2
 8006d82:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	23c0      	movs	r3, #192	; 0xc0
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4013      	ands	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	0018      	movs	r0, r3
 8006d96:	f000 f8ed 	bl	8006f74 <HAL_TIM_IC_CaptureCallback>
 8006d9a:	e007      	b.n	8006dac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	0018      	movs	r0, r3
 8006da0:	f000 f8e0 	bl	8006f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	0018      	movs	r0, r3
 8006da8:	f000 f8ec 	bl	8006f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	2208      	movs	r2, #8
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d124      	bne.n	8006e0a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d11d      	bne.n	8006e0a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2209      	movs	r2, #9
 8006dd4:	4252      	negs	r2, r2
 8006dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2204      	movs	r2, #4
 8006ddc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	2203      	movs	r2, #3
 8006de6:	4013      	ands	r3, r2
 8006de8:	d004      	beq.n	8006df4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 f8c1 	bl	8006f74 <HAL_TIM_IC_CaptureCallback>
 8006df2:	e007      	b.n	8006e04 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	0018      	movs	r0, r3
 8006df8:	f000 f8b4 	bl	8006f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f000 f8c0 	bl	8006f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2210      	movs	r2, #16
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	d125      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	2210      	movs	r2, #16
 8006e20:	4013      	ands	r3, r2
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d11e      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2211      	movs	r2, #17
 8006e2c:	4252      	negs	r2, r2
 8006e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2208      	movs	r2, #8
 8006e34:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69da      	ldr	r2, [r3, #28]
 8006e3c:	23c0      	movs	r3, #192	; 0xc0
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4013      	ands	r3, r2
 8006e42:	d004      	beq.n	8006e4e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	0018      	movs	r0, r3
 8006e48:	f000 f894 	bl	8006f74 <HAL_TIM_IC_CaptureCallback>
 8006e4c:	e007      	b.n	8006e5e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	0018      	movs	r0, r3
 8006e52:	f000 f887 	bl	8006f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 f893 	bl	8006f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d10f      	bne.n	8006e92 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d108      	bne.n	8006e92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2202      	movs	r2, #2
 8006e86:	4252      	negs	r2, r2
 8006e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f000 f861 	bl	8006f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2240      	movs	r2, #64	; 0x40
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b40      	cmp	r3, #64	; 0x40
 8006e9e:	d10f      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	2240      	movs	r2, #64	; 0x40
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b40      	cmp	r3, #64	; 0x40
 8006eac:	d108      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2241      	movs	r2, #65	; 0x41
 8006eb4:	4252      	negs	r2, r2
 8006eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f000 f86a 	bl	8006f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ec0:	46c0      	nop			; (mov r8, r8)
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b002      	add	sp, #8
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2238      	movs	r2, #56	; 0x38
 8006ed8:	5c9b      	ldrb	r3, [r3, r2]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e034      	b.n	8006f4c <HAL_TIM_OC_ConfigChannel+0x84>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2238      	movs	r2, #56	; 0x38
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d010      	beq.n	8006f12 <HAL_TIM_OC_ConfigChannel+0x4a>
 8006ef0:	d802      	bhi.n	8006ef8 <HAL_TIM_OC_ConfigChannel+0x30>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8006ef6:	e024      	b.n	8006f42 <HAL_TIM_OC_ConfigChannel+0x7a>
  switch (Channel)
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d012      	beq.n	8006f22 <HAL_TIM_OC_ConfigChannel+0x5a>
 8006efc:	2b0c      	cmp	r3, #12
 8006efe:	d018      	beq.n	8006f32 <HAL_TIM_OC_ConfigChannel+0x6a>
      break;
 8006f00:	e01f      	b.n	8006f42 <HAL_TIM_OC_ConfigChannel+0x7a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	0011      	movs	r1, r2
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f000 f8a8 	bl	8007060 <TIM_OC1_SetConfig>
      break;
 8006f10:	e017      	b.n	8006f42 <HAL_TIM_OC_ConfigChannel+0x7a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	0011      	movs	r1, r2
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	f000 f8dc 	bl	80070d8 <TIM_OC2_SetConfig>
      break;
 8006f20:	e00f      	b.n	8006f42 <HAL_TIM_OC_ConfigChannel+0x7a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	0011      	movs	r1, r2
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f000 f916 	bl	800715c <TIM_OC3_SetConfig>
      break;
 8006f30:	e007      	b.n	8006f42 <HAL_TIM_OC_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	0011      	movs	r1, r2
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f000 f94e 	bl	80071dc <TIM_OC4_SetConfig>
      break;
 8006f40:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2238      	movs	r2, #56	; 0x38
 8006f46:	2100      	movs	r1, #0
 8006f48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b004      	add	sp, #16
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f5c:	46c0      	nop			; (mov r8, r8)
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	b002      	add	sp, #8
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f6c:	46c0      	nop			; (mov r8, r8)
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b002      	add	sp, #8
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b002      	add	sp, #8
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f8c:	46c0      	nop			; (mov r8, r8)
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b002      	add	sp, #8
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f9c:	46c0      	nop			; (mov r8, r8)
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b002      	add	sp, #8
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	2380      	movs	r3, #128	; 0x80
 8006fb8:	05db      	lsls	r3, r3, #23
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d00b      	beq.n	8006fd6 <TIM_Base_SetConfig+0x32>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a23      	ldr	r2, [pc, #140]	; (8007050 <TIM_Base_SetConfig+0xac>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d007      	beq.n	8006fd6 <TIM_Base_SetConfig+0x32>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a22      	ldr	r2, [pc, #136]	; (8007054 <TIM_Base_SetConfig+0xb0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d003      	beq.n	8006fd6 <TIM_Base_SetConfig+0x32>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a21      	ldr	r2, [pc, #132]	; (8007058 <TIM_Base_SetConfig+0xb4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d108      	bne.n	8006fe8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2270      	movs	r2, #112	; 0x70
 8006fda:	4393      	bics	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	2380      	movs	r3, #128	; 0x80
 8006fec:	05db      	lsls	r3, r3, #23
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d00b      	beq.n	800700a <TIM_Base_SetConfig+0x66>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a16      	ldr	r2, [pc, #88]	; (8007050 <TIM_Base_SetConfig+0xac>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <TIM_Base_SetConfig+0x66>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a15      	ldr	r2, [pc, #84]	; (8007054 <TIM_Base_SetConfig+0xb0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d003      	beq.n	800700a <TIM_Base_SetConfig+0x66>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a14      	ldr	r2, [pc, #80]	; (8007058 <TIM_Base_SetConfig+0xb4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d108      	bne.n	800701c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4a13      	ldr	r2, [pc, #76]	; (800705c <TIM_Base_SetConfig+0xb8>)
 800700e:	4013      	ands	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	4393      	bics	r3, r2
 8007022:	001a      	movs	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	615a      	str	r2, [r3, #20]
}
 8007048:	46c0      	nop			; (mov r8, r8)
 800704a:	46bd      	mov	sp, r7
 800704c:	b004      	add	sp, #16
 800704e:	bd80      	pop	{r7, pc}
 8007050:	40000400 	.word	0x40000400
 8007054:	40010800 	.word	0x40010800
 8007058:	40011400 	.word	0x40011400
 800705c:	fffffcff 	.word	0xfffffcff

08007060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	2201      	movs	r2, #1
 8007070:	4393      	bics	r3, r2
 8007072:	001a      	movs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2270      	movs	r2, #112	; 0x70
 800708e:	4393      	bics	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2203      	movs	r2, #3
 8007096:	4393      	bics	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2202      	movs	r2, #2
 80070a8:	4393      	bics	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	621a      	str	r2, [r3, #32]
}
 80070d0:	46c0      	nop			; (mov r8, r8)
 80070d2:	46bd      	mov	sp, r7
 80070d4:	b006      	add	sp, #24
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	2210      	movs	r2, #16
 80070e8:	4393      	bics	r3, r2
 80070ea:	001a      	movs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4a13      	ldr	r2, [pc, #76]	; (8007154 <TIM_OC2_SetConfig+0x7c>)
 8007106:	4013      	ands	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4a12      	ldr	r2, [pc, #72]	; (8007158 <TIM_OC2_SetConfig+0x80>)
 800710e:	4013      	ands	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2220      	movs	r2, #32
 8007122:	4393      	bics	r3, r2
 8007124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	621a      	str	r2, [r3, #32]
}
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	b006      	add	sp, #24
 8007152:	bd80      	pop	{r7, pc}
 8007154:	ffff8fff 	.word	0xffff8fff
 8007158:	fffffcff 	.word	0xfffffcff

0800715c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	4a1a      	ldr	r2, [pc, #104]	; (80071d4 <TIM_OC3_SetConfig+0x78>)
 800716c:	401a      	ands	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2270      	movs	r2, #112	; 0x70
 8007188:	4393      	bics	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2203      	movs	r2, #3
 8007190:	4393      	bics	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	4a0d      	ldr	r2, [pc, #52]	; (80071d8 <TIM_OC3_SetConfig+0x7c>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	621a      	str	r2, [r3, #32]
}
 80071cc:	46c0      	nop			; (mov r8, r8)
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b006      	add	sp, #24
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	fffffeff 	.word	0xfffffeff
 80071d8:	fffffdff 	.word	0xfffffdff

080071dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	4a1b      	ldr	r2, [pc, #108]	; (8007258 <TIM_OC4_SetConfig+0x7c>)
 80071ec:	401a      	ands	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4a15      	ldr	r2, [pc, #84]	; (800725c <TIM_OC4_SetConfig+0x80>)
 8007208:	4013      	ands	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4a14      	ldr	r2, [pc, #80]	; (8007260 <TIM_OC4_SetConfig+0x84>)
 8007210:	4013      	ands	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4313      	orrs	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	4a10      	ldr	r2, [pc, #64]	; (8007264 <TIM_OC4_SetConfig+0x88>)
 8007224:	4013      	ands	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	031b      	lsls	r3, r3, #12
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	46bd      	mov	sp, r7
 8007252:	b006      	add	sp, #24
 8007254:	bd80      	pop	{r7, pc}
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	ffffefff 	.word	0xffffefff
 800725c:	ffff8fff 	.word	0xffff8fff
 8007260:	fffffcff 	.word	0xfffffcff
 8007264:	ffffdfff 	.word	0xffffdfff

08007268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2238      	movs	r2, #56	; 0x38
 8007276:	5c9b      	ldrb	r3, [r3, r2]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800727c:	2302      	movs	r3, #2
 800727e:	e047      	b.n	8007310 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2238      	movs	r2, #56	; 0x38
 8007284:	2101      	movs	r1, #1
 8007286:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2239      	movs	r2, #57	; 0x39
 800728c:	2102      	movs	r1, #2
 800728e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2270      	movs	r2, #112	; 0x70
 80072a4:	4393      	bics	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	2380      	movs	r3, #128	; 0x80
 80072c0:	05db      	lsls	r3, r3, #23
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d00e      	beq.n	80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a13      	ldr	r2, [pc, #76]	; (8007318 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d009      	beq.n	80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a11      	ldr	r2, [pc, #68]	; (800731c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a10      	ldr	r2, [pc, #64]	; (8007320 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d10c      	bne.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2280      	movs	r2, #128	; 0x80
 80072e8:	4393      	bics	r3, r2
 80072ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2239      	movs	r2, #57	; 0x39
 8007302:	2101      	movs	r1, #1
 8007304:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2238      	movs	r2, #56	; 0x38
 800730a:	2100      	movs	r1, #0
 800730c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	0018      	movs	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	b004      	add	sp, #16
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40000400 	.word	0x40000400
 800731c:	40010800 	.word	0x40010800
 8007320:	40011400 	.word	0x40011400

08007324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e044      	b.n	80073c0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800733a:	2b00      	cmp	r3, #0
 800733c:	d107      	bne.n	800734e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2274      	movs	r2, #116	; 0x74
 8007342:	2100      	movs	r1, #0
 8007344:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	0018      	movs	r0, r3
 800734a:	f7fc feb1 	bl	80040b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2224      	movs	r2, #36	; 0x24
 8007352:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2101      	movs	r1, #1
 8007360:	438a      	bics	r2, r1
 8007362:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	0018      	movs	r0, r3
 8007368:	f000 fb56 	bl	8007a18 <UART_SetConfig>
 800736c:	0003      	movs	r3, r0
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e024      	b.n	80073c0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	0018      	movs	r0, r3
 8007382:	f000 fe05 	bl	8007f90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	490d      	ldr	r1, [pc, #52]	; (80073c8 <HAL_UART_Init+0xa4>)
 8007392:	400a      	ands	r2, r1
 8007394:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	212a      	movs	r1, #42	; 0x2a
 80073a2:	438a      	bics	r2, r1
 80073a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2101      	movs	r1, #1
 80073b2:	430a      	orrs	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	0018      	movs	r0, r3
 80073ba:	f000 fe9d 	bl	80080f8 <UART_CheckIdleState>
 80073be:	0003      	movs	r3, r0
}
 80073c0:	0018      	movs	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b002      	add	sp, #8
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	ffffb7ff 	.word	0xffffb7ff

080073cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	; 0x28
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	1dbb      	adds	r3, r7, #6
 80073da:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d000      	beq.n	80073e6 <HAL_UART_Transmit+0x1a>
 80073e4:	e095      	b.n	8007512 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <HAL_UART_Transmit+0x28>
 80073ec:	1dbb      	adds	r3, r7, #6
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e08d      	b.n	8007514 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	2380      	movs	r3, #128	; 0x80
 80073fe:	015b      	lsls	r3, r3, #5
 8007400:	429a      	cmp	r2, r3
 8007402:	d109      	bne.n	8007418 <HAL_UART_Transmit+0x4c>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d105      	bne.n	8007418 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2201      	movs	r2, #1
 8007410:	4013      	ands	r3, r2
 8007412:	d001      	beq.n	8007418 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e07d      	b.n	8007514 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2274      	movs	r2, #116	; 0x74
 800741c:	5c9b      	ldrb	r3, [r3, r2]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_UART_Transmit+0x5a>
 8007422:	2302      	movs	r3, #2
 8007424:	e076      	b.n	8007514 <HAL_UART_Transmit+0x148>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2274      	movs	r2, #116	; 0x74
 800742a:	2101      	movs	r1, #1
 800742c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2280      	movs	r2, #128	; 0x80
 8007432:	2100      	movs	r1, #0
 8007434:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2221      	movs	r2, #33	; 0x21
 800743a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800743c:	f7fc ffb0 	bl	80043a0 <HAL_GetTick>
 8007440:	0003      	movs	r3, r0
 8007442:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	1dba      	adds	r2, r7, #6
 8007448:	2150      	movs	r1, #80	; 0x50
 800744a:	8812      	ldrh	r2, [r2, #0]
 800744c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	1dba      	adds	r2, r7, #6
 8007452:	2152      	movs	r1, #82	; 0x52
 8007454:	8812      	ldrh	r2, [r2, #0]
 8007456:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	2380      	movs	r3, #128	; 0x80
 800745e:	015b      	lsls	r3, r3, #5
 8007460:	429a      	cmp	r2, r3
 8007462:	d108      	bne.n	8007476 <HAL_UART_Transmit+0xaa>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800746c:	2300      	movs	r3, #0
 800746e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	e003      	b.n	800747e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2274      	movs	r2, #116	; 0x74
 8007482:	2100      	movs	r1, #0
 8007484:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007486:	e02c      	b.n	80074e2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	0013      	movs	r3, r2
 8007492:	2200      	movs	r2, #0
 8007494:	2180      	movs	r1, #128	; 0x80
 8007496:	f000 fe79 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 800749a:	1e03      	subs	r3, r0, #0
 800749c:	d001      	beq.n	80074a2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e038      	b.n	8007514 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10b      	bne.n	80074c0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	001a      	movs	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	05d2      	lsls	r2, r2, #23
 80074b4:	0dd2      	lsrs	r2, r2, #23
 80074b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	3302      	adds	r3, #2
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	e007      	b.n	80074d0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	781a      	ldrb	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	3301      	adds	r3, #1
 80074ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2252      	movs	r2, #82	; 0x52
 80074d4:	5a9b      	ldrh	r3, [r3, r2]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	b299      	uxth	r1, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2252      	movs	r2, #82	; 0x52
 80074e0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2252      	movs	r2, #82	; 0x52
 80074e6:	5a9b      	ldrh	r3, [r3, r2]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1cc      	bne.n	8007488 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	0013      	movs	r3, r2
 80074f8:	2200      	movs	r2, #0
 80074fa:	2140      	movs	r1, #64	; 0x40
 80074fc:	f000 fe46 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 8007500:	1e03      	subs	r3, r0, #0
 8007502:	d001      	beq.n	8007508 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e005      	b.n	8007514 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2220      	movs	r2, #32
 800750c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	e000      	b.n	8007514 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8007512:	2302      	movs	r3, #2
  }
}
 8007514:	0018      	movs	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	b008      	add	sp, #32
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	1dbb      	adds	r3, r7, #6
 8007528:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800752e:	2b20      	cmp	r3, #32
 8007530:	d144      	bne.n	80075bc <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <HAL_UART_Receive_IT+0x24>
 8007538:	1dbb      	adds	r3, r7, #6
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e03c      	b.n	80075be <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	2380      	movs	r3, #128	; 0x80
 800754a:	015b      	lsls	r3, r3, #5
 800754c:	429a      	cmp	r2, r3
 800754e:	d109      	bne.n	8007564 <HAL_UART_Receive_IT+0x48>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2201      	movs	r2, #1
 800755c:	4013      	ands	r3, r2
 800755e:	d001      	beq.n	8007564 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e02c      	b.n	80075be <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2274      	movs	r2, #116	; 0x74
 8007568:	5c9b      	ldrb	r3, [r3, r2]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d101      	bne.n	8007572 <HAL_UART_Receive_IT+0x56>
 800756e:	2302      	movs	r3, #2
 8007570:	e025      	b.n	80075be <HAL_UART_Receive_IT+0xa2>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2274      	movs	r2, #116	; 0x74
 8007576:	2101      	movs	r1, #1
 8007578:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a10      	ldr	r2, [pc, #64]	; (80075c8 <HAL_UART_Receive_IT+0xac>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00f      	beq.n	80075aa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	2380      	movs	r3, #128	; 0x80
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	4013      	ands	r3, r2
 8007596:	d008      	beq.n	80075aa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2180      	movs	r1, #128	; 0x80
 80075a4:	04c9      	lsls	r1, r1, #19
 80075a6:	430a      	orrs	r2, r1
 80075a8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80075aa:	1dbb      	adds	r3, r7, #6
 80075ac:	881a      	ldrh	r2, [r3, #0]
 80075ae:	68b9      	ldr	r1, [r7, #8]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	0018      	movs	r0, r3
 80075b4:	f000 fe68 	bl	8008288 <UART_Start_Receive_IT>
 80075b8:	0003      	movs	r3, r0
 80075ba:	e000      	b.n	80075be <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80075bc:	2302      	movs	r3, #2
  }
}
 80075be:	0018      	movs	r0, r3
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b004      	add	sp, #16
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	40004800 	.word	0x40004800

080075cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	4ab6      	ldr	r2, [pc, #728]	; (80078c8 <HAL_UART_IRQHandler+0x2fc>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d112      	bne.n	8007620 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	2220      	movs	r2, #32
 80075fe:	4013      	ands	r3, r2
 8007600:	d00e      	beq.n	8007620 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2220      	movs	r2, #32
 8007606:	4013      	ands	r3, r2
 8007608:	d00a      	beq.n	8007620 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800760e:	2b00      	cmp	r3, #0
 8007610:	d100      	bne.n	8007614 <HAL_UART_IRQHandler+0x48>
 8007612:	e1d6      	b.n	80079c2 <HAL_UART_IRQHandler+0x3f6>
      {
        huart->RxISR(huart);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	0010      	movs	r0, r2
 800761c:	4798      	blx	r3
      }
      return;
 800761e:	e1d0      	b.n	80079c2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d100      	bne.n	8007628 <HAL_UART_IRQHandler+0x5c>
 8007626:	e0d9      	b.n	80077dc <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2201      	movs	r2, #1
 800762c:	4013      	ands	r3, r2
 800762e:	d104      	bne.n	800763a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	4aa6      	ldr	r2, [pc, #664]	; (80078cc <HAL_UART_IRQHandler+0x300>)
 8007634:	4013      	ands	r3, r2
 8007636:	d100      	bne.n	800763a <HAL_UART_IRQHandler+0x6e>
 8007638:	e0d0      	b.n	80077dc <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	2201      	movs	r2, #1
 800763e:	4013      	ands	r3, r2
 8007640:	d010      	beq.n	8007664 <HAL_UART_IRQHandler+0x98>
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	2380      	movs	r3, #128	; 0x80
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	4013      	ands	r3, r2
 800764a:	d00b      	beq.n	8007664 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2201      	movs	r2, #1
 8007652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2280      	movs	r2, #128	; 0x80
 8007658:	589b      	ldr	r3, [r3, r2]
 800765a:	2201      	movs	r2, #1
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2180      	movs	r1, #128	; 0x80
 8007662:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2202      	movs	r2, #2
 8007668:	4013      	ands	r3, r2
 800766a:	d00f      	beq.n	800768c <HAL_UART_IRQHandler+0xc0>
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2201      	movs	r2, #1
 8007670:	4013      	ands	r3, r2
 8007672:	d00b      	beq.n	800768c <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2202      	movs	r2, #2
 800767a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2280      	movs	r2, #128	; 0x80
 8007680:	589b      	ldr	r3, [r3, r2]
 8007682:	2204      	movs	r2, #4
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2180      	movs	r1, #128	; 0x80
 800768a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	2204      	movs	r2, #4
 8007690:	4013      	ands	r3, r2
 8007692:	d00f      	beq.n	80076b4 <HAL_UART_IRQHandler+0xe8>
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2201      	movs	r2, #1
 8007698:	4013      	ands	r3, r2
 800769a:	d00b      	beq.n	80076b4 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2204      	movs	r2, #4
 80076a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2280      	movs	r2, #128	; 0x80
 80076a8:	589b      	ldr	r3, [r3, r2]
 80076aa:	2202      	movs	r2, #2
 80076ac:	431a      	orrs	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2180      	movs	r1, #128	; 0x80
 80076b2:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	2208      	movs	r2, #8
 80076b8:	4013      	ands	r3, r2
 80076ba:	d013      	beq.n	80076e4 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	2220      	movs	r2, #32
 80076c0:	4013      	ands	r3, r2
 80076c2:	d103      	bne.n	80076cc <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2201      	movs	r2, #1
 80076c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076ca:	d00b      	beq.n	80076e4 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2208      	movs	r2, #8
 80076d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2280      	movs	r2, #128	; 0x80
 80076d8:	589b      	ldr	r3, [r3, r2]
 80076da:	2208      	movs	r2, #8
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2180      	movs	r1, #128	; 0x80
 80076e2:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	2380      	movs	r3, #128	; 0x80
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	4013      	ands	r3, r2
 80076ec:	d011      	beq.n	8007712 <HAL_UART_IRQHandler+0x146>
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	2380      	movs	r3, #128	; 0x80
 80076f2:	04db      	lsls	r3, r3, #19
 80076f4:	4013      	ands	r3, r2
 80076f6:	d00c      	beq.n	8007712 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2280      	movs	r2, #128	; 0x80
 80076fe:	0112      	lsls	r2, r2, #4
 8007700:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2280      	movs	r2, #128	; 0x80
 8007706:	589b      	ldr	r3, [r3, r2]
 8007708:	2220      	movs	r2, #32
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2180      	movs	r1, #128	; 0x80
 8007710:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2280      	movs	r2, #128	; 0x80
 8007716:	589b      	ldr	r3, [r3, r2]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d100      	bne.n	800771e <HAL_UART_IRQHandler+0x152>
 800771c:	e153      	b.n	80079c6 <HAL_UART_IRQHandler+0x3fa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	2220      	movs	r2, #32
 8007722:	4013      	ands	r3, r2
 8007724:	d00c      	beq.n	8007740 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	2220      	movs	r2, #32
 800772a:	4013      	ands	r3, r2
 800772c:	d008      	beq.n	8007740 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007732:	2b00      	cmp	r3, #0
 8007734:	d004      	beq.n	8007740 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	0010      	movs	r0, r2
 800773e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2280      	movs	r2, #128	; 0x80
 8007744:	589b      	ldr	r3, [r3, r2]
 8007746:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	2240      	movs	r2, #64	; 0x40
 8007750:	4013      	ands	r3, r2
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d003      	beq.n	800775e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2228      	movs	r2, #40	; 0x28
 800775a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800775c:	d033      	beq.n	80077c6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	0018      	movs	r0, r3
 8007762:	f000 fe1f 	bl	80083a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	2240      	movs	r2, #64	; 0x40
 800776e:	4013      	ands	r3, r2
 8007770:	2b40      	cmp	r3, #64	; 0x40
 8007772:	d123      	bne.n	80077bc <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2140      	movs	r1, #64	; 0x40
 8007780:	438a      	bics	r2, r1
 8007782:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007788:	2b00      	cmp	r3, #0
 800778a:	d012      	beq.n	80077b2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007790:	4a4f      	ldr	r2, [pc, #316]	; (80078d0 <HAL_UART_IRQHandler+0x304>)
 8007792:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007798:	0018      	movs	r0, r3
 800779a:	f7fd fae1 	bl	8004d60 <HAL_DMA_Abort_IT>
 800779e:	1e03      	subs	r3, r0, #0
 80077a0:	d01a      	beq.n	80077d8 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ac:	0018      	movs	r0, r3
 80077ae:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b0:	e012      	b.n	80077d8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	0018      	movs	r0, r3
 80077b6:	f000 f91b 	bl	80079f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ba:	e00d      	b.n	80077d8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	0018      	movs	r0, r3
 80077c0:	f000 f916 	bl	80079f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c4:	e008      	b.n	80077d8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	0018      	movs	r0, r3
 80077ca:	f000 f911 	bl	80079f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2280      	movs	r2, #128	; 0x80
 80077d2:	2100      	movs	r1, #0
 80077d4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80077d6:	e0f6      	b.n	80079c6 <HAL_UART_IRQHandler+0x3fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d8:	46c0      	nop			; (mov r8, r8)
    return;
 80077da:	e0f4      	b.n	80079c6 <HAL_UART_IRQHandler+0x3fa>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d000      	beq.n	80077e6 <HAL_UART_IRQHandler+0x21a>
 80077e4:	e0b9      	b.n	800795a <HAL_UART_IRQHandler+0x38e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	2210      	movs	r2, #16
 80077ea:	4013      	ands	r3, r2
 80077ec:	d100      	bne.n	80077f0 <HAL_UART_IRQHandler+0x224>
 80077ee:	e0b4      	b.n	800795a <HAL_UART_IRQHandler+0x38e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2210      	movs	r2, #16
 80077f4:	4013      	ands	r3, r2
 80077f6:	d100      	bne.n	80077fa <HAL_UART_IRQHandler+0x22e>
 80077f8:	e0af      	b.n	800795a <HAL_UART_IRQHandler+0x38e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2210      	movs	r2, #16
 8007800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	2240      	movs	r2, #64	; 0x40
 800780a:	4013      	ands	r3, r2
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d163      	bne.n	80078d8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	2108      	movs	r1, #8
 800781a:	187b      	adds	r3, r7, r1
 800781c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800781e:	187b      	adds	r3, r7, r1
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d100      	bne.n	8007828 <HAL_UART_IRQHandler+0x25c>
 8007826:	e0d0      	b.n	80079ca <HAL_UART_IRQHandler+0x3fe>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2258      	movs	r2, #88	; 0x58
 800782c:	5a9b      	ldrh	r3, [r3, r2]
 800782e:	2208      	movs	r2, #8
 8007830:	18ba      	adds	r2, r7, r2
 8007832:	8812      	ldrh	r2, [r2, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d300      	bcc.n	800783a <HAL_UART_IRQHandler+0x26e>
 8007838:	e0c7      	b.n	80079ca <HAL_UART_IRQHandler+0x3fe>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2208      	movs	r2, #8
 800783e:	18ba      	adds	r2, r7, r2
 8007840:	215a      	movs	r1, #90	; 0x5a
 8007842:	8812      	ldrh	r2, [r2, #0]
 8007844:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2220      	movs	r2, #32
 8007850:	4013      	ands	r3, r2
 8007852:	d12a      	bne.n	80078aa <HAL_UART_IRQHandler+0x2de>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	491d      	ldr	r1, [pc, #116]	; (80078d4 <HAL_UART_IRQHandler+0x308>)
 8007860:	400a      	ands	r2, r1
 8007862:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2101      	movs	r1, #1
 8007870:	438a      	bics	r2, r1
 8007872:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2140      	movs	r1, #64	; 0x40
 8007880:	438a      	bics	r2, r1
 8007882:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2110      	movs	r1, #16
 800789c:	438a      	bics	r2, r1
 800789e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a4:	0018      	movs	r0, r3
 80078a6:	f7fd fa1b 	bl	8004ce0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2258      	movs	r2, #88	; 0x58
 80078ae:	5a9a      	ldrh	r2, [r3, r2]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	215a      	movs	r1, #90	; 0x5a
 80078b4:	5a5b      	ldrh	r3, [r3, r1]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	0011      	movs	r1, r2
 80078c0:	0018      	movs	r0, r3
 80078c2:	f000 f89d 	bl	8007a00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80078c6:	e080      	b.n	80079ca <HAL_UART_IRQHandler+0x3fe>
 80078c8:	0000080f 	.word	0x0000080f
 80078cc:	04000120 	.word	0x04000120
 80078d0:	08008405 	.word	0x08008405
 80078d4:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2258      	movs	r2, #88	; 0x58
 80078dc:	5a99      	ldrh	r1, [r3, r2]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	225a      	movs	r2, #90	; 0x5a
 80078e2:	5a9b      	ldrh	r3, [r3, r2]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	230a      	movs	r3, #10
 80078e8:	18fb      	adds	r3, r7, r3
 80078ea:	1a8a      	subs	r2, r1, r2
 80078ec:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	225a      	movs	r2, #90	; 0x5a
 80078f2:	5a9b      	ldrh	r3, [r3, r2]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d100      	bne.n	80078fc <HAL_UART_IRQHandler+0x330>
 80078fa:	e068      	b.n	80079ce <HAL_UART_IRQHandler+0x402>
          &&(nb_rx_data > 0U) )
 80078fc:	230a      	movs	r3, #10
 80078fe:	18fb      	adds	r3, r7, r3
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d063      	beq.n	80079ce <HAL_UART_IRQHandler+0x402>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4932      	ldr	r1, [pc, #200]	; (80079dc <HAL_UART_IRQHandler+0x410>)
 8007912:	400a      	ands	r2, r1
 8007914:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2101      	movs	r1, #1
 8007922:	438a      	bics	r2, r1
 8007924:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2110      	movs	r1, #16
 8007944:	438a      	bics	r2, r1
 8007946:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007948:	230a      	movs	r3, #10
 800794a:	18fb      	adds	r3, r7, r3
 800794c:	881a      	ldrh	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	0011      	movs	r1, r2
 8007952:	0018      	movs	r0, r3
 8007954:	f000 f854 	bl	8007a00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007958:	e039      	b.n	80079ce <HAL_UART_IRQHandler+0x402>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	035b      	lsls	r3, r3, #13
 8007960:	4013      	ands	r3, r2
 8007962:	d00e      	beq.n	8007982 <HAL_UART_IRQHandler+0x3b6>
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	2380      	movs	r3, #128	; 0x80
 8007968:	03db      	lsls	r3, r3, #15
 800796a:	4013      	ands	r3, r2
 800796c:	d009      	beq.n	8007982 <HAL_UART_IRQHandler+0x3b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2280      	movs	r2, #128	; 0x80
 8007974:	0352      	lsls	r2, r2, #13
 8007976:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	0018      	movs	r0, r3
 800797c:	f000 fe60 	bl	8008640 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007980:	e028      	b.n	80079d4 <HAL_UART_IRQHandler+0x408>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2280      	movs	r2, #128	; 0x80
 8007986:	4013      	ands	r3, r2
 8007988:	d00d      	beq.n	80079a6 <HAL_UART_IRQHandler+0x3da>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2280      	movs	r2, #128	; 0x80
 800798e:	4013      	ands	r3, r2
 8007990:	d009      	beq.n	80079a6 <HAL_UART_IRQHandler+0x3da>
  {
    if (huart->TxISR != NULL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01b      	beq.n	80079d2 <HAL_UART_IRQHandler+0x406>
    {
      huart->TxISR(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	0010      	movs	r0, r2
 80079a2:	4798      	blx	r3
    }
    return;
 80079a4:	e015      	b.n	80079d2 <HAL_UART_IRQHandler+0x406>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	2240      	movs	r2, #64	; 0x40
 80079aa:	4013      	ands	r3, r2
 80079ac:	d012      	beq.n	80079d4 <HAL_UART_IRQHandler+0x408>
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	2240      	movs	r2, #64	; 0x40
 80079b2:	4013      	ands	r3, r2
 80079b4:	d00e      	beq.n	80079d4 <HAL_UART_IRQHandler+0x408>
  {
    UART_EndTransmit_IT(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	0018      	movs	r0, r3
 80079ba:	f000 fd3a 	bl	8008432 <UART_EndTransmit_IT>
    return;
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	e008      	b.n	80079d4 <HAL_UART_IRQHandler+0x408>
      return;
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	e006      	b.n	80079d4 <HAL_UART_IRQHandler+0x408>
    return;
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	e004      	b.n	80079d4 <HAL_UART_IRQHandler+0x408>
      return;
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	e002      	b.n	80079d4 <HAL_UART_IRQHandler+0x408>
      return;
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	e000      	b.n	80079d4 <HAL_UART_IRQHandler+0x408>
    return;
 80079d2:	46c0      	nop			; (mov r8, r8)
  }

}
 80079d4:	46bd      	mov	sp, r7
 80079d6:	b008      	add	sp, #32
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	fffffedf 	.word	0xfffffedf

080079e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079e8:	46c0      	nop			; (mov r8, r8)
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b002      	add	sp, #8
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079f8:	46c0      	nop			; (mov r8, r8)
 80079fa:	46bd      	mov	sp, r7
 80079fc:	b002      	add	sp, #8
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	000a      	movs	r2, r1
 8007a0a:	1cbb      	adds	r3, r7, #2
 8007a0c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	46bd      	mov	sp, r7
 8007a12:	b002      	add	sp, #8
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a18:	b5b0      	push	{r4, r5, r7, lr}
 8007a1a:	b08e      	sub	sp, #56	; 0x38
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a20:	231a      	movs	r3, #26
 8007a22:	2218      	movs	r2, #24
 8007a24:	4694      	mov	ip, r2
 8007a26:	44bc      	add	ip, r7
 8007a28:	4463      	add	r3, ip
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4acb      	ldr	r2, [pc, #812]	; (8007d7c <UART_SetConfig+0x364>)
 8007a4e:	4013      	ands	r3, r2
 8007a50:	0019      	movs	r1, r3
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	4ac7      	ldr	r2, [pc, #796]	; (8007d80 <UART_SetConfig+0x368>)
 8007a64:	4013      	ands	r3, r2
 8007a66:	0019      	movs	r1, r3
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4ac1      	ldr	r2, [pc, #772]	; (8007d84 <UART_SetConfig+0x36c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d004      	beq.n	8007a8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	4abc      	ldr	r2, [pc, #752]	; (8007d88 <UART_SetConfig+0x370>)
 8007a96:	4013      	ands	r3, r2
 8007a98:	0019      	movs	r1, r3
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4ab8      	ldr	r2, [pc, #736]	; (8007d8c <UART_SetConfig+0x374>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d134      	bne.n	8007b18 <UART_SetConfig+0x100>
 8007aae:	4bb8      	ldr	r3, [pc, #736]	; (8007d90 <UART_SetConfig+0x378>)
 8007ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d015      	beq.n	8007ae6 <UART_SetConfig+0xce>
 8007aba:	d304      	bcc.n	8007ac6 <UART_SetConfig+0xae>
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d00a      	beq.n	8007ad6 <UART_SetConfig+0xbe>
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d018      	beq.n	8007af6 <UART_SetConfig+0xde>
 8007ac4:	e01f      	b.n	8007b06 <UART_SetConfig+0xee>
 8007ac6:	231b      	movs	r3, #27
 8007ac8:	2218      	movs	r2, #24
 8007aca:	4694      	mov	ip, r2
 8007acc:	44bc      	add	ip, r7
 8007ace:	4463      	add	r3, ip
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e0c5      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007ad6:	231b      	movs	r3, #27
 8007ad8:	2218      	movs	r2, #24
 8007ada:	4694      	mov	ip, r2
 8007adc:	44bc      	add	ip, r7
 8007ade:	4463      	add	r3, ip
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e0bd      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007ae6:	231b      	movs	r3, #27
 8007ae8:	2218      	movs	r2, #24
 8007aea:	4694      	mov	ip, r2
 8007aec:	44bc      	add	ip, r7
 8007aee:	4463      	add	r3, ip
 8007af0:	2204      	movs	r2, #4
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	e0b5      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007af6:	231b      	movs	r3, #27
 8007af8:	2218      	movs	r2, #24
 8007afa:	4694      	mov	ip, r2
 8007afc:	44bc      	add	ip, r7
 8007afe:	4463      	add	r3, ip
 8007b00:	2208      	movs	r2, #8
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e0ad      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007b06:	231b      	movs	r3, #27
 8007b08:	2218      	movs	r2, #24
 8007b0a:	4694      	mov	ip, r2
 8007b0c:	44bc      	add	ip, r7
 8007b0e:	4463      	add	r3, ip
 8007b10:	2210      	movs	r2, #16
 8007b12:	701a      	strb	r2, [r3, #0]
 8007b14:	46c0      	nop			; (mov r8, r8)
 8007b16:	e0a4      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a9d      	ldr	r2, [pc, #628]	; (8007d94 <UART_SetConfig+0x37c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d137      	bne.n	8007b92 <UART_SetConfig+0x17a>
 8007b22:	4b9b      	ldr	r3, [pc, #620]	; (8007d90 <UART_SetConfig+0x378>)
 8007b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b26:	220c      	movs	r2, #12
 8007b28:	4013      	ands	r3, r2
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d018      	beq.n	8007b60 <UART_SetConfig+0x148>
 8007b2e:	d802      	bhi.n	8007b36 <UART_SetConfig+0x11e>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <UART_SetConfig+0x128>
 8007b34:	e024      	b.n	8007b80 <UART_SetConfig+0x168>
 8007b36:	2b08      	cmp	r3, #8
 8007b38:	d00a      	beq.n	8007b50 <UART_SetConfig+0x138>
 8007b3a:	2b0c      	cmp	r3, #12
 8007b3c:	d018      	beq.n	8007b70 <UART_SetConfig+0x158>
 8007b3e:	e01f      	b.n	8007b80 <UART_SetConfig+0x168>
 8007b40:	231b      	movs	r3, #27
 8007b42:	2218      	movs	r2, #24
 8007b44:	4694      	mov	ip, r2
 8007b46:	44bc      	add	ip, r7
 8007b48:	4463      	add	r3, ip
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e088      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007b50:	231b      	movs	r3, #27
 8007b52:	2218      	movs	r2, #24
 8007b54:	4694      	mov	ip, r2
 8007b56:	44bc      	add	ip, r7
 8007b58:	4463      	add	r3, ip
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e080      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007b60:	231b      	movs	r3, #27
 8007b62:	2218      	movs	r2, #24
 8007b64:	4694      	mov	ip, r2
 8007b66:	44bc      	add	ip, r7
 8007b68:	4463      	add	r3, ip
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	e078      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007b70:	231b      	movs	r3, #27
 8007b72:	2218      	movs	r2, #24
 8007b74:	4694      	mov	ip, r2
 8007b76:	44bc      	add	ip, r7
 8007b78:	4463      	add	r3, ip
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	e070      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007b80:	231b      	movs	r3, #27
 8007b82:	2218      	movs	r2, #24
 8007b84:	4694      	mov	ip, r2
 8007b86:	44bc      	add	ip, r7
 8007b88:	4463      	add	r3, ip
 8007b8a:	2210      	movs	r2, #16
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	e067      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a80      	ldr	r2, [pc, #512]	; (8007d98 <UART_SetConfig+0x380>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d107      	bne.n	8007bac <UART_SetConfig+0x194>
 8007b9c:	231b      	movs	r3, #27
 8007b9e:	2218      	movs	r2, #24
 8007ba0:	4694      	mov	ip, r2
 8007ba2:	44bc      	add	ip, r7
 8007ba4:	4463      	add	r3, ip
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	e05a      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a7a      	ldr	r2, [pc, #488]	; (8007d9c <UART_SetConfig+0x384>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d107      	bne.n	8007bc6 <UART_SetConfig+0x1ae>
 8007bb6:	231b      	movs	r3, #27
 8007bb8:	2218      	movs	r2, #24
 8007bba:	4694      	mov	ip, r2
 8007bbc:	44bc      	add	ip, r7
 8007bbe:	4463      	add	r3, ip
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	701a      	strb	r2, [r3, #0]
 8007bc4:	e04d      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a6e      	ldr	r2, [pc, #440]	; (8007d84 <UART_SetConfig+0x36c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d141      	bne.n	8007c54 <UART_SetConfig+0x23c>
 8007bd0:	4b6f      	ldr	r3, [pc, #444]	; (8007d90 <UART_SetConfig+0x378>)
 8007bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bd4:	23c0      	movs	r3, #192	; 0xc0
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	4013      	ands	r3, r2
 8007bda:	2280      	movs	r2, #128	; 0x80
 8007bdc:	00d2      	lsls	r2, r2, #3
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d01f      	beq.n	8007c22 <UART_SetConfig+0x20a>
 8007be2:	2280      	movs	r2, #128	; 0x80
 8007be4:	00d2      	lsls	r2, r2, #3
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d802      	bhi.n	8007bf0 <UART_SetConfig+0x1d8>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d009      	beq.n	8007c02 <UART_SetConfig+0x1ea>
 8007bee:	e028      	b.n	8007c42 <UART_SetConfig+0x22a>
 8007bf0:	2280      	movs	r2, #128	; 0x80
 8007bf2:	0112      	lsls	r2, r2, #4
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00c      	beq.n	8007c12 <UART_SetConfig+0x1fa>
 8007bf8:	22c0      	movs	r2, #192	; 0xc0
 8007bfa:	0112      	lsls	r2, r2, #4
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d018      	beq.n	8007c32 <UART_SetConfig+0x21a>
 8007c00:	e01f      	b.n	8007c42 <UART_SetConfig+0x22a>
 8007c02:	231b      	movs	r3, #27
 8007c04:	2218      	movs	r2, #24
 8007c06:	4694      	mov	ip, r2
 8007c08:	44bc      	add	ip, r7
 8007c0a:	4463      	add	r3, ip
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]
 8007c10:	e027      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007c12:	231b      	movs	r3, #27
 8007c14:	2218      	movs	r2, #24
 8007c16:	4694      	mov	ip, r2
 8007c18:	44bc      	add	ip, r7
 8007c1a:	4463      	add	r3, ip
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	701a      	strb	r2, [r3, #0]
 8007c20:	e01f      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007c22:	231b      	movs	r3, #27
 8007c24:	2218      	movs	r2, #24
 8007c26:	4694      	mov	ip, r2
 8007c28:	44bc      	add	ip, r7
 8007c2a:	4463      	add	r3, ip
 8007c2c:	2204      	movs	r2, #4
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e017      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007c32:	231b      	movs	r3, #27
 8007c34:	2218      	movs	r2, #24
 8007c36:	4694      	mov	ip, r2
 8007c38:	44bc      	add	ip, r7
 8007c3a:	4463      	add	r3, ip
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	701a      	strb	r2, [r3, #0]
 8007c40:	e00f      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007c42:	231b      	movs	r3, #27
 8007c44:	2218      	movs	r2, #24
 8007c46:	4694      	mov	ip, r2
 8007c48:	44bc      	add	ip, r7
 8007c4a:	4463      	add	r3, ip
 8007c4c:	2210      	movs	r2, #16
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	46c0      	nop			; (mov r8, r8)
 8007c52:	e006      	b.n	8007c62 <UART_SetConfig+0x24a>
 8007c54:	231b      	movs	r3, #27
 8007c56:	2218      	movs	r2, #24
 8007c58:	4694      	mov	ip, r2
 8007c5a:	44bc      	add	ip, r7
 8007c5c:	4463      	add	r3, ip
 8007c5e:	2210      	movs	r2, #16
 8007c60:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a47      	ldr	r2, [pc, #284]	; (8007d84 <UART_SetConfig+0x36c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d000      	beq.n	8007c6e <UART_SetConfig+0x256>
 8007c6c:	e0a0      	b.n	8007db0 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c6e:	231b      	movs	r3, #27
 8007c70:	2218      	movs	r2, #24
 8007c72:	4694      	mov	ip, r2
 8007c74:	44bc      	add	ip, r7
 8007c76:	4463      	add	r3, ip
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d00d      	beq.n	8007c9a <UART_SetConfig+0x282>
 8007c7e:	dc02      	bgt.n	8007c86 <UART_SetConfig+0x26e>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <UART_SetConfig+0x278>
 8007c84:	e01d      	b.n	8007cc2 <UART_SetConfig+0x2aa>
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d012      	beq.n	8007cb0 <UART_SetConfig+0x298>
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	d015      	beq.n	8007cba <UART_SetConfig+0x2a2>
 8007c8e:	e018      	b.n	8007cc2 <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c90:	f7fe fd30 	bl	80066f4 <HAL_RCC_GetPCLK1Freq>
 8007c94:	0003      	movs	r3, r0
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c98:	e01d      	b.n	8007cd6 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c9a:	4b3d      	ldr	r3, [pc, #244]	; (8007d90 <UART_SetConfig+0x378>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2210      	movs	r2, #16
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	d002      	beq.n	8007caa <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007ca4:	4b3e      	ldr	r3, [pc, #248]	; (8007da0 <UART_SetConfig+0x388>)
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ca8:	e015      	b.n	8007cd6 <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 8007caa:	4b3e      	ldr	r3, [pc, #248]	; (8007da4 <UART_SetConfig+0x38c>)
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cae:	e012      	b.n	8007cd6 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cb0:	f7fe fc74 	bl	800659c <HAL_RCC_GetSysClockFreq>
 8007cb4:	0003      	movs	r3, r0
 8007cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cb8:	e00d      	b.n	8007cd6 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cba:	2380      	movs	r3, #128	; 0x80
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cc0:	e009      	b.n	8007cd6 <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007cc6:	231a      	movs	r3, #26
 8007cc8:	2218      	movs	r2, #24
 8007cca:	4694      	mov	ip, r2
 8007ccc:	44bc      	add	ip, r7
 8007cce:	4463      	add	r3, ip
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	701a      	strb	r2, [r3, #0]
        break;
 8007cd4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d100      	bne.n	8007cde <UART_SetConfig+0x2c6>
 8007cdc:	e13c      	b.n	8007f58 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	0013      	movs	r3, r2
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	189b      	adds	r3, r3, r2
 8007ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d305      	bcc.n	8007cfa <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d907      	bls.n	8007d0a <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 8007cfa:	231a      	movs	r3, #26
 8007cfc:	2218      	movs	r2, #24
 8007cfe:	4694      	mov	ip, r2
 8007d00:	44bc      	add	ip, r7
 8007d02:	4463      	add	r3, ip
 8007d04:	2201      	movs	r2, #1
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	e126      	b.n	8007f58 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	613b      	str	r3, [r7, #16]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	6939      	ldr	r1, [r7, #16]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	000b      	movs	r3, r1
 8007d18:	0e1b      	lsrs	r3, r3, #24
 8007d1a:	0010      	movs	r0, r2
 8007d1c:	0205      	lsls	r5, r0, #8
 8007d1e:	431d      	orrs	r5, r3
 8007d20:	000b      	movs	r3, r1
 8007d22:	021c      	lsls	r4, r3, #8
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	60bb      	str	r3, [r7, #8]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	68b8      	ldr	r0, [r7, #8]
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	1900      	adds	r0, r0, r4
 8007d36:	4169      	adcs	r1, r5
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	607b      	str	r3, [r7, #4]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f7f8 fbdf 	bl	8000508 <__aeabi_uldivmod>
 8007d4a:	0003      	movs	r3, r0
 8007d4c:	000c      	movs	r4, r1
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	4a15      	ldr	r2, [pc, #84]	; (8007da8 <UART_SetConfig+0x390>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d908      	bls.n	8007d6a <UART_SetConfig+0x352>
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	4a14      	ldr	r2, [pc, #80]	; (8007dac <UART_SetConfig+0x394>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d804      	bhi.n	8007d6a <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d66:	60da      	str	r2, [r3, #12]
 8007d68:	e0f6      	b.n	8007f58 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 8007d6a:	231a      	movs	r3, #26
 8007d6c:	2218      	movs	r2, #24
 8007d6e:	4694      	mov	ip, r2
 8007d70:	44bc      	add	ip, r7
 8007d72:	4463      	add	r3, ip
 8007d74:	2201      	movs	r2, #1
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	e0ee      	b.n	8007f58 <UART_SetConfig+0x540>
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	efff69f3 	.word	0xefff69f3
 8007d80:	ffffcfff 	.word	0xffffcfff
 8007d84:	40004800 	.word	0x40004800
 8007d88:	fffff4ff 	.word	0xfffff4ff
 8007d8c:	40013800 	.word	0x40013800
 8007d90:	40021000 	.word	0x40021000
 8007d94:	40004400 	.word	0x40004400
 8007d98:	40004c00 	.word	0x40004c00
 8007d9c:	40005000 	.word	0x40005000
 8007da0:	003d0900 	.word	0x003d0900
 8007da4:	00f42400 	.word	0x00f42400
 8007da8:	000002ff 	.word	0x000002ff
 8007dac:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	69da      	ldr	r2, [r3, #28]
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d000      	beq.n	8007dbe <UART_SetConfig+0x3a6>
 8007dbc:	e073      	b.n	8007ea6 <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 8007dbe:	231b      	movs	r3, #27
 8007dc0:	2218      	movs	r2, #24
 8007dc2:	4694      	mov	ip, r2
 8007dc4:	44bc      	add	ip, r7
 8007dc6:	4463      	add	r3, ip
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b08      	cmp	r3, #8
 8007dcc:	d822      	bhi.n	8007e14 <UART_SetConfig+0x3fc>
 8007dce:	009a      	lsls	r2, r3, #2
 8007dd0:	4b69      	ldr	r3, [pc, #420]	; (8007f78 <UART_SetConfig+0x560>)
 8007dd2:	18d3      	adds	r3, r2, r3
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dd8:	f7fe fc8c 	bl	80066f4 <HAL_RCC_GetPCLK1Freq>
 8007ddc:	0003      	movs	r3, r0
 8007dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007de0:	e022      	b.n	8007e28 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de2:	f7fe fc9d 	bl	8006720 <HAL_RCC_GetPCLK2Freq>
 8007de6:	0003      	movs	r3, r0
 8007de8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007dea:	e01d      	b.n	8007e28 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dec:	4b63      	ldr	r3, [pc, #396]	; (8007f7c <UART_SetConfig+0x564>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2210      	movs	r2, #16
 8007df2:	4013      	ands	r3, r2
 8007df4:	d002      	beq.n	8007dfc <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007df6:	4b62      	ldr	r3, [pc, #392]	; (8007f80 <UART_SetConfig+0x568>)
 8007df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007dfa:	e015      	b.n	8007e28 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 8007dfc:	4b61      	ldr	r3, [pc, #388]	; (8007f84 <UART_SetConfig+0x56c>)
 8007dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e00:	e012      	b.n	8007e28 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e02:	f7fe fbcb 	bl	800659c <HAL_RCC_GetSysClockFreq>
 8007e06:	0003      	movs	r3, r0
 8007e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e0a:	e00d      	b.n	8007e28 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e0c:	2380      	movs	r3, #128	; 0x80
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e12:	e009      	b.n	8007e28 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007e18:	231a      	movs	r3, #26
 8007e1a:	2218      	movs	r2, #24
 8007e1c:	4694      	mov	ip, r2
 8007e1e:	44bc      	add	ip, r7
 8007e20:	4463      	add	r3, ip
 8007e22:	2201      	movs	r2, #1
 8007e24:	701a      	strb	r2, [r3, #0]
        break;
 8007e26:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d100      	bne.n	8007e30 <UART_SetConfig+0x418>
 8007e2e:	e093      	b.n	8007f58 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	005a      	lsls	r2, r3, #1
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	085b      	lsrs	r3, r3, #1
 8007e3a:	18d2      	adds	r2, r2, r3
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	0019      	movs	r1, r3
 8007e42:	0010      	movs	r0, r2
 8007e44:	f7f8 f972 	bl	800012c <__udivsi3>
 8007e48:	0003      	movs	r3, r0
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	2b0f      	cmp	r3, #15
 8007e52:	d920      	bls.n	8007e96 <UART_SetConfig+0x47e>
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	4a4c      	ldr	r2, [pc, #304]	; (8007f88 <UART_SetConfig+0x570>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d81c      	bhi.n	8007e96 <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	200e      	movs	r0, #14
 8007e62:	2418      	movs	r4, #24
 8007e64:	193b      	adds	r3, r7, r4
 8007e66:	181b      	adds	r3, r3, r0
 8007e68:	210f      	movs	r1, #15
 8007e6a:	438a      	bics	r2, r1
 8007e6c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	085b      	lsrs	r3, r3, #1
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2207      	movs	r2, #7
 8007e76:	4013      	ands	r3, r2
 8007e78:	b299      	uxth	r1, r3
 8007e7a:	193b      	adds	r3, r7, r4
 8007e7c:	181b      	adds	r3, r3, r0
 8007e7e:	193a      	adds	r2, r7, r4
 8007e80:	1812      	adds	r2, r2, r0
 8007e82:	8812      	ldrh	r2, [r2, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	193a      	adds	r2, r7, r4
 8007e8e:	1812      	adds	r2, r2, r0
 8007e90:	8812      	ldrh	r2, [r2, #0]
 8007e92:	60da      	str	r2, [r3, #12]
 8007e94:	e060      	b.n	8007f58 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8007e96:	231a      	movs	r3, #26
 8007e98:	2218      	movs	r2, #24
 8007e9a:	4694      	mov	ip, r2
 8007e9c:	44bc      	add	ip, r7
 8007e9e:	4463      	add	r3, ip
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	e058      	b.n	8007f58 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ea6:	231b      	movs	r3, #27
 8007ea8:	2218      	movs	r2, #24
 8007eaa:	4694      	mov	ip, r2
 8007eac:	44bc      	add	ip, r7
 8007eae:	4463      	add	r3, ip
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d822      	bhi.n	8007efc <UART_SetConfig+0x4e4>
 8007eb6:	009a      	lsls	r2, r3, #2
 8007eb8:	4b34      	ldr	r3, [pc, #208]	; (8007f8c <UART_SetConfig+0x574>)
 8007eba:	18d3      	adds	r3, r2, r3
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ec0:	f7fe fc18 	bl	80066f4 <HAL_RCC_GetPCLK1Freq>
 8007ec4:	0003      	movs	r3, r0
 8007ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ec8:	e022      	b.n	8007f10 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eca:	f7fe fc29 	bl	8006720 <HAL_RCC_GetPCLK2Freq>
 8007ece:	0003      	movs	r3, r0
 8007ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ed2:	e01d      	b.n	8007f10 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ed4:	4b29      	ldr	r3, [pc, #164]	; (8007f7c <UART_SetConfig+0x564>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2210      	movs	r2, #16
 8007eda:	4013      	ands	r3, r2
 8007edc:	d002      	beq.n	8007ee4 <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007ede:	4b28      	ldr	r3, [pc, #160]	; (8007f80 <UART_SetConfig+0x568>)
 8007ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ee2:	e015      	b.n	8007f10 <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 8007ee4:	4b27      	ldr	r3, [pc, #156]	; (8007f84 <UART_SetConfig+0x56c>)
 8007ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ee8:	e012      	b.n	8007f10 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eea:	f7fe fb57 	bl	800659c <HAL_RCC_GetSysClockFreq>
 8007eee:	0003      	movs	r3, r0
 8007ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ef2:	e00d      	b.n	8007f10 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ef4:	2380      	movs	r3, #128	; 0x80
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007efa:	e009      	b.n	8007f10 <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007f00:	231a      	movs	r3, #26
 8007f02:	2218      	movs	r2, #24
 8007f04:	4694      	mov	ip, r2
 8007f06:	44bc      	add	ip, r7
 8007f08:	4463      	add	r3, ip
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	701a      	strb	r2, [r3, #0]
        break;
 8007f0e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d020      	beq.n	8007f58 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	085a      	lsrs	r2, r3, #1
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	18d2      	adds	r2, r2, r3
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	0019      	movs	r1, r3
 8007f26:	0010      	movs	r0, r2
 8007f28:	f7f8 f900 	bl	800012c <__udivsi3>
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	2b0f      	cmp	r3, #15
 8007f36:	d908      	bls.n	8007f4a <UART_SetConfig+0x532>
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	4a13      	ldr	r2, [pc, #76]	; (8007f88 <UART_SetConfig+0x570>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d804      	bhi.n	8007f4a <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f46:	60da      	str	r2, [r3, #12]
 8007f48:	e006      	b.n	8007f58 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8007f4a:	231a      	movs	r3, #26
 8007f4c:	2218      	movs	r2, #24
 8007f4e:	4694      	mov	ip, r2
 8007f50:	44bc      	add	ip, r7
 8007f52:	4463      	add	r3, ip
 8007f54:	2201      	movs	r2, #1
 8007f56:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	2200      	movs	r2, #0
 8007f62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007f64:	231a      	movs	r3, #26
 8007f66:	2218      	movs	r2, #24
 8007f68:	4694      	mov	ip, r2
 8007f6a:	44bc      	add	ip, r7
 8007f6c:	4463      	add	r3, ip
 8007f6e:	781b      	ldrb	r3, [r3, #0]
}
 8007f70:	0018      	movs	r0, r3
 8007f72:	46bd      	mov	sp, r7
 8007f74:	b00e      	add	sp, #56	; 0x38
 8007f76:	bdb0      	pop	{r4, r5, r7, pc}
 8007f78:	0800fadc 	.word	0x0800fadc
 8007f7c:	40021000 	.word	0x40021000
 8007f80:	003d0900 	.word	0x003d0900
 8007f84:	00f42400 	.word	0x00f42400
 8007f88:	0000ffff 	.word	0x0000ffff
 8007f8c:	0800fb00 	.word	0x0800fb00

08007f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	d00b      	beq.n	8007fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	4a4a      	ldr	r2, [pc, #296]	; (80080d4 <UART_AdvFeatureConfig+0x144>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	0019      	movs	r1, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	d00b      	beq.n	8007fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	4a43      	ldr	r2, [pc, #268]	; (80080d8 <UART_AdvFeatureConfig+0x148>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	0019      	movs	r1, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	4a3b      	ldr	r2, [pc, #236]	; (80080dc <UART_AdvFeatureConfig+0x14c>)
 8007fee:	4013      	ands	r3, r2
 8007ff0:	0019      	movs	r1, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	2208      	movs	r2, #8
 8008004:	4013      	ands	r3, r2
 8008006:	d00b      	beq.n	8008020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	4a34      	ldr	r2, [pc, #208]	; (80080e0 <UART_AdvFeatureConfig+0x150>)
 8008010:	4013      	ands	r3, r2
 8008012:	0019      	movs	r1, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	2210      	movs	r2, #16
 8008026:	4013      	ands	r3, r2
 8008028:	d00b      	beq.n	8008042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	4a2c      	ldr	r2, [pc, #176]	; (80080e4 <UART_AdvFeatureConfig+0x154>)
 8008032:	4013      	ands	r3, r2
 8008034:	0019      	movs	r1, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2220      	movs	r2, #32
 8008048:	4013      	ands	r3, r2
 800804a:	d00b      	beq.n	8008064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	4a25      	ldr	r2, [pc, #148]	; (80080e8 <UART_AdvFeatureConfig+0x158>)
 8008054:	4013      	ands	r3, r2
 8008056:	0019      	movs	r1, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	2240      	movs	r2, #64	; 0x40
 800806a:	4013      	ands	r3, r2
 800806c:	d01d      	beq.n	80080aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	4a1d      	ldr	r2, [pc, #116]	; (80080ec <UART_AdvFeatureConfig+0x15c>)
 8008076:	4013      	ands	r3, r2
 8008078:	0019      	movs	r1, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800808a:	2380      	movs	r3, #128	; 0x80
 800808c:	035b      	lsls	r3, r3, #13
 800808e:	429a      	cmp	r2, r3
 8008090:	d10b      	bne.n	80080aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	4a15      	ldr	r2, [pc, #84]	; (80080f0 <UART_AdvFeatureConfig+0x160>)
 800809a:	4013      	ands	r3, r2
 800809c:	0019      	movs	r1, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	2280      	movs	r2, #128	; 0x80
 80080b0:	4013      	ands	r3, r2
 80080b2:	d00b      	beq.n	80080cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	4a0e      	ldr	r2, [pc, #56]	; (80080f4 <UART_AdvFeatureConfig+0x164>)
 80080bc:	4013      	ands	r3, r2
 80080be:	0019      	movs	r1, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	605a      	str	r2, [r3, #4]
  }
}
 80080cc:	46c0      	nop			; (mov r8, r8)
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b002      	add	sp, #8
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	fffdffff 	.word	0xfffdffff
 80080d8:	fffeffff 	.word	0xfffeffff
 80080dc:	fffbffff 	.word	0xfffbffff
 80080e0:	ffff7fff 	.word	0xffff7fff
 80080e4:	ffffefff 	.word	0xffffefff
 80080e8:	ffffdfff 	.word	0xffffdfff
 80080ec:	ffefffff 	.word	0xffefffff
 80080f0:	ff9fffff 	.word	0xff9fffff
 80080f4:	fff7ffff 	.word	0xfff7ffff

080080f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2280      	movs	r2, #128	; 0x80
 8008104:	2100      	movs	r1, #0
 8008106:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008108:	f7fc f94a 	bl	80043a0 <HAL_GetTick>
 800810c:	0003      	movs	r3, r0
 800810e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2208      	movs	r2, #8
 8008118:	4013      	ands	r3, r2
 800811a:	2b08      	cmp	r3, #8
 800811c:	d10d      	bne.n	800813a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	2380      	movs	r3, #128	; 0x80
 8008122:	0399      	lsls	r1, r3, #14
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4b18      	ldr	r3, [pc, #96]	; (8008188 <UART_CheckIdleState+0x90>)
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	0013      	movs	r3, r2
 800812c:	2200      	movs	r2, #0
 800812e:	f000 f82d 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 8008132:	1e03      	subs	r3, r0, #0
 8008134:	d001      	beq.n	800813a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e022      	b.n	8008180 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2204      	movs	r2, #4
 8008142:	4013      	ands	r3, r2
 8008144:	2b04      	cmp	r3, #4
 8008146:	d10d      	bne.n	8008164 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	2380      	movs	r3, #128	; 0x80
 800814c:	03d9      	lsls	r1, r3, #15
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4b0d      	ldr	r3, [pc, #52]	; (8008188 <UART_CheckIdleState+0x90>)
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	0013      	movs	r3, r2
 8008156:	2200      	movs	r2, #0
 8008158:	f000 f818 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 800815c:	1e03      	subs	r3, r0, #0
 800815e:	d001      	beq.n	8008164 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e00d      	b.n	8008180 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2220      	movs	r2, #32
 8008168:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2274      	movs	r2, #116	; 0x74
 800817a:	2100      	movs	r1, #0
 800817c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	0018      	movs	r0, r3
 8008182:	46bd      	mov	sp, r7
 8008184:	b004      	add	sp, #16
 8008186:	bd80      	pop	{r7, pc}
 8008188:	01ffffff 	.word	0x01ffffff

0800818c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	1dfb      	adds	r3, r7, #7
 800819a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800819c:	e05e      	b.n	800825c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	3301      	adds	r3, #1
 80081a2:	d05b      	beq.n	800825c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a4:	f7fc f8fc 	bl	80043a0 <HAL_GetTick>
 80081a8:	0002      	movs	r2, r0
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d302      	bcc.n	80081ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d11b      	bne.n	80081f2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	492f      	ldr	r1, [pc, #188]	; (8008284 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80081c6:	400a      	ands	r2, r1
 80081c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2101      	movs	r1, #1
 80081d6:	438a      	bics	r2, r1
 80081d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2220      	movs	r2, #32
 80081de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2220      	movs	r2, #32
 80081e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2274      	movs	r2, #116	; 0x74
 80081ea:	2100      	movs	r1, #0
 80081ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e044      	b.n	800827c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2204      	movs	r2, #4
 80081fa:	4013      	ands	r3, r2
 80081fc:	d02e      	beq.n	800825c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69da      	ldr	r2, [r3, #28]
 8008204:	2380      	movs	r3, #128	; 0x80
 8008206:	011b      	lsls	r3, r3, #4
 8008208:	401a      	ands	r2, r3
 800820a:	2380      	movs	r3, #128	; 0x80
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	429a      	cmp	r2, r3
 8008210:	d124      	bne.n	800825c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2280      	movs	r2, #128	; 0x80
 8008218:	0112      	lsls	r2, r2, #4
 800821a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4917      	ldr	r1, [pc, #92]	; (8008284 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8008228:	400a      	ands	r2, r1
 800822a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2101      	movs	r1, #1
 8008238:	438a      	bics	r2, r1
 800823a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2220      	movs	r2, #32
 8008240:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2220      	movs	r2, #32
 8008246:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2280      	movs	r2, #128	; 0x80
 800824c:	2120      	movs	r1, #32
 800824e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2274      	movs	r2, #116	; 0x74
 8008254:	2100      	movs	r1, #0
 8008256:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e00f      	b.n	800827c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	4013      	ands	r3, r2
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	425a      	negs	r2, r3
 800826c:	4153      	adcs	r3, r2
 800826e:	b2db      	uxtb	r3, r3
 8008270:	001a      	movs	r2, r3
 8008272:	1dfb      	adds	r3, r7, #7
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d091      	beq.n	800819e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	0018      	movs	r0, r3
 800827e:	46bd      	mov	sp, r7
 8008280:	b004      	add	sp, #16
 8008282:	bd80      	pop	{r7, pc}
 8008284:	fffffe5f 	.word	0xfffffe5f

08008288 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	1dbb      	adds	r3, r7, #6
 8008294:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	1dba      	adds	r2, r7, #6
 80082a0:	2158      	movs	r1, #88	; 0x58
 80082a2:	8812      	ldrh	r2, [r2, #0]
 80082a4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	1dba      	adds	r2, r7, #6
 80082aa:	215a      	movs	r1, #90	; 0x5a
 80082ac:	8812      	ldrh	r2, [r2, #0]
 80082ae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	2380      	movs	r3, #128	; 0x80
 80082bc:	015b      	lsls	r3, r3, #5
 80082be:	429a      	cmp	r2, r3
 80082c0:	d10d      	bne.n	80082de <UART_Start_Receive_IT+0x56>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d104      	bne.n	80082d4 <UART_Start_Receive_IT+0x4c>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	225c      	movs	r2, #92	; 0x5c
 80082ce:	4932      	ldr	r1, [pc, #200]	; (8008398 <UART_Start_Receive_IT+0x110>)
 80082d0:	5299      	strh	r1, [r3, r2]
 80082d2:	e02e      	b.n	8008332 <UART_Start_Receive_IT+0xaa>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	225c      	movs	r2, #92	; 0x5c
 80082d8:	21ff      	movs	r1, #255	; 0xff
 80082da:	5299      	strh	r1, [r3, r2]
 80082dc:	e029      	b.n	8008332 <UART_Start_Receive_IT+0xaa>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10d      	bne.n	8008302 <UART_Start_Receive_IT+0x7a>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <UART_Start_Receive_IT+0x70>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	225c      	movs	r2, #92	; 0x5c
 80082f2:	21ff      	movs	r1, #255	; 0xff
 80082f4:	5299      	strh	r1, [r3, r2]
 80082f6:	e01c      	b.n	8008332 <UART_Start_Receive_IT+0xaa>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	225c      	movs	r2, #92	; 0x5c
 80082fc:	217f      	movs	r1, #127	; 0x7f
 80082fe:	5299      	strh	r1, [r3, r2]
 8008300:	e017      	b.n	8008332 <UART_Start_Receive_IT+0xaa>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	2380      	movs	r3, #128	; 0x80
 8008308:	055b      	lsls	r3, r3, #21
 800830a:	429a      	cmp	r2, r3
 800830c:	d10d      	bne.n	800832a <UART_Start_Receive_IT+0xa2>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d104      	bne.n	8008320 <UART_Start_Receive_IT+0x98>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	225c      	movs	r2, #92	; 0x5c
 800831a:	217f      	movs	r1, #127	; 0x7f
 800831c:	5299      	strh	r1, [r3, r2]
 800831e:	e008      	b.n	8008332 <UART_Start_Receive_IT+0xaa>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	225c      	movs	r2, #92	; 0x5c
 8008324:	213f      	movs	r1, #63	; 0x3f
 8008326:	5299      	strh	r1, [r3, r2]
 8008328:	e003      	b.n	8008332 <UART_Start_Receive_IT+0xaa>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	225c      	movs	r2, #92	; 0x5c
 800832e:	2100      	movs	r1, #0
 8008330:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2280      	movs	r2, #128	; 0x80
 8008336:	2100      	movs	r1, #0
 8008338:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2222      	movs	r2, #34	; 0x22
 800833e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2101      	movs	r1, #1
 800834c:	430a      	orrs	r2, r1
 800834e:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	2380      	movs	r3, #128	; 0x80
 8008356:	015b      	lsls	r3, r3, #5
 8008358:	429a      	cmp	r2, r3
 800835a:	d107      	bne.n	800836c <UART_Start_Receive_IT+0xe4>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d103      	bne.n	800836c <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4a0d      	ldr	r2, [pc, #52]	; (800839c <UART_Start_Receive_IT+0x114>)
 8008368:	665a      	str	r2, [r3, #100]	; 0x64
 800836a:	e002      	b.n	8008372 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4a0c      	ldr	r2, [pc, #48]	; (80083a0 <UART_Start_Receive_IT+0x118>)
 8008370:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2274      	movs	r2, #116	; 0x74
 8008376:	2100      	movs	r1, #0
 8008378:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2190      	movs	r1, #144	; 0x90
 8008386:	0049      	lsls	r1, r1, #1
 8008388:	430a      	orrs	r2, r1
 800838a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	0018      	movs	r0, r3
 8008390:	46bd      	mov	sp, r7
 8008392:	b004      	add	sp, #16
 8008394:	bd80      	pop	{r7, pc}
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	000001ff 	.word	0x000001ff
 800839c:	08008555 	.word	0x08008555
 80083a0:	08008469 	.word	0x08008469

080083a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4912      	ldr	r1, [pc, #72]	; (8008400 <UART_EndRxTransfer+0x5c>)
 80083b8:	400a      	ands	r2, r1
 80083ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689a      	ldr	r2, [r3, #8]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2101      	movs	r1, #1
 80083c8:	438a      	bics	r2, r1
 80083ca:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d107      	bne.n	80083e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2110      	movs	r1, #16
 80083e0:	438a      	bics	r2, r1
 80083e2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2220      	movs	r2, #32
 80083e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	46bd      	mov	sp, r7
 80083fa:	b002      	add	sp, #8
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	46c0      	nop			; (mov r8, r8)
 8008400:	fffffedf 	.word	0xfffffedf

08008404 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	225a      	movs	r2, #90	; 0x5a
 8008416:	2100      	movs	r1, #0
 8008418:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2252      	movs	r2, #82	; 0x52
 800841e:	2100      	movs	r1, #0
 8008420:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	0018      	movs	r0, r3
 8008426:	f7ff fae3 	bl	80079f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	46bd      	mov	sp, r7
 800842e:	b004      	add	sp, #16
 8008430:	bd80      	pop	{r7, pc}

08008432 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2140      	movs	r1, #64	; 0x40
 8008446:	438a      	bics	r2, r1
 8008448:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2220      	movs	r2, #32
 800844e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	0018      	movs	r0, r3
 800845a:	f7ff fac1 	bl	80079e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800845e:	46c0      	nop			; (mov r8, r8)
 8008460:	46bd      	mov	sp, r7
 8008462:	b002      	add	sp, #8
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008470:	230e      	movs	r3, #14
 8008472:	18fb      	adds	r3, r7, r3
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	215c      	movs	r1, #92	; 0x5c
 8008478:	5a52      	ldrh	r2, [r2, r1]
 800847a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008480:	2b22      	cmp	r3, #34	; 0x22
 8008482:	d158      	bne.n	8008536 <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800848a:	210c      	movs	r1, #12
 800848c:	187b      	adds	r3, r7, r1
 800848e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008490:	187b      	adds	r3, r7, r1
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	b2da      	uxtb	r2, r3
 8008496:	230e      	movs	r3, #14
 8008498:	18fb      	adds	r3, r7, r3
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b2d9      	uxtb	r1, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a2:	400a      	ands	r2, r1
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	225a      	movs	r2, #90	; 0x5a
 80084b6:	5a9b      	ldrh	r3, [r3, r2]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	b299      	uxth	r1, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	225a      	movs	r2, #90	; 0x5a
 80084c2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	225a      	movs	r2, #90	; 0x5a
 80084c8:	5a9b      	ldrh	r3, [r3, r2]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d13a      	bne.n	8008546 <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	491d      	ldr	r1, [pc, #116]	; (8008550 <UART_RxISR_8BIT+0xe8>)
 80084dc:	400a      	ands	r2, r1
 80084de:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2101      	movs	r1, #1
 80084ec:	438a      	bics	r2, r1
 80084ee:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2220      	movs	r2, #32
 80084f4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008500:	2b01      	cmp	r3, #1
 8008502:	d110      	bne.n	8008526 <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2110      	movs	r1, #16
 8008510:	438a      	bics	r2, r1
 8008512:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2258      	movs	r2, #88	; 0x58
 8008518:	5a9a      	ldrh	r2, [r3, r2]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	0011      	movs	r1, r2
 800851e:	0018      	movs	r0, r3
 8008520:	f7ff fa6e 	bl	8007a00 <HAL_UARTEx_RxEventCallback>
 8008524:	e003      	b.n	800852e <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	0018      	movs	r0, r3
 800852a:	f7fa fb03 	bl	8002b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008534:	e007      	b.n	8008546 <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	699a      	ldr	r2, [r3, #24]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2108      	movs	r1, #8
 8008542:	430a      	orrs	r2, r1
 8008544:	619a      	str	r2, [r3, #24]
}
 8008546:	46c0      	nop			; (mov r8, r8)
 8008548:	46bd      	mov	sp, r7
 800854a:	b004      	add	sp, #16
 800854c:	bd80      	pop	{r7, pc}
 800854e:	46c0      	nop			; (mov r8, r8)
 8008550:	fffffedf 	.word	0xfffffedf

08008554 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800855c:	230e      	movs	r3, #14
 800855e:	18fb      	adds	r3, r7, r3
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	215c      	movs	r1, #92	; 0x5c
 8008564:	5a52      	ldrh	r2, [r2, r1]
 8008566:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856c:	2b22      	cmp	r3, #34	; 0x22
 800856e:	d158      	bne.n	8008622 <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008576:	210c      	movs	r1, #12
 8008578:	187b      	adds	r3, r7, r1
 800857a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008580:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008582:	187b      	adds	r3, r7, r1
 8008584:	220e      	movs	r2, #14
 8008586:	18ba      	adds	r2, r7, r2
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	8812      	ldrh	r2, [r2, #0]
 800858c:	4013      	ands	r3, r2
 800858e:	b29a      	uxth	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008598:	1c9a      	adds	r2, r3, #2
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	225a      	movs	r2, #90	; 0x5a
 80085a2:	5a9b      	ldrh	r3, [r3, r2]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b299      	uxth	r1, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	225a      	movs	r2, #90	; 0x5a
 80085ae:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	225a      	movs	r2, #90	; 0x5a
 80085b4:	5a9b      	ldrh	r3, [r3, r2]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d13a      	bne.n	8008632 <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	491d      	ldr	r1, [pc, #116]	; (800863c <UART_RxISR_16BIT+0xe8>)
 80085c8:	400a      	ands	r2, r1
 80085ca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2101      	movs	r1, #1
 80085d8:	438a      	bics	r2, r1
 80085da:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2220      	movs	r2, #32
 80085e0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d110      	bne.n	8008612 <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2110      	movs	r1, #16
 80085fc:	438a      	bics	r2, r1
 80085fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2258      	movs	r2, #88	; 0x58
 8008604:	5a9a      	ldrh	r2, [r3, r2]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	0011      	movs	r1, r2
 800860a:	0018      	movs	r0, r3
 800860c:	f7ff f9f8 	bl	8007a00 <HAL_UARTEx_RxEventCallback>
 8008610:	e003      	b.n	800861a <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	0018      	movs	r0, r3
 8008616:	f7fa fa8d 	bl	8002b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008620:	e007      	b.n	8008632 <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	699a      	ldr	r2, [r3, #24]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2108      	movs	r1, #8
 800862e:	430a      	orrs	r2, r1
 8008630:	619a      	str	r2, [r3, #24]
}
 8008632:	46c0      	nop			; (mov r8, r8)
 8008634:	46bd      	mov	sp, r7
 8008636:	b004      	add	sp, #16
 8008638:	bd80      	pop	{r7, pc}
 800863a:	46c0      	nop			; (mov r8, r8)
 800863c:	fffffedf 	.word	0xfffffedf

08008640 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008648:	46c0      	nop			; (mov r8, r8)
 800864a:	46bd      	mov	sp, r7
 800864c:	b002      	add	sp, #8
 800864e:	bd80      	pop	{r7, pc}

08008650 <_ZN5debugC1EP20__UART_HandleTypeDef>:

#include "hw.h"


/**********************************************************************************************/
debug::debug( UART_HandleTypeDef * _huartx ){
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
	huartx = &*_huartx ;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	601a      	str	r2, [r3, #0]
}
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	0018      	movs	r0, r3
 8008664:	46bd      	mov	sp, r7
 8008666:	b002      	add	sp, #8
 8008668:	bd80      	pop	{r7, pc}

0800866a <_ZN5debug5printEPKc>:


/**********************************************************************************************/
void debug::print( const char *_info ){
 800866a:	b590      	push	{r4, r7, lr}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huartx, (uint8_t*)_info, (int)strlen(_info), 1000) ;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681c      	ldr	r4, [r3, #0]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	0018      	movs	r0, r3
 800867c:	f7f7 fd44 	bl	8000108 <strlen>
 8008680:	0003      	movs	r3, r0
 8008682:	b29a      	uxth	r2, r3
 8008684:	23fa      	movs	r3, #250	; 0xfa
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	0020      	movs	r0, r4
 800868c:	f7fe fe9e 	bl	80073cc <HAL_UART_Transmit>
}
 8008690:	46c0      	nop			; (mov r8, r8)
 8008692:	46bd      	mov	sp, r7
 8008694:	b003      	add	sp, #12
 8008696:	bd90      	pop	{r4, r7, pc}

08008698 <_ZN5debug7printlnEPKc>:


/**********************************************************************************************/
void debug::println( const char *_info ){
 8008698:	b590      	push	{r4, r7, lr}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huartx, (uint8_t*)"\n", 1, 1000) ;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	23fa      	movs	r3, #250	; 0xfa
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	490b      	ldr	r1, [pc, #44]	; (80086d8 <_ZN5debug7printlnEPKc+0x40>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	f7fe fe8d 	bl	80073cc <HAL_UART_Transmit>
	HAL_UART_Transmit(huartx, (uint8_t*)_info, (int)strlen(_info), 1000) ;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681c      	ldr	r4, [r3, #0]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	0018      	movs	r0, r3
 80086ba:	f7f7 fd25 	bl	8000108 <strlen>
 80086be:	0003      	movs	r3, r0
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	23fa      	movs	r3, #250	; 0xfa
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	0020      	movs	r0, r4
 80086ca:	f7fe fe7f 	bl	80073cc <HAL_UART_Transmit>
}
 80086ce:	46c0      	nop			; (mov r8, r8)
 80086d0:	46bd      	mov	sp, r7
 80086d2:	b003      	add	sp, #12
 80086d4:	bd90      	pop	{r4, r7, pc}
 80086d6:	46c0      	nop			; (mov r8, r8)
 80086d8:	0800ef8c 	.word	0x0800ef8c

080086dc <_ZN7unDebugC1Ev>:


/**********************************************************************************************/
unDebug::unDebug(){
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]

}
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	0018      	movs	r0, r3
 80086e8:	46bd      	mov	sp, r7
 80086ea:	b002      	add	sp, #8
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <_ZN5lrwanC1EP20__UART_HandleTypeDef>:
	#undef LR_DEBUG
	#define LR_DEBUG lrUnDebug
#endif
#define LRWAN_CLC_OK "SM+CLC_OK"
#define LRWAN_CLC_LOST "SM+CLC_LOST"
lrwan::lrwan( UART_HandleTypeDef * _huartx ){
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a06      	ldr	r2, [pc, #24]	; (800871c <_ZN5lrwanC1EP20__UART_HandleTypeDef+0x2c>)
 8008704:	2100      	movs	r1, #0
 8008706:	5099      	str	r1, [r3, r2]
	huartx = &*_huartx ;
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	23fb      	movs	r3, #251	; 0xfb
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	50d1      	str	r1, [r2, r3]
}
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	0018      	movs	r0, r3
 8008716:	46bd      	mov	sp, r7
 8008718:	b002      	add	sp, #8
 800871a:	bd80      	pop	{r7, pc}
 800871c:	000007d4 	.word	0x000007d4

08008720 <_ZN5lrwan10IRQhandlerEv>:
/*
 * Hàm sim7x00::IRQhandler(); sẽ được đặt vào hàm ngắt UART : void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) ;
 */
/*____________________________________________________________________________________________________________________________*/

void lrwan::IRQhandler(){
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af02      	add	r7, sp, #8
 8008726:	6078      	str	r0, [r7, #4]
	// khi nào nhận được ký tự \r thì sẽ hiểu là đã kết thúc lệnh.
	if(  rxBuff[0] == '\r' ){
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	2b0d      	cmp	r3, #13
 800872e:	d14a      	bne.n	80087c6 <_ZN5lrwan10IRQhandlerEv+0xa6>
		if( strstr(rxData, LRWAN_CLC_LOST) != NULL ){
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3303      	adds	r3, #3
 8008734:	4a36      	ldr	r2, [pc, #216]	; (8008810 <_ZN5lrwan10IRQhandlerEv+0xf0>)
 8008736:	0011      	movs	r1, r2
 8008738:	0018      	movs	r0, r3
 800873a:	f003 fb03 	bl	800bd44 <strstr>
 800873e:	1e03      	subs	r3, r0, #0
 8008740:	d016      	beq.n	8008770 <_ZN5lrwan10IRQhandlerEv+0x50>
			lrwanStatus = 2;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2202      	movs	r2, #2
 8008746:	709a      	strb	r2, [r3, #2]
			SSD1306_DrawFilledRectangle(66, 0, 15, 15, SSD1306_COLOR_BLACK);
 8008748:	2300      	movs	r3, #0
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	230f      	movs	r3, #15
 800874e:	220f      	movs	r2, #15
 8008750:	2100      	movs	r1, #0
 8008752:	2042      	movs	r0, #66	; 0x42
 8008754:	f002 f9c4 	bl	800aae0 <SSD1306_DrawFilledRectangle>
			SSD1306_DrawBitmap( 66, 3, loraFailEvent, 13, 12, SSD1306_COLOR_WHITE );
 8008758:	4a2e      	ldr	r2, [pc, #184]	; (8008814 <_ZN5lrwan10IRQhandlerEv+0xf4>)
 800875a:	2301      	movs	r3, #1
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	230c      	movs	r3, #12
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	230d      	movs	r3, #13
 8008764:	2103      	movs	r1, #3
 8008766:	2042      	movs	r0, #66	; 0x42
 8008768:	f001 fc5e 	bl	800a028 <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 800876c:	f001 fdc8 	bl	800a300 <SSD1306_UpdateScreen>
		}
		if( strstr(rxData, LRWAN_CLC_OK) != NULL ){
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3303      	adds	r3, #3
 8008774:	4a28      	ldr	r2, [pc, #160]	; (8008818 <_ZN5lrwan10IRQhandlerEv+0xf8>)
 8008776:	0011      	movs	r1, r2
 8008778:	0018      	movs	r0, r3
 800877a:	f003 fae3 	bl	800bd44 <strstr>
 800877e:	1e03      	subs	r3, r0, #0
 8008780:	d016      	beq.n	80087b0 <_ZN5lrwan10IRQhandlerEv+0x90>
			lrwanStatus =1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	709a      	strb	r2, [r3, #2]
			SSD1306_DrawFilledRectangle(66, 0, 15, 15, SSD1306_COLOR_BLACK);
 8008788:	2300      	movs	r3, #0
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	230f      	movs	r3, #15
 800878e:	220f      	movs	r2, #15
 8008790:	2100      	movs	r1, #0
 8008792:	2042      	movs	r0, #66	; 0x42
 8008794:	f002 f9a4 	bl	800aae0 <SSD1306_DrawFilledRectangle>
			SSD1306_DrawBitmap( 66, 2, loraDoneEvent, 15, 14, SSD1306_COLOR_WHITE );
 8008798:	4a20      	ldr	r2, [pc, #128]	; (800881c <_ZN5lrwan10IRQhandlerEv+0xfc>)
 800879a:	2301      	movs	r3, #1
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	230e      	movs	r3, #14
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	230f      	movs	r3, #15
 80087a4:	2102      	movs	r1, #2
 80087a6:	2042      	movs	r0, #66	; 0x42
 80087a8:	f001 fc3e 	bl	800a028 <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 80087ac:	f001 fda8 	bl	800a300 <SSD1306_UpdateScreen>
		}
		rxDone_FLAG = 1 ;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	701a      	strb	r2, [r3, #0]
		memset(rxBuff,0,1) ;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3301      	adds	r3, #1
 80087ba:	2201      	movs	r2, #1
 80087bc:	2100      	movs	r1, #0
 80087be:	0018      	movs	r0, r3
 80087c0:	f002 fb67 	bl	800ae92 <memset>
 80087c4:	e015      	b.n	80087f2 <_ZN5lrwan10IRQhandlerEv+0xd2>
	}else{
		// tạo ra 1 biến dữ liệu  rxData = \nOK\n
		rxData[dataCount] = rxBuff[0] ;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a15      	ldr	r2, [pc, #84]	; (8008820 <_ZN5lrwan10IRQhandlerEv+0x100>)
 80087ca:	589b      	ldr	r3, [r3, r2]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	7851      	ldrb	r1, [r2, #1]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	18d3      	adds	r3, r2, r3
 80087d4:	1c0a      	adds	r2, r1, #0
 80087d6:	70da      	strb	r2, [r3, #3]
		// Cộng dồn dữ liệu lên nhưng phải đảm bảo nằm trong vùng nhớ của bộ đệm ! Không được để quá, sẽ gây treo VĐK ( nguy hiểm )
		if ( dataCount < RX_DATA_MAX ) dataCount++ ;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a11      	ldr	r2, [pc, #68]	; (8008820 <_ZN5lrwan10IRQhandlerEv+0x100>)
 80087dc:	589b      	ldr	r3, [r3, r2]
 80087de:	4a11      	ldr	r2, [pc, #68]	; (8008824 <_ZN5lrwan10IRQhandlerEv+0x104>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	dc06      	bgt.n	80087f2 <_ZN5lrwan10IRQhandlerEv+0xd2>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a0e      	ldr	r2, [pc, #56]	; (8008820 <_ZN5lrwan10IRQhandlerEv+0x100>)
 80087e8:	589b      	ldr	r3, [r3, r2]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	490c      	ldr	r1, [pc, #48]	; (8008820 <_ZN5lrwan10IRQhandlerEv+0x100>)
 80087f0:	505a      	str	r2, [r3, r1]
		else {}
	}
	HAL_UART_Receive_IT(huartx, (uint8_t*)rxBuff, 1) ;
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	23fb      	movs	r3, #251	; 0xfb
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	58d0      	ldr	r0, [r2, r3]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3301      	adds	r3, #1
 80087fe:	2201      	movs	r2, #1
 8008800:	0019      	movs	r1, r3
 8008802:	f7fe fe8b 	bl	800751c <HAL_UART_Receive_IT>
}
 8008806:	46c0      	nop			; (mov r8, r8)
 8008808:	46bd      	mov	sp, r7
 800880a:	b002      	add	sp, #8
 800880c:	bd80      	pop	{r7, pc}
 800880e:	46c0      	nop			; (mov r8, r8)
 8008810:	0800ef90 	.word	0x0800ef90
 8008814:	0800fb24 	.word	0x0800fb24
 8008818:	0800ef9c 	.word	0x0800ef9c
 800881c:	0800fb3c 	.word	0x0800fb3c
 8008820:	000007d4 	.word	0x000007d4
 8008824:	000007cf 	.word	0x000007cf

08008828 <_ZN5lrwan8memresetEv>:

void lrwan::memreset(){
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	rxDone_FLAG = false ;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	701a      	strb	r2, [r3, #0]
	dataCount = 0 ;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a07      	ldr	r2, [pc, #28]	; (8008858 <_ZN5lrwan8memresetEv+0x30>)
 800883a:	2100      	movs	r1, #0
 800883c:	5099      	str	r1, [r3, r2]
	memset ( rxData, 0 , (size_t)sizeof(rxData)/sizeof(char) ) ;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	1cd8      	adds	r0, r3, #3
 8008842:	23fa      	movs	r3, #250	; 0xfa
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	001a      	movs	r2, r3
 8008848:	2100      	movs	r1, #0
 800884a:	f002 fb22 	bl	800ae92 <memset>
}
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	46bd      	mov	sp, r7
 8008852:	b002      	add	sp, #8
 8008854:	bd80      	pop	{r7, pc}
 8008856:	46c0      	nop			; (mov r8, r8)
 8008858:	000007d4 	.word	0x000007d4

0800885c <_ZN5lrwan11sendCommandEPKcS1_i>:

/*
 * Hàm gửi dữ liệu và nhận phản hồi từ AT mega*/
/*____________________________________________________________________________________________________________________________*/
bool lrwan::sendCommand (const char* command, const char* expected_answer, int timeout) {
 800885c:	b590      	push	{r4, r7, lr}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]

    int answer=0;
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]

    dataCount = 0 ;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4a46      	ldr	r2, [pc, #280]	; (800898c <_ZN5lrwan11sendCommandEPKcS1_i+0x130>)
 8008872:	2100      	movs	r1, #0
 8008874:	5099      	str	r1, [r3, r2]
    rxDone_FLAG = 0 ;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	701a      	strb	r2, [r3, #0]
    memset(rxData, 0, RX_DATA_MAX );
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	1cd8      	adds	r0, r3, #3
 8008880:	23fa      	movs	r3, #250	; 0xfa
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	001a      	movs	r2, r3
 8008886:	2100      	movs	r1, #0
 8008888:	f002 fb03 	bl	800ae92 <memset>

    LR_DEBUG.println("Requested to LRWAN module : ") ;
 800888c:	4a40      	ldr	r2, [pc, #256]	; (8008990 <_ZN5lrwan11sendCommandEPKcS1_i+0x134>)
 800888e:	4b41      	ldr	r3, [pc, #260]	; (8008994 <_ZN5lrwan11sendCommandEPKcS1_i+0x138>)
 8008890:	0011      	movs	r1, r2
 8008892:	0018      	movs	r0, r3
 8008894:	f7ff ff00 	bl	8008698 <_ZN5debug7printlnEPKc>
    LR_DEBUG.print(command) ;
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	4b3e      	ldr	r3, [pc, #248]	; (8008994 <_ZN5lrwan11sendCommandEPKcS1_i+0x138>)
 800889c:	0011      	movs	r1, r2
 800889e:	0018      	movs	r0, r3
 80088a0:	f7ff fee3 	bl	800866a <_ZN5debug5printEPKc>

    // Bắt đầu gửi lệnh cmd ngay tại đây
    HAL_UART_Transmit(huartx, (uint8_t*)command, strlen(command), timeout) ;
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	23fb      	movs	r3, #251	; 0xfb
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	58d4      	ldr	r4, [r2, r3]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	0018      	movs	r0, r3
 80088b0:	f7f7 fc2a 	bl	8000108 <strlen>
 80088b4:	0003      	movs	r3, r0
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68b9      	ldr	r1, [r7, #8]
 80088bc:	0020      	movs	r0, r4
 80088be:	f7fe fd85 	bl	80073cc <HAL_UART_Transmit>

    LR_DEBUG.println("LRWAN responsed : ") ;
 80088c2:	4a35      	ldr	r2, [pc, #212]	; (8008998 <_ZN5lrwan11sendCommandEPKcS1_i+0x13c>)
 80088c4:	4b33      	ldr	r3, [pc, #204]	; (8008994 <_ZN5lrwan11sendCommandEPKcS1_i+0x138>)
 80088c6:	0011      	movs	r1, r2
 80088c8:	0018      	movs	r0, r3
 80088ca:	f7ff fee5 	bl	8008698 <_ZN5debug7printlnEPKc>

    // lệnh này để bắt đầu lấy mốc t.g để check Timeout
    uint32_t tickStart = HAL_GetTick() ;
 80088ce:	f7fb fd67 	bl	80043a0 <HAL_GetTick>
 80088d2:	0003      	movs	r3, r0
 80088d4:	613b      	str	r3, [r7, #16]


    while( answer == 0 ) {
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d132      	bne.n	8008942 <_ZN5lrwan11sendCommandEPKcS1_i+0xe6>
    	// Kiểm tra thời gian phản hồi, nếu lâu quá timeout thì break, và báo lỗi
		if ( (int)( HAL_GetTick() - tickStart )  >=  timeout ) {
 80088dc:	f7fb fd60 	bl	80043a0 <HAL_GetTick>
 80088e0:	0002      	movs	r2, r0
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	001a      	movs	r2, r3
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	0fd8      	lsrs	r0, r3, #31
 80088ec:	17d1      	asrs	r1, r2, #31
 80088ee:	429a      	cmp	r2, r3
 80088f0:	4148      	adcs	r0, r1
 80088f2:	0003      	movs	r3, r0
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d122      	bne.n	8008940 <_ZN5lrwan11sendCommandEPKcS1_i+0xe4>
	     * Kiểm tra module sim có phản hồi về đúng expected_answer hay khong
	     * Note : Hàm strstr(X, x) sẽ tìm 1 chuỗi con x trong chuỗi lớn hơn X
	     *  	  Nếu x xuất hiện trong X, thì hàm strstr sẽ trả về 1 chuỗi bắt đầu từ x và chuỗi
	     *  	  kéo dài còn lại phía sau từ x trong X
	     */
		if ( strstr(rxData, expected_answer) != NULL ){
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3303      	adds	r3, #3
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	0011      	movs	r1, r2
 8008902:	0018      	movs	r0, r3
 8008904:	f003 fa1e 	bl	800bd44 <strstr>
 8008908:	1e03      	subs	r3, r0, #0
 800890a:	d001      	beq.n	8008910 <_ZN5lrwan11sendCommandEPKcS1_i+0xb4>
			// Nếu có thi la OK, answer == 1, thoát khỏi vòng while
			answer = 1;
 800890c:	2301      	movs	r3, #1
 800890e:	617b      	str	r3, [r7, #20]
		}

		// Led nhấp nháy báo hiệu đang tương tác với module sim
		if ( ( (int)( HAL_GetTick() - tickStart )/(int)100 % 2 ) == 0 )
 8008910:	f7fb fd46 	bl	80043a0 <HAL_GetTick>
 8008914:	0002      	movs	r2, r0
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2164      	movs	r1, #100	; 0x64
 800891c:	0018      	movs	r0, r3
 800891e:	f7f7 fc8f 	bl	8000240 <__divsi3>
 8008922:	0003      	movs	r3, r0
 8008924:	001a      	movs	r2, r3
 8008926:	2301      	movs	r3, #1
 8008928:	4013      	ands	r3, r2
 800892a:	425a      	negs	r2, r3
 800892c:	4153      	adcs	r3, r2
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0d0      	beq.n	80088d6 <_ZN5lrwan11sendCommandEPKcS1_i+0x7a>
			HAL_GPIO_TogglePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin) ;
 8008934:	4b19      	ldr	r3, [pc, #100]	; (800899c <_ZN5lrwan11sendCommandEPKcS1_i+0x140>)
 8008936:	2140      	movs	r1, #64	; 0x40
 8008938:	0018      	movs	r0, r3
 800893a:	f7fc fc11 	bl	8005160 <HAL_GPIO_TogglePin>
    while( answer == 0 ) {
 800893e:	e7ca      	b.n	80088d6 <_ZN5lrwan11sendCommandEPKcS1_i+0x7a>
			break ;
 8008940:	46c0      	nop			; (mov r8, r8)
	}

    // In thông tin mà module lorawan đã phản hồi về :
    LR_DEBUG.println(rxData) ;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	1cda      	adds	r2, r3, #3
 8008946:	4b13      	ldr	r3, [pc, #76]	; (8008994 <_ZN5lrwan11sendCommandEPKcS1_i+0x138>)
 8008948:	0011      	movs	r1, r2
 800894a:	0018      	movs	r0, r3
 800894c:	f7ff fea4 	bl	8008698 <_ZN5debug7printlnEPKc>

    // Nếu kết quả phản hồi không như mong muốn :
    if ( answer == 0 )
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d105      	bne.n	8008962 <_ZN5lrwan11sendCommandEPKcS1_i+0x106>
    	LR_DEBUG.println("Fail to get responses from LRWAN! ") ;
 8008956:	4a12      	ldr	r2, [pc, #72]	; (80089a0 <_ZN5lrwan11sendCommandEPKcS1_i+0x144>)
 8008958:	4b0e      	ldr	r3, [pc, #56]	; (8008994 <_ZN5lrwan11sendCommandEPKcS1_i+0x138>)
 800895a:	0011      	movs	r1, r2
 800895c:	0018      	movs	r0, r3
 800895e:	f7ff fe9b 	bl	8008698 <_ZN5debug7printlnEPKc>

    HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, (GPIO_PinState) 0 ) ;
 8008962:	4b0e      	ldr	r3, [pc, #56]	; (800899c <_ZN5lrwan11sendCommandEPKcS1_i+0x140>)
 8008964:	2200      	movs	r2, #0
 8008966:	2140      	movs	r1, #64	; 0x40
 8008968:	0018      	movs	r0, r3
 800896a:	f7fc fbdc 	bl	8005126 <HAL_GPIO_WritePin>

    // Reset lại các biến phục vụ trong quá trình lấy dữ liệu từ module sim
    dataCount = 0 ;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4a06      	ldr	r2, [pc, #24]	; (800898c <_ZN5lrwan11sendCommandEPKcS1_i+0x130>)
 8008972:	2100      	movs	r1, #0
 8008974:	5099      	str	r1, [r3, r2]
    rxDone_FLAG = 0 ;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	701a      	strb	r2, [r3, #0]
    //  Do hiện tại, rxData được sử dụng cho các tác vụ kế tiếp sau AT cmd, nên không được reset hàm  memset(rxData, 0, sizeof(rxData) ) ;
    return answer;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	1e5a      	subs	r2, r3, #1
 8008980:	4193      	sbcs	r3, r2
 8008982:	b2db      	uxtb	r3, r3
}
 8008984:	0018      	movs	r0, r3
 8008986:	46bd      	mov	sp, r7
 8008988:	b007      	add	sp, #28
 800898a:	bd90      	pop	{r4, r7, pc}
 800898c:	000007d4 	.word	0x000007d4
 8008990:	0800efa8 	.word	0x0800efa8
 8008994:	20001cfc 	.word	0x20001cfc
 8008998:	0800efc8 	.word	0x0800efc8
 800899c:	50000800 	.word	0x50000800
 80089a0:	0800efdc 	.word	0x0800efdc

080089a4 <_ZN5lrwan8responseEPKci>:

/*
 * Hàm phản hồi lại AT mega*/
/*____________________________________________________________________________________________________________________________*/
void lrwan::response( const char* response, int timeout ){
 80089a4:	b590      	push	{r4, r7, lr}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huartx, (uint8_t*)response, strlen(response), timeout) ;
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	23fb      	movs	r3, #251	; 0xfb
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	58d4      	ldr	r4, [r2, r3]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	0018      	movs	r0, r3
 80089bc:	f7f7 fba4 	bl	8000108 <strlen>
 80089c0:	0003      	movs	r3, r0
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	0020      	movs	r0, r4
 80089ca:	f7fe fcff 	bl	80073cc <HAL_UART_Transmit>
}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b005      	add	sp, #20
 80089d4:	bd90      	pop	{r4, r7, pc}
	...

080089d8 <_ZN5lrwan13identifyEventEv>:

/*
 * Hàm xử lí khi dữ liệu đến*/
/*____________________________________________________________________________________________________________________________*/
lr_events_t lrwan::identifyEvent(){
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
	lr_events_t lrEvent ;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	605a      	str	r2, [r3, #4]
	lrEvent.warning = NON ;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
	lrEvent.update = NON ;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	605a      	str	r2, [r3, #4]

	if( strstr(rxData, LR_REQ_WARNING_LV1_CODE) != NULL ){
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	3303      	adds	r3, #3
 80089fe:	4a5c      	ldr	r2, [pc, #368]	; (8008b70 <_ZN5lrwan13identifyEventEv+0x198>)
 8008a00:	0011      	movs	r1, r2
 8008a02:	0018      	movs	r0, r3
 8008a04:	f003 f99e 	bl	800bd44 <strstr>
 8008a08:	1e03      	subs	r3, r0, #0
 8008a0a:	d010      	beq.n	8008a2e <_ZN5lrwan13identifyEventEv+0x56>
		lrEvent.warning = LR_REQ_WARNING_LV1 ;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - WARNING_LEVEL_1" ) ;
 8008a12:	4a58      	ldr	r2, [pc, #352]	; (8008b74 <_ZN5lrwan13identifyEventEv+0x19c>)
 8008a14:	4b58      	ldr	r3, [pc, #352]	; (8008b78 <_ZN5lrwan13identifyEventEv+0x1a0>)
 8008a16:	0011      	movs	r1, r2
 8008a18:	0018      	movs	r0, r3
 8008a1a:	f7ff fe3d 	bl	8008698 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 8008a1e:	23fa      	movs	r3, #250	; 0xfa
 8008a20:	009a      	lsls	r2, r3, #2
 8008a22:	4956      	ldr	r1, [pc, #344]	; (8008b7c <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	0018      	movs	r0, r3
 8008a28:	f7ff ffbc 	bl	80089a4 <_ZN5lrwan8responseEPKci>
		lrEvent.update = LR_REQ_PERIOD_DATA_UPDATE ;
		LR_DEBUG.println("EVENT: [ UPDATE ] - LORAWAN UPDATE DATA" ) ;
		response("OK\r", 1000 );
	}

	return lrEvent ;
 8008a2c:	e09a      	b.n	8008b64 <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_WARNING_LV2_CODE) != NULL ){
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	3303      	adds	r3, #3
 8008a32:	4a53      	ldr	r2, [pc, #332]	; (8008b80 <_ZN5lrwan13identifyEventEv+0x1a8>)
 8008a34:	0011      	movs	r1, r2
 8008a36:	0018      	movs	r0, r3
 8008a38:	f003 f984 	bl	800bd44 <strstr>
 8008a3c:	1e03      	subs	r3, r0, #0
 8008a3e:	d010      	beq.n	8008a62 <_ZN5lrwan13identifyEventEv+0x8a>
		lrEvent.warning = LR_REQ_WARNING_LV2 ;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - WARNING_LEVEL_2" ) ;
 8008a46:	4a4f      	ldr	r2, [pc, #316]	; (8008b84 <_ZN5lrwan13identifyEventEv+0x1ac>)
 8008a48:	4b4b      	ldr	r3, [pc, #300]	; (8008b78 <_ZN5lrwan13identifyEventEv+0x1a0>)
 8008a4a:	0011      	movs	r1, r2
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f7ff fe23 	bl	8008698 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 8008a52:	23fa      	movs	r3, #250	; 0xfa
 8008a54:	009a      	lsls	r2, r3, #2
 8008a56:	4949      	ldr	r1, [pc, #292]	; (8008b7c <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f7ff ffa2 	bl	80089a4 <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 8008a60:	e080      	b.n	8008b64 <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_WARNING_LV3_CODE) != NULL ){
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	3303      	adds	r3, #3
 8008a66:	4a48      	ldr	r2, [pc, #288]	; (8008b88 <_ZN5lrwan13identifyEventEv+0x1b0>)
 8008a68:	0011      	movs	r1, r2
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f003 f96a 	bl	800bd44 <strstr>
 8008a70:	1e03      	subs	r3, r0, #0
 8008a72:	d010      	beq.n	8008a96 <_ZN5lrwan13identifyEventEv+0xbe>
		lrEvent.warning = LR_REQ_WARNING_LV3 ;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2203      	movs	r2, #3
 8008a78:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - WARNING_LEVEL_3" ) ;
 8008a7a:	4a44      	ldr	r2, [pc, #272]	; (8008b8c <_ZN5lrwan13identifyEventEv+0x1b4>)
 8008a7c:	4b3e      	ldr	r3, [pc, #248]	; (8008b78 <_ZN5lrwan13identifyEventEv+0x1a0>)
 8008a7e:	0011      	movs	r1, r2
 8008a80:	0018      	movs	r0, r3
 8008a82:	f7ff fe09 	bl	8008698 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 8008a86:	23fa      	movs	r3, #250	; 0xfa
 8008a88:	009a      	lsls	r2, r3, #2
 8008a8a:	493c      	ldr	r1, [pc, #240]	; (8008b7c <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	0018      	movs	r0, r3
 8008a90:	f7ff ff88 	bl	80089a4 <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 8008a94:	e066      	b.n	8008b64 <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_WARNING_LV4_CODE) != NULL ){
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	3303      	adds	r3, #3
 8008a9a:	4a3d      	ldr	r2, [pc, #244]	; (8008b90 <_ZN5lrwan13identifyEventEv+0x1b8>)
 8008a9c:	0011      	movs	r1, r2
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f003 f950 	bl	800bd44 <strstr>
 8008aa4:	1e03      	subs	r3, r0, #0
 8008aa6:	d010      	beq.n	8008aca <_ZN5lrwan13identifyEventEv+0xf2>
		lrEvent.warning = LR_REQ_WARNING_LV4 ;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2204      	movs	r2, #4
 8008aac:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - WARNING_LEVEL_4" ) ;
 8008aae:	4a39      	ldr	r2, [pc, #228]	; (8008b94 <_ZN5lrwan13identifyEventEv+0x1bc>)
 8008ab0:	4b31      	ldr	r3, [pc, #196]	; (8008b78 <_ZN5lrwan13identifyEventEv+0x1a0>)
 8008ab2:	0011      	movs	r1, r2
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7ff fdef 	bl	8008698 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 8008aba:	23fa      	movs	r3, #250	; 0xfa
 8008abc:	009a      	lsls	r2, r3, #2
 8008abe:	492f      	ldr	r1, [pc, #188]	; (8008b7c <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f7ff ff6e 	bl	80089a4 <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 8008ac8:	e04c      	b.n	8008b64 <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_WARNING_LV5_CODE) != NULL ){
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	3303      	adds	r3, #3
 8008ace:	4a32      	ldr	r2, [pc, #200]	; (8008b98 <_ZN5lrwan13identifyEventEv+0x1c0>)
 8008ad0:	0011      	movs	r1, r2
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	f003 f936 	bl	800bd44 <strstr>
 8008ad8:	1e03      	subs	r3, r0, #0
 8008ada:	d010      	beq.n	8008afe <_ZN5lrwan13identifyEventEv+0x126>
		lrEvent.warning = LR_REQ_WARNING_LV5 ;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2205      	movs	r2, #5
 8008ae0:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - WARNING_LEVEL_5" ) ;
 8008ae2:	4a2e      	ldr	r2, [pc, #184]	; (8008b9c <_ZN5lrwan13identifyEventEv+0x1c4>)
 8008ae4:	4b24      	ldr	r3, [pc, #144]	; (8008b78 <_ZN5lrwan13identifyEventEv+0x1a0>)
 8008ae6:	0011      	movs	r1, r2
 8008ae8:	0018      	movs	r0, r3
 8008aea:	f7ff fdd5 	bl	8008698 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 8008aee:	23fa      	movs	r3, #250	; 0xfa
 8008af0:	009a      	lsls	r2, r3, #2
 8008af2:	4922      	ldr	r1, [pc, #136]	; (8008b7c <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	0018      	movs	r0, r3
 8008af8:	f7ff ff54 	bl	80089a4 <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 8008afc:	e032      	b.n	8008b64 <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_STOP_WARNING_CODE) != NULL ){
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	3303      	adds	r3, #3
 8008b02:	4a27      	ldr	r2, [pc, #156]	; (8008ba0 <_ZN5lrwan13identifyEventEv+0x1c8>)
 8008b04:	0011      	movs	r1, r2
 8008b06:	0018      	movs	r0, r3
 8008b08:	f003 f91c 	bl	800bd44 <strstr>
 8008b0c:	1e03      	subs	r3, r0, #0
 8008b0e:	d010      	beq.n	8008b32 <_ZN5lrwan13identifyEventEv+0x15a>
		lrEvent.warning = LR_REQ_STOP_WARNING ;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2206      	movs	r2, #6
 8008b14:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - STOP_WARNING" ) ;
 8008b16:	4a23      	ldr	r2, [pc, #140]	; (8008ba4 <_ZN5lrwan13identifyEventEv+0x1cc>)
 8008b18:	4b17      	ldr	r3, [pc, #92]	; (8008b78 <_ZN5lrwan13identifyEventEv+0x1a0>)
 8008b1a:	0011      	movs	r1, r2
 8008b1c:	0018      	movs	r0, r3
 8008b1e:	f7ff fdbb 	bl	8008698 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 8008b22:	23fa      	movs	r3, #250	; 0xfa
 8008b24:	009a      	lsls	r2, r3, #2
 8008b26:	4915      	ldr	r1, [pc, #84]	; (8008b7c <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f7ff ff3a 	bl	80089a4 <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 8008b30:	e018      	b.n	8008b64 <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_DATA_PERIODLY_CODE) != NULL ){
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	3303      	adds	r3, #3
 8008b36:	4a1c      	ldr	r2, [pc, #112]	; (8008ba8 <_ZN5lrwan13identifyEventEv+0x1d0>)
 8008b38:	0011      	movs	r1, r2
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f003 f902 	bl	800bd44 <strstr>
 8008b40:	1e03      	subs	r3, r0, #0
 8008b42:	d00f      	beq.n	8008b64 <_ZN5lrwan13identifyEventEv+0x18c>
		lrEvent.update = LR_REQ_PERIOD_DATA_UPDATE ;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2207      	movs	r2, #7
 8008b48:	605a      	str	r2, [r3, #4]
		LR_DEBUG.println("EVENT: [ UPDATE ] - LORAWAN UPDATE DATA" ) ;
 8008b4a:	4a18      	ldr	r2, [pc, #96]	; (8008bac <_ZN5lrwan13identifyEventEv+0x1d4>)
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <_ZN5lrwan13identifyEventEv+0x1a0>)
 8008b4e:	0011      	movs	r1, r2
 8008b50:	0018      	movs	r0, r3
 8008b52:	f7ff fda1 	bl	8008698 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 8008b56:	23fa      	movs	r3, #250	; 0xfa
 8008b58:	009a      	lsls	r2, r3, #2
 8008b5a:	4908      	ldr	r1, [pc, #32]	; (8008b7c <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f7ff ff20 	bl	80089a4 <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 8008b64:	46c0      	nop			; (mov r8, r8)
}
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b002      	add	sp, #8
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	46c0      	nop			; (mov r8, r8)
 8008b70:	0800f000 	.word	0x0800f000
 8008b74:	0800f008 	.word	0x0800f008
 8008b78:	20001cfc 	.word	0x20001cfc
 8008b7c:	0800f030 	.word	0x0800f030
 8008b80:	0800f034 	.word	0x0800f034
 8008b84:	0800f03c 	.word	0x0800f03c
 8008b88:	0800f064 	.word	0x0800f064
 8008b8c:	0800f06c 	.word	0x0800f06c
 8008b90:	0800f094 	.word	0x0800f094
 8008b94:	0800f09c 	.word	0x0800f09c
 8008b98:	0800f0c4 	.word	0x0800f0c4
 8008b9c:	0800f0cc 	.word	0x0800f0cc
 8008ba0:	0800f0f4 	.word	0x0800f0f4
 8008ba4:	0800f0f8 	.word	0x0800f0f8
 8008ba8:	0800f11c 	.word	0x0800f11c
 8008bac:	0800f120 	.word	0x0800f120

08008bb0 <_ZN5lrwan4initEv>:


/*
 * Hàm khởi khởi tạo lrwan*/
/*____________________________________________________________________________________________________________________________*/
void lrwan::init(){
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
	// Init uart4 :
	MX_USART4_UART_Init();
 8008bb8:	f7fb fa12 	bl	8003fe0 <MX_USART4_UART_Init>

	// Khoi dong ngat uart4
	HAL_UART_Receive_IT(&huart4, (uint8_t*)rxBuff, 1) ;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	1c59      	adds	r1, r3, #1
 8008bc0:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <_ZN5lrwan4initEv+0x24>)
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	f7fe fca9 	bl	800751c <HAL_UART_Receive_IT>
}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	b002      	add	sp, #8
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	20001bf4 	.word	0x20001bf4

08008bd8 <_ZN5lrwan8sendDataEPKcS1_ii>:

/*
 * Hàm reset và gửi dữ liệu với retrytime lần*/
/*____________________________________________________________________________________________________________________________*/
bool lrwan::sendData(const char* sms,const char* expectAnswer, int timeout, int retrytime){
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	603b      	str	r3, [r7, #0]
	bool tmp =0;
 8008be6:	2317      	movs	r3, #23
 8008be8:	18fb      	adds	r3, r7, r3
 8008bea:	2200      	movs	r2, #0
 8008bec:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<retrytime;i++){
 8008bee:	2300      	movs	r3, #0
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	da3d      	bge.n	8008c76 <_ZN5lrwan8sendDataEPKcS1_ii+0x9e>
		LR_DEBUG.println("Prepare for reset LORAWAN");
 8008bfa:	4a22      	ldr	r2, [pc, #136]	; (8008c84 <_ZN5lrwan8sendDataEPKcS1_ii+0xac>)
 8008bfc:	4b22      	ldr	r3, [pc, #136]	; (8008c88 <_ZN5lrwan8sendDataEPKcS1_ii+0xb0>)
 8008bfe:	0011      	movs	r1, r2
 8008c00:	0018      	movs	r0, r3
 8008c02:	f7ff fd49 	bl	8008698 <_ZN5debug7printlnEPKc>
		HAL_GPIO_WritePin(LRWAN_RESRT_GPIO_Port, LRWAN_RESRT_Pin, GPIO_PIN_RESET);
 8008c06:	2380      	movs	r3, #128	; 0x80
 8008c08:	00d9      	lsls	r1, r3, #3
 8008c0a:	23a0      	movs	r3, #160	; 0xa0
 8008c0c:	05db      	lsls	r3, r3, #23
 8008c0e:	2200      	movs	r2, #0
 8008c10:	0018      	movs	r0, r3
 8008c12:	f7fc fa88 	bl	8005126 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8008c16:	23fa      	movs	r3, #250	; 0xfa
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	f7fb fbca 	bl	80043b4 <HAL_Delay>
		HAL_GPIO_WritePin(LRWAN_RESRT_GPIO_Port, LRWAN_RESRT_Pin, GPIO_PIN_SET);
 8008c20:	2380      	movs	r3, #128	; 0x80
 8008c22:	00d9      	lsls	r1, r3, #3
 8008c24:	23a0      	movs	r3, #160	; 0xa0
 8008c26:	05db      	lsls	r3, r3, #23
 8008c28:	2201      	movs	r2, #1
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f7fc fa7b 	bl	8005126 <HAL_GPIO_WritePin>
		HAL_Delay(4000);
 8008c30:	23fa      	movs	r3, #250	; 0xfa
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	0018      	movs	r0, r3
 8008c36:	f7fb fbbd 	bl	80043b4 <HAL_Delay>
			LR_DEBUG.println("Done Reset LORAWAN");
 8008c3a:	4a14      	ldr	r2, [pc, #80]	; (8008c8c <_ZN5lrwan8sendDataEPKcS1_ii+0xb4>)
 8008c3c:	4b12      	ldr	r3, [pc, #72]	; (8008c88 <_ZN5lrwan8sendDataEPKcS1_ii+0xb0>)
 8008c3e:	0011      	movs	r1, r2
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7ff fd29 	bl	8008698 <_ZN5debug7printlnEPKc>
			if(sendCommand (sms,expectAnswer, timeout)==1){
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	68b9      	ldr	r1, [r7, #8]
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f7ff fe05 	bl	800885c <_ZN5lrwan11sendCommandEPKcS1_i>
 8008c52:	1e03      	subs	r3, r0, #0
 8008c54:	d00b      	beq.n	8008c6e <_ZN5lrwan8sendDataEPKcS1_ii+0x96>
				tmp=1;
 8008c56:	2317      	movs	r3, #23
 8008c58:	18fb      	adds	r3, r7, r3
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	701a      	strb	r2, [r3, #0]
				response("OK", 1000);
 8008c5e:	23fa      	movs	r3, #250	; 0xfa
 8008c60:	009a      	lsls	r2, r3, #2
 8008c62:	490b      	ldr	r1, [pc, #44]	; (8008c90 <_ZN5lrwan8sendDataEPKcS1_ii+0xb8>)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	0018      	movs	r0, r3
 8008c68:	f7ff fe9c 	bl	80089a4 <_ZN5lrwan8responseEPKci>
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
//				HAL_Delay(1000);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
				break;
 8008c6c:	e003      	b.n	8008c76 <_ZN5lrwan8sendDataEPKcS1_ii+0x9e>
	for(int i=0;i<retrytime;i++){
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	3301      	adds	r3, #1
 8008c72:	613b      	str	r3, [r7, #16]
 8008c74:	e7bd      	b.n	8008bf2 <_ZN5lrwan8sendDataEPKcS1_ii+0x1a>
			}
	}
	return tmp;
 8008c76:	2317      	movs	r3, #23
 8008c78:	18fb      	adds	r3, r7, r3
 8008c7a:	781b      	ldrb	r3, [r3, #0]
}
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b006      	add	sp, #24
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	0800f148 	.word	0x0800f148
 8008c88:	20001cfc 	.word	0x20001cfc
 8008c8c:	0800f164 	.word	0x0800f164
 8008c90:	0800f178 	.word	0x0800f178

08008c94 <_Z41__static_initialization_and_destruction_0ii>:
/*____________________________________________________________________________________________________________________________*/



#ifdef __cplusplus
}
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d10d      	bne.n	8008cc0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	4a08      	ldr	r2, [pc, #32]	; (8008cc8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d109      	bne.n	8008cc0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
debug lrDebug(&DEBUG_UART) ;
 8008cac:	4a07      	ldr	r2, [pc, #28]	; (8008ccc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8008cae:	4b08      	ldr	r3, [pc, #32]	; (8008cd0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8008cb0:	0011      	movs	r1, r2
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	f7ff fccc 	bl	8008650 <_ZN5debugC1EP20__UART_HandleTypeDef>
unDebug lrUnDebug ;
 8008cb8:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008cba:	0018      	movs	r0, r3
 8008cbc:	f7ff fd0e 	bl	80086dc <_ZN7unDebugC1Ev>
}
 8008cc0:	46c0      	nop			; (mov r8, r8)
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	b002      	add	sp, #8
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	0000ffff 	.word	0x0000ffff
 8008ccc:	20001c78 	.word	0x20001c78
 8008cd0:	20001cfc 	.word	0x20001cfc
 8008cd4:	20001d00 	.word	0x20001d00

08008cd8 <_GLOBAL__sub_I_lrDebug>:
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	4b03      	ldr	r3, [pc, #12]	; (8008cec <_GLOBAL__sub_I_lrDebug+0x14>)
 8008cde:	0019      	movs	r1, r3
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	f7ff ffd7 	bl	8008c94 <_Z41__static_initialization_and_destruction_0ii>
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	46c0      	nop			; (mov r8, r8)
 8008cec:	0000ffff 	.word	0x0000ffff

08008cf0 <_ZN7sim7x00C1EP20__UART_HandleTypeDef>:
//__________________________________________________________________________________________________________________________________________________//
//*****************************************************/ SIM FUNCTIONS /*************************************************************************//


/*____________________________________________________________________________________________________________________________*/
sim7x00::sim7x00( UART_HandleTypeDef * _huartx ){
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	701a      	strb	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a06      	ldr	r2, [pc, #24]	; (8008d1c <_ZN7sim7x00C1EP20__UART_HandleTypeDef+0x2c>)
 8008d04:	2100      	movs	r1, #0
 8008d06:	5099      	str	r1, [r3, r2]
	huartx = &*_huartx ;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4905      	ldr	r1, [pc, #20]	; (8008d20 <_ZN7sim7x00C1EP20__UART_HandleTypeDef+0x30>)
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	505a      	str	r2, [r3, r1]
}
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	0018      	movs	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	b002      	add	sp, #8
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	000007d4 	.word	0x000007d4
 8008d20:	00000fa8 	.word	0x00000fa8

08008d24 <_ZN7sim7x0010IRQhandlerEv>:


/*____________________________________________________________________________________________________________________________*/
void sim7x00::IRQhandler(){
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	// khi nào nhận được ký tự \r thì sẽ hiểu là đã kết thúc lệnh.
	if(  rxBuff[0] == '\r' ){
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	2b0d      	cmp	r3, #13
 8008d32:	d10a      	bne.n	8008d4a <_ZN7sim7x0010IRQhandlerEv+0x26>
		rxDone_FLAG = 1 ;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	701a      	strb	r2, [r3, #0]
		memset(rxBuff,0,1) ;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	2201      	movs	r2, #1
 8008d40:	2100      	movs	r1, #0
 8008d42:	0018      	movs	r0, r3
 8008d44:	f002 f8a5 	bl	800ae92 <memset>
 8008d48:	e015      	b.n	8008d76 <_ZN7sim7x0010IRQhandlerEv+0x52>
	}else{
		// tạo ra 1 biến dữ liệu  rxData = \nOK\n
		rxData[dataCount] = rxBuff[0] ;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a10      	ldr	r2, [pc, #64]	; (8008d90 <_ZN7sim7x0010IRQhandlerEv+0x6c>)
 8008d4e:	589b      	ldr	r3, [r3, r2]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	7851      	ldrb	r1, [r2, #1]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	18d3      	adds	r3, r2, r3
 8008d58:	1c0a      	adds	r2, r1, #0
 8008d5a:	709a      	strb	r2, [r3, #2]
		// Cộng dồn dữ liệu lên nhưng phải đảm bảo nằm trong vùng nhớ của bộ đệm ! Không được để quá, sẽ gây treo VĐK ( nguy hiểm )
		if ( dataCount < RX_DATA_MAX ) dataCount++ ;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a0c      	ldr	r2, [pc, #48]	; (8008d90 <_ZN7sim7x0010IRQhandlerEv+0x6c>)
 8008d60:	589b      	ldr	r3, [r3, r2]
 8008d62:	4a0c      	ldr	r2, [pc, #48]	; (8008d94 <_ZN7sim7x0010IRQhandlerEv+0x70>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	dc06      	bgt.n	8008d76 <_ZN7sim7x0010IRQhandlerEv+0x52>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <_ZN7sim7x0010IRQhandlerEv+0x6c>)
 8008d6c:	589b      	ldr	r3, [r3, r2]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4907      	ldr	r1, [pc, #28]	; (8008d90 <_ZN7sim7x0010IRQhandlerEv+0x6c>)
 8008d74:	505a      	str	r2, [r3, r1]
		else {}
	}
	HAL_UART_Receive_IT(huartx, (uint8_t*)rxBuff, 1) ;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a07      	ldr	r2, [pc, #28]	; (8008d98 <_ZN7sim7x0010IRQhandlerEv+0x74>)
 8008d7a:	5898      	ldr	r0, [r3, r2]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	2201      	movs	r2, #1
 8008d82:	0019      	movs	r1, r3
 8008d84:	f7fe fbca 	bl	800751c <HAL_UART_Receive_IT>
}
 8008d88:	46c0      	nop			; (mov r8, r8)
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	b002      	add	sp, #8
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	000007d4 	.word	0x000007d4
 8008d94:	000007cf 	.word	0x000007cf
 8008d98:	00000fa8 	.word	0x00000fa8

08008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>:


/*____________________________________________________________________________________________________________________________*/
bool sim7x00::sendATcommand (const char* ATcommand, const char* expected_answer, int timeout) {
 8008d9c:	b590      	push	{r4, r7, lr}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]

    int answer=0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]

    dataCount = 0 ;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4a46      	ldr	r2, [pc, #280]	; (8008ecc <_ZN7sim7x0013sendATcommandEPKcS1_i+0x130>)
 8008db2:	2100      	movs	r1, #0
 8008db4:	5099      	str	r1, [r3, r2]
    rxDone_FLAG = 0 ;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	701a      	strb	r2, [r3, #0]
    memset(rxData, 0, RX_DATA_MAX );
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	1c98      	adds	r0, r3, #2
 8008dc0:	23fa      	movs	r3, #250	; 0xfa
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	001a      	movs	r2, r3
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f002 f863 	bl	800ae92 <memset>

    SIM_DEBUG.println("Requested to SIM7600 : ") ;
 8008dcc:	4a40      	ldr	r2, [pc, #256]	; (8008ed0 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x134>)
 8008dce:	4b41      	ldr	r3, [pc, #260]	; (8008ed4 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x138>)
 8008dd0:	0011      	movs	r1, r2
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f7ff fc60 	bl	8008698 <_ZN5debug7printlnEPKc>
    SIM_DEBUG.print(ATcommand) ;
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	4b3e      	ldr	r3, [pc, #248]	; (8008ed4 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x138>)
 8008ddc:	0011      	movs	r1, r2
 8008dde:	0018      	movs	r0, r3
 8008de0:	f7ff fc43 	bl	800866a <_ZN5debug5printEPKc>

    // Bắt đầu gửi lệnh AT ngay tại đây
    HAL_UART_Transmit(huartx, (uint8_t*)ATcommand, strlen(ATcommand), timeout) ;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4a3c      	ldr	r2, [pc, #240]	; (8008ed8 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x13c>)
 8008de8:	589c      	ldr	r4, [r3, r2]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	0018      	movs	r0, r3
 8008dee:	f7f7 f98b 	bl	8000108 <strlen>
 8008df2:	0003      	movs	r3, r0
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	0020      	movs	r0, r4
 8008dfc:	f7fe fae6 	bl	80073cc <HAL_UART_Transmit>

    SIM_DEBUG.println("SIM7600E responsed : ") ;
 8008e00:	4a36      	ldr	r2, [pc, #216]	; (8008edc <_ZN7sim7x0013sendATcommandEPKcS1_i+0x140>)
 8008e02:	4b34      	ldr	r3, [pc, #208]	; (8008ed4 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x138>)
 8008e04:	0011      	movs	r1, r2
 8008e06:	0018      	movs	r0, r3
 8008e08:	f7ff fc46 	bl	8008698 <_ZN5debug7printlnEPKc>

    // lệnh này để bắt đầu lấy mốc t.g để check Timeout
    uint32_t tickStart = HAL_GetTick() ;
 8008e0c:	f7fb fac8 	bl	80043a0 <HAL_GetTick>
 8008e10:	0003      	movs	r3, r0
 8008e12:	613b      	str	r3, [r7, #16]


    while( answer == 0 ) {
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d132      	bne.n	8008e80 <_ZN7sim7x0013sendATcommandEPKcS1_i+0xe4>

    	// Kiểm tra thời gian phản hồi, nếu lâu quá timeout thì break, và báo lỗi
		if ( (int)( HAL_GetTick() - tickStart )  >=  timeout ) {
 8008e1a:	f7fb fac1 	bl	80043a0 <HAL_GetTick>
 8008e1e:	0002      	movs	r2, r0
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	001a      	movs	r2, r3
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	0fd8      	lsrs	r0, r3, #31
 8008e2a:	17d1      	asrs	r1, r2, #31
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	4148      	adcs	r0, r1
 8008e30:	0003      	movs	r3, r0
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d122      	bne.n	8008e7e <_ZN7sim7x0013sendATcommandEPKcS1_i+0xe2>
	     * Kiểm tra module sim có phản hồi về đúng expected_answer hay khong
	     * Note : Hàm strstr(X, x) sẽ tìm 1 chuỗi con x trong chuỗi lớn hơn X
	     *  	  Nếu x xuất hiện trong X, thì hàm strstr sẽ trả về 1 chuỗi bắt đầu từ x và chuỗi
	     *  	  kéo dài còn lại phía sau từ x trong X
	     */
		if ( strstr(rxData, expected_answer) != NULL ){
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3302      	adds	r3, #2
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	0011      	movs	r1, r2
 8008e40:	0018      	movs	r0, r3
 8008e42:	f002 ff7f 	bl	800bd44 <strstr>
 8008e46:	1e03      	subs	r3, r0, #0
 8008e48:	d001      	beq.n	8008e4e <_ZN7sim7x0013sendATcommandEPKcS1_i+0xb2>
			// Nếu có thi la OK, answer == 1, thoát khỏi vòng while
			answer = 1;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	617b      	str	r3, [r7, #20]
		}

		// Led nhấp nháy báo hiệu đang tương tác với module sim
		if ( ( (int)( HAL_GetTick() - tickStart )/(int)100 % 2 ) == 0 )
 8008e4e:	f7fb faa7 	bl	80043a0 <HAL_GetTick>
 8008e52:	0002      	movs	r2, r0
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	2164      	movs	r1, #100	; 0x64
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	f7f7 f9f0 	bl	8000240 <__divsi3>
 8008e60:	0003      	movs	r3, r0
 8008e62:	001a      	movs	r2, r3
 8008e64:	2301      	movs	r3, #1
 8008e66:	4013      	ands	r3, r2
 8008e68:	425a      	negs	r2, r3
 8008e6a:	4153      	adcs	r3, r2
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0d0      	beq.n	8008e14 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x78>
			HAL_GPIO_TogglePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin) ;
 8008e72:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x144>)
 8008e74:	2140      	movs	r1, #64	; 0x40
 8008e76:	0018      	movs	r0, r3
 8008e78:	f7fc f972 	bl	8005160 <HAL_GPIO_TogglePin>
    while( answer == 0 ) {
 8008e7c:	e7ca      	b.n	8008e14 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x78>
			break ;
 8008e7e:	46c0      	nop			; (mov r8, r8)

	}

    // In thông tin mà module sim đã phản hồi về :
    SIM_DEBUG.println(rxData) ;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	1c9a      	adds	r2, r3, #2
 8008e84:	4b13      	ldr	r3, [pc, #76]	; (8008ed4 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x138>)
 8008e86:	0011      	movs	r1, r2
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7ff fc05 	bl	8008698 <_ZN5debug7printlnEPKc>

    // Nếu kết quả phản hồi không như mong muốn :
    if ( answer == 0 )
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d105      	bne.n	8008ea0 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x104>
    	SIM_DEBUG.println("Fail to get responses from SIM7600E! ") ;
 8008e94:	4a13      	ldr	r2, [pc, #76]	; (8008ee4 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x148>)
 8008e96:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x138>)
 8008e98:	0011      	movs	r1, r2
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	f7ff fbfc 	bl	8008698 <_ZN5debug7printlnEPKc>

    HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, (GPIO_PinState) 0 ) ;
 8008ea0:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x144>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2140      	movs	r1, #64	; 0x40
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f7fc f93d 	bl	8005126 <HAL_GPIO_WritePin>

    // Reset lại các biến phục vụ trong quá trình lấy dữ liệu từ module sim
    dataCount = 0 ;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4a07      	ldr	r2, [pc, #28]	; (8008ecc <_ZN7sim7x0013sendATcommandEPKcS1_i+0x130>)
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	5099      	str	r1, [r3, r2]
    rxDone_FLAG = 0 ;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	701a      	strb	r2, [r3, #0]
    //  Do hiện tại, rxData được sử dụng cho các tác vụ kế tiếp sau AT cmd, nên không được reset hàm  memset(rxData, 0, sizeof(rxData) ) ;

    return answer;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	1e5a      	subs	r2, r3, #1
 8008ebe:	4193      	sbcs	r3, r2
 8008ec0:	b2db      	uxtb	r3, r3
}
 8008ec2:	0018      	movs	r0, r3
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	b007      	add	sp, #28
 8008ec8:	bd90      	pop	{r4, r7, pc}
 8008eca:	46c0      	nop			; (mov r8, r8)
 8008ecc:	000007d4 	.word	0x000007d4
 8008ed0:	0800f220 	.word	0x0800f220
 8008ed4:	20001d04 	.word	0x20001d04
 8008ed8:	00000fa8 	.word	0x00000fa8
 8008edc:	0800f238 	.word	0x0800f238
 8008ee0:	50000800 	.word	0x50000800
 8008ee4:	0800f250 	.word	0x0800f250

08008ee8 <_ZN7sim7x004initEi>:

    return answer;
}

/*____________________________________________________________________________________________________________________________*/
bool sim7x00::init(int timeout){
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08a      	sub	sp, #40	; 0x28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
	// Khởi tạo UART 1 và kích hoạt ngắt :
	MX_USART1_UART_Init();
 8008ef2:	f7fb f841 	bl	8003f78 <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuff, 1) ;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	1c59      	adds	r1, r3, #1
 8008efa:	4ba4      	ldr	r3, [pc, #656]	; (800918c <_ZN7sim7x004initEi+0x2a4>)
 8008efc:	2201      	movs	r2, #1
 8008efe:	0018      	movs	r0, r3
 8008f00:	f7fe fb0c 	bl	800751c <HAL_UART_Receive_IT>

	// Khởi động module sim bằng cách set chân PWRKEY mức 0 trên module sim
	SIM_DEBUG.println("SIM7600E booting ... " ) ;
 8008f04:	4aa2      	ldr	r2, [pc, #648]	; (8009190 <_ZN7sim7x004initEi+0x2a8>)
 8008f06:	4ba3      	ldr	r3, [pc, #652]	; (8009194 <_ZN7sim7x004initEi+0x2ac>)
 8008f08:	0011      	movs	r1, r2
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	f7ff fbc4 	bl	8008698 <_ZN5debug7printlnEPKc>
	HAL_GPIO_WritePin( SIM7600_PWRKEY_GPIO_Port, SIM7600_PWRKEY_Pin, (GPIO_PinState) 1) ;
 8008f10:	4ba1      	ldr	r3, [pc, #644]	; (8009198 <_ZN7sim7x004initEi+0x2b0>)
 8008f12:	2201      	movs	r2, #1
 8008f14:	2101      	movs	r1, #1
 8008f16:	0018      	movs	r0, r3
 8008f18:	f7fc f905 	bl	8005126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( SIM7600_PWRKEY_GPIO_Port, SIM7600_PWRKEY_Pin, (GPIO_PinState) 0) ;
 8008f1c:	4b9e      	ldr	r3, [pc, #632]	; (8009198 <_ZN7sim7x004initEi+0x2b0>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2101      	movs	r1, #1
 8008f22:	0018      	movs	r0, r3
 8008f24:	f7fc f8ff 	bl	8005126 <HAL_GPIO_WritePin>
	uint32_t tickStart = HAL_GetTick();
 8008f28:	f7fb fa3a 	bl	80043a0 <HAL_GetTick>
 8008f2c:	0003      	movs	r3, r0
 8008f2e:	61fb      	str	r3, [r7, #28]
	// Chờ ~ > 10s để quá trình khởi động module sim hoàn tất
	HAL_Delay(20000) ;
 8008f30:	4b9a      	ldr	r3, [pc, #616]	; (800919c <_ZN7sim7x004initEi+0x2b4>)
 8008f32:	0018      	movs	r0, r3
 8008f34:	f7fb fa3e 	bl	80043b4 <HAL_Delay>

	int step = 0 ;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
	bool checkStep[20] ;
	bool checkInit = false ;
 8008f3c:	2323      	movs	r3, #35	; 0x23
 8008f3e:	18fb      	adds	r3, r7, r3
 8008f40:	2200      	movs	r2, #0
 8008f42:	701a      	strb	r2, [r3, #0]

	while( checkInit == false ){
 8008f44:	2323      	movs	r3, #35	; 0x23
 8008f46:	18fb      	adds	r3, r7, r3
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d000      	beq.n	8008f50 <_ZN7sim7x004initEi+0x68>
 8008f4e:	e10c      	b.n	800916a <_ZN7sim7x004initEi+0x282>
		if ( (int)( HAL_GetTick() - tickStart )  >=  timeout ) {
 8008f50:	f7fb fa26 	bl	80043a0 <HAL_GetTick>
 8008f54:	0002      	movs	r2, r0
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	001a      	movs	r2, r3
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	0fd8      	lsrs	r0, r3, #31
 8008f60:	17d1      	asrs	r1, r2, #31
 8008f62:	429a      	cmp	r2, r3
 8008f64:	4148      	adcs	r0, r1
 8008f66:	0003      	movs	r3, r0
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d000      	beq.n	8008f70 <_ZN7sim7x004initEi+0x88>
 8008f6e:	e0fb      	b.n	8009168 <_ZN7sim7x004initEi+0x280>
						break ;
					}
		switch (step) {
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	2b08      	cmp	r3, #8
 8008f74:	d8e6      	bhi.n	8008f44 <_ZN7sim7x004initEi+0x5c>
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	009a      	lsls	r2, r3, #2
 8008f7a:	4b89      	ldr	r3, [pc, #548]	; (80091a0 <_ZN7sim7x004initEi+0x2b8>)
 8008f7c:	18d3      	adds	r3, r2, r3
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	469f      	mov	pc, r3
			case 0:
				checkStep[step] = sendATcommand((char*)"AT\r", "OK", 2000) ;  // check AT response
 8008f82:	23fa      	movs	r3, #250	; 0xfa
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	4a87      	ldr	r2, [pc, #540]	; (80091a4 <_ZN7sim7x004initEi+0x2bc>)
 8008f88:	4987      	ldr	r1, [pc, #540]	; (80091a8 <_ZN7sim7x004initEi+0x2c0>)
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff ff06 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8008f90:	0003      	movs	r3, r0
 8008f92:	0019      	movs	r1, r3
 8008f94:	2008      	movs	r0, #8
 8008f96:	183a      	adds	r2, r7, r0
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	18d3      	adds	r3, r2, r3
 8008f9c:	1c0a      	adds	r2, r1, #0
 8008f9e:	701a      	strb	r2, [r3, #0]
				if (checkStep[step] == true) step++ ;
 8008fa0:	183a      	adds	r2, r7, r0
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	18d3      	adds	r3, r2, r3
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d100      	bne.n	8008fae <_ZN7sim7x004initEi+0xc6>
 8008fac:	e0cc      	b.n	8009148 <_ZN7sim7x004initEi+0x260>
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
				break ;
 8008fb4:	e0c8      	b.n	8009148 <_ZN7sim7x004initEi+0x260>
			case 1:
				checkStep[step] = sendATcommand((char*)"AT+CREG?\r", "OK", 2000) ;
 8008fb6:	23fa      	movs	r3, #250	; 0xfa
 8008fb8:	00db      	lsls	r3, r3, #3
 8008fba:	4a7a      	ldr	r2, [pc, #488]	; (80091a4 <_ZN7sim7x004initEi+0x2bc>)
 8008fbc:	497b      	ldr	r1, [pc, #492]	; (80091ac <_ZN7sim7x004initEi+0x2c4>)
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff feec 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8008fc4:	0003      	movs	r3, r0
 8008fc6:	0019      	movs	r1, r3
 8008fc8:	2008      	movs	r0, #8
 8008fca:	183a      	adds	r2, r7, r0
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	18d3      	adds	r3, r2, r3
 8008fd0:	1c0a      	adds	r2, r1, #0
 8008fd2:	701a      	strb	r2, [r3, #0]
				if (checkStep[step] == true) step++ ;
 8008fd4:	183a      	adds	r2, r7, r0
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	18d3      	adds	r3, r2, r3
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d100      	bne.n	8008fe2 <_ZN7sim7x004initEi+0xfa>
 8008fe0:	e0b4      	b.n	800914c <_ZN7sim7x004initEi+0x264>
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	627b      	str	r3, [r7, #36]	; 0x24
				break ;
 8008fe8:	e0b0      	b.n	800914c <_ZN7sim7x004initEi+0x264>
			case 2:
				checkStep[step] = sendATcommand((char*)"AT+CNMP=2\r", "OK", 2000) ;
 8008fea:	23fa      	movs	r3, #250	; 0xfa
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	4a6d      	ldr	r2, [pc, #436]	; (80091a4 <_ZN7sim7x004initEi+0x2bc>)
 8008ff0:	496f      	ldr	r1, [pc, #444]	; (80091b0 <_ZN7sim7x004initEi+0x2c8>)
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7ff fed2 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8008ff8:	0003      	movs	r3, r0
 8008ffa:	0019      	movs	r1, r3
 8008ffc:	2008      	movs	r0, #8
 8008ffe:	183a      	adds	r2, r7, r0
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	18d3      	adds	r3, r2, r3
 8009004:	1c0a      	adds	r2, r1, #0
 8009006:	701a      	strb	r2, [r3, #0]
				if (checkStep[step] == true) step++ ;
 8009008:	183a      	adds	r2, r7, r0
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	18d3      	adds	r3, r2, r3
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d100      	bne.n	8009016 <_ZN7sim7x004initEi+0x12e>
 8009014:	e09c      	b.n	8009150 <_ZN7sim7x004initEi+0x268>
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	3301      	adds	r3, #1
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
				break ;
 800901c:	e098      	b.n	8009150 <_ZN7sim7x004initEi+0x268>
			case 3:
				checkStep[step] = sendATcommand((char*)"ATI\r", "OK", 2000) ;
 800901e:	23fa      	movs	r3, #250	; 0xfa
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	4a60      	ldr	r2, [pc, #384]	; (80091a4 <_ZN7sim7x004initEi+0x2bc>)
 8009024:	4963      	ldr	r1, [pc, #396]	; (80091b4 <_ZN7sim7x004initEi+0x2cc>)
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff feb8 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 800902c:	0003      	movs	r3, r0
 800902e:	0019      	movs	r1, r3
 8009030:	2008      	movs	r0, #8
 8009032:	183a      	adds	r2, r7, r0
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	18d3      	adds	r3, r2, r3
 8009038:	1c0a      	adds	r2, r1, #0
 800903a:	701a      	strb	r2, [r3, #0]
				if (checkStep[step] == true) step++ ;
 800903c:	183a      	adds	r2, r7, r0
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	18d3      	adds	r3, r2, r3
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d100      	bne.n	800904a <_ZN7sim7x004initEi+0x162>
 8009048:	e084      	b.n	8009154 <_ZN7sim7x004initEi+0x26c>
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	3301      	adds	r3, #1
 800904e:	627b      	str	r3, [r7, #36]	; 0x24
				break ;
 8009050:	e080      	b.n	8009154 <_ZN7sim7x004initEi+0x26c>
			case 4:
				checkStep[step] = sendATcommand("AT+CNMI=2,1,0,0,0\r", "OK", 2000 ) ;
 8009052:	23fa      	movs	r3, #250	; 0xfa
 8009054:	00db      	lsls	r3, r3, #3
 8009056:	4a53      	ldr	r2, [pc, #332]	; (80091a4 <_ZN7sim7x004initEi+0x2bc>)
 8009058:	4957      	ldr	r1, [pc, #348]	; (80091b8 <_ZN7sim7x004initEi+0x2d0>)
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff fe9e 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8009060:	0003      	movs	r3, r0
 8009062:	0019      	movs	r1, r3
 8009064:	2008      	movs	r0, #8
 8009066:	183a      	adds	r2, r7, r0
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	18d3      	adds	r3, r2, r3
 800906c:	1c0a      	adds	r2, r1, #0
 800906e:	701a      	strb	r2, [r3, #0]
				if (checkStep[step] == true) step++ ;
 8009070:	183a      	adds	r2, r7, r0
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	18d3      	adds	r3, r2, r3
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d06d      	beq.n	8009158 <_ZN7sim7x004initEi+0x270>
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	3301      	adds	r3, #1
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
				break ;
 8009082:	e069      	b.n	8009158 <_ZN7sim7x004initEi+0x270>
			case 5:
				SIM_DEBUG.println("Setting up SMS... " ) ;
 8009084:	4a4d      	ldr	r2, [pc, #308]	; (80091bc <_ZN7sim7x004initEi+0x2d4>)
 8009086:	4b43      	ldr	r3, [pc, #268]	; (8009194 <_ZN7sim7x004initEi+0x2ac>)
 8009088:	0011      	movs	r1, r2
 800908a:	0018      	movs	r0, r3
 800908c:	f7ff fb04 	bl	8008698 <_ZN5debug7printlnEPKc>
				checkStep[step] = sendATcommand((char*)"AT+CNMP=2\r", "OK", 2000) ;
 8009090:	23fa      	movs	r3, #250	; 0xfa
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	4a43      	ldr	r2, [pc, #268]	; (80091a4 <_ZN7sim7x004initEi+0x2bc>)
 8009096:	4946      	ldr	r1, [pc, #280]	; (80091b0 <_ZN7sim7x004initEi+0x2c8>)
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff fe7f 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 800909e:	0003      	movs	r3, r0
 80090a0:	0019      	movs	r1, r3
 80090a2:	2008      	movs	r0, #8
 80090a4:	183a      	adds	r2, r7, r0
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	18d3      	adds	r3, r2, r3
 80090aa:	1c0a      	adds	r2, r1, #0
 80090ac:	701a      	strb	r2, [r3, #0]
				if (checkStep[step] == true) step++ ;
 80090ae:	183a      	adds	r2, r7, r0
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	18d3      	adds	r3, r2, r3
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d050      	beq.n	800915c <_ZN7sim7x004initEi+0x274>
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	3301      	adds	r3, #1
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
				break ;
 80090c0:	e04c      	b.n	800915c <_ZN7sim7x004initEi+0x274>
			case 6:
				SIM_DEBUG.println("Delete all old SMS... " ) ;
 80090c2:	4a3f      	ldr	r2, [pc, #252]	; (80091c0 <_ZN7sim7x004initEi+0x2d8>)
 80090c4:	4b33      	ldr	r3, [pc, #204]	; (8009194 <_ZN7sim7x004initEi+0x2ac>)
 80090c6:	0011      	movs	r1, r2
 80090c8:	0018      	movs	r0, r3
 80090ca:	f7ff fae5 	bl	8008698 <_ZN5debug7printlnEPKc>
				checkStep[step] = sendATcommand("AT+CMGD=,4\r", "OK", 1000);    // xóa hết toàn bộ tin nhắn
 80090ce:	23fa      	movs	r3, #250	; 0xfa
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4a34      	ldr	r2, [pc, #208]	; (80091a4 <_ZN7sim7x004initEi+0x2bc>)
 80090d4:	493b      	ldr	r1, [pc, #236]	; (80091c4 <_ZN7sim7x004initEi+0x2dc>)
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff fe60 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 80090dc:	0003      	movs	r3, r0
 80090de:	0019      	movs	r1, r3
 80090e0:	2008      	movs	r0, #8
 80090e2:	183a      	adds	r2, r7, r0
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	18d3      	adds	r3, r2, r3
 80090e8:	1c0a      	adds	r2, r1, #0
 80090ea:	701a      	strb	r2, [r3, #0]
				if (checkStep[step] == true) step++ ;
 80090ec:	183a      	adds	r2, r7, r0
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	18d3      	adds	r3, r2, r3
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d033      	beq.n	8009160 <_ZN7sim7x004initEi+0x278>
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	3301      	adds	r3, #1
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
				break ;
 80090fe:	e02f      	b.n	8009160 <_ZN7sim7x004initEi+0x278>
			case 7:
				SIM_DEBUG.println("Set SMS mode to text... ");
 8009100:	4a31      	ldr	r2, [pc, #196]	; (80091c8 <_ZN7sim7x004initEi+0x2e0>)
 8009102:	4b24      	ldr	r3, [pc, #144]	; (8009194 <_ZN7sim7x004initEi+0x2ac>)
 8009104:	0011      	movs	r1, r2
 8009106:	0018      	movs	r0, r3
 8009108:	f7ff fac6 	bl	8008698 <_ZN5debug7printlnEPKc>
				checkStep[step] = sendATcommand("AT+CMGF=1\r", "OK", 1000);    // sets the SMS mode to text
 800910c:	23fa      	movs	r3, #250	; 0xfa
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4a24      	ldr	r2, [pc, #144]	; (80091a4 <_ZN7sim7x004initEi+0x2bc>)
 8009112:	492e      	ldr	r1, [pc, #184]	; (80091cc <_ZN7sim7x004initEi+0x2e4>)
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7ff fe41 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 800911a:	0003      	movs	r3, r0
 800911c:	0019      	movs	r1, r3
 800911e:	2008      	movs	r0, #8
 8009120:	183a      	adds	r2, r7, r0
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	18d3      	adds	r3, r2, r3
 8009126:	1c0a      	adds	r2, r1, #0
 8009128:	701a      	strb	r2, [r3, #0]
				if (checkStep[step] == true) step++ ;
 800912a:	183a      	adds	r2, r7, r0
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	18d3      	adds	r3, r2, r3
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d016      	beq.n	8009164 <_ZN7sim7x004initEi+0x27c>
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	3301      	adds	r3, #1
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
				break ;
 800913c:	e012      	b.n	8009164 <_ZN7sim7x004initEi+0x27c>
			case 8:
				checkInit = true ;
 800913e:	2323      	movs	r3, #35	; 0x23
 8009140:	18fb      	adds	r3, r7, r3
 8009142:	2201      	movs	r2, #1
 8009144:	701a      	strb	r2, [r3, #0]
				break;
 8009146:	e00e      	b.n	8009166 <_ZN7sim7x004initEi+0x27e>
				break ;
 8009148:	46c0      	nop			; (mov r8, r8)
 800914a:	e6fb      	b.n	8008f44 <_ZN7sim7x004initEi+0x5c>
				break ;
 800914c:	46c0      	nop			; (mov r8, r8)
 800914e:	e6f9      	b.n	8008f44 <_ZN7sim7x004initEi+0x5c>
				break ;
 8009150:	46c0      	nop			; (mov r8, r8)
 8009152:	e6f7      	b.n	8008f44 <_ZN7sim7x004initEi+0x5c>
				break ;
 8009154:	46c0      	nop			; (mov r8, r8)
 8009156:	e6f5      	b.n	8008f44 <_ZN7sim7x004initEi+0x5c>
				break ;
 8009158:	46c0      	nop			; (mov r8, r8)
 800915a:	e6f3      	b.n	8008f44 <_ZN7sim7x004initEi+0x5c>
				break ;
 800915c:	46c0      	nop			; (mov r8, r8)
 800915e:	e6f1      	b.n	8008f44 <_ZN7sim7x004initEi+0x5c>
				break ;
 8009160:	46c0      	nop			; (mov r8, r8)
 8009162:	e6ef      	b.n	8008f44 <_ZN7sim7x004initEi+0x5c>
				break ;
 8009164:	46c0      	nop			; (mov r8, r8)
	while( checkInit == false ){
 8009166:	e6ed      	b.n	8008f44 <_ZN7sim7x004initEi+0x5c>
						break ;
 8009168:	46c0      	nop			; (mov r8, r8)
		}
	}

	rxDone_FLAG = 0 ;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	701a      	strb	r2, [r3, #0]
	SIM_DEBUG.println("SIM7600E init completed ! ") ;
 8009170:	4a17      	ldr	r2, [pc, #92]	; (80091d0 <_ZN7sim7x004initEi+0x2e8>)
 8009172:	4b08      	ldr	r3, [pc, #32]	; (8009194 <_ZN7sim7x004initEi+0x2ac>)
 8009174:	0011      	movs	r1, r2
 8009176:	0018      	movs	r0, r3
 8009178:	f7ff fa8e 	bl	8008698 <_ZN5debug7printlnEPKc>
	return checkInit;
 800917c:	2323      	movs	r3, #35	; 0x23
 800917e:	18fb      	adds	r3, r7, r3
 8009180:	781b      	ldrb	r3, [r3, #0]

}
 8009182:	0018      	movs	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	b00a      	add	sp, #40	; 0x28
 8009188:	bd80      	pop	{r7, pc}
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	20001b70 	.word	0x20001b70
 8009190:	0800f278 	.word	0x0800f278
 8009194:	20001d04 	.word	0x20001d04
 8009198:	50000400 	.word	0x50000400
 800919c:	00004e20 	.word	0x00004e20
 80091a0:	0800fb58 	.word	0x0800fb58
 80091a4:	0800f290 	.word	0x0800f290
 80091a8:	0800f294 	.word	0x0800f294
 80091ac:	0800f298 	.word	0x0800f298
 80091b0:	0800f2a4 	.word	0x0800f2a4
 80091b4:	0800f2b0 	.word	0x0800f2b0
 80091b8:	0800f2b8 	.word	0x0800f2b8
 80091bc:	0800f2cc 	.word	0x0800f2cc
 80091c0:	0800f2e0 	.word	0x0800f2e0
 80091c4:	0800f2f8 	.word	0x0800f2f8
 80091c8:	0800f304 	.word	0x0800f304
 80091cc:	0800f320 	.word	0x0800f320
 80091d0:	0800f32c 	.word	0x0800f32c

080091d4 <_ZN7sim7x008memresetEv>:


/*____________________________________________________________________________________________________________________________*/
void sim7x00::memreset(){
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
	rxDone_FLAG = false ;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
	dataCount = 0 ;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a07      	ldr	r2, [pc, #28]	; (8009204 <_ZN7sim7x008memresetEv+0x30>)
 80091e6:	2100      	movs	r1, #0
 80091e8:	5099      	str	r1, [r3, r2]
	memset ( rxData, 0 , (size_t)sizeof(rxData)/sizeof(char) ) ;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	1c98      	adds	r0, r3, #2
 80091ee:	23fa      	movs	r3, #250	; 0xfa
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	001a      	movs	r2, r3
 80091f4:	2100      	movs	r1, #0
 80091f6:	f001 fe4c 	bl	800ae92 <memset>
}
 80091fa:	46c0      	nop			; (mov r8, r8)
 80091fc:	46bd      	mov	sp, r7
 80091fe:	b002      	add	sp, #8
 8009200:	bd80      	pop	{r7, pc}
 8009202:	46c0      	nop			; (mov r8, r8)
 8009204:	000007d4 	.word	0x000007d4

08009208 <_ZN7sim7x0013identifyEventEv>:


/*____________________________________________________________________________________________________________________________*/
sim_events_t sim7x00::identifyEvent(){
 8009208:	b590      	push	{r4, r7, lr}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
	sim_events_t simEvent ;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	605a      	str	r2, [r3, #4]
	simEvent.update = NONE ;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	605a      	str	r2, [r3, #4]
	simEvent.warning = NONE ;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]

	// Kiểm tra sự kiện đến từ module sim :
	switch ( checkIncommingEvent() ) {
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	0018      	movs	r0, r3
 800922e:	f000 f8ff 	bl	8009430 <_ZN7sim7x0019checkIncommingEventEv>
 8009232:	0003      	movs	r3, r0
 8009234:	2b01      	cmp	r3, #1
 8009236:	d003      	beq.n	8009240 <_ZN7sim7x0013identifyEventEv+0x38>
 8009238:	2b02      	cmp	r3, #2
 800923a:	d100      	bne.n	800923e <_ZN7sim7x0013identifyEventEv+0x36>
 800923c:	e09e      	b.n	800937c <_ZN7sim7x0013identifyEventEv+0x174>
			// Bỏ qua
			break;


		default:
			break;
 800923e:	e0a0      	b.n	8009382 <_ZN7sim7x0013identifyEventEv+0x17a>
			memset(SMSContent, 0, RX_DATA_MAX) ;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	24fb      	movs	r4, #251	; 0xfb
 8009244:	00e4      	lsls	r4, r4, #3
 8009246:	1918      	adds	r0, r3, r4
 8009248:	23fa      	movs	r3, #250	; 0xfa
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	001a      	movs	r2, r3
 800924e:	2100      	movs	r1, #0
 8009250:	f001 fe1f 	bl	800ae92 <memset>
			readSMS() ;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	0018      	movs	r0, r3
 8009258:	f000 f928 	bl	80094ac <_ZN7sim7x007readSMSEv>
			if( isAuthorizePhoneNumber(SMSContent) ){
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	191a      	adds	r2, r3, r4
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	0011      	movs	r1, r2
 8009264:	0018      	movs	r0, r3
 8009266:	f000 f969 	bl	800953c <_ZN7sim7x0022isAuthorizePhoneNumberEPKc>
 800926a:	1e03      	subs	r3, r0, #0
 800926c:	d100      	bne.n	8009270 <_ZN7sim7x0013identifyEventEv+0x68>
 800926e:	e087      	b.n	8009380 <_ZN7sim7x0013identifyEventEv+0x178>
				int result = NONE ;
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]
				result = identifySMSRequest(SMSContent) ;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	22fb      	movs	r2, #251	; 0xfb
 8009278:	00d2      	lsls	r2, r2, #3
 800927a:	189a      	adds	r2, r3, r2
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	0011      	movs	r1, r2
 8009280:	0018      	movs	r0, r3
 8009282:	f000 f9a5 	bl	80095d0 <_ZN7sim7x0018identifySMSRequestEPKc>
 8009286:	0003      	movs	r3, r0
 8009288:	60fb      	str	r3, [r7, #12]
				switch (result) {
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b0d      	cmp	r3, #13
 800928e:	d873      	bhi.n	8009378 <_ZN7sim7x0013identifyEventEv+0x170>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	009a      	lsls	r2, r3, #2
 8009294:	4b3d      	ldr	r3, [pc, #244]	; (800938c <_ZN7sim7x0013identifyEventEv+0x184>)
 8009296:	18d3      	adds	r3, r2, r3
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	469f      	mov	pc, r3
						simEvent.warning = SIM_REQ_WARNING_LV1 ;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("WARNING_LEVEL_1" ) ;
 80092a2:	4a3b      	ldr	r2, [pc, #236]	; (8009390 <_ZN7sim7x0013identifyEventEv+0x188>)
 80092a4:	4b3b      	ldr	r3, [pc, #236]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 80092a6:	0011      	movs	r1, r2
 80092a8:	0018      	movs	r0, r3
 80092aa:	f7ff f9de 	bl	800866a <_ZN5debug5printEPKc>
						break;
 80092ae:	e064      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.warning = SIM_REQ_WARNING_LV2 ;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("WARNING_LEVEL_2" ) ;
 80092b6:	4a38      	ldr	r2, [pc, #224]	; (8009398 <_ZN7sim7x0013identifyEventEv+0x190>)
 80092b8:	4b36      	ldr	r3, [pc, #216]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 80092ba:	0011      	movs	r1, r2
 80092bc:	0018      	movs	r0, r3
 80092be:	f7ff f9d4 	bl	800866a <_ZN5debug5printEPKc>
						break;
 80092c2:	e05a      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.warning = SIM_REQ_WARNING_LV3 ;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2203      	movs	r2, #3
 80092c8:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("WARNING_LEVEL_3" ) ;
 80092ca:	4a34      	ldr	r2, [pc, #208]	; (800939c <_ZN7sim7x0013identifyEventEv+0x194>)
 80092cc:	4b31      	ldr	r3, [pc, #196]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 80092ce:	0011      	movs	r1, r2
 80092d0:	0018      	movs	r0, r3
 80092d2:	f7ff f9ca 	bl	800866a <_ZN5debug5printEPKc>
						break;
 80092d6:	e050      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.warning = SIM_REQ_WARNING_LV4 ;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2204      	movs	r2, #4
 80092dc:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("WARNING_LEVEL_4" ) ;
 80092de:	4a30      	ldr	r2, [pc, #192]	; (80093a0 <_ZN7sim7x0013identifyEventEv+0x198>)
 80092e0:	4b2c      	ldr	r3, [pc, #176]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 80092e2:	0011      	movs	r1, r2
 80092e4:	0018      	movs	r0, r3
 80092e6:	f7ff f9c0 	bl	800866a <_ZN5debug5printEPKc>
						break;
 80092ea:	e046      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.warning = SIM_REQ_WARNING_LV5 ;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2205      	movs	r2, #5
 80092f0:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("WARNING_LEVEL_5" ) ;
 80092f2:	4a2c      	ldr	r2, [pc, #176]	; (80093a4 <_ZN7sim7x0013identifyEventEv+0x19c>)
 80092f4:	4b27      	ldr	r3, [pc, #156]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 80092f6:	0011      	movs	r1, r2
 80092f8:	0018      	movs	r0, r3
 80092fa:	f7ff f9b6 	bl	800866a <_ZN5debug5printEPKc>
						break;
 80092fe:	e03c      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.warning = SIM_REQ_STOP_WARNING ;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2206      	movs	r2, #6
 8009304:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("STOP_WARNING" ) ;
 8009306:	4a28      	ldr	r2, [pc, #160]	; (80093a8 <_ZN7sim7x0013identifyEventEv+0x1a0>)
 8009308:	4b22      	ldr	r3, [pc, #136]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 800930a:	0011      	movs	r1, r2
 800930c:	0018      	movs	r0, r3
 800930e:	f7ff f9ac 	bl	800866a <_ZN5debug5printEPKc>
						break;
 8009312:	e032      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.update = SIM_REQ_SMS_STATUS_UPDATE ;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2209      	movs	r2, #9
 8009318:	605a      	str	r2, [r3, #4]
						SIM_DEBUG.print("SMS STATUS QUERY" ) ;
 800931a:	4a24      	ldr	r2, [pc, #144]	; (80093ac <_ZN7sim7x0013identifyEventEv+0x1a4>)
 800931c:	4b1d      	ldr	r3, [pc, #116]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 800931e:	0011      	movs	r1, r2
 8009320:	0018      	movs	r0, r3
 8009322:	f7ff f9a2 	bl	800866a <_ZN5debug5printEPKc>
						break;
 8009326:	e028      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.update = SIM_REQ_AUDIO_UPDATE ;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	220a      	movs	r2, #10
 800932c:	605a      	str	r2, [r3, #4]
						SIM_DEBUG.print("AUDIO UPDATE" ) ;
 800932e:	4a20      	ldr	r2, [pc, #128]	; (80093b0 <_ZN7sim7x0013identifyEventEv+0x1a8>)
 8009330:	4b18      	ldr	r3, [pc, #96]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8009332:	0011      	movs	r1, r2
 8009334:	0018      	movs	r0, r3
 8009336:	f7ff f998 	bl	800866a <_ZN5debug5printEPKc>
						break;
 800933a:	e01e      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.update = SIM_REQ_ADD_PHONENUMBER ;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	220b      	movs	r2, #11
 8009340:	605a      	str	r2, [r3, #4]
						SIM_DEBUG.print("ADD PHONE NUMBER") ;
 8009342:	4a1c      	ldr	r2, [pc, #112]	; (80093b4 <_ZN7sim7x0013identifyEventEv+0x1ac>)
 8009344:	4b13      	ldr	r3, [pc, #76]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8009346:	0011      	movs	r1, r2
 8009348:	0018      	movs	r0, r3
 800934a:	f7ff f98e 	bl	800866a <_ZN5debug5printEPKc>
						break;
 800934e:	e014      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.update = SIM_REQ_REMOVE_PHONENUMBER ;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	220c      	movs	r2, #12
 8009354:	605a      	str	r2, [r3, #4]
						SIM_DEBUG.print("REMOVE PHONE NUMBER") ;
 8009356:	4a18      	ldr	r2, [pc, #96]	; (80093b8 <_ZN7sim7x0013identifyEventEv+0x1b0>)
 8009358:	4b0e      	ldr	r3, [pc, #56]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 800935a:	0011      	movs	r1, r2
 800935c:	0018      	movs	r0, r3
 800935e:	f7ff f984 	bl	800866a <_ZN5debug5printEPKc>
						break;
 8009362:	e00a      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.update = SIM_REQ_FOTA ;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	220d      	movs	r2, #13
 8009368:	605a      	str	r2, [r3, #4]
						SIM_DEBUG.print("FIRMWARE UPDATE OTA") ;
 800936a:	4a14      	ldr	r2, [pc, #80]	; (80093bc <_ZN7sim7x0013identifyEventEv+0x1b4>)
 800936c:	4b09      	ldr	r3, [pc, #36]	; (8009394 <_ZN7sim7x0013identifyEventEv+0x18c>)
 800936e:	0011      	movs	r1, r2
 8009370:	0018      	movs	r0, r3
 8009372:	f7ff f97a 	bl	800866a <_ZN5debug5printEPKc>
						break;
 8009376:	e000      	b.n	800937a <_ZN7sim7x0013identifyEventEv+0x172>
						break;
 8009378:	46c0      	nop			; (mov r8, r8)
			break ;
 800937a:	e001      	b.n	8009380 <_ZN7sim7x0013identifyEventEv+0x178>
			break;
 800937c:	46c0      	nop			; (mov r8, r8)
 800937e:	e000      	b.n	8009382 <_ZN7sim7x0013identifyEventEv+0x17a>
			break ;
 8009380:	46c0      	nop			; (mov r8, r8)
	}

	// reset lại nội dung tin nhắn
//	memset(SMSContent, 0, RX_DATA_MAX) ;
	return simEvent ;
 8009382:	46c0      	nop			; (mov r8, r8)

}
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	46bd      	mov	sp, r7
 8009388:	b005      	add	sp, #20
 800938a:	bd90      	pop	{r4, r7, pc}
 800938c:	0800fb7c 	.word	0x0800fb7c
 8009390:	0800f348 	.word	0x0800f348
 8009394:	20001d04 	.word	0x20001d04
 8009398:	0800f358 	.word	0x0800f358
 800939c:	0800f368 	.word	0x0800f368
 80093a0:	0800f378 	.word	0x0800f378
 80093a4:	0800f388 	.word	0x0800f388
 80093a8:	0800f398 	.word	0x0800f398
 80093ac:	0800f3a8 	.word	0x0800f3a8
 80093b0:	0800f3bc 	.word	0x0800f3bc
 80093b4:	0800f3cc 	.word	0x0800f3cc
 80093b8:	0800f3e0 	.word	0x0800f3e0
 80093bc:	0800f3f4 	.word	0x0800f3f4

080093c0 <_ZN7sim7x0015checkingRespondEPKcm>:


/*____________________________________________________________________________________________________________________________*/
int sim7x00::checkingRespond( const char* rpdMsg, uint32_t timeout){
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
	int answer=0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	617b      	str	r3, [r7, #20]
	uint32_t tickStart = HAL_GetTick() ;
 80093d0:	f7fa ffe6 	bl	80043a0 <HAL_GetTick>
 80093d4:	0003      	movs	r3, r0
 80093d6:	613b      	str	r3, [r7, #16]
	while ( (uint32_t)( HAL_GetTick() - tickStart )  <=  timeout ) {
 80093d8:	f7fa ffe2 	bl	80043a0 <HAL_GetTick>
 80093dc:	0002      	movs	r2, r0
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	1ad2      	subs	r2, r2, r3
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	2300      	movs	r3, #0
 80093e6:	4291      	cmp	r1, r2
 80093e8:	415b      	adcs	r3, r3
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d019      	beq.n	8009424 <_ZN7sim7x0015checkingRespondEPKcm+0x64>
		if((checkIncommingEvent()==1)&&(strstr(readSMS(),rpdMsg)!=NULL)){
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	0018      	movs	r0, r3
 80093f4:	f000 f81c 	bl	8009430 <_ZN7sim7x0019checkIncommingEventEv>
 80093f8:	0003      	movs	r3, r0
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d10d      	bne.n	800941a <_ZN7sim7x0015checkingRespondEPKcm+0x5a>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	0018      	movs	r0, r3
 8009402:	f000 f853 	bl	80094ac <_ZN7sim7x007readSMSEv>
 8009406:	0002      	movs	r2, r0
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	0019      	movs	r1, r3
 800940c:	0010      	movs	r0, r2
 800940e:	f002 fc99 	bl	800bd44 <strstr>
 8009412:	1e03      	subs	r3, r0, #0
 8009414:	d001      	beq.n	800941a <_ZN7sim7x0015checkingRespondEPKcm+0x5a>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <_ZN7sim7x0015checkingRespondEPKcm+0x5c>
 800941a:	2300      	movs	r3, #0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d0db      	beq.n	80093d8 <_ZN7sim7x0015checkingRespondEPKcm+0x18>
		answer =1;
 8009420:	2301      	movs	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
		break;
		}
	}
	return answer;
 8009424:	697b      	ldr	r3, [r7, #20]

}
 8009426:	0018      	movs	r0, r3
 8009428:	46bd      	mov	sp, r7
 800942a:	b006      	add	sp, #24
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <_ZN7sim7x0019checkIncommingEventEv>:


/*____________________________________________________________________________________________________________________________*/
int sim7x00::checkIncommingEvent(){
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	int result = IS_NOTHING ;
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]

	// Kiểm tra có phải SMS đến ?
	char* isSMS = strstr(rxData, "SM") ;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3302      	adds	r3, #2
 8009440:	4a15      	ldr	r2, [pc, #84]	; (8009498 <_ZN7sim7x0019checkIncommingEventEv+0x68>)
 8009442:	0011      	movs	r1, r2
 8009444:	0018      	movs	r0, r3
 8009446:	f002 fc7d 	bl	800bd44 <strstr>
 800944a:	0003      	movs	r3, r0
 800944c:	613b      	str	r3, [r7, #16]

	// Kiểm tra có phải cuộc gọi đến ?
	char* isPhoneCall = strstr(rxData, "RING") ;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3302      	adds	r3, #2
 8009452:	4a12      	ldr	r2, [pc, #72]	; (800949c <_ZN7sim7x0019checkIncommingEventEv+0x6c>)
 8009454:	0011      	movs	r1, r2
 8009456:	0018      	movs	r0, r3
 8009458:	f002 fc74 	bl	800bd44 <strstr>
 800945c:	0003      	movs	r3, r0
 800945e:	60fb      	str	r3, [r7, #12]

	if( isSMS != NULL){
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d007      	beq.n	8009476 <_ZN7sim7x0019checkIncommingEventEv+0x46>
		SIM_DEBUG.println("Received SMS !") ;
 8009466:	4a0e      	ldr	r2, [pc, #56]	; (80094a0 <_ZN7sim7x0019checkIncommingEventEv+0x70>)
 8009468:	4b0e      	ldr	r3, [pc, #56]	; (80094a4 <_ZN7sim7x0019checkIncommingEventEv+0x74>)
 800946a:	0011      	movs	r1, r2
 800946c:	0018      	movs	r0, r3
 800946e:	f7ff f913 	bl	8008698 <_ZN5debug7printlnEPKc>
		result = IS_SMS ;
 8009472:	2301      	movs	r3, #1
 8009474:	617b      	str	r3, [r7, #20]
	}
	if( isPhoneCall != NULL){
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d007      	beq.n	800948c <_ZN7sim7x0019checkIncommingEventEv+0x5c>
		SIM_DEBUG.println("Incomming call !") ;
 800947c:	4a0a      	ldr	r2, [pc, #40]	; (80094a8 <_ZN7sim7x0019checkIncommingEventEv+0x78>)
 800947e:	4b09      	ldr	r3, [pc, #36]	; (80094a4 <_ZN7sim7x0019checkIncommingEventEv+0x74>)
 8009480:	0011      	movs	r1, r2
 8009482:	0018      	movs	r0, r3
 8009484:	f7ff f908 	bl	8008698 <_ZN5debug7printlnEPKc>
		result = IS_INCOMMING_CALL ;
 8009488:	2302      	movs	r3, #2
 800948a:	617b      	str	r3, [r7, #20]
	}

	return result ;
 800948c:	697b      	ldr	r3, [r7, #20]
}
 800948e:	0018      	movs	r0, r3
 8009490:	46bd      	mov	sp, r7
 8009492:	b006      	add	sp, #24
 8009494:	bd80      	pop	{r7, pc}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	0800f408 	.word	0x0800f408
 800949c:	0800f40c 	.word	0x0800f40c
 80094a0:	0800f414 	.word	0x0800f414
 80094a4:	20001d04 	.word	0x20001d04
 80094a8:	0800f424 	.word	0x0800f424

080094ac <_ZN7sim7x007readSMSEv>:


/*____________________________________________________________________________________________________________________________*/
char* sim7x00::readSMS(){
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]

	// Reset lại bộ nhớ SMS
	memset(SMSContent, 0, RX_DATA_MAX) ;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	24fb      	movs	r4, #251	; 0xfb
 80094b8:	00e4      	lsls	r4, r4, #3
 80094ba:	1918      	adds	r0, r3, r4
 80094bc:	23fa      	movs	r3, #250	; 0xfa
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	001a      	movs	r2, r3
 80094c2:	2100      	movs	r1, #0
 80094c4:	f001 fce5 	bl	800ae92 <memset>

	// Selects the memory
	sendATcommand("AT+CPMS=\"SM\",\"SM\",\"SM\"\r", "OK", 3000);
 80094c8:	4b15      	ldr	r3, [pc, #84]	; (8009520 <_ZN7sim7x007readSMSEv+0x74>)
 80094ca:	4a16      	ldr	r2, [pc, #88]	; (8009524 <_ZN7sim7x007readSMSEv+0x78>)
 80094cc:	4916      	ldr	r1, [pc, #88]	; (8009528 <_ZN7sim7x007readSMSEv+0x7c>)
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff fc64 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>

	// Gửi lệnh đọc SMS mới nhất đó
	sendATcommand("AT+CMGR=0\r", "OK", 5000);
 80094d4:	4b15      	ldr	r3, [pc, #84]	; (800952c <_ZN7sim7x007readSMSEv+0x80>)
 80094d6:	4a13      	ldr	r2, [pc, #76]	; (8009524 <_ZN7sim7x007readSMSEv+0x78>)
 80094d8:	4915      	ldr	r1, [pc, #84]	; (8009530 <_ZN7sim7x007readSMSEv+0x84>)
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff fc5e 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>

	// Copy nội dung lệnh từ bộ đệm đọc được sang biến SMSContent để xử lý
	strcpy(SMSContent, rxData) ;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	191a      	adds	r2, r3, r4
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3302      	adds	r3, #2
 80094e8:	0019      	movs	r1, r3
 80094ea:	0010      	movs	r0, r2
 80094ec:	f002 fc22 	bl	800bd34 <strcpy>

	// debug nội dung SMS để kiểm tra
	SIM_DEBUG.println(SMSContent) ;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	191a      	adds	r2, r3, r4
 80094f4:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <_ZN7sim7x007readSMSEv+0x88>)
 80094f6:	0011      	movs	r1, r2
 80094f8:	0018      	movs	r0, r3
 80094fa:	f7ff f8cd 	bl	8008698 <_ZN5debug7printlnEPKc>

	// check xong rồi thì xóa tin nhắn đó đi
	sendATcommand("AT+CMGD=,4\r", "OK", 1000);
 80094fe:	23fa      	movs	r3, #250	; 0xfa
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4a08      	ldr	r2, [pc, #32]	; (8009524 <_ZN7sim7x007readSMSEv+0x78>)
 8009504:	490c      	ldr	r1, [pc, #48]	; (8009538 <_ZN7sim7x007readSMSEv+0x8c>)
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7ff fc48 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>

	return SMSContent;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	22fb      	movs	r2, #251	; 0xfb
 8009510:	00d2      	lsls	r2, r2, #3
 8009512:	4694      	mov	ip, r2
 8009514:	4463      	add	r3, ip

}
 8009516:	0018      	movs	r0, r3
 8009518:	46bd      	mov	sp, r7
 800951a:	b003      	add	sp, #12
 800951c:	bd90      	pop	{r4, r7, pc}
 800951e:	46c0      	nop			; (mov r8, r8)
 8009520:	00000bb8 	.word	0x00000bb8
 8009524:	0800f290 	.word	0x0800f290
 8009528:	0800f438 	.word	0x0800f438
 800952c:	00001388 	.word	0x00001388
 8009530:	0800f450 	.word	0x0800f450
 8009534:	20001d04 	.word	0x20001d04
 8009538:	0800f2f8 	.word	0x0800f2f8

0800953c <_ZN7sim7x0022isAuthorizePhoneNumberEPKc>:


/*____________________________________________________________________________________________________________________________*/
bool sim7x00::isAuthorizePhoneNumber( const char *_SMScontent ){
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
	SIM_DEBUG.println("Authorizing phone number ... ") ;
 8009546:	4a1d      	ldr	r2, [pc, #116]	; (80095bc <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x80>)
 8009548:	4b1d      	ldr	r3, [pc, #116]	; (80095c0 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x84>)
 800954a:	0011      	movs	r1, r2
 800954c:	0018      	movs	r0, r3
 800954e:	f7ff f8a3 	bl	8008698 <_ZN5debug7printlnEPKc>

	bool result = 0 ;
 8009552:	230f      	movs	r3, #15
 8009554:	18fb      	adds	r3, r7, r3
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]

	// Bắt đầu kiểm tra số điện thoại cho phép
	for(int i = 0 ; i < MAX_PHONE_NUMBER_ALLOWED ; i++){
 800955a:	2300      	movs	r3, #0
 800955c:	60bb      	str	r3, [r7, #8]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b05      	cmp	r3, #5
 8009562:	dc12      	bgt.n	800958a <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x4e>
		if(  strstr(_SMScontent, phoneNumbersAllowed[i]) != NULL  ){
 8009564:	4b17      	ldr	r3, [pc, #92]	; (80095c4 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x88>)
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	0092      	lsls	r2, r2, #2
 800956a:	58d2      	ldr	r2, [r2, r3]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	0011      	movs	r1, r2
 8009570:	0018      	movs	r0, r3
 8009572:	f002 fbe7 	bl	800bd44 <strstr>
 8009576:	1e03      	subs	r3, r0, #0
 8009578:	d003      	beq.n	8009582 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x46>
			result = 1 ;
 800957a:	230f      	movs	r3, #15
 800957c:	18fb      	adds	r3, r7, r3
 800957e:	2201      	movs	r2, #1
 8009580:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < MAX_PHONE_NUMBER_ALLOWED ; i++){
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	3301      	adds	r3, #1
 8009586:	60bb      	str	r3, [r7, #8]
 8009588:	e7e9      	b.n	800955e <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x22>
		}
	}

	if(result == 1)
 800958a:	230f      	movs	r3, #15
 800958c:	18fb      	adds	r3, r7, r3
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x66>
		SIM_DEBUG.println("Phone number is accepted !" ) ;
 8009594:	4a0c      	ldr	r2, [pc, #48]	; (80095c8 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x8c>)
 8009596:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x84>)
 8009598:	0011      	movs	r1, r2
 800959a:	0018      	movs	r0, r3
 800959c:	f7ff f87c 	bl	8008698 <_ZN5debug7printlnEPKc>
 80095a0:	e005      	b.n	80095ae <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x72>
	else
		SIM_DEBUG.println("Phone number is invalid !" ) ;
 80095a2:	4a0a      	ldr	r2, [pc, #40]	; (80095cc <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x90>)
 80095a4:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x84>)
 80095a6:	0011      	movs	r1, r2
 80095a8:	0018      	movs	r0, r3
 80095aa:	f7ff f875 	bl	8008698 <_ZN5debug7printlnEPKc>

	return result ;
 80095ae:	230f      	movs	r3, #15
 80095b0:	18fb      	adds	r3, r7, r3
 80095b2:	781b      	ldrb	r3, [r3, #0]
}
 80095b4:	0018      	movs	r0, r3
 80095b6:	46bd      	mov	sp, r7
 80095b8:	b004      	add	sp, #16
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	0800f45c 	.word	0x0800f45c
 80095c0:	20001d04 	.word	0x20001d04
 80095c4:	2000000c 	.word	0x2000000c
 80095c8:	0800f47c 	.word	0x0800f47c
 80095cc:	0800f498 	.word	0x0800f498

080095d0 <_ZN7sim7x0018identifySMSRequestEPKc>:


/*____________________________________________________________________________________________________________________________*/
int sim7x00::identifySMSRequest( const char *_SMScontent ){
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
	SIM_DEBUG.println("Identifying SMS request content ... ") ;
 80095da:	4a37      	ldr	r2, [pc, #220]	; (80096b8 <_ZN7sim7x0018identifySMSRequestEPKc+0xe8>)
 80095dc:	4b37      	ldr	r3, [pc, #220]	; (80096bc <_ZN7sim7x0018identifySMSRequestEPKc+0xec>)
 80095de:	0011      	movs	r1, r2
 80095e0:	0018      	movs	r0, r3
 80095e2:	f7ff f859 	bl	8008698 <_ZN5debug7printlnEPKc>
	int result = IDLE ;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]

	for(int i = 0 ; i < MAX_WARNING_CODES ; i++){
 80095ea:	2300      	movs	r3, #0
 80095ec:	60bb      	str	r3, [r7, #8]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	dc42      	bgt.n	800967a <_ZN7sim7x0018identifySMSRequestEPKc+0xaa>

		// kiểm tra xem đã đúng cú pháp chưa
		if( strstr(_SMScontent, warningCodesAllowed[i]) != NULL ){
 80095f4:	4b32      	ldr	r3, [pc, #200]	; (80096c0 <_ZN7sim7x0018identifySMSRequestEPKc+0xf0>)
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	58d2      	ldr	r2, [r2, r3]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	0011      	movs	r1, r2
 8009600:	0018      	movs	r0, r3
 8009602:	f002 fb9f 	bl	800bd44 <strstr>
 8009606:	1e03      	subs	r3, r0, #0
 8009608:	d01d      	beq.n	8009646 <_ZN7sim7x0018identifySMSRequestEPKc+0x76>
			if     (i == 0 ) result = WARNING_LEVEL_1 ;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d102      	bne.n	8009616 <_ZN7sim7x0018identifySMSRequestEPKc+0x46>
 8009610:	2303      	movs	r3, #3
 8009612:	60fb      	str	r3, [r7, #12]
 8009614:	e02d      	b.n	8009672 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
			else if(i == 1 ) result = WARNING_LEVEL_2 ;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d102      	bne.n	8009622 <_ZN7sim7x0018identifySMSRequestEPKc+0x52>
 800961c:	2304      	movs	r3, #4
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	e027      	b.n	8009672 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
			else if(i == 2 ) result = WARNING_LEVEL_3 ;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d102      	bne.n	800962e <_ZN7sim7x0018identifySMSRequestEPKc+0x5e>
 8009628:	2305      	movs	r3, #5
 800962a:	60fb      	str	r3, [r7, #12]
 800962c:	e021      	b.n	8009672 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
			else if(i == 3 ) result = WARNING_LEVEL_4 ;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b03      	cmp	r3, #3
 8009632:	d102      	bne.n	800963a <_ZN7sim7x0018identifySMSRequestEPKc+0x6a>
 8009634:	2306      	movs	r3, #6
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	e01b      	b.n	8009672 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
			else if(i == 4 ) result = WARNING_LEVEL_5 ;
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2b04      	cmp	r3, #4
 800963e:	d118      	bne.n	8009672 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
 8009640:	2307      	movs	r3, #7
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	e015      	b.n	8009672 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>

		// kiểm tra xem có phải là stop không
		}else if( strstr(_SMScontent, stopWarningCodesAllowed) != NULL ){
 8009646:	4b1f      	ldr	r3, [pc, #124]	; (80096c4 <_ZN7sim7x0018identifySMSRequestEPKc+0xf4>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	0011      	movs	r1, r2
 800964e:	0018      	movs	r0, r3
 8009650:	f002 fb78 	bl	800bd44 <strstr>
 8009654:	1e03      	subs	r3, r0, #0
 8009656:	d002      	beq.n	800965e <_ZN7sim7x0018identifySMSRequestEPKc+0x8e>
			result = STOP_WARNING ;
 8009658:	2308      	movs	r3, #8
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	e009      	b.n	8009672 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
		}else if( strstr(_SMScontent, "ok") != NULL ){
 800965e:	4a1a      	ldr	r2, [pc, #104]	; (80096c8 <_ZN7sim7x0018identifySMSRequestEPKc+0xf8>)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	0011      	movs	r1, r2
 8009664:	0018      	movs	r0, r3
 8009666:	f002 fb6d 	bl	800bd44 <strstr>
 800966a:	1e03      	subs	r3, r0, #0
 800966c:	d001      	beq.n	8009672 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
			result = OK ;
 800966e:	230e      	movs	r3, #14
 8009670:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i < MAX_WARNING_CODES ; i++){
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	3301      	adds	r3, #1
 8009676:	60bb      	str	r3, [r7, #8]
 8009678:	e7b9      	b.n	80095ee <_ZN7sim7x0018identifySMSRequestEPKc+0x1e>
			// do nothing
			// Ngoài ra còn nhiều chức năng ngoài cảnh báo, như là add thêm số điện thoại, hẹn giờ cảnh báo ... to be continue
		}
	}

	if(result == WARNING_LEVEL_5  )
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2b07      	cmp	r3, #7
 800967e:	d106      	bne.n	800968e <_ZN7sim7x0018identifySMSRequestEPKc+0xbe>
		SIM_DEBUG.println("Datalogger was responded : " ) ;
 8009680:	4a12      	ldr	r2, [pc, #72]	; (80096cc <_ZN7sim7x0018identifySMSRequestEPKc+0xfc>)
 8009682:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <_ZN7sim7x0018identifySMSRequestEPKc+0xec>)
 8009684:	0011      	movs	r1, r2
 8009686:	0018      	movs	r0, r3
 8009688:	f7ff f806 	bl	8008698 <_ZN5debug7printlnEPKc>
 800968c:	e00f      	b.n	80096ae <_ZN7sim7x0018identifySMSRequestEPKc+0xde>
	else if(result == STOP_WARNING  )
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2b08      	cmp	r3, #8
 8009692:	d106      	bne.n	80096a2 <_ZN7sim7x0018identifySMSRequestEPKc+0xd2>
		SIM_DEBUG.println("Datalogger was responded : " ) ;
 8009694:	4a0d      	ldr	r2, [pc, #52]	; (80096cc <_ZN7sim7x0018identifySMSRequestEPKc+0xfc>)
 8009696:	4b09      	ldr	r3, [pc, #36]	; (80096bc <_ZN7sim7x0018identifySMSRequestEPKc+0xec>)
 8009698:	0011      	movs	r1, r2
 800969a:	0018      	movs	r0, r3
 800969c:	f7fe fffc 	bl	8008698 <_ZN5debug7printlnEPKc>
 80096a0:	e005      	b.n	80096ae <_ZN7sim7x0018identifySMSRequestEPKc+0xde>
	else
		SIM_DEBUG.println("Datalogger was not respond !!!\n" ) ;
 80096a2:	4a0b      	ldr	r2, [pc, #44]	; (80096d0 <_ZN7sim7x0018identifySMSRequestEPKc+0x100>)
 80096a4:	4b05      	ldr	r3, [pc, #20]	; (80096bc <_ZN7sim7x0018identifySMSRequestEPKc+0xec>)
 80096a6:	0011      	movs	r1, r2
 80096a8:	0018      	movs	r0, r3
 80096aa:	f7fe fff5 	bl	8008698 <_ZN5debug7printlnEPKc>

	// Ngoài ra còn nhiều chức năng ngoài cảnh báo, như là add thêm số điện thoại, hẹn giờ cảnh báo ... to be continue

	return result ;
 80096ae:	68fb      	ldr	r3, [r7, #12]
}
 80096b0:	0018      	movs	r0, r3
 80096b2:	46bd      	mov	sp, r7
 80096b4:	b004      	add	sp, #16
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	0800f4b4 	.word	0x0800f4b4
 80096bc:	20001d04 	.word	0x20001d04
 80096c0:	20000024 	.word	0x20000024
 80096c4:	20000038 	.word	0x20000038
 80096c8:	0800f4dc 	.word	0x0800f4dc
 80096cc:	0800f4e0 	.word	0x0800f4e0
 80096d0:	0800f4fc 	.word	0x0800f4fc

080096d4 <_ZN7sim7x008MQTTstopEv>:

/*____________________________________________________________________________________________________________________________*/
void sim7x00::MQTTstop() {
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
	sendATcommand("AT+CMQTTDISC=0,120\r", "CMQTTDISC: 0,0", 2000 ) ;
 80096dc:	23fa      	movs	r3, #250	; 0xfa
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	4a0a      	ldr	r2, [pc, #40]	; (800970c <_ZN7sim7x008MQTTstopEv+0x38>)
 80096e2:	490b      	ldr	r1, [pc, #44]	; (8009710 <_ZN7sim7x008MQTTstopEv+0x3c>)
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff fb59 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>

	// Release client first
	sendATcommand("AT+CMQTTREL=0\r", "OK", 5000 ) ;
 80096ea:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <_ZN7sim7x008MQTTstopEv+0x40>)
 80096ec:	4a0a      	ldr	r2, [pc, #40]	; (8009718 <_ZN7sim7x008MQTTstopEv+0x44>)
 80096ee:	490b      	ldr	r1, [pc, #44]	; (800971c <_ZN7sim7x008MQTTstopEv+0x48>)
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff fb53 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>

	sendATcommand( "AT+CMQTTSTOP\r", "OK", 2000 ) ;
 80096f6:	23fa      	movs	r3, #250	; 0xfa
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	4a07      	ldr	r2, [pc, #28]	; (8009718 <_ZN7sim7x008MQTTstopEv+0x44>)
 80096fc:	4908      	ldr	r1, [pc, #32]	; (8009720 <_ZN7sim7x008MQTTstopEv+0x4c>)
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff fb4c 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
}
 8009704:	46c0      	nop			; (mov r8, r8)
 8009706:	46bd      	mov	sp, r7
 8009708:	b002      	add	sp, #8
 800970a:	bd80      	pop	{r7, pc}
 800970c:	0800f51c 	.word	0x0800f51c
 8009710:	0800f52c 	.word	0x0800f52c
 8009714:	00001388 	.word	0x00001388
 8009718:	0800f290 	.word	0x0800f290
 800971c:	0800f540 	.word	0x0800f540
 8009720:	0800f550 	.word	0x0800f550

08009724 <_ZN7sim7x0011MQTTpublishEPKcS1_ii>:


/*____________________________________________________________________________________________________________________________*/
bool sim7x00::MQTTpublish ( const char* _topic, const char* _payload, int _QoS, int _timeOut ) {
 8009724:	b590      	push	{r4, r7, lr}
 8009726:	b09f      	sub	sp, #124	; 0x7c
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	603b      	str	r3, [r7, #0]

	if ( _timeOut < 1000 || _timeOut > 60000 ) _timeOut = 5000 ;
 8009732:	2380      	movs	r3, #128	; 0x80
 8009734:	2208      	movs	r2, #8
 8009736:	4694      	mov	ip, r2
 8009738:	44bc      	add	ip, r7
 800973a:	4463      	add	r3, ip
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a50      	ldr	r2, [pc, #320]	; (8009880 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x15c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	dd08      	ble.n	8009756 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x32>
 8009744:	2380      	movs	r3, #128	; 0x80
 8009746:	2208      	movs	r2, #8
 8009748:	4694      	mov	ip, r2
 800974a:	44bc      	add	ip, r7
 800974c:	4463      	add	r3, ip
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a4c      	ldr	r2, [pc, #304]	; (8009884 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x160>)
 8009752:	4293      	cmp	r3, r2
 8009754:	dd06      	ble.n	8009764 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x40>
 8009756:	4b4c      	ldr	r3, [pc, #304]	; (8009888 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x164>)
 8009758:	2280      	movs	r2, #128	; 0x80
 800975a:	2108      	movs	r1, #8
 800975c:	468c      	mov	ip, r1
 800975e:	44bc      	add	ip, r7
 8009760:	4462      	add	r2, ip
 8009762:	6013      	str	r3, [r2, #0]
	// Set topic :
	int topic_Len = strlen ( _topic ) ;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	0018      	movs	r0, r3
 8009768:	f7f6 fcce 	bl	8000108 <strlen>
 800976c:	0003      	movs	r3, r0
 800976e:	677b      	str	r3, [r7, #116]	; 0x74
	char cmdTopic [30] = {0} ;
 8009770:	2450      	movs	r4, #80	; 0x50
 8009772:	193b      	adds	r3, r7, r4
 8009774:	0018      	movs	r0, r3
 8009776:	231e      	movs	r3, #30
 8009778:	001a      	movs	r2, r3
 800977a:	2100      	movs	r1, #0
 800977c:	f001 fb89 	bl	800ae92 <memset>
	sprintf ( cmdTopic, "AT+CMQTTTOPIC=0,%d\r", topic_Len ) ;
 8009780:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009782:	4942      	ldr	r1, [pc, #264]	; (800988c <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x168>)
 8009784:	193b      	adds	r3, r7, r4
 8009786:	0018      	movs	r0, r3
 8009788:	f002 faa6 	bl	800bcd8 <siprintf>
	if ( sendATcommand ( cmdTopic, ">", 5000 ) == false ) return 0 ;
 800978c:	4b3e      	ldr	r3, [pc, #248]	; (8009888 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x164>)
 800978e:	4a40      	ldr	r2, [pc, #256]	; (8009890 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x16c>)
 8009790:	1939      	adds	r1, r7, r4
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7ff fb02 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8009798:	0003      	movs	r3, r0
 800979a:	001a      	movs	r2, r3
 800979c:	2301      	movs	r3, #1
 800979e:	4053      	eors	r3, r2
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x86>
 80097a6:	2300      	movs	r3, #0
 80097a8:	e065      	b.n	8009876 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x152>

	if ( sendATcommand ( _topic, "OK", 2000 ) == false ) return 0 ;
 80097aa:	23fa      	movs	r3, #250	; 0xfa
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	4a39      	ldr	r2, [pc, #228]	; (8009894 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x170>)
 80097b0:	68b9      	ldr	r1, [r7, #8]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f7ff faf2 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 80097b8:	0003      	movs	r3, r0
 80097ba:	001a      	movs	r2, r3
 80097bc:	2301      	movs	r3, #1
 80097be:	4053      	eors	r3, r2
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0xa6>
 80097c6:	2300      	movs	r3, #0
 80097c8:	e055      	b.n	8009876 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x152>

	// Set payload :
	int payload_Len = strlen ( _payload ) ;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	0018      	movs	r0, r3
 80097ce:	f7f6 fc9b 	bl	8000108 <strlen>
 80097d2:	0003      	movs	r3, r0
 80097d4:	673b      	str	r3, [r7, #112]	; 0x70
	char cmdPayload [30] = {0} ;
 80097d6:	2430      	movs	r4, #48	; 0x30
 80097d8:	193b      	adds	r3, r7, r4
 80097da:	0018      	movs	r0, r3
 80097dc:	231e      	movs	r3, #30
 80097de:	001a      	movs	r2, r3
 80097e0:	2100      	movs	r1, #0
 80097e2:	f001 fb56 	bl	800ae92 <memset>
	sprintf ( cmdPayload, "AT+CMQTTPAYLOAD=0,%d\r", payload_Len ) ;
 80097e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80097e8:	492b      	ldr	r1, [pc, #172]	; (8009898 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x174>)
 80097ea:	193b      	adds	r3, r7, r4
 80097ec:	0018      	movs	r0, r3
 80097ee:	f002 fa73 	bl	800bcd8 <siprintf>
	if ( sendATcommand ( cmdPayload, ">", 5000 ) == false ) return 0 ;
 80097f2:	4b25      	ldr	r3, [pc, #148]	; (8009888 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x164>)
 80097f4:	4a26      	ldr	r2, [pc, #152]	; (8009890 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x16c>)
 80097f6:	1939      	adds	r1, r7, r4
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7ff facf 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 80097fe:	0003      	movs	r3, r0
 8009800:	001a      	movs	r2, r3
 8009802:	2301      	movs	r3, #1
 8009804:	4053      	eors	r3, r2
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0xec>
 800980c:	2300      	movs	r3, #0
 800980e:	e032      	b.n	8009876 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x152>

	if ( sendATcommand ( _payload, "OK", 2000 ) == false ) return 0 ;
 8009810:	23fa      	movs	r3, #250	; 0xfa
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	4a1f      	ldr	r2, [pc, #124]	; (8009894 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x170>)
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f7ff fabf 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 800981e:	0003      	movs	r3, r0
 8009820:	001a      	movs	r2, r3
 8009822:	2301      	movs	r3, #1
 8009824:	4053      	eors	r3, r2
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x10c>
 800982c:	2300      	movs	r3, #0
 800982e:	e022      	b.n	8009876 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x152>

	// Publish lên broker
	char cmdPub [30] = {0} ;
 8009830:	2410      	movs	r4, #16
 8009832:	193b      	adds	r3, r7, r4
 8009834:	0018      	movs	r0, r3
 8009836:	231e      	movs	r3, #30
 8009838:	001a      	movs	r2, r3
 800983a:	2100      	movs	r1, #0
 800983c:	f001 fb29 	bl	800ae92 <memset>
	sprintf ( cmdPub, "AT+CMQTTPUB=0,%d,120\r", _QoS ) ;
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	4916      	ldr	r1, [pc, #88]	; (800989c <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x178>)
 8009844:	193b      	adds	r3, r7, r4
 8009846:	0018      	movs	r0, r3
 8009848:	f002 fa46 	bl	800bcd8 <siprintf>
	if ( sendATcommand ( cmdPub, "CMQTTPUB: 0,0", _timeOut ) == false ) return 0 ;
 800984c:	2380      	movs	r3, #128	; 0x80
 800984e:	2208      	movs	r2, #8
 8009850:	4694      	mov	ip, r2
 8009852:	44bc      	add	ip, r7
 8009854:	4463      	add	r3, ip
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a11      	ldr	r2, [pc, #68]	; (80098a0 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x17c>)
 800985a:	1939      	adds	r1, r7, r4
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f7ff fa9d 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8009862:	0003      	movs	r3, r0
 8009864:	001a      	movs	r2, r3
 8009866:	2301      	movs	r3, #1
 8009868:	4053      	eors	r3, r2
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x150>
 8009870:	2300      	movs	r3, #0
 8009872:	e000      	b.n	8009876 <_ZN7sim7x0011MQTTpublishEPKcS1_ii+0x152>

	return 1 ;
 8009874:	2301      	movs	r3, #1
}
 8009876:	0018      	movs	r0, r3
 8009878:	46bd      	mov	sp, r7
 800987a:	b01f      	add	sp, #124	; 0x7c
 800987c:	bd90      	pop	{r4, r7, pc}
 800987e:	46c0      	nop			; (mov r8, r8)
 8009880:	000003e7 	.word	0x000003e7
 8009884:	0000ea60 	.word	0x0000ea60
 8009888:	00001388 	.word	0x00001388
 800988c:	0800f560 	.word	0x0800f560
 8009890:	0800f574 	.word	0x0800f574
 8009894:	0800f290 	.word	0x0800f290
 8009898:	0800f578 	.word	0x0800f578
 800989c:	0800f590 	.word	0x0800f590
 80098a0:	0800f5a8 	.word	0x0800f5a8

080098a4 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_>:
/*____________________________________________________________________________________________________________________________*/
bool sim7x00::MQTTlogin ( const char* _clientID,
				 	 	  const char* _willTopic,
					      const char* _willMessage,
						  const char* _brokerAddr,
						  const char* _port ) {
 80098a4:	b5b0      	push	{r4, r5, r7, lr}
 80098a6:	b0b2      	sub	sp, #200	; 0xc8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	603b      	str	r3, [r7, #0]

	SIM_DEBUG.println("Login mqtt... ") ;
 80098b2:	4a6c      	ldr	r2, [pc, #432]	; (8009a64 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1c0>)
 80098b4:	4b6c      	ldr	r3, [pc, #432]	; (8009a68 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1c4>)
 80098b6:	0011      	movs	r1, r2
 80098b8:	0018      	movs	r0, r3
 80098ba:	f7fe feed 	bl	8008698 <_ZN5debug7printlnEPKc>
	if ( sendATcommand ( "AT+CMQTTSTART\r", "CMQTTSTART: 0", 200 ) == false ) {
 80098be:	4a6b      	ldr	r2, [pc, #428]	; (8009a6c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1c8>)
 80098c0:	496b      	ldr	r1, [pc, #428]	; (8009a70 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1cc>)
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	23c8      	movs	r3, #200	; 0xc8
 80098c6:	f7ff fa69 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 80098ca:	0003      	movs	r3, r0
 80098cc:	001a      	movs	r2, r3
 80098ce:	2301      	movs	r3, #1
 80098d0:	4053      	eors	r3, r2
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d009      	beq.n	80098ec <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x48>
		MQTTstop() ;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	0018      	movs	r0, r3
 80098dc:	f7ff fefa 	bl	80096d4 <_ZN7sim7x008MQTTstopEv>
		sendATcommand ( "AT+CMQTTSTART\r", "CMQTTSTART: 0", 200 ) ;
 80098e0:	4a62      	ldr	r2, [pc, #392]	; (8009a6c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1c8>)
 80098e2:	4963      	ldr	r1, [pc, #396]	; (8009a70 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1cc>)
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	23c8      	movs	r3, #200	; 0xc8
 80098e8:	f7ff fa58 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
	}

	// Set client ID
	sendATcommand ( "AT+CMQTTREL=0\r", "OK", 200 ) ; // xóa client ID trước đó ở vị trí 0
 80098ec:	4a61      	ldr	r2, [pc, #388]	; (8009a74 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1d0>)
 80098ee:	4962      	ldr	r1, [pc, #392]	; (8009a78 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1d4>)
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	23c8      	movs	r3, #200	; 0xc8
 80098f4:	f7ff fa52 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
	char cmdClient[50] = {0} ;
 80098f8:	248c      	movs	r4, #140	; 0x8c
 80098fa:	193b      	adds	r3, r7, r4
 80098fc:	0018      	movs	r0, r3
 80098fe:	2332      	movs	r3, #50	; 0x32
 8009900:	001a      	movs	r2, r3
 8009902:	2100      	movs	r1, #0
 8009904:	f001 fac5 	bl	800ae92 <memset>
	sprintf ( cmdClient, "AT+CMQTTACCQ=0,\"%s\"\r", _clientID ) ;
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	495c      	ldr	r1, [pc, #368]	; (8009a7c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1d8>)
 800990c:	193b      	adds	r3, r7, r4
 800990e:	0018      	movs	r0, r3
 8009910:	f002 f9e2 	bl	800bcd8 <siprintf>
	if ( sendATcommand ( cmdClient, "OK", 200 ) == false ) return 0  ;
 8009914:	4a57      	ldr	r2, [pc, #348]	; (8009a74 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1d0>)
 8009916:	1939      	adds	r1, r7, r4
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	23c8      	movs	r3, #200	; 0xc8
 800991c:	f7ff fa3e 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8009920:	0003      	movs	r3, r0
 8009922:	001a      	movs	r2, r3
 8009924:	2301      	movs	r3, #1
 8009926:	4053      	eors	r3, r2
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x8e>
 800992e:	2300      	movs	r3, #0
 8009930:	e094      	b.n	8009a5c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1b8>

	// Set will topic
	int willTopic_Len = strlen ( _willTopic ) ;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	0018      	movs	r0, r3
 8009936:	f7f6 fbe7 	bl	8000108 <strlen>
 800993a:	0003      	movs	r3, r0
 800993c:	25c4      	movs	r5, #196	; 0xc4
 800993e:	197a      	adds	r2, r7, r5
 8009940:	6013      	str	r3, [r2, #0]
	char cmdWillTopic[30] = {0} ;
 8009942:	246c      	movs	r4, #108	; 0x6c
 8009944:	193b      	adds	r3, r7, r4
 8009946:	0018      	movs	r0, r3
 8009948:	231e      	movs	r3, #30
 800994a:	001a      	movs	r2, r3
 800994c:	2100      	movs	r1, #0
 800994e:	f001 faa0 	bl	800ae92 <memset>
	sprintf ( cmdWillTopic, "AT+CMQTTWILLTOPIC=0,%d\r", willTopic_Len ) ;
 8009952:	197b      	adds	r3, r7, r5
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	494a      	ldr	r1, [pc, #296]	; (8009a80 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1dc>)
 8009958:	193b      	adds	r3, r7, r4
 800995a:	0018      	movs	r0, r3
 800995c:	f002 f9bc 	bl	800bcd8 <siprintf>
	if ( sendATcommand ( cmdWillTopic, ">", 1000 ) == false ) return 0  ;
 8009960:	23fa      	movs	r3, #250	; 0xfa
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4a47      	ldr	r2, [pc, #284]	; (8009a84 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1e0>)
 8009966:	1939      	adds	r1, r7, r4
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f7ff fa17 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 800996e:	0003      	movs	r3, r0
 8009970:	001a      	movs	r2, r3
 8009972:	2301      	movs	r3, #1
 8009974:	4053      	eors	r3, r2
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0xdc>
 800997c:	2300      	movs	r3, #0
 800997e:	e06d      	b.n	8009a5c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1b8>
	if ( sendATcommand ( _willTopic, "OK", 3000 ) == false ) return 0  ;
 8009980:	4b41      	ldr	r3, [pc, #260]	; (8009a88 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1e4>)
 8009982:	4a3c      	ldr	r2, [pc, #240]	; (8009a74 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1d0>)
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f7ff fa08 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 800998c:	0003      	movs	r3, r0
 800998e:	001a      	movs	r2, r3
 8009990:	2301      	movs	r3, #1
 8009992:	4053      	eors	r3, r2
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0xfa>
 800999a:	2300      	movs	r3, #0
 800999c:	e05e      	b.n	8009a5c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1b8>

	// Set will message và QoS = 2
	int willMsg_Len = strlen ( _willMessage ) ;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	0018      	movs	r0, r3
 80099a2:	f7f6 fbb1 	bl	8000108 <strlen>
 80099a6:	0003      	movs	r3, r0
 80099a8:	25c0      	movs	r5, #192	; 0xc0
 80099aa:	197a      	adds	r2, r7, r5
 80099ac:	6013      	str	r3, [r2, #0]
	char cmdWillMsg[30] = {0} ;
 80099ae:	244c      	movs	r4, #76	; 0x4c
 80099b0:	193b      	adds	r3, r7, r4
 80099b2:	0018      	movs	r0, r3
 80099b4:	231e      	movs	r3, #30
 80099b6:	001a      	movs	r2, r3
 80099b8:	2100      	movs	r1, #0
 80099ba:	f001 fa6a 	bl	800ae92 <memset>
	sprintf ( cmdWillMsg, "AT+CMQTTWILLMSG=0,%d,2\r", willMsg_Len ) ;
 80099be:	197b      	adds	r3, r7, r5
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4932      	ldr	r1, [pc, #200]	; (8009a8c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1e8>)
 80099c4:	193b      	adds	r3, r7, r4
 80099c6:	0018      	movs	r0, r3
 80099c8:	f002 f986 	bl	800bcd8 <siprintf>
	if ( sendATcommand ( cmdWillMsg, ">", 1000 ) == false ) return 0  ;
 80099cc:	23fa      	movs	r3, #250	; 0xfa
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4a2c      	ldr	r2, [pc, #176]	; (8009a84 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1e0>)
 80099d2:	1939      	adds	r1, r7, r4
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f7ff f9e1 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 80099da:	0003      	movs	r3, r0
 80099dc:	001a      	movs	r2, r3
 80099de:	2301      	movs	r3, #1
 80099e0:	4053      	eors	r3, r2
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x148>
 80099e8:	2300      	movs	r3, #0
 80099ea:	e037      	b.n	8009a5c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1b8>
	if ( sendATcommand ( _willMessage, "OK", 1000 ) == false ) return 0  ;
 80099ec:	23fa      	movs	r3, #250	; 0xfa
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4a20      	ldr	r2, [pc, #128]	; (8009a74 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1d0>)
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7ff f9d1 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 80099fa:	0003      	movs	r3, r0
 80099fc:	001a      	movs	r2, r3
 80099fe:	2301      	movs	r3, #1
 8009a00:	4053      	eors	r3, r2
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x168>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	e027      	b.n	8009a5c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1b8>

	// Now connect to broker server :
	char cmdConnect[60] = {0} ;
 8009a0c:	2410      	movs	r4, #16
 8009a0e:	193b      	adds	r3, r7, r4
 8009a10:	0018      	movs	r0, r3
 8009a12:	233c      	movs	r3, #60	; 0x3c
 8009a14:	001a      	movs	r2, r3
 8009a16:	2100      	movs	r1, #0
 8009a18:	f001 fa3b 	bl	800ae92 <memset>
	sprintf ( cmdConnect, "AT+CMQTTCONNECT=0,\"tcp://%s:%s\",60,1\r", _brokerAddr, _port ) ;
 8009a1c:	23d4      	movs	r3, #212	; 0xd4
 8009a1e:	2208      	movs	r2, #8
 8009a20:	4694      	mov	ip, r2
 8009a22:	44bc      	add	ip, r7
 8009a24:	4463      	add	r3, ip
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	22d0      	movs	r2, #208	; 0xd0
 8009a2a:	2108      	movs	r1, #8
 8009a2c:	468c      	mov	ip, r1
 8009a2e:	44bc      	add	ip, r7
 8009a30:	4462      	add	r2, ip
 8009a32:	6812      	ldr	r2, [r2, #0]
 8009a34:	4916      	ldr	r1, [pc, #88]	; (8009a90 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1ec>)
 8009a36:	1938      	adds	r0, r7, r4
 8009a38:	f002 f94e 	bl	800bcd8 <siprintf>
	if ( sendATcommand ( cmdConnect, "CMQTTCONNECT: 0,0", 30000 ) == false ) return 0  ;
 8009a3c:	4b15      	ldr	r3, [pc, #84]	; (8009a94 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1f0>)
 8009a3e:	4a16      	ldr	r2, [pc, #88]	; (8009a98 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1f4>)
 8009a40:	1939      	adds	r1, r7, r4
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f7ff f9aa 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8009a48:	0003      	movs	r3, r0
 8009a4a:	001a      	movs	r2, r3
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	4053      	eors	r3, r2
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1b6>
 8009a56:	2300      	movs	r3, #0
 8009a58:	e000      	b.n	8009a5c <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_+0x1b8>

	return true ;
 8009a5a:	2301      	movs	r3, #1
}
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	b032      	add	sp, #200	; 0xc8
 8009a62:	bdb0      	pop	{r4, r5, r7, pc}
 8009a64:	0800f5b8 	.word	0x0800f5b8
 8009a68:	20001d04 	.word	0x20001d04
 8009a6c:	0800f5c8 	.word	0x0800f5c8
 8009a70:	0800f5d8 	.word	0x0800f5d8
 8009a74:	0800f290 	.word	0x0800f290
 8009a78:	0800f540 	.word	0x0800f540
 8009a7c:	0800f5e8 	.word	0x0800f5e8
 8009a80:	0800f600 	.word	0x0800f600
 8009a84:	0800f574 	.word	0x0800f574
 8009a88:	00000bb8 	.word	0x00000bb8
 8009a8c:	0800f618 	.word	0x0800f618
 8009a90:	0800f630 	.word	0x0800f630
 8009a94:	00007530 	.word	0x00007530
 8009a98:	0800f658 	.word	0x0800f658

08009a9c <_ZN7sim7x006getCSQEv>:




/*____________________________________________________________________________________________________________________________*/
char* sim7x00::getCSQ() {
 8009a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a9e:	b08d      	sub	sp, #52	; 0x34
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	61f8      	str	r0, [r7, #28]

		static char result [3] = {0} ;
		sendATcommand( "AT\r", "OK", 100) ;
 8009aa4:	4a64      	ldr	r2, [pc, #400]	; (8009c38 <_ZN7sim7x006getCSQEv+0x19c>)
 8009aa6:	4965      	ldr	r1, [pc, #404]	; (8009c3c <_ZN7sim7x006getCSQEv+0x1a0>)
 8009aa8:	69f8      	ldr	r0, [r7, #28]
 8009aaa:	2364      	movs	r3, #100	; 0x64
 8009aac:	f7ff f976 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>

		// Bắt đầu lấy dữ liệu:
		if ( sendATcommand( "AT+CSQ\r" , "OK", 2000) == true ) {
 8009ab0:	23fa      	movs	r3, #250	; 0xfa
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	4a60      	ldr	r2, [pc, #384]	; (8009c38 <_ZN7sim7x006getCSQEv+0x19c>)
 8009ab6:	4962      	ldr	r1, [pc, #392]	; (8009c40 <_ZN7sim7x006getCSQEv+0x1a4>)
 8009ab8:	69f8      	ldr	r0, [r7, #28]
 8009aba:	f7ff f96f 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8009abe:	1e03      	subs	r3, r0, #0
 8009ac0:	d100      	bne.n	8009ac4 <_ZN7sim7x006getCSQEv+0x28>
 8009ac2:	e0b3      	b.n	8009c2c <_ZN7sim7x006getCSQEv+0x190>
					}

					break ;
				}
				else temp [i] = data [i+6] ;
			}
 8009ac4:	466b      	mov	r3, sp
 8009ac6:	61bb      	str	r3, [r7, #24]
			char data [ strlen( strstr( rxData, "+CSQ:") ) ] = {0} ;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	3302      	adds	r3, #2
 8009acc:	4a5d      	ldr	r2, [pc, #372]	; (8009c44 <_ZN7sim7x006getCSQEv+0x1a8>)
 8009ace:	0011      	movs	r1, r2
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f002 f937 	bl	800bd44 <strstr>
 8009ad6:	0003      	movs	r3, r0
 8009ad8:	0018      	movs	r0, r3
 8009ada:	f7f6 fb15 	bl	8000108 <strlen>
 8009ade:	0003      	movs	r3, r0
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ae4:	001a      	movs	r2, r3
 8009ae6:	3201      	adds	r2, #1
 8009ae8:	60ba      	str	r2, [r7, #8]
 8009aea:	2200      	movs	r2, #0
 8009aec:	60fa      	str	r2, [r7, #12]
 8009aee:	68b8      	ldr	r0, [r7, #8]
 8009af0:	68f9      	ldr	r1, [r7, #12]
 8009af2:	0002      	movs	r2, r0
 8009af4:	0f52      	lsrs	r2, r2, #29
 8009af6:	000e      	movs	r6, r1
 8009af8:	00f6      	lsls	r6, r6, #3
 8009afa:	617e      	str	r6, [r7, #20]
 8009afc:	697e      	ldr	r6, [r7, #20]
 8009afe:	4316      	orrs	r6, r2
 8009b00:	617e      	str	r6, [r7, #20]
 8009b02:	0002      	movs	r2, r0
 8009b04:	00d2      	lsls	r2, r2, #3
 8009b06:	613a      	str	r2, [r7, #16]
 8009b08:	001a      	movs	r2, r3
 8009b0a:	3201      	adds	r2, #1
 8009b0c:	603a      	str	r2, [r7, #0]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	607a      	str	r2, [r7, #4]
 8009b12:	6838      	ldr	r0, [r7, #0]
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	0002      	movs	r2, r0
 8009b18:	0f52      	lsrs	r2, r2, #29
 8009b1a:	000e      	movs	r6, r1
 8009b1c:	00f5      	lsls	r5, r6, #3
 8009b1e:	4315      	orrs	r5, r2
 8009b20:	0002      	movs	r2, r0
 8009b22:	00d4      	lsls	r4, r2, #3
 8009b24:	001a      	movs	r2, r3
 8009b26:	3201      	adds	r2, #1
 8009b28:	3207      	adds	r2, #7
 8009b2a:	08d2      	lsrs	r2, r2, #3
 8009b2c:	00d2      	lsls	r2, r2, #3
 8009b2e:	4669      	mov	r1, sp
 8009b30:	1a8a      	subs	r2, r1, r2
 8009b32:	4695      	mov	sp, r2
 8009b34:	466a      	mov	r2, sp
 8009b36:	3200      	adds	r2, #0
 8009b38:	627a      	str	r2, [r7, #36]	; 0x24
 8009b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	7011      	strb	r1, [r2, #0]
 8009b40:	3201      	adds	r2, #1
 8009b42:	3b01      	subs	r3, #1
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	db04      	blt.n	8009b52 <_ZN7sim7x006getCSQEv+0xb6>
 8009b48:	2100      	movs	r1, #0
 8009b4a:	7011      	strb	r1, [r2, #0]
 8009b4c:	3201      	adds	r2, #1
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	e7f8      	b.n	8009b44 <_ZN7sim7x006getCSQEv+0xa8>
			strcpy( data, strstr( rxData, "+CSQ:") ) ;
 8009b52:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	3302      	adds	r3, #2
 8009b58:	4a3a      	ldr	r2, [pc, #232]	; (8009c44 <_ZN7sim7x006getCSQEv+0x1a8>)
 8009b5a:	0011      	movs	r1, r2
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	f002 f8f1 	bl	800bd44 <strstr>
 8009b62:	0003      	movs	r3, r0
 8009b64:	0019      	movs	r1, r3
 8009b66:	0020      	movs	r0, r4
 8009b68:	f002 f8e4 	bl	800bd34 <strcpy>
			char temp[3] = {0} ;
 8009b6c:	2308      	movs	r3, #8
 8009b6e:	2218      	movs	r2, #24
 8009b70:	4694      	mov	ip, r2
 8009b72:	44bc      	add	ip, r7
 8009b74:	4463      	add	r3, ip
 8009b76:	0018      	movs	r0, r3
 8009b78:	2303      	movs	r3, #3
 8009b7a:	001a      	movs	r2, r3
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	f001 f988 	bl	800ae92 <memset>
			for ( int i = 0; i < 3; i++ ) {
 8009b82:	2300      	movs	r3, #0
 8009b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	dc4d      	bgt.n	8009c28 <_ZN7sim7x006getCSQEv+0x18c>
				if ( data[i+6] == ',' ){
 8009b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8e:	3306      	adds	r3, #6
 8009b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b92:	5cd3      	ldrb	r3, [r2, r3]
 8009b94:	2b2c      	cmp	r3, #44	; 0x2c
 8009b96:	d136      	bne.n	8009c06 <_ZN7sim7x006getCSQEv+0x16a>
					if ( i == 1 ) {
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d117      	bne.n	8009bce <_ZN7sim7x006getCSQEv+0x132>
						strcat( result, "00") ;
 8009b9e:	4b2a      	ldr	r3, [pc, #168]	; (8009c48 <_ZN7sim7x006getCSQEv+0x1ac>)
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f7f6 fab1 	bl	8000108 <strlen>
 8009ba6:	0003      	movs	r3, r0
 8009ba8:	001a      	movs	r2, r3
 8009baa:	4b27      	ldr	r3, [pc, #156]	; (8009c48 <_ZN7sim7x006getCSQEv+0x1ac>)
 8009bac:	18d2      	adds	r2, r2, r3
 8009bae:	4b27      	ldr	r3, [pc, #156]	; (8009c4c <_ZN7sim7x006getCSQEv+0x1b0>)
 8009bb0:	0010      	movs	r0, r2
 8009bb2:	0019      	movs	r1, r3
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	001a      	movs	r2, r3
 8009bb8:	f001 f962 	bl	800ae80 <memcpy>
						strcat( result, temp) ;
 8009bbc:	2308      	movs	r3, #8
 8009bbe:	2218      	movs	r2, #24
 8009bc0:	18ba      	adds	r2, r7, r2
 8009bc2:	18d2      	adds	r2, r2, r3
 8009bc4:	4b20      	ldr	r3, [pc, #128]	; (8009c48 <_ZN7sim7x006getCSQEv+0x1ac>)
 8009bc6:	0011      	movs	r1, r2
 8009bc8:	0018      	movs	r0, r3
 8009bca:	f002 f8a5 	bl	800bd18 <strcat>
					if ( i == 2 ) {
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d128      	bne.n	8009c26 <_ZN7sim7x006getCSQEv+0x18a>
						strcat( result, "0") ;
 8009bd4:	4b1c      	ldr	r3, [pc, #112]	; (8009c48 <_ZN7sim7x006getCSQEv+0x1ac>)
 8009bd6:	0018      	movs	r0, r3
 8009bd8:	f7f6 fa96 	bl	8000108 <strlen>
 8009bdc:	0003      	movs	r3, r0
 8009bde:	001a      	movs	r2, r3
 8009be0:	4b19      	ldr	r3, [pc, #100]	; (8009c48 <_ZN7sim7x006getCSQEv+0x1ac>)
 8009be2:	18d2      	adds	r2, r2, r3
 8009be4:	4b1a      	ldr	r3, [pc, #104]	; (8009c50 <_ZN7sim7x006getCSQEv+0x1b4>)
 8009be6:	0010      	movs	r0, r2
 8009be8:	0019      	movs	r1, r3
 8009bea:	2302      	movs	r3, #2
 8009bec:	001a      	movs	r2, r3
 8009bee:	f001 f947 	bl	800ae80 <memcpy>
						strcat( result, temp) ;
 8009bf2:	2308      	movs	r3, #8
 8009bf4:	2218      	movs	r2, #24
 8009bf6:	18ba      	adds	r2, r7, r2
 8009bf8:	18d2      	adds	r2, r2, r3
 8009bfa:	4b13      	ldr	r3, [pc, #76]	; (8009c48 <_ZN7sim7x006getCSQEv+0x1ac>)
 8009bfc:	0011      	movs	r1, r2
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f002 f88a 	bl	800bd18 <strcat>
					break ;
 8009c04:	e00f      	b.n	8009c26 <_ZN7sim7x006getCSQEv+0x18a>
				else temp [i] = data [i+6] ;
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	3306      	adds	r3, #6
 8009c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0c:	5cd1      	ldrb	r1, [r2, r3]
 8009c0e:	2308      	movs	r3, #8
 8009c10:	2218      	movs	r2, #24
 8009c12:	18ba      	adds	r2, r7, r2
 8009c14:	18d2      	adds	r2, r2, r3
 8009c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c18:	18d3      	adds	r3, r2, r3
 8009c1a:	1c0a      	adds	r2, r1, #0
 8009c1c:	701a      	strb	r2, [r3, #0]
			for ( int i = 0; i < 3; i++ ) {
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	3301      	adds	r3, #1
 8009c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c24:	e7af      	b.n	8009b86 <_ZN7sim7x006getCSQEv+0xea>
					break ;
 8009c26:	46c0      	nop			; (mov r8, r8)
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	469d      	mov	sp, r3
		}
		return result ;
 8009c2c:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <_ZN7sim7x006getCSQEv+0x1ac>)
	}
 8009c2e:	0018      	movs	r0, r3
 8009c30:	46bd      	mov	sp, r7
 8009c32:	b00d      	add	sp, #52	; 0x34
 8009c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c36:	46c0      	nop			; (mov r8, r8)
 8009c38:	0800f290 	.word	0x0800f290
 8009c3c:	0800f294 	.word	0x0800f294
 8009c40:	0800f66c 	.word	0x0800f66c
 8009c44:	0800f674 	.word	0x0800f674
 8009c48:	20002508 	.word	0x20002508
 8009c4c:	0800f67c 	.word	0x0800f67c
 8009c50:	0800f680 	.word	0x0800f680

08009c54 <_ZN7sim7x009getIntCSQEv>:



/*____________________________________________________________________________________________________________________________*/
int sim7x00::getIntCSQ(){
 8009c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c56:	b08d      	sub	sp, #52	; 0x34
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	61f8      	str	r0, [r7, #28]
		memcpy ( rxDataCpy, rxData, len ) ;

		for ( int i = 0; i < 2; i++ ) {
			csqData[i] = rxDataCpy[ i + 13 ] ;
		}
		return atoi(csqData);
 8009c5c:	466b      	mov	r3, sp
 8009c5e:	61bb      	str	r3, [r7, #24]
	sendATcommand( "AT+CSQ\r" , "OK", 2000) ;
 8009c60:	23fa      	movs	r3, #250	; 0xfa
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	4a34      	ldr	r2, [pc, #208]	; (8009d38 <_ZN7sim7x009getIntCSQEv+0xe4>)
 8009c66:	4935      	ldr	r1, [pc, #212]	; (8009d3c <_ZN7sim7x009getIntCSQEv+0xe8>)
 8009c68:	69f8      	ldr	r0, [r7, #28]
 8009c6a:	f7ff f897 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
		memset ( csqData, 0 , 3 ) ;
 8009c6e:	4b34      	ldr	r3, [pc, #208]	; (8009d40 <_ZN7sim7x009getIntCSQEv+0xec>)
 8009c70:	2203      	movs	r2, #3
 8009c72:	2100      	movs	r1, #0
 8009c74:	0018      	movs	r0, r3
 8009c76:	f001 f90c 	bl	800ae92 <memset>
		int len = strlen( rxData ) ;
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	3302      	adds	r3, #2
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f7f6 fa42 	bl	8000108 <strlen>
 8009c84:	0003      	movs	r3, r0
 8009c86:	62bb      	str	r3, [r7, #40]	; 0x28
		char rxDataCpy [len]  ;
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c8e:	001a      	movs	r2, r3
 8009c90:	3201      	adds	r2, #1
 8009c92:	60ba      	str	r2, [r7, #8]
 8009c94:	2200      	movs	r2, #0
 8009c96:	60fa      	str	r2, [r7, #12]
 8009c98:	68b8      	ldr	r0, [r7, #8]
 8009c9a:	68f9      	ldr	r1, [r7, #12]
 8009c9c:	0002      	movs	r2, r0
 8009c9e:	0f52      	lsrs	r2, r2, #29
 8009ca0:	000e      	movs	r6, r1
 8009ca2:	00f6      	lsls	r6, r6, #3
 8009ca4:	617e      	str	r6, [r7, #20]
 8009ca6:	697e      	ldr	r6, [r7, #20]
 8009ca8:	4316      	orrs	r6, r2
 8009caa:	617e      	str	r6, [r7, #20]
 8009cac:	0002      	movs	r2, r0
 8009cae:	00d2      	lsls	r2, r2, #3
 8009cb0:	613a      	str	r2, [r7, #16]
 8009cb2:	001a      	movs	r2, r3
 8009cb4:	3201      	adds	r2, #1
 8009cb6:	603a      	str	r2, [r7, #0]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	6838      	ldr	r0, [r7, #0]
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	0002      	movs	r2, r0
 8009cc2:	0f52      	lsrs	r2, r2, #29
 8009cc4:	000e      	movs	r6, r1
 8009cc6:	00f5      	lsls	r5, r6, #3
 8009cc8:	4315      	orrs	r5, r2
 8009cca:	0002      	movs	r2, r0
 8009ccc:	00d4      	lsls	r4, r2, #3
 8009cce:	3301      	adds	r3, #1
 8009cd0:	3307      	adds	r3, #7
 8009cd2:	08db      	lsrs	r3, r3, #3
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	466a      	mov	r2, sp
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	469d      	mov	sp, r3
 8009cdc:	466b      	mov	r3, sp
 8009cde:	3300      	adds	r3, #0
 8009ce0:	623b      	str	r3, [r7, #32]
		memset ( rxDataCpy, 0, len ) ;
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	0018      	movs	r0, r3
 8009cea:	f001 f8d2 	bl	800ae92 <memset>
		memcpy ( rxDataCpy, rxData, len ) ;
 8009cee:	6a38      	ldr	r0, [r7, #32]
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	3302      	adds	r3, #2
 8009cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cf6:	0019      	movs	r1, r3
 8009cf8:	f001 f8c2 	bl	800ae80 <memcpy>
		for ( int i = 0; i < 2; i++ ) {
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	dc0c      	bgt.n	8009d20 <_ZN7sim7x009getIntCSQEv+0xcc>
			csqData[i] = rxDataCpy[ i + 13 ] ;
 8009d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d08:	330d      	adds	r3, #13
 8009d0a:	6a3a      	ldr	r2, [r7, #32]
 8009d0c:	5cd1      	ldrb	r1, [r2, r3]
 8009d0e:	4a0c      	ldr	r2, [pc, #48]	; (8009d40 <_ZN7sim7x009getIntCSQEv+0xec>)
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	18d3      	adds	r3, r2, r3
 8009d14:	1c0a      	adds	r2, r1, #0
 8009d16:	701a      	strb	r2, [r3, #0]
		for ( int i = 0; i < 2; i++ ) {
 8009d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d1e:	e7ef      	b.n	8009d00 <_ZN7sim7x009getIntCSQEv+0xac>
		return atoi(csqData);
 8009d20:	4b07      	ldr	r3, [pc, #28]	; (8009d40 <_ZN7sim7x009getIntCSQEv+0xec>)
 8009d22:	0018      	movs	r0, r3
 8009d24:	f001 f872 	bl	800ae0c <atoi>
 8009d28:	0003      	movs	r3, r0
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	4695      	mov	sp, r2
}
 8009d2e:	0018      	movs	r0, r3
 8009d30:	46bd      	mov	sp, r7
 8009d32:	b00d      	add	sp, #52	; 0x34
 8009d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d36:	46c0      	nop			; (mov r8, r8)
 8009d38:	0800f290 	.word	0x0800f290
 8009d3c:	0800f66c 	.word	0x0800f66c
 8009d40:	2000250c 	.word	0x2000250c

08009d44 <_ZN7sim7x007sendSMSEPKcS1_>:


/*____________________________________________________________________________________________________________________________*/
bool sim7x00::sendSMS(const char* PhoneNumber,const char* Message){
 8009d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d46:	b099      	sub	sp, #100	; 0x64
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6278      	str	r0, [r7, #36]	; 0x24
 8009d4c:	6239      	str	r1, [r7, #32]
 8009d4e:	61fa      	str	r2, [r7, #28]

	bool answer = 0;
 8009d50:	2347      	movs	r3, #71	; 0x47
 8009d52:	2218      	movs	r2, #24
 8009d54:	4694      	mov	ip, r2
 8009d56:	44bc      	add	ip, r7
 8009d58:	4463      	add	r3, ip
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	701a      	strb	r2, [r3, #0]
	char aux_string[30];

	SIM_DEBUG.println("Sending short message... ");
 8009d5e:	4a6c      	ldr	r2, [pc, #432]	; (8009f10 <_ZN7sim7x007sendSMSEPKcS1_+0x1cc>)
 8009d60:	4b6c      	ldr	r3, [pc, #432]	; (8009f14 <_ZN7sim7x007sendSMSEPKcS1_+0x1d0>)
 8009d62:	0011      	movs	r1, r2
 8009d64:	0018      	movs	r0, r3
 8009d66:	f7fe fc97 	bl	8008698 <_ZN5debug7printlnEPKc>

	sendATcommand("AT+CMGF=1\r", "OK", 1000);    // sets the SMS mode to text
 8009d6a:	23fa      	movs	r3, #250	; 0xfa
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4a6a      	ldr	r2, [pc, #424]	; (8009f18 <_ZN7sim7x007sendSMSEPKcS1_+0x1d4>)
 8009d70:	496a      	ldr	r1, [pc, #424]	; (8009f1c <_ZN7sim7x007sendSMSEPKcS1_+0x1d8>)
 8009d72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d74:	f7ff f812 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>

	memset( aux_string, 0, 30 ) ;
 8009d78:	2618      	movs	r6, #24
 8009d7a:	2318      	movs	r3, #24
 8009d7c:	18fb      	adds	r3, r7, r3
 8009d7e:	199b      	adds	r3, r3, r6
 8009d80:	221e      	movs	r2, #30
 8009d82:	2100      	movs	r1, #0
 8009d84:	0018      	movs	r0, r3
 8009d86:	f001 f884 	bl	800ae92 <memset>
	strcat( aux_string, "AT+CMGS=\"" ) ;
 8009d8a:	2318      	movs	r3, #24
 8009d8c:	18fb      	adds	r3, r7, r3
 8009d8e:	199b      	adds	r3, r3, r6
 8009d90:	0018      	movs	r0, r3
 8009d92:	f7f6 f9b9 	bl	8000108 <strlen>
 8009d96:	0003      	movs	r3, r0
 8009d98:	001a      	movs	r2, r3
 8009d9a:	2318      	movs	r3, #24
 8009d9c:	18fb      	adds	r3, r7, r3
 8009d9e:	199b      	adds	r3, r3, r6
 8009da0:	189a      	adds	r2, r3, r2
 8009da2:	4b5f      	ldr	r3, [pc, #380]	; (8009f20 <_ZN7sim7x007sendSMSEPKcS1_+0x1dc>)
 8009da4:	0010      	movs	r0, r2
 8009da6:	0019      	movs	r1, r3
 8009da8:	230a      	movs	r3, #10
 8009daa:	001a      	movs	r2, r3
 8009dac:	f001 f868 	bl	800ae80 <memcpy>
	strcat( aux_string, PhoneNumber ) ;
 8009db0:	6a3a      	ldr	r2, [r7, #32]
 8009db2:	2318      	movs	r3, #24
 8009db4:	18fb      	adds	r3, r7, r3
 8009db6:	199b      	adds	r3, r3, r6
 8009db8:	0011      	movs	r1, r2
 8009dba:	0018      	movs	r0, r3
 8009dbc:	f001 ffac 	bl	800bd18 <strcat>
	strcat( aux_string, "\"\r" ) ;
 8009dc0:	2318      	movs	r3, #24
 8009dc2:	18fb      	adds	r3, r7, r3
 8009dc4:	199b      	adds	r3, r3, r6
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	f7f6 f99e 	bl	8000108 <strlen>
 8009dcc:	0003      	movs	r3, r0
 8009dce:	001a      	movs	r2, r3
 8009dd0:	2318      	movs	r3, #24
 8009dd2:	18fb      	adds	r3, r7, r3
 8009dd4:	199b      	adds	r3, r3, r6
 8009dd6:	189a      	adds	r2, r3, r2
 8009dd8:	4b52      	ldr	r3, [pc, #328]	; (8009f24 <_ZN7sim7x007sendSMSEPKcS1_+0x1e0>)
 8009dda:	0010      	movs	r0, r2
 8009ddc:	0019      	movs	r1, r3
 8009dde:	2303      	movs	r3, #3
 8009de0:	001a      	movs	r2, r3
 8009de2:	f001 f84d 	bl	800ae80 <memcpy>

	answer = sendATcommand(aux_string, ">", 3000);    // send the SMS number
 8009de6:	2347      	movs	r3, #71	; 0x47
 8009de8:	2218      	movs	r2, #24
 8009dea:	18ba      	adds	r2, r7, r2
 8009dec:	18d6      	adds	r6, r2, r3
 8009dee:	4b4e      	ldr	r3, [pc, #312]	; (8009f28 <_ZN7sim7x007sendSMSEPKcS1_+0x1e4>)
 8009df0:	4a4e      	ldr	r2, [pc, #312]	; (8009f2c <_ZN7sim7x007sendSMSEPKcS1_+0x1e8>)
 8009df2:	2118      	movs	r1, #24
 8009df4:	2018      	movs	r0, #24
 8009df6:	4684      	mov	ip, r0
 8009df8:	44bc      	add	ip, r7
 8009dfa:	4461      	add	r1, ip
 8009dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dfe:	f7fe ffcd 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8009e02:	0003      	movs	r3, r0
 8009e04:	7033      	strb	r3, [r6, #0]
	if (answer == 1){
 8009e06:	2347      	movs	r3, #71	; 0x47
 8009e08:	2218      	movs	r2, #24
 8009e0a:	4694      	mov	ip, r2
 8009e0c:	44bc      	add	ip, r7
 8009e0e:	4463      	add	r3, ip
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d06b      	beq.n	8009eee <_ZN7sim7x007sendSMSEPKcS1_+0x1aa>
		char msgPackage[SMSsize] ;
		char end[2] = { 0x1A, 0 } ;
		memset(msgPackage, 0, strlen(Message)+1 ) ;
		strcat( msgPackage, Message ) ;
		strcat( msgPackage, end ) ;
		answer = sendATcommand(msgPackage, "OK", 5000);
 8009e16:	466b      	mov	r3, sp
 8009e18:	001e      	movs	r6, r3
		int SMSsize = strlen(Message) + 1 ;
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	0018      	movs	r0, r3
 8009e1e:	f7f6 f973 	bl	8000108 <strlen>
 8009e22:	0003      	movs	r3, r0
 8009e24:	3301      	adds	r3, #1
 8009e26:	65bb      	str	r3, [r7, #88]	; 0x58
		char msgPackage[SMSsize] ;
 8009e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	657b      	str	r3, [r7, #84]	; 0x54
 8009e2e:	001a      	movs	r2, r3
 8009e30:	3201      	adds	r2, #1
 8009e32:	0014      	movs	r4, r2
 8009e34:	2200      	movs	r2, #0
 8009e36:	0015      	movs	r5, r2
 8009e38:	0020      	movs	r0, r4
 8009e3a:	0029      	movs	r1, r5
 8009e3c:	0002      	movs	r2, r0
 8009e3e:	0f52      	lsrs	r2, r2, #29
 8009e40:	000c      	movs	r4, r1
 8009e42:	00e4      	lsls	r4, r4, #3
 8009e44:	617c      	str	r4, [r7, #20]
 8009e46:	697c      	ldr	r4, [r7, #20]
 8009e48:	4314      	orrs	r4, r2
 8009e4a:	617c      	str	r4, [r7, #20]
 8009e4c:	0002      	movs	r2, r0
 8009e4e:	00d2      	lsls	r2, r2, #3
 8009e50:	613a      	str	r2, [r7, #16]
 8009e52:	001a      	movs	r2, r3
 8009e54:	3201      	adds	r2, #1
 8009e56:	603a      	str	r2, [r7, #0]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	6838      	ldr	r0, [r7, #0]
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	0002      	movs	r2, r0
 8009e62:	0f52      	lsrs	r2, r2, #29
 8009e64:	000c      	movs	r4, r1
 8009e66:	00e4      	lsls	r4, r4, #3
 8009e68:	60fc      	str	r4, [r7, #12]
 8009e6a:	68fc      	ldr	r4, [r7, #12]
 8009e6c:	4314      	orrs	r4, r2
 8009e6e:	60fc      	str	r4, [r7, #12]
 8009e70:	0002      	movs	r2, r0
 8009e72:	00d2      	lsls	r2, r2, #3
 8009e74:	60ba      	str	r2, [r7, #8]
 8009e76:	3301      	adds	r3, #1
 8009e78:	3307      	adds	r3, #7
 8009e7a:	08db      	lsrs	r3, r3, #3
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	466a      	mov	r2, sp
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	469d      	mov	sp, r3
 8009e84:	466b      	mov	r3, sp
 8009e86:	3300      	adds	r3, #0
 8009e88:	653b      	str	r3, [r7, #80]	; 0x50
		char end[2] = { 0x1A, 0 } ;
 8009e8a:	2514      	movs	r5, #20
 8009e8c:	2318      	movs	r3, #24
 8009e8e:	18fb      	adds	r3, r7, r3
 8009e90:	195b      	adds	r3, r3, r5
 8009e92:	221a      	movs	r2, #26
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	2318      	movs	r3, #24
 8009e98:	18fb      	adds	r3, r7, r3
 8009e9a:	195b      	adds	r3, r3, r5
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	705a      	strb	r2, [r3, #1]
		memset(msgPackage, 0, strlen(Message)+1 ) ;
 8009ea0:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	0018      	movs	r0, r3
 8009ea6:	f7f6 f92f 	bl	8000108 <strlen>
 8009eaa:	0003      	movs	r3, r0
 8009eac:	3301      	adds	r3, #1
 8009eae:	001a      	movs	r2, r3
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	0020      	movs	r0, r4
 8009eb4:	f000 ffed 	bl	800ae92 <memset>
		strcat( msgPackage, Message ) ;
 8009eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	0011      	movs	r1, r2
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	f001 ff2a 	bl	800bd18 <strcat>
		strcat( msgPackage, end ) ;
 8009ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ec6:	2218      	movs	r2, #24
 8009ec8:	18ba      	adds	r2, r7, r2
 8009eca:	1952      	adds	r2, r2, r5
 8009ecc:	0011      	movs	r1, r2
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f001 ff22 	bl	800bd18 <strcat>
		answer = sendATcommand(msgPackage, "OK", 5000);
 8009ed4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ed6:	2347      	movs	r3, #71	; 0x47
 8009ed8:	2218      	movs	r2, #24
 8009eda:	18ba      	adds	r2, r7, r2
 8009edc:	18d4      	adds	r4, r2, r3
 8009ede:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <_ZN7sim7x007sendSMSEPKcS1_+0x1ec>)
 8009ee0:	4a0d      	ldr	r2, [pc, #52]	; (8009f18 <_ZN7sim7x007sendSMSEPKcS1_+0x1d4>)
 8009ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ee4:	f7fe ff5a 	bl	8008d9c <_ZN7sim7x0013sendATcommandEPKcS1_i>
 8009ee8:	0003      	movs	r3, r0
 8009eea:	7023      	strb	r3, [r4, #0]
 8009eec:	46b5      	mov	sp, r6
	}

	SIM_DEBUG.print("Done");
 8009eee:	4a11      	ldr	r2, [pc, #68]	; (8009f34 <_ZN7sim7x007sendSMSEPKcS1_+0x1f0>)
 8009ef0:	4b08      	ldr	r3, [pc, #32]	; (8009f14 <_ZN7sim7x007sendSMSEPKcS1_+0x1d0>)
 8009ef2:	0011      	movs	r1, r2
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f7fe fbb8 	bl	800866a <_ZN5debug5printEPKc>
	return answer ;
 8009efa:	2347      	movs	r3, #71	; 0x47
 8009efc:	2218      	movs	r2, #24
 8009efe:	4694      	mov	ip, r2
 8009f00:	44bc      	add	ip, r7
 8009f02:	4463      	add	r3, ip
 8009f04:	781b      	ldrb	r3, [r3, #0]
}
 8009f06:	0018      	movs	r0, r3
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	b019      	add	sp, #100	; 0x64
 8009f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	0800f684 	.word	0x0800f684
 8009f14:	20001d04 	.word	0x20001d04
 8009f18:	0800f290 	.word	0x0800f290
 8009f1c:	0800f320 	.word	0x0800f320
 8009f20:	0800f6a0 	.word	0x0800f6a0
 8009f24:	0800f6ac 	.word	0x0800f6ac
 8009f28:	00000bb8 	.word	0x00000bb8
 8009f2c:	0800f574 	.word	0x0800f574
 8009f30:	00001388 	.word	0x00001388
 8009f34:	0800f6b0 	.word	0x0800f6b0

08009f38 <_ZN7sim7x0014mqttUpdateDataEPKc>:


/*____________________________________________________________________________________________________________________________*/
bool sim7x00::mqttUpdateData ( const char* _data) {
 8009f38:	b590      	push	{r4, r7, lr}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
	if ( MQTTlogin ( MQTT_CLIENT_ID, MQTT_WILL_TOPIC, MQTT_WILL_MESSAGE, MQTT_BROKER_ADDR, MQTT_BROKER_PORT ) == false ) return 0 ;
 8009f42:	4c17      	ldr	r4, [pc, #92]	; (8009fa0 <_ZN7sim7x0014mqttUpdateDataEPKc+0x68>)
 8009f44:	4a17      	ldr	r2, [pc, #92]	; (8009fa4 <_ZN7sim7x0014mqttUpdateDataEPKc+0x6c>)
 8009f46:	4918      	ldr	r1, [pc, #96]	; (8009fa8 <_ZN7sim7x0014mqttUpdateDataEPKc+0x70>)
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	4b18      	ldr	r3, [pc, #96]	; (8009fac <_ZN7sim7x0014mqttUpdateDataEPKc+0x74>)
 8009f4c:	9301      	str	r3, [sp, #4]
 8009f4e:	4b18      	ldr	r3, [pc, #96]	; (8009fb0 <_ZN7sim7x0014mqttUpdateDataEPKc+0x78>)
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	0023      	movs	r3, r4
 8009f54:	f7ff fca6 	bl	80098a4 <_ZN7sim7x009MQTTloginEPKcS1_S1_S1_S1_>
 8009f58:	0003      	movs	r3, r0
 8009f5a:	001a      	movs	r2, r3
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	4053      	eors	r3, r2
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <_ZN7sim7x0014mqttUpdateDataEPKc+0x32>
 8009f66:	2300      	movs	r3, #0
 8009f68:	e016      	b.n	8009f98 <_ZN7sim7x0014mqttUpdateDataEPKc+0x60>
	if ( MQTTpublish( MQTT_TOPIC, _data , 2, 2000 ) == false ) return 0 ;
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	4911      	ldr	r1, [pc, #68]	; (8009fb4 <_ZN7sim7x0014mqttUpdateDataEPKc+0x7c>)
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	23fa      	movs	r3, #250	; 0xfa
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	2302      	movs	r3, #2
 8009f78:	f7ff fbd4 	bl	8009724 <_ZN7sim7x0011MQTTpublishEPKcS1_ii>
 8009f7c:	0003      	movs	r3, r0
 8009f7e:	001a      	movs	r2, r3
 8009f80:	2301      	movs	r3, #1
 8009f82:	4053      	eors	r3, r2
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <_ZN7sim7x0014mqttUpdateDataEPKc+0x56>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e004      	b.n	8009f98 <_ZN7sim7x0014mqttUpdateDataEPKc+0x60>
	MQTTstop() ;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	0018      	movs	r0, r3
 8009f92:	f7ff fb9f 	bl	80096d4 <_ZN7sim7x008MQTTstopEv>
	return 1 ; //
 8009f96:	2301      	movs	r3, #1
}
 8009f98:	0018      	movs	r0, r3
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	b003      	add	sp, #12
 8009f9e:	bd90      	pop	{r4, r7, pc}
 8009fa0:	0800f6b8 	.word	0x0800f6b8
 8009fa4:	0800f6cc 	.word	0x0800f6cc
 8009fa8:	0800f6d4 	.word	0x0800f6d4
 8009fac:	0800f6e0 	.word	0x0800f6e0
 8009fb0:	0800f6e8 	.word	0x0800f6e8
 8009fb4:	0800f6f8 	.word	0x0800f6f8

08009fb8 <_Z41__static_initialization_and_destruction_0ii>:
	else return false ;
}


#ifdef __cplusplus
}
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d113      	bne.n	8009ff0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	4a0b      	ldr	r2, [pc, #44]	; (8009ff8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d10f      	bne.n	8009ff0 <_Z41__static_initialization_and_destruction_0ii+0x38>
debug simDebug(&DEBUG_UART) ;
 8009fd0:	4a0a      	ldr	r2, [pc, #40]	; (8009ffc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009fd2:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009fd4:	0011      	movs	r1, r2
 8009fd6:	0018      	movs	r0, r3
 8009fd8:	f7fe fb3a 	bl	8008650 <_ZN5debugC1EP20__UART_HandleTypeDef>
unDebug simUnDebug ;
 8009fdc:	4b09      	ldr	r3, [pc, #36]	; (800a004 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009fde:	0018      	movs	r0, r3
 8009fe0:	f7fe fb7c 	bl	80086dc <_ZN7unDebugC1Ev>
lrwan LRW(&huart4) ;
 8009fe4:	4a08      	ldr	r2, [pc, #32]	; (800a008 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009fe6:	4b09      	ldr	r3, [pc, #36]	; (800a00c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8009fe8:	0011      	movs	r1, r2
 8009fea:	0018      	movs	r0, r3
 8009fec:	f7fe fb80 	bl	80086f0 <_ZN5lrwanC1EP20__UART_HandleTypeDef>
}
 8009ff0:	46c0      	nop			; (mov r8, r8)
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	b002      	add	sp, #8
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	0000ffff 	.word	0x0000ffff
 8009ffc:	20001c78 	.word	0x20001c78
 800a000:	20001d04 	.word	0x20001d04
 800a004:	20001d08 	.word	0x20001d08
 800a008:	20001bf4 	.word	0x20001bf4
 800a00c:	20001d0c 	.word	0x20001d0c

0800a010 <_GLOBAL__sub_I_simDebug>:
 800a010:	b580      	push	{r7, lr}
 800a012:	af00      	add	r7, sp, #0
 800a014:	4b03      	ldr	r3, [pc, #12]	; (800a024 <_GLOBAL__sub_I_simDebug+0x14>)
 800a016:	0019      	movs	r1, r3
 800a018:	2001      	movs	r0, #1
 800a01a:	f7ff ffcd 	bl	8009fb8 <_Z41__static_initialization_and_destruction_0ii>
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	46c0      	nop			; (mov r8, r8)
 800a024:	0000ffff 	.word	0x0000ffff

0800a028 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, SSD1306_COLOR_t color)
{
 800a028:	b590      	push	{r4, r7, lr}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	0004      	movs	r4, r0
 800a030:	0008      	movs	r0, r1
 800a032:	60ba      	str	r2, [r7, #8]
 800a034:	0019      	movs	r1, r3
 800a036:	230e      	movs	r3, #14
 800a038:	18fb      	adds	r3, r7, r3
 800a03a:	1c22      	adds	r2, r4, #0
 800a03c:	801a      	strh	r2, [r3, #0]
 800a03e:	230c      	movs	r3, #12
 800a040:	18fb      	adds	r3, r7, r3
 800a042:	1c02      	adds	r2, r0, #0
 800a044:	801a      	strh	r2, [r3, #0]
 800a046:	1dbb      	adds	r3, r7, #6
 800a048:	1c0a      	adds	r2, r1, #0
 800a04a:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800a04c:	1dbb      	adds	r3, r7, #6
 800a04e:	2200      	movs	r2, #0
 800a050:	5e9b      	ldrsh	r3, [r3, r2]
 800a052:	3307      	adds	r3, #7
 800a054:	2b00      	cmp	r3, #0
 800a056:	da00      	bge.n	800a05a <SSD1306_DrawBitmap+0x32>
 800a058:	3307      	adds	r3, #7
 800a05a:	10db      	asrs	r3, r3, #3
 800a05c:	001a      	movs	r2, r3
 800a05e:	2310      	movs	r3, #16
 800a060:	18fb      	adds	r3, r7, r3
 800a062:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 800a064:	2317      	movs	r3, #23
 800a066:	18fb      	adds	r3, r7, r3
 800a068:	2200      	movs	r2, #0
 800a06a:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 800a06c:	2314      	movs	r3, #20
 800a06e:	18fb      	adds	r3, r7, r3
 800a070:	2200      	movs	r2, #0
 800a072:	801a      	strh	r2, [r3, #0]
 800a074:	2314      	movs	r3, #20
 800a076:	18fb      	adds	r3, r7, r3
 800a078:	2228      	movs	r2, #40	; 0x28
 800a07a:	18b9      	adds	r1, r7, r2
 800a07c:	2200      	movs	r2, #0
 800a07e:	5e9a      	ldrsh	r2, [r3, r2]
 800a080:	2300      	movs	r3, #0
 800a082:	5ecb      	ldrsh	r3, [r1, r3]
 800a084:	429a      	cmp	r2, r3
 800a086:	da68      	bge.n	800a15a <SSD1306_DrawBitmap+0x132>
    {
        for(int16_t i=0; i<w; i++)
 800a088:	2312      	movs	r3, #18
 800a08a:	18fb      	adds	r3, r7, r3
 800a08c:	2200      	movs	r2, #0
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	2312      	movs	r3, #18
 800a092:	18fa      	adds	r2, r7, r3
 800a094:	1dbb      	adds	r3, r7, #6
 800a096:	2100      	movs	r1, #0
 800a098:	5e52      	ldrsh	r2, [r2, r1]
 800a09a:	2100      	movs	r1, #0
 800a09c:	5e5b      	ldrsh	r3, [r3, r1]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	da48      	bge.n	800a134 <SSD1306_DrawBitmap+0x10c>
        {
            if(i & 7)
 800a0a2:	2312      	movs	r3, #18
 800a0a4:	18fb      	adds	r3, r7, r3
 800a0a6:	881b      	ldrh	r3, [r3, #0]
 800a0a8:	001a      	movs	r2, r3
 800a0aa:	2307      	movs	r3, #7
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	d006      	beq.n	800a0be <SSD1306_DrawBitmap+0x96>
            {
               byte <<= 1;
 800a0b0:	2317      	movs	r3, #23
 800a0b2:	18fa      	adds	r2, r7, r3
 800a0b4:	18fb      	adds	r3, r7, r3
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	18db      	adds	r3, r3, r3
 800a0ba:	7013      	strb	r3, [r2, #0]
 800a0bc:	e019      	b.n	800a0f2 <SSD1306_DrawBitmap+0xca>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800a0be:	2314      	movs	r3, #20
 800a0c0:	18fb      	adds	r3, r7, r3
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	5e9b      	ldrsh	r3, [r3, r2]
 800a0c6:	2210      	movs	r2, #16
 800a0c8:	18ba      	adds	r2, r7, r2
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	5e52      	ldrsh	r2, [r2, r1]
 800a0ce:	435a      	muls	r2, r3
 800a0d0:	2312      	movs	r3, #18
 800a0d2:	18fb      	adds	r3, r7, r3
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	5e5b      	ldrsh	r3, [r3, r1]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	da00      	bge.n	800a0de <SSD1306_DrawBitmap+0xb6>
 800a0dc:	3307      	adds	r3, #7
 800a0de:	10db      	asrs	r3, r3, #3
 800a0e0:	b21b      	sxth	r3, r3
 800a0e2:	18d3      	adds	r3, r2, r3
 800a0e4:	001a      	movs	r2, r3
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	189a      	adds	r2, r3, r2
 800a0ea:	2317      	movs	r3, #23
 800a0ec:	18fb      	adds	r3, r7, r3
 800a0ee:	7812      	ldrb	r2, [r2, #0]
 800a0f0:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800a0f2:	2317      	movs	r3, #23
 800a0f4:	18fb      	adds	r3, r7, r3
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	b25b      	sxtb	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	da10      	bge.n	800a120 <SSD1306_DrawBitmap+0xf8>
 800a0fe:	230e      	movs	r3, #14
 800a100:	18fb      	adds	r3, r7, r3
 800a102:	881a      	ldrh	r2, [r3, #0]
 800a104:	2312      	movs	r3, #18
 800a106:	18fb      	adds	r3, r7, r3
 800a108:	881b      	ldrh	r3, [r3, #0]
 800a10a:	18d3      	adds	r3, r2, r3
 800a10c:	b298      	uxth	r0, r3
 800a10e:	230c      	movs	r3, #12
 800a110:	18fb      	adds	r3, r7, r3
 800a112:	8819      	ldrh	r1, [r3, #0]
 800a114:	232c      	movs	r3, #44	; 0x2c
 800a116:	18fb      	adds	r3, r7, r3
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	001a      	movs	r2, r3
 800a11c:	f000 f93e 	bl	800a39c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800a120:	2112      	movs	r1, #18
 800a122:	187b      	adds	r3, r7, r1
 800a124:	2200      	movs	r2, #0
 800a126:	5e9b      	ldrsh	r3, [r3, r2]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	3301      	adds	r3, #1
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	187b      	adds	r3, r7, r1
 800a130:	801a      	strh	r2, [r3, #0]
 800a132:	e7ad      	b.n	800a090 <SSD1306_DrawBitmap+0x68>
    for(int16_t j=0; j<h; j++, y++)
 800a134:	2114      	movs	r1, #20
 800a136:	187b      	adds	r3, r7, r1
 800a138:	2200      	movs	r2, #0
 800a13a:	5e9b      	ldrsh	r3, [r3, r2]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	3301      	adds	r3, #1
 800a140:	b29a      	uxth	r2, r3
 800a142:	187b      	adds	r3, r7, r1
 800a144:	801a      	strh	r2, [r3, #0]
 800a146:	210c      	movs	r1, #12
 800a148:	187b      	adds	r3, r7, r1
 800a14a:	2200      	movs	r2, #0
 800a14c:	5e9b      	ldrsh	r3, [r3, r2]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	3301      	adds	r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	187b      	adds	r3, r7, r1
 800a156:	801a      	strh	r2, [r3, #0]
 800a158:	e78c      	b.n	800a074 <SSD1306_DrawBitmap+0x4c>
        }
    }
}
 800a15a:	46c0      	nop			; (mov r8, r8)
 800a15c:	46bd      	mov	sp, r7
 800a15e:	b007      	add	sp, #28
 800a160:	bd90      	pop	{r4, r7, pc}
	...

0800a164 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0

	/* Init I2C */
	SSD1306_I2C_Init();
 800a16a:	f000 fd97 	bl	800ac9c <SSD1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&I2C_PORT, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800a16e:	4b60      	ldr	r3, [pc, #384]	; (800a2f0 <SSD1306_Init+0x18c>)
 800a170:	4860      	ldr	r0, [pc, #384]	; (800a2f4 <SSD1306_Init+0x190>)
 800a172:	2201      	movs	r2, #1
 800a174:	2178      	movs	r1, #120	; 0x78
 800a176:	f7fb f9c9 	bl	800550c <HAL_I2C_IsDeviceReady>
 800a17a:	0003      	movs	r3, r0
 800a17c:	1e5a      	subs	r2, r3, #1
 800a17e:	4193      	sbcs	r3, r2
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <SSD1306_Init+0x26>
		/* Return false */
		return 0;
 800a186:	2300      	movs	r3, #0
 800a188:	e0ad      	b.n	800a2e6 <SSD1306_Init+0x182>
	}

	/* A little delay */
	uint32_t p = 2500;
 800a18a:	4b5b      	ldr	r3, [pc, #364]	; (800a2f8 <SSD1306_Init+0x194>)
 800a18c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d003      	beq.n	800a19c <SSD1306_Init+0x38>
		p--;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3b01      	subs	r3, #1
 800a198:	607b      	str	r3, [r7, #4]
	while(p>0)
 800a19a:	e7f8      	b.n	800a18e <SSD1306_Init+0x2a>
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //ok display off
 800a19c:	22ae      	movs	r2, #174	; 0xae
 800a19e:	2100      	movs	r1, #0
 800a1a0:	2078      	movs	r0, #120	; 0x78
 800a1a2:	f000 fe0b 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800a1a6:	2220      	movs	r2, #32
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	2078      	movs	r0, #120	; 0x78
 800a1ac:	f000 fe06 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800a1b0:	2210      	movs	r2, #16
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	2078      	movs	r0, #120	; 0x78
 800a1b6:	f000 fe01 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //ok Set Page Start Address for Page Addressing Mode,0-7
 800a1ba:	22b0      	movs	r2, #176	; 0xb0
 800a1bc:	2100      	movs	r1, #0
 800a1be:	2078      	movs	r0, #120	; 0x78
 800a1c0:	f000 fdfc 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //ok Set COM Output Scan Direction
 800a1c4:	22c8      	movs	r2, #200	; 0xc8
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	2078      	movs	r0, #120	; 0x78
 800a1ca:	f000 fdf7 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //ok ---set low column address
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	2078      	movs	r0, #120	; 0x78
 800a1d4:	f000 fdf2 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //ok ---set high column address
 800a1d8:	2210      	movs	r2, #16
 800a1da:	2100      	movs	r1, #0
 800a1dc:	2078      	movs	r0, #120	; 0x78
 800a1de:	f000 fded 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //ok --set start line address
 800a1e2:	2240      	movs	r2, #64	; 0x40
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	2078      	movs	r0, #120	; 0x78
 800a1e8:	f000 fde8 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); // Toan them // Start line : 0
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	2078      	movs	r0, #120	; 0x78
 800a1f2:	f000 fde3 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //ok --set contrast control register
 800a1f6:	2281      	movs	r2, #129	; 0x81
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	2078      	movs	r0, #120	; 0x78
 800a1fc:	f000 fdde 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800a200:	22ff      	movs	r2, #255	; 0xff
 800a202:	2100      	movs	r1, #0
 800a204:	2078      	movs	r0, #120	; 0x78
 800a206:	f000 fdd9 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //ok --set segment re-map 0 to 127
 800a20a:	22a1      	movs	r2, #161	; 0xa1
 800a20c:	2100      	movs	r1, #0
 800a20e:	2078      	movs	r0, #120	; 0x78
 800a210:	f000 fdd4 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //ok --set normal display
 800a214:	22a6      	movs	r2, #166	; 0xa6
 800a216:	2100      	movs	r1, #0
 800a218:	2078      	movs	r0, #120	; 0x78
 800a21a:	f000 fdcf 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //ok --set multiplex ratio(1 to 64)
 800a21e:	22a8      	movs	r2, #168	; 0xa8
 800a220:	2100      	movs	r1, #0
 800a222:	2078      	movs	r0, #120	; 0x78
 800a224:	f000 fdca 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800a228:	223f      	movs	r2, #63	; 0x3f
 800a22a:	2100      	movs	r1, #0
 800a22c:	2078      	movs	r0, #120	; 0x78
 800a22e:	f000 fdc5 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //ok 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800a232:	22a4      	movs	r2, #164	; 0xa4
 800a234:	2100      	movs	r1, #0
 800a236:	2078      	movs	r0, #120	; 0x78
 800a238:	f000 fdc0 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //ok -set display offset
 800a23c:	22d3      	movs	r2, #211	; 0xd3
 800a23e:	2100      	movs	r1, #0
 800a240:	2078      	movs	r0, #120	; 0x78
 800a242:	f000 fdbb 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //ok -not offset
 800a246:	2200      	movs	r2, #0
 800a248:	2100      	movs	r1, #0
 800a24a:	2078      	movs	r0, #120	; 0x78
 800a24c:	f000 fdb6 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //ok --set display clock divide ratio/oscillator frequency
 800a250:	22d5      	movs	r2, #213	; 0xd5
 800a252:	2100      	movs	r1, #0
 800a254:	2078      	movs	r0, #120	; 0x78
 800a256:	f000 fdb1 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800a25a:	22f0      	movs	r2, #240	; 0xf0
 800a25c:	2100      	movs	r1, #0
 800a25e:	2078      	movs	r0, #120	; 0x78
 800a260:	f000 fdac 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800a264:	22d9      	movs	r2, #217	; 0xd9
 800a266:	2100      	movs	r1, #0
 800a268:	2078      	movs	r0, #120	; 0x78
 800a26a:	f000 fda7 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800a26e:	2222      	movs	r2, #34	; 0x22
 800a270:	2100      	movs	r1, #0
 800a272:	2078      	movs	r0, #120	; 0x78
 800a274:	f000 fda2 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800a278:	22da      	movs	r2, #218	; 0xda
 800a27a:	2100      	movs	r1, #0
 800a27c:	2078      	movs	r0, #120	; 0x78
 800a27e:	f000 fd9d 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800a282:	2212      	movs	r2, #18
 800a284:	2100      	movs	r1, #0
 800a286:	2078      	movs	r0, #120	; 0x78
 800a288:	f000 fd98 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800a28c:	22db      	movs	r2, #219	; 0xdb
 800a28e:	2100      	movs	r1, #0
 800a290:	2078      	movs	r0, #120	; 0x78
 800a292:	f000 fd93 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800a296:	2220      	movs	r2, #32
 800a298:	2100      	movs	r1, #0
 800a29a:	2078      	movs	r0, #120	; 0x78
 800a29c:	f000 fd8e 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800a2a0:	228d      	movs	r2, #141	; 0x8d
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	2078      	movs	r0, #120	; 0x78
 800a2a6:	f000 fd89 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800a2aa:	2214      	movs	r2, #20
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	2078      	movs	r0, #120	; 0x78
 800a2b0:	f000 fd84 	bl	800adbc <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //ok --turn on SSD1306 panel
 800a2b4:	22af      	movs	r2, #175	; 0xaf
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	2078      	movs	r0, #120	; 0x78
 800a2ba:	f000 fd7f 	bl	800adbc <SSD1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800a2be:	222e      	movs	r2, #46	; 0x2e
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	2078      	movs	r0, #120	; 0x78
 800a2c4:	f000 fd7a 	bl	800adbc <SSD1306_I2C_Write>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800a2c8:	4b0c      	ldr	r3, [pc, #48]	; (800a2fc <SSD1306_Init+0x198>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800a2ce:	4b0b      	ldr	r3, [pc, #44]	; (800a2fc <SSD1306_Init+0x198>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	805a      	strh	r2, [r3, #2]

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	f000 f847 	bl	800a368 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800a2da:	f000 f811 	bl	800a300 <SSD1306_UpdateScreen>

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800a2de:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <SSD1306_Init+0x198>)
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800a2e4:	2301      	movs	r3, #1
}
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	b002      	add	sp, #8
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	46c0      	nop			; (mov r8, r8)
 800a2f0:	00004e20 	.word	0x00004e20
 800a2f4:	200002d8 	.word	0x200002d8
 800a2f8:	000009c4 	.word	0x000009c4
 800a2fc:	20002910 	.word	0x20002910

0800a300 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800a306:	1dfb      	adds	r3, r7, #7
 800a308:	2200      	movs	r2, #0
 800a30a:	701a      	strb	r2, [r3, #0]
 800a30c:	1dfb      	adds	r3, r7, #7
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b07      	cmp	r3, #7
 800a312:	d822      	bhi.n	800a35a <SSD1306_UpdateScreen+0x5a>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800a314:	1dfb      	adds	r3, r7, #7
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	3b50      	subs	r3, #80	; 0x50
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	001a      	movs	r2, r3
 800a31e:	2100      	movs	r1, #0
 800a320:	2078      	movs	r0, #120	; 0x78
 800a322:	f000 fd4b 	bl	800adbc <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800a326:	2200      	movs	r2, #0
 800a328:	2100      	movs	r1, #0
 800a32a:	2078      	movs	r0, #120	; 0x78
 800a32c:	f000 fd46 	bl	800adbc <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800a330:	2210      	movs	r2, #16
 800a332:	2100      	movs	r1, #0
 800a334:	2078      	movs	r0, #120	; 0x78
 800a336:	f000 fd41 	bl	800adbc <SSD1306_I2C_Write>

		/* Write multi data */
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800a33a:	1dfb      	adds	r3, r7, #7
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	01da      	lsls	r2, r3, #7
 800a340:	4b08      	ldr	r3, [pc, #32]	; (800a364 <SSD1306_UpdateScreen+0x64>)
 800a342:	18d2      	adds	r2, r2, r3
 800a344:	2380      	movs	r3, #128	; 0x80
 800a346:	2140      	movs	r1, #64	; 0x40
 800a348:	2078      	movs	r0, #120	; 0x78
 800a34a:	f000 fcb9 	bl	800acc0 <SSD1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800a34e:	1dfb      	adds	r3, r7, #7
 800a350:	781a      	ldrb	r2, [r3, #0]
 800a352:	1dfb      	adds	r3, r7, #7
 800a354:	3201      	adds	r2, #1
 800a356:	701a      	strb	r2, [r3, #0]
 800a358:	e7d8      	b.n	800a30c <SSD1306_UpdateScreen+0xc>
	}
}
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	46bd      	mov	sp, r7
 800a35e:	b002      	add	sp, #8
 800a360:	bd80      	pop	{r7, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	20002510 	.word	0x20002510

0800a368 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	0002      	movs	r2, r0
 800a370:	1dfb      	adds	r3, r7, #7
 800a372:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800a374:	1dfb      	adds	r3, r7, #7
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <SSD1306_Fill+0x18>
 800a37c:	2100      	movs	r1, #0
 800a37e:	e000      	b.n	800a382 <SSD1306_Fill+0x1a>
 800a380:	21ff      	movs	r1, #255	; 0xff
 800a382:	2380      	movs	r3, #128	; 0x80
 800a384:	00da      	lsls	r2, r3, #3
 800a386:	4b04      	ldr	r3, [pc, #16]	; (800a398 <SSD1306_Fill+0x30>)
 800a388:	0018      	movs	r0, r3
 800a38a:	f000 fd82 	bl	800ae92 <memset>
}
 800a38e:	46c0      	nop			; (mov r8, r8)
 800a390:	46bd      	mov	sp, r7
 800a392:	b002      	add	sp, #8
 800a394:	bd80      	pop	{r7, pc}
 800a396:	46c0      	nop			; (mov r8, r8)
 800a398:	20002510 	.word	0x20002510

0800a39c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800a39c:	b590      	push	{r4, r7, lr}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	0004      	movs	r4, r0
 800a3a4:	0008      	movs	r0, r1
 800a3a6:	0011      	movs	r1, r2
 800a3a8:	1dbb      	adds	r3, r7, #6
 800a3aa:	1c22      	adds	r2, r4, #0
 800a3ac:	801a      	strh	r2, [r3, #0]
 800a3ae:	1d3b      	adds	r3, r7, #4
 800a3b0:	1c02      	adds	r2, r0, #0
 800a3b2:	801a      	strh	r2, [r3, #0]
 800a3b4:	1cfb      	adds	r3, r7, #3
 800a3b6:	1c0a      	adds	r2, r1, #0
 800a3b8:	701a      	strb	r2, [r3, #0]
	if (
 800a3ba:	1dbb      	adds	r3, r7, #6
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	2b7f      	cmp	r3, #127	; 0x7f
 800a3c0:	d852      	bhi.n	800a468 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 800a3c2:	1d3b      	adds	r3, r7, #4
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	2b3f      	cmp	r3, #63	; 0x3f
 800a3c8:	d84e      	bhi.n	800a468 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800a3ca:	4b29      	ldr	r3, [pc, #164]	; (800a470 <SSD1306_DrawPixel+0xd4>)
 800a3cc:	791b      	ldrb	r3, [r3, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d006      	beq.n	800a3e0 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 800a3d2:	1cfb      	adds	r3, r7, #3
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	425a      	negs	r2, r3
 800a3d8:	4153      	adcs	r3, r2
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	1cfb      	adds	r3, r7, #3
 800a3de:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800a3e0:	1cfb      	adds	r3, r7, #3
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d11e      	bne.n	800a426 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800a3e8:	1dbb      	adds	r3, r7, #6
 800a3ea:	881a      	ldrh	r2, [r3, #0]
 800a3ec:	1d3b      	adds	r3, r7, #4
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	08db      	lsrs	r3, r3, #3
 800a3f2:	b298      	uxth	r0, r3
 800a3f4:	0003      	movs	r3, r0
 800a3f6:	01db      	lsls	r3, r3, #7
 800a3f8:	18d3      	adds	r3, r2, r3
 800a3fa:	4a1e      	ldr	r2, [pc, #120]	; (800a474 <SSD1306_DrawPixel+0xd8>)
 800a3fc:	5cd3      	ldrb	r3, [r2, r3]
 800a3fe:	b25a      	sxtb	r2, r3
 800a400:	1d3b      	adds	r3, r7, #4
 800a402:	881b      	ldrh	r3, [r3, #0]
 800a404:	2107      	movs	r1, #7
 800a406:	400b      	ands	r3, r1
 800a408:	2101      	movs	r1, #1
 800a40a:	4099      	lsls	r1, r3
 800a40c:	000b      	movs	r3, r1
 800a40e:	b25b      	sxtb	r3, r3
 800a410:	4313      	orrs	r3, r2
 800a412:	b259      	sxtb	r1, r3
 800a414:	1dbb      	adds	r3, r7, #6
 800a416:	881a      	ldrh	r2, [r3, #0]
 800a418:	0003      	movs	r3, r0
 800a41a:	01db      	lsls	r3, r3, #7
 800a41c:	18d3      	adds	r3, r2, r3
 800a41e:	b2c9      	uxtb	r1, r1
 800a420:	4a14      	ldr	r2, [pc, #80]	; (800a474 <SSD1306_DrawPixel+0xd8>)
 800a422:	54d1      	strb	r1, [r2, r3]
 800a424:	e021      	b.n	800a46a <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800a426:	1dbb      	adds	r3, r7, #6
 800a428:	881a      	ldrh	r2, [r3, #0]
 800a42a:	1d3b      	adds	r3, r7, #4
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	08db      	lsrs	r3, r3, #3
 800a430:	b298      	uxth	r0, r3
 800a432:	0003      	movs	r3, r0
 800a434:	01db      	lsls	r3, r3, #7
 800a436:	18d3      	adds	r3, r2, r3
 800a438:	4a0e      	ldr	r2, [pc, #56]	; (800a474 <SSD1306_DrawPixel+0xd8>)
 800a43a:	5cd3      	ldrb	r3, [r2, r3]
 800a43c:	b25b      	sxtb	r3, r3
 800a43e:	1d3a      	adds	r2, r7, #4
 800a440:	8812      	ldrh	r2, [r2, #0]
 800a442:	2107      	movs	r1, #7
 800a444:	400a      	ands	r2, r1
 800a446:	2101      	movs	r1, #1
 800a448:	4091      	lsls	r1, r2
 800a44a:	000a      	movs	r2, r1
 800a44c:	b252      	sxtb	r2, r2
 800a44e:	43d2      	mvns	r2, r2
 800a450:	b252      	sxtb	r2, r2
 800a452:	4013      	ands	r3, r2
 800a454:	b259      	sxtb	r1, r3
 800a456:	1dbb      	adds	r3, r7, #6
 800a458:	881a      	ldrh	r2, [r3, #0]
 800a45a:	0003      	movs	r3, r0
 800a45c:	01db      	lsls	r3, r3, #7
 800a45e:	18d3      	adds	r3, r2, r3
 800a460:	b2c9      	uxtb	r1, r1
 800a462:	4a04      	ldr	r2, [pc, #16]	; (800a474 <SSD1306_DrawPixel+0xd8>)
 800a464:	54d1      	strb	r1, [r2, r3]
 800a466:	e000      	b.n	800a46a <SSD1306_DrawPixel+0xce>
		return;
 800a468:	46c0      	nop			; (mov r8, r8)
	}
}
 800a46a:	46bd      	mov	sp, r7
 800a46c:	b003      	add	sp, #12
 800a46e:	bd90      	pop	{r4, r7, pc}
 800a470:	20002910 	.word	0x20002910
 800a474:	20002510 	.word	0x20002510

0800a478 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	0002      	movs	r2, r0
 800a480:	1dbb      	adds	r3, r7, #6
 800a482:	801a      	strh	r2, [r3, #0]
 800a484:	1d3b      	adds	r3, r7, #4
 800a486:	1c0a      	adds	r2, r1, #0
 800a488:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x+2;
 800a48a:	1dbb      	adds	r3, r7, #6
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	3302      	adds	r3, #2
 800a490:	b29a      	uxth	r2, r3
 800a492:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <SSD1306_GotoXY+0x30>)
 800a494:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800a496:	4b04      	ldr	r3, [pc, #16]	; (800a4a8 <SSD1306_GotoXY+0x30>)
 800a498:	1d3a      	adds	r2, r7, #4
 800a49a:	8812      	ldrh	r2, [r2, #0]
 800a49c:	805a      	strh	r2, [r3, #2]
}
 800a49e:	46c0      	nop			; (mov r8, r8)
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	b002      	add	sp, #8
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	20002910 	.word	0x20002910

0800a4ac <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6039      	str	r1, [r7, #0]
 800a4b4:	0011      	movs	r1, r2
 800a4b6:	1dfb      	adds	r3, r7, #7
 800a4b8:	1c02      	adds	r2, r0, #0
 800a4ba:	701a      	strb	r2, [r3, #0]
 800a4bc:	1dbb      	adds	r3, r7, #6
 800a4be:	1c0a      	adds	r2, r1, #0
 800a4c0:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	FontDef_t* _Font = &*Font ;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	60fb      	str	r3, [r7, #12]
	if( _Font == &Font_5x7){
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	4b7f      	ldr	r3, [pc, #508]	; (800a6c8 <SSD1306_Putc+0x21c>)
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d000      	beq.n	800a4d0 <SSD1306_Putc+0x24>
 800a4ce:	e086      	b.n	800a5de <SSD1306_Putc+0x132>

		/* Check available space in LCD */
		if (
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800a4d0:	4b7e      	ldr	r3, [pc, #504]	; (800a6cc <SSD1306_Putc+0x220>)
 800a4d2:	881b      	ldrh	r3, [r3, #0]
 800a4d4:	001a      	movs	r2, r3
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	18d3      	adds	r3, r2, r3
		if (
 800a4dc:	2b7f      	cmp	r3, #127	; 0x7f
 800a4de:	dc07      	bgt.n	800a4f0 <SSD1306_Putc+0x44>
			SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800a4e0:	4b7a      	ldr	r3, [pc, #488]	; (800a6cc <SSD1306_Putc+0x220>)
 800a4e2:	885b      	ldrh	r3, [r3, #2]
 800a4e4:	001a      	movs	r2, r3
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	785b      	ldrb	r3, [r3, #1]
 800a4ea:	18d3      	adds	r3, r2, r3
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800a4ec:	2b3f      	cmp	r3, #63	; 0x3f
 800a4ee:	dd01      	ble.n	800a4f4 <SSD1306_Putc+0x48>
		) {
			/* Error */
			return 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	e0e5      	b.n	800a6c0 <SSD1306_Putc+0x214>
		}

		/* Go through font */
		for (i = 0; i < Font->FontHeight; i++) {
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	617b      	str	r3, [r7, #20]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	785b      	ldrb	r3, [r3, #1]
 800a4fc:	001a      	movs	r2, r3
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	4293      	cmp	r3, r2
 800a502:	d253      	bcs.n	800a5ac <SSD1306_Putc+0x100>
			b = Font->data[(ch - 32) * Font->FontHeight + i];
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	1dfb      	adds	r3, r7, #7
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	3b20      	subs	r3, #32
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	7849      	ldrb	r1, [r1, #1]
 800a512:	434b      	muls	r3, r1
 800a514:	0019      	movs	r1, r3
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	18cb      	adds	r3, r1, r3
 800a51a:	005b      	lsls	r3, r3, #1
 800a51c:	18d3      	adds	r3, r2, r3
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	60bb      	str	r3, [r7, #8]

			for (j = Font->FontWidth; j > 0; j--) {
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	613b      	str	r3, [r7, #16]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d03a      	beq.n	800a5a4 <SSD1306_Putc+0xf8>

				if ((b << j) & 0x8000) {
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	409a      	lsls	r2, r3
 800a534:	2380      	movs	r3, #128	; 0x80
 800a536:	021b      	lsls	r3, r3, #8
 800a538:	4013      	ands	r3, r2
 800a53a:	d016      	beq.n	800a56a <SSD1306_Putc+0xbe>
					SSD1306_DrawPixel(SSD1306.CurrentX + i, (SSD1306.CurrentY + (Font->FontWidth -j)), (SSD1306_COLOR_t) color);
 800a53c:	4b63      	ldr	r3, [pc, #396]	; (800a6cc <SSD1306_Putc+0x220>)
 800a53e:	881a      	ldrh	r2, [r3, #0]
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	b29b      	uxth	r3, r3
 800a544:	18d3      	adds	r3, r2, r3
 800a546:	b298      	uxth	r0, r3
 800a548:	4b60      	ldr	r3, [pc, #384]	; (800a6cc <SSD1306_Putc+0x220>)
 800a54a:	885a      	ldrh	r2, [r3, #2]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	b299      	uxth	r1, r3
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	b29b      	uxth	r3, r3
 800a556:	1acb      	subs	r3, r1, r3
 800a558:	b29b      	uxth	r3, r3
 800a55a:	18d3      	adds	r3, r2, r3
 800a55c:	b299      	uxth	r1, r3
 800a55e:	1dbb      	adds	r3, r7, #6
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	001a      	movs	r2, r3
 800a564:	f7ff ff1a 	bl	800a39c <SSD1306_DrawPixel>
 800a568:	e018      	b.n	800a59c <SSD1306_Putc+0xf0>
				} else {
					SSD1306_DrawPixel(SSD1306.CurrentX + i, (SSD1306.CurrentY + (Font->FontWidth -j)), (SSD1306_COLOR_t)!color);
 800a56a:	4b58      	ldr	r3, [pc, #352]	; (800a6cc <SSD1306_Putc+0x220>)
 800a56c:	881a      	ldrh	r2, [r3, #0]
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	b29b      	uxth	r3, r3
 800a572:	18d3      	adds	r3, r2, r3
 800a574:	b298      	uxth	r0, r3
 800a576:	4b55      	ldr	r3, [pc, #340]	; (800a6cc <SSD1306_Putc+0x220>)
 800a578:	885a      	ldrh	r2, [r3, #2]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	b299      	uxth	r1, r3
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	b29b      	uxth	r3, r3
 800a584:	1acb      	subs	r3, r1, r3
 800a586:	b29b      	uxth	r3, r3
 800a588:	18d3      	adds	r3, r2, r3
 800a58a:	b299      	uxth	r1, r3
 800a58c:	1dbb      	adds	r3, r7, #6
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	425a      	negs	r2, r3
 800a592:	4153      	adcs	r3, r2
 800a594:	b2db      	uxtb	r3, r3
 800a596:	001a      	movs	r2, r3
 800a598:	f7ff ff00 	bl	800a39c <SSD1306_DrawPixel>
			for (j = Font->FontWidth; j > 0; j--) {
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	613b      	str	r3, [r7, #16]
 800a5a2:	e7c1      	b.n	800a528 <SSD1306_Putc+0x7c>
		for (i = 0; i < Font->FontHeight; i++) {
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	617b      	str	r3, [r7, #20]
 800a5aa:	e7a5      	b.n	800a4f8 <SSD1306_Putc+0x4c>
				}
			}
		}

		/* Increase pointer */
		if( ch == ' '){
 800a5ac:	1dfb      	adds	r3, r7, #7
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b20      	cmp	r3, #32
 800a5b2:	d106      	bne.n	800a5c2 <SSD1306_Putc+0x116>
			SSD1306.CurrentX += 4;
 800a5b4:	4b45      	ldr	r3, [pc, #276]	; (800a6cc <SSD1306_Putc+0x220>)
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	4b43      	ldr	r3, [pc, #268]	; (800a6cc <SSD1306_Putc+0x220>)
 800a5be:	801a      	strh	r2, [r3, #0]
 800a5c0:	e00a      	b.n	800a5d8 <SSD1306_Putc+0x12c>
		}else{
			SSD1306.CurrentX += Font->FontHeight + 1;
 800a5c2:	4b42      	ldr	r3, [pc, #264]	; (800a6cc <SSD1306_Putc+0x220>)
 800a5c4:	881a      	ldrh	r2, [r3, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	785b      	ldrb	r3, [r3, #1]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	18d3      	adds	r3, r2, r3
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	4b3d      	ldr	r3, [pc, #244]	; (800a6cc <SSD1306_Putc+0x220>)
 800a5d6:	801a      	strh	r2, [r3, #0]
		}

		/* Return character written */
		return ch;
 800a5d8:	1dfb      	adds	r3, r7, #7
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	e070      	b.n	800a6c0 <SSD1306_Putc+0x214>
	}
	else{
		/* Check available space in LCD */
		if (
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800a5de:	4b3b      	ldr	r3, [pc, #236]	; (800a6cc <SSD1306_Putc+0x220>)
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	001a      	movs	r2, r3
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	18d3      	adds	r3, r2, r3
		if (
 800a5ea:	2b7f      	cmp	r3, #127	; 0x7f
 800a5ec:	dc07      	bgt.n	800a5fe <SSD1306_Putc+0x152>
			SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800a5ee:	4b37      	ldr	r3, [pc, #220]	; (800a6cc <SSD1306_Putc+0x220>)
 800a5f0:	885b      	ldrh	r3, [r3, #2]
 800a5f2:	001a      	movs	r2, r3
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	785b      	ldrb	r3, [r3, #1]
 800a5f8:	18d3      	adds	r3, r2, r3
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800a5fa:	2b3f      	cmp	r3, #63	; 0x3f
 800a5fc:	dd01      	ble.n	800a602 <SSD1306_Putc+0x156>
		) {
			/* Error */
			return 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	e05e      	b.n	800a6c0 <SSD1306_Putc+0x214>
		}

		/* Go through font */
		for (i = 0; i < Font->FontHeight; i++) {
 800a602:	2300      	movs	r3, #0
 800a604:	617b      	str	r3, [r7, #20]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	785b      	ldrb	r3, [r3, #1]
 800a60a:	001a      	movs	r2, r3
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	4293      	cmp	r3, r2
 800a610:	d24b      	bcs.n	800a6aa <SSD1306_Putc+0x1fe>
			b = Font->data[(ch - 32) * Font->FontHeight + i];
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	1dfb      	adds	r3, r7, #7
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	3b20      	subs	r3, #32
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	7849      	ldrb	r1, [r1, #1]
 800a620:	434b      	muls	r3, r1
 800a622:	0019      	movs	r1, r3
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	18cb      	adds	r3, r1, r3
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	18d3      	adds	r3, r2, r3
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	60bb      	str	r3, [r7, #8]
			for (j = 0; j < Font->FontWidth; j++) {
 800a630:	2300      	movs	r3, #0
 800a632:	613b      	str	r3, [r7, #16]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	001a      	movs	r2, r3
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d230      	bcs.n	800a6a2 <SSD1306_Putc+0x1f6>
				if ((b << j) & 0x8000) {
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	409a      	lsls	r2, r3
 800a646:	2380      	movs	r3, #128	; 0x80
 800a648:	021b      	lsls	r3, r3, #8
 800a64a:	4013      	ands	r3, r2
 800a64c:	d011      	beq.n	800a672 <SSD1306_Putc+0x1c6>
					SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800a64e:	4b1f      	ldr	r3, [pc, #124]	; (800a6cc <SSD1306_Putc+0x220>)
 800a650:	881a      	ldrh	r2, [r3, #0]
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	b29b      	uxth	r3, r3
 800a656:	18d3      	adds	r3, r2, r3
 800a658:	b298      	uxth	r0, r3
 800a65a:	4b1c      	ldr	r3, [pc, #112]	; (800a6cc <SSD1306_Putc+0x220>)
 800a65c:	885a      	ldrh	r2, [r3, #2]
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	b29b      	uxth	r3, r3
 800a662:	18d3      	adds	r3, r2, r3
 800a664:	b299      	uxth	r1, r3
 800a666:	1dbb      	adds	r3, r7, #6
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	001a      	movs	r2, r3
 800a66c:	f7ff fe96 	bl	800a39c <SSD1306_DrawPixel>
 800a670:	e013      	b.n	800a69a <SSD1306_Putc+0x1ee>
				} else {
					SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800a672:	4b16      	ldr	r3, [pc, #88]	; (800a6cc <SSD1306_Putc+0x220>)
 800a674:	881a      	ldrh	r2, [r3, #0]
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	b29b      	uxth	r3, r3
 800a67a:	18d3      	adds	r3, r2, r3
 800a67c:	b298      	uxth	r0, r3
 800a67e:	4b13      	ldr	r3, [pc, #76]	; (800a6cc <SSD1306_Putc+0x220>)
 800a680:	885a      	ldrh	r2, [r3, #2]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	b29b      	uxth	r3, r3
 800a686:	18d3      	adds	r3, r2, r3
 800a688:	b299      	uxth	r1, r3
 800a68a:	1dbb      	adds	r3, r7, #6
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	425a      	negs	r2, r3
 800a690:	4153      	adcs	r3, r2
 800a692:	b2db      	uxtb	r3, r3
 800a694:	001a      	movs	r2, r3
 800a696:	f7ff fe81 	bl	800a39c <SSD1306_DrawPixel>
			for (j = 0; j < Font->FontWidth; j++) {
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	3301      	adds	r3, #1
 800a69e:	613b      	str	r3, [r7, #16]
 800a6a0:	e7c8      	b.n	800a634 <SSD1306_Putc+0x188>
		for (i = 0; i < Font->FontHeight; i++) {
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	617b      	str	r3, [r7, #20]
 800a6a8:	e7ad      	b.n	800a606 <SSD1306_Putc+0x15a>
				}
			}
		}

		/* Increase pointer */
		SSD1306.CurrentX += Font->FontWidth;
 800a6aa:	4b08      	ldr	r3, [pc, #32]	; (800a6cc <SSD1306_Putc+0x220>)
 800a6ac:	881a      	ldrh	r2, [r3, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	18d3      	adds	r3, r2, r3
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	4b04      	ldr	r3, [pc, #16]	; (800a6cc <SSD1306_Putc+0x220>)
 800a6ba:	801a      	strh	r2, [r3, #0]

		/* Return character written */
		return ch;
 800a6bc:	1dfb      	adds	r3, r7, #7
 800a6be:	781b      	ldrb	r3, [r3, #0]
	}
}
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	b006      	add	sp, #24
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	2000003c 	.word	0x2000003c
 800a6cc:	20002910 	.word	0x20002910

0800a6d0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	1dfb      	adds	r3, r7, #7
 800a6dc:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d018      	beq.n	800a718 <SSD1306_Puts+0x48>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	7818      	ldrb	r0, [r3, #0]
 800a6ea:	1dfb      	adds	r3, r7, #7
 800a6ec:	781a      	ldrb	r2, [r3, #0]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	0019      	movs	r1, r3
 800a6f2:	f7ff fedb 	bl	800a4ac <SSD1306_Putc>
 800a6f6:	0003      	movs	r3, r0
 800a6f8:	001a      	movs	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	1e5a      	subs	r2, r3, #1
 800a702:	4193      	sbcs	r3, r2
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <SSD1306_Puts+0x40>
			/* Return error */
			return *str;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	e005      	b.n	800a71c <SSD1306_Puts+0x4c>
		}

		/* Increase string pointer */
		str++;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3301      	adds	r3, #1
 800a714:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800a716:	e7e2      	b.n	800a6de <SSD1306_Puts+0xe>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	781b      	ldrb	r3, [r3, #0]
}
 800a71c:	0018      	movs	r0, r3
 800a71e:	46bd      	mov	sp, r7
 800a720:	b004      	add	sp, #16
 800a722:	bd80      	pop	{r7, pc}

0800a724 <SSD1306_Putstring>:
// Hàm viết chữ theo các dòng trên Oled và không tính dòng header
char SSD1306_Putstring(int line,int x, char* str, FontDef_t* Font, SSD1306_COLOR_t color){
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
 800a730:	603b      	str	r3, [r7, #0]
	switch(line){
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b02      	cmp	r3, #2
 800a736:	d011      	beq.n	800a75c <SSD1306_Putstring+0x38>
 800a738:	dc02      	bgt.n	800a740 <SSD1306_Putstring+0x1c>
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d005      	beq.n	800a74a <SSD1306_Putstring+0x26>
 800a73e:	e028      	b.n	800a792 <SSD1306_Putstring+0x6e>
 800a740:	2b03      	cmp	r3, #3
 800a742:	d014      	beq.n	800a76e <SSD1306_Putstring+0x4a>
 800a744:	2b04      	cmp	r3, #4
 800a746:	d01b      	beq.n	800a780 <SSD1306_Putstring+0x5c>
 800a748:	e023      	b.n	800a792 <SSD1306_Putstring+0x6e>
		case 1:
			// Xóa dữ liệu cũ dòng 1 và đưa đến vị trí để hiện chữ lên dòng 1
			SSD1306_Clear_Activity();
 800a74a:	f000 fa76 	bl	800ac3a <SSD1306_Clear_Activity>
			SSD1306_GotoXY(x, 17);
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	b29b      	uxth	r3, r3
 800a752:	2111      	movs	r1, #17
 800a754:	0018      	movs	r0, r3
 800a756:	f7ff fe8f 	bl	800a478 <SSD1306_GotoXY>
			break;
 800a75a:	e01a      	b.n	800a792 <SSD1306_Putstring+0x6e>
		case 2:
			// Xóa dữ liệu cũ dòng 2 và đưa đến vị trí để hiện chữ lên dòng 2
			SSD1306_Clear_Status1();
 800a75c:	f000 fa7d 	bl	800ac5a <SSD1306_Clear_Status1>
			SSD1306_GotoXY(x, 29);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	b29b      	uxth	r3, r3
 800a764:	211d      	movs	r1, #29
 800a766:	0018      	movs	r0, r3
 800a768:	f7ff fe86 	bl	800a478 <SSD1306_GotoXY>
			break;
 800a76c:	e011      	b.n	800a792 <SSD1306_Putstring+0x6e>
		case 3:
			// Xóa dữ liệu cũ dòng 3 và đưa đến vị trí để hiện chữ lên dòng 3
			SSD1306_Clear_Status2();
 800a76e:	f000 fa84 	bl	800ac7a <SSD1306_Clear_Status2>
			SSD1306_GotoXY(x, 42);
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	b29b      	uxth	r3, r3
 800a776:	212a      	movs	r1, #42	; 0x2a
 800a778:	0018      	movs	r0, r3
 800a77a:	f7ff fe7d 	bl	800a478 <SSD1306_GotoXY>
			break;
 800a77e:	e008      	b.n	800a792 <SSD1306_Putstring+0x6e>
		case 4:
			// Xóa dữ liệu cũ dòng 4 và đưa đến vị trí để hiện chữ lên dòng 4
			SSD1306_Clear_Bottom();
 800a780:	f000 fa4b 	bl	800ac1a <SSD1306_Clear_Bottom>
			SSD1306_GotoXY(x, 54);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	b29b      	uxth	r3, r3
 800a788:	2136      	movs	r1, #54	; 0x36
 800a78a:	0018      	movs	r0, r3
 800a78c:	f7ff fe74 	bl	800a478 <SSD1306_GotoXY>
			break;
 800a790:	46c0      	nop			; (mov r8, r8)
	}
	SSD1306_Puts (str, Font, color);
 800a792:	2318      	movs	r3, #24
 800a794:	18fb      	adds	r3, r7, r3
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	0018      	movs	r0, r3
 800a79e:	f7ff ff97 	bl	800a6d0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800a7a2:	f7ff fdad 	bl	800a300 <SSD1306_UpdateScreen>
	return *str;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
}
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	b004      	add	sp, #16
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800a7b2:	b5b0      	push	{r4, r5, r7, lr}
 800a7b4:	b086      	sub	sp, #24
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	0005      	movs	r5, r0
 800a7ba:	000c      	movs	r4, r1
 800a7bc:	0010      	movs	r0, r2
 800a7be:	0019      	movs	r1, r3
 800a7c0:	1dbb      	adds	r3, r7, #6
 800a7c2:	1c2a      	adds	r2, r5, #0
 800a7c4:	801a      	strh	r2, [r3, #0]
 800a7c6:	1d3b      	adds	r3, r7, #4
 800a7c8:	1c22      	adds	r2, r4, #0
 800a7ca:	801a      	strh	r2, [r3, #0]
 800a7cc:	1cbb      	adds	r3, r7, #2
 800a7ce:	1c02      	adds	r2, r0, #0
 800a7d0:	801a      	strh	r2, [r3, #0]
 800a7d2:	003b      	movs	r3, r7
 800a7d4:	1c0a      	adds	r2, r1, #0
 800a7d6:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800a7d8:	1dbb      	adds	r3, r7, #6
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	2b7f      	cmp	r3, #127	; 0x7f
 800a7de:	d902      	bls.n	800a7e6 <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 800a7e0:	1dbb      	adds	r3, r7, #6
 800a7e2:	227f      	movs	r2, #127	; 0x7f
 800a7e4:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 800a7e6:	1cbb      	adds	r3, r7, #2
 800a7e8:	881b      	ldrh	r3, [r3, #0]
 800a7ea:	2b7f      	cmp	r3, #127	; 0x7f
 800a7ec:	d902      	bls.n	800a7f4 <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 800a7ee:	1cbb      	adds	r3, r7, #2
 800a7f0:	227f      	movs	r2, #127	; 0x7f
 800a7f2:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800a7f4:	1d3b      	adds	r3, r7, #4
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	2b3f      	cmp	r3, #63	; 0x3f
 800a7fa:	d902      	bls.n	800a802 <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 800a7fc:	1d3b      	adds	r3, r7, #4
 800a7fe:	223f      	movs	r2, #63	; 0x3f
 800a800:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800a802:	003b      	movs	r3, r7
 800a804:	881b      	ldrh	r3, [r3, #0]
 800a806:	2b3f      	cmp	r3, #63	; 0x3f
 800a808:	d902      	bls.n	800a810 <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 800a80a:	003b      	movs	r3, r7
 800a80c:	223f      	movs	r2, #63	; 0x3f
 800a80e:	801a      	strh	r2, [r3, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 800a810:	1dba      	adds	r2, r7, #6
 800a812:	1cbb      	adds	r3, r7, #2
 800a814:	8812      	ldrh	r2, [r2, #0]
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d207      	bcs.n	800a82c <SSD1306_DrawLine+0x7a>
 800a81c:	1cba      	adds	r2, r7, #2
 800a81e:	1dbb      	adds	r3, r7, #6
 800a820:	8812      	ldrh	r2, [r2, #0]
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	b29b      	uxth	r3, r3
 800a828:	b21b      	sxth	r3, r3
 800a82a:	e006      	b.n	800a83a <SSD1306_DrawLine+0x88>
 800a82c:	1dba      	adds	r2, r7, #6
 800a82e:	1cbb      	adds	r3, r7, #2
 800a830:	8812      	ldrh	r2, [r2, #0]
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	b29b      	uxth	r3, r3
 800a838:	b21b      	sxth	r3, r3
 800a83a:	2212      	movs	r2, #18
 800a83c:	18ba      	adds	r2, r7, r2
 800a83e:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 800a840:	1d3a      	adds	r2, r7, #4
 800a842:	003b      	movs	r3, r7
 800a844:	8812      	ldrh	r2, [r2, #0]
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d207      	bcs.n	800a85c <SSD1306_DrawLine+0xaa>
 800a84c:	003a      	movs	r2, r7
 800a84e:	1d3b      	adds	r3, r7, #4
 800a850:	8812      	ldrh	r2, [r2, #0]
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	b29b      	uxth	r3, r3
 800a858:	b21b      	sxth	r3, r3
 800a85a:	e006      	b.n	800a86a <SSD1306_DrawLine+0xb8>
 800a85c:	1d3a      	adds	r2, r7, #4
 800a85e:	003b      	movs	r3, r7
 800a860:	8812      	ldrh	r2, [r2, #0]
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	b29b      	uxth	r3, r3
 800a868:	b21b      	sxth	r3, r3
 800a86a:	2210      	movs	r2, #16
 800a86c:	18ba      	adds	r2, r7, r2
 800a86e:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1;
 800a870:	1dba      	adds	r2, r7, #6
 800a872:	1cbb      	adds	r3, r7, #2
 800a874:	8812      	ldrh	r2, [r2, #0]
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d201      	bcs.n	800a880 <SSD1306_DrawLine+0xce>
 800a87c:	2201      	movs	r2, #1
 800a87e:	e001      	b.n	800a884 <SSD1306_DrawLine+0xd2>
 800a880:	2301      	movs	r3, #1
 800a882:	425a      	negs	r2, r3
 800a884:	230e      	movs	r3, #14
 800a886:	18fb      	adds	r3, r7, r3
 800a888:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1;
 800a88a:	1d3a      	adds	r2, r7, #4
 800a88c:	003b      	movs	r3, r7
 800a88e:	8812      	ldrh	r2, [r2, #0]
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	429a      	cmp	r2, r3
 800a894:	d201      	bcs.n	800a89a <SSD1306_DrawLine+0xe8>
 800a896:	2201      	movs	r2, #1
 800a898:	e001      	b.n	800a89e <SSD1306_DrawLine+0xec>
 800a89a:	2301      	movs	r3, #1
 800a89c:	425a      	negs	r2, r3
 800a89e:	230c      	movs	r3, #12
 800a8a0:	18fb      	adds	r3, r7, r3
 800a8a2:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2;
 800a8a4:	2312      	movs	r3, #18
 800a8a6:	18fa      	adds	r2, r7, r3
 800a8a8:	2310      	movs	r3, #16
 800a8aa:	18fb      	adds	r3, r7, r3
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	5e52      	ldrsh	r2, [r2, r1]
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	5e5b      	ldrsh	r3, [r3, r1]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	dd09      	ble.n	800a8cc <SSD1306_DrawLine+0x11a>
 800a8b8:	2312      	movs	r3, #18
 800a8ba:	18fb      	adds	r3, r7, r3
 800a8bc:	2200      	movs	r2, #0
 800a8be:	5e9b      	ldrsh	r3, [r3, r2]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	da00      	bge.n	800a8c6 <SSD1306_DrawLine+0x114>
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	105b      	asrs	r3, r3, #1
 800a8c8:	b21b      	sxth	r3, r3
 800a8ca:	e009      	b.n	800a8e0 <SSD1306_DrawLine+0x12e>
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	18fb      	adds	r3, r7, r3
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	5e9b      	ldrsh	r3, [r3, r2]
 800a8d4:	425b      	negs	r3, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	da00      	bge.n	800a8dc <SSD1306_DrawLine+0x12a>
 800a8da:	3301      	adds	r3, #1
 800a8dc:	105b      	asrs	r3, r3, #1
 800a8de:	b21b      	sxth	r3, r3
 800a8e0:	2216      	movs	r2, #22
 800a8e2:	18ba      	adds	r2, r7, r2
 800a8e4:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 800a8e6:	2312      	movs	r3, #18
 800a8e8:	18fb      	adds	r3, r7, r3
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	5e9b      	ldrsh	r3, [r3, r2]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d149      	bne.n	800a986 <SSD1306_DrawLine+0x1d4>
		if (y1 < y0) {
 800a8f2:	003a      	movs	r2, r7
 800a8f4:	1d3b      	adds	r3, r7, #4
 800a8f6:	8812      	ldrh	r2, [r2, #0]
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d20c      	bcs.n	800a918 <SSD1306_DrawLine+0x166>
			tmp = y1;
 800a8fe:	2108      	movs	r1, #8
 800a900:	187b      	adds	r3, r7, r1
 800a902:	003a      	movs	r2, r7
 800a904:	8812      	ldrh	r2, [r2, #0]
 800a906:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 800a908:	003b      	movs	r3, r7
 800a90a:	1d3a      	adds	r2, r7, #4
 800a90c:	8812      	ldrh	r2, [r2, #0]
 800a90e:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 800a910:	1d3b      	adds	r3, r7, #4
 800a912:	187a      	adds	r2, r7, r1
 800a914:	8812      	ldrh	r2, [r2, #0]
 800a916:	801a      	strh	r2, [r3, #0]
		}

		if (x1 < x0) {
 800a918:	1cba      	adds	r2, r7, #2
 800a91a:	1dbb      	adds	r3, r7, #6
 800a91c:	8812      	ldrh	r2, [r2, #0]
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	429a      	cmp	r2, r3
 800a922:	d20c      	bcs.n	800a93e <SSD1306_DrawLine+0x18c>
			tmp = x1;
 800a924:	2108      	movs	r1, #8
 800a926:	187b      	adds	r3, r7, r1
 800a928:	1cba      	adds	r2, r7, #2
 800a92a:	8812      	ldrh	r2, [r2, #0]
 800a92c:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 800a92e:	1cbb      	adds	r3, r7, #2
 800a930:	1dba      	adds	r2, r7, #6
 800a932:	8812      	ldrh	r2, [r2, #0]
 800a934:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 800a936:	1dbb      	adds	r3, r7, #6
 800a938:	187a      	adds	r2, r7, r1
 800a93a:	8812      	ldrh	r2, [r2, #0]
 800a93c:	801a      	strh	r2, [r3, #0]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800a93e:	2314      	movs	r3, #20
 800a940:	18fb      	adds	r3, r7, r3
 800a942:	1d3a      	adds	r2, r7, #4
 800a944:	8812      	ldrh	r2, [r2, #0]
 800a946:	801a      	strh	r2, [r3, #0]
 800a948:	2314      	movs	r3, #20
 800a94a:	18fb      	adds	r3, r7, r3
 800a94c:	2200      	movs	r2, #0
 800a94e:	5e9a      	ldrsh	r2, [r3, r2]
 800a950:	003b      	movs	r3, r7
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	dd00      	ble.n	800a95a <SSD1306_DrawLine+0x1a8>
 800a958:	e0ba      	b.n	800aad0 <SSD1306_DrawLine+0x31e>
			SSD1306_DrawPixel(x0, i, c);
 800a95a:	2114      	movs	r1, #20
 800a95c:	000c      	movs	r4, r1
 800a95e:	187b      	adds	r3, r7, r1
 800a960:	8819      	ldrh	r1, [r3, #0]
 800a962:	2328      	movs	r3, #40	; 0x28
 800a964:	18fb      	adds	r3, r7, r3
 800a966:	781a      	ldrb	r2, [r3, #0]
 800a968:	1dbb      	adds	r3, r7, #6
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	0018      	movs	r0, r3
 800a96e:	f7ff fd15 	bl	800a39c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800a972:	0021      	movs	r1, r4
 800a974:	187b      	adds	r3, r7, r1
 800a976:	2200      	movs	r2, #0
 800a978:	5e9b      	ldrsh	r3, [r3, r2]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	3301      	adds	r3, #1
 800a97e:	b29a      	uxth	r2, r3
 800a980:	187b      	adds	r3, r7, r1
 800a982:	801a      	strh	r2, [r3, #0]
 800a984:	e7e0      	b.n	800a948 <SSD1306_DrawLine+0x196>

		/* Return from function */
		return;
	}

	if (dy == 0) {
 800a986:	2310      	movs	r3, #16
 800a988:	18fb      	adds	r3, r7, r3
 800a98a:	2200      	movs	r2, #0
 800a98c:	5e9b      	ldrsh	r3, [r3, r2]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d149      	bne.n	800aa26 <SSD1306_DrawLine+0x274>
		if (y1 < y0) {
 800a992:	003a      	movs	r2, r7
 800a994:	1d3b      	adds	r3, r7, #4
 800a996:	8812      	ldrh	r2, [r2, #0]
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d20c      	bcs.n	800a9b8 <SSD1306_DrawLine+0x206>
			tmp = y1;
 800a99e:	2108      	movs	r1, #8
 800a9a0:	187b      	adds	r3, r7, r1
 800a9a2:	003a      	movs	r2, r7
 800a9a4:	8812      	ldrh	r2, [r2, #0]
 800a9a6:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 800a9a8:	003b      	movs	r3, r7
 800a9aa:	1d3a      	adds	r2, r7, #4
 800a9ac:	8812      	ldrh	r2, [r2, #0]
 800a9ae:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 800a9b0:	1d3b      	adds	r3, r7, #4
 800a9b2:	187a      	adds	r2, r7, r1
 800a9b4:	8812      	ldrh	r2, [r2, #0]
 800a9b6:	801a      	strh	r2, [r3, #0]
		}

		if (x1 < x0) {
 800a9b8:	1cba      	adds	r2, r7, #2
 800a9ba:	1dbb      	adds	r3, r7, #6
 800a9bc:	8812      	ldrh	r2, [r2, #0]
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d20c      	bcs.n	800a9de <SSD1306_DrawLine+0x22c>
			tmp = x1;
 800a9c4:	2108      	movs	r1, #8
 800a9c6:	187b      	adds	r3, r7, r1
 800a9c8:	1cba      	adds	r2, r7, #2
 800a9ca:	8812      	ldrh	r2, [r2, #0]
 800a9cc:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 800a9ce:	1cbb      	adds	r3, r7, #2
 800a9d0:	1dba      	adds	r2, r7, #6
 800a9d2:	8812      	ldrh	r2, [r2, #0]
 800a9d4:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 800a9d6:	1dbb      	adds	r3, r7, #6
 800a9d8:	187a      	adds	r2, r7, r1
 800a9da:	8812      	ldrh	r2, [r2, #0]
 800a9dc:	801a      	strh	r2, [r3, #0]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800a9de:	2314      	movs	r3, #20
 800a9e0:	18fb      	adds	r3, r7, r3
 800a9e2:	1dba      	adds	r2, r7, #6
 800a9e4:	8812      	ldrh	r2, [r2, #0]
 800a9e6:	801a      	strh	r2, [r3, #0]
 800a9e8:	2314      	movs	r3, #20
 800a9ea:	18fb      	adds	r3, r7, r3
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	5e9a      	ldrsh	r2, [r3, r2]
 800a9f0:	1cbb      	adds	r3, r7, #2
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	dd00      	ble.n	800a9fa <SSD1306_DrawLine+0x248>
 800a9f8:	e06c      	b.n	800aad4 <SSD1306_DrawLine+0x322>
			SSD1306_DrawPixel(i, y0, c);
 800a9fa:	2114      	movs	r1, #20
 800a9fc:	000c      	movs	r4, r1
 800a9fe:	187b      	adds	r3, r7, r1
 800aa00:	8818      	ldrh	r0, [r3, #0]
 800aa02:	2328      	movs	r3, #40	; 0x28
 800aa04:	18fb      	adds	r3, r7, r3
 800aa06:	781a      	ldrb	r2, [r3, #0]
 800aa08:	1d3b      	adds	r3, r7, #4
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	0019      	movs	r1, r3
 800aa0e:	f7ff fcc5 	bl	800a39c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800aa12:	0021      	movs	r1, r4
 800aa14:	187b      	adds	r3, r7, r1
 800aa16:	2200      	movs	r2, #0
 800aa18:	5e9b      	ldrsh	r3, [r3, r2]
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	187b      	adds	r3, r7, r1
 800aa22:	801a      	strh	r2, [r3, #0]
 800aa24:	e7e0      	b.n	800a9e8 <SSD1306_DrawLine+0x236>
		/* Return from function */
		return;
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800aa26:	2328      	movs	r3, #40	; 0x28
 800aa28:	18fb      	adds	r3, r7, r3
 800aa2a:	781a      	ldrb	r2, [r3, #0]
 800aa2c:	1d3b      	adds	r3, r7, #4
 800aa2e:	8819      	ldrh	r1, [r3, #0]
 800aa30:	1dbb      	adds	r3, r7, #6
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	0018      	movs	r0, r3
 800aa36:	f7ff fcb1 	bl	800a39c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800aa3a:	1dba      	adds	r2, r7, #6
 800aa3c:	1cbb      	adds	r3, r7, #2
 800aa3e:	8812      	ldrh	r2, [r2, #0]
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d105      	bne.n	800aa52 <SSD1306_DrawLine+0x2a0>
 800aa46:	1d3a      	adds	r2, r7, #4
 800aa48:	003b      	movs	r3, r7
 800aa4a:	8812      	ldrh	r2, [r2, #0]
 800aa4c:	881b      	ldrh	r3, [r3, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d042      	beq.n	800aad8 <SSD1306_DrawLine+0x326>
			break;
		}
		e2 = err;
 800aa52:	210a      	movs	r1, #10
 800aa54:	187b      	adds	r3, r7, r1
 800aa56:	2216      	movs	r2, #22
 800aa58:	18ba      	adds	r2, r7, r2
 800aa5a:	8812      	ldrh	r2, [r2, #0]
 800aa5c:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 800aa5e:	187b      	adds	r3, r7, r1
 800aa60:	2200      	movs	r2, #0
 800aa62:	5e9a      	ldrsh	r2, [r3, r2]
 800aa64:	2312      	movs	r3, #18
 800aa66:	18fb      	adds	r3, r7, r3
 800aa68:	2100      	movs	r1, #0
 800aa6a:	5e5b      	ldrsh	r3, [r3, r1]
 800aa6c:	425b      	negs	r3, r3
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	dd11      	ble.n	800aa96 <SSD1306_DrawLine+0x2e4>
			err -= dy;
 800aa72:	2116      	movs	r1, #22
 800aa74:	187b      	adds	r3, r7, r1
 800aa76:	881a      	ldrh	r2, [r3, #0]
 800aa78:	2310      	movs	r3, #16
 800aa7a:	18fb      	adds	r3, r7, r3
 800aa7c:	881b      	ldrh	r3, [r3, #0]
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	187b      	adds	r3, r7, r1
 800aa84:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 800aa86:	230e      	movs	r3, #14
 800aa88:	18fb      	adds	r3, r7, r3
 800aa8a:	8819      	ldrh	r1, [r3, #0]
 800aa8c:	1dbb      	adds	r3, r7, #6
 800aa8e:	1dba      	adds	r2, r7, #6
 800aa90:	8812      	ldrh	r2, [r2, #0]
 800aa92:	188a      	adds	r2, r1, r2
 800aa94:	801a      	strh	r2, [r3, #0]
		}
		if (e2 < dy) {
 800aa96:	230a      	movs	r3, #10
 800aa98:	18fa      	adds	r2, r7, r3
 800aa9a:	2310      	movs	r3, #16
 800aa9c:	18fb      	adds	r3, r7, r3
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	5e52      	ldrsh	r2, [r2, r1]
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	5e5b      	ldrsh	r3, [r3, r1]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	dabd      	bge.n	800aa26 <SSD1306_DrawLine+0x274>
			err += dx;
 800aaaa:	2116      	movs	r1, #22
 800aaac:	187b      	adds	r3, r7, r1
 800aaae:	881a      	ldrh	r2, [r3, #0]
 800aab0:	2312      	movs	r3, #18
 800aab2:	18fb      	adds	r3, r7, r3
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	18d3      	adds	r3, r2, r3
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	187b      	adds	r3, r7, r1
 800aabc:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 800aabe:	230c      	movs	r3, #12
 800aac0:	18fb      	adds	r3, r7, r3
 800aac2:	8819      	ldrh	r1, [r3, #0]
 800aac4:	1d3b      	adds	r3, r7, #4
 800aac6:	1d3a      	adds	r2, r7, #4
 800aac8:	8812      	ldrh	r2, [r2, #0]
 800aaca:	188a      	adds	r2, r1, r2
 800aacc:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 800aace:	e7aa      	b.n	800aa26 <SSD1306_DrawLine+0x274>
		return;
 800aad0:	46c0      	nop			; (mov r8, r8)
 800aad2:	e002      	b.n	800aada <SSD1306_DrawLine+0x328>
		return;
 800aad4:	46c0      	nop			; (mov r8, r8)
 800aad6:	e000      	b.n	800aada <SSD1306_DrawLine+0x328>
			break;
 800aad8:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 800aada:	46bd      	mov	sp, r7
 800aadc:	b006      	add	sp, #24
 800aade:	bdb0      	pop	{r4, r5, r7, pc}

0800aae0 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800aae0:	b5b0      	push	{r4, r5, r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	0005      	movs	r5, r0
 800aae8:	000c      	movs	r4, r1
 800aaea:	0010      	movs	r0, r2
 800aaec:	0019      	movs	r1, r3
 800aaee:	1dbb      	adds	r3, r7, #6
 800aaf0:	1c2a      	adds	r2, r5, #0
 800aaf2:	801a      	strh	r2, [r3, #0]
 800aaf4:	1d3b      	adds	r3, r7, #4
 800aaf6:	1c22      	adds	r2, r4, #0
 800aaf8:	801a      	strh	r2, [r3, #0]
 800aafa:	1cbb      	adds	r3, r7, #2
 800aafc:	1c02      	adds	r2, r0, #0
 800aafe:	801a      	strh	r2, [r3, #0]
 800ab00:	003b      	movs	r3, r7
 800ab02:	1c0a      	adds	r2, r1, #0
 800ab04:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 800ab06:	1dbb      	adds	r3, r7, #6
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	2b7f      	cmp	r3, #127	; 0x7f
 800ab0c:	d84f      	bhi.n	800abae <SSD1306_DrawFilledRectangle+0xce>
		x >= SSD1306_WIDTH ||
 800ab0e:	1d3b      	adds	r3, r7, #4
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	2b3f      	cmp	r3, #63	; 0x3f
 800ab14:	d84b      	bhi.n	800abae <SSD1306_DrawFilledRectangle+0xce>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800ab16:	1dbb      	adds	r3, r7, #6
 800ab18:	881a      	ldrh	r2, [r3, #0]
 800ab1a:	1cbb      	adds	r3, r7, #2
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	18d3      	adds	r3, r2, r3
 800ab20:	2b7f      	cmp	r3, #127	; 0x7f
 800ab22:	dd05      	ble.n	800ab30 <SSD1306_DrawFilledRectangle+0x50>
		w = SSD1306_WIDTH - x;
 800ab24:	1cbb      	adds	r3, r7, #2
 800ab26:	1dba      	adds	r2, r7, #6
 800ab28:	8812      	ldrh	r2, [r2, #0]
 800ab2a:	2180      	movs	r1, #128	; 0x80
 800ab2c:	1a8a      	subs	r2, r1, r2
 800ab2e:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800ab30:	1d3b      	adds	r3, r7, #4
 800ab32:	881a      	ldrh	r2, [r3, #0]
 800ab34:	003b      	movs	r3, r7
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	18d3      	adds	r3, r2, r3
 800ab3a:	2b3f      	cmp	r3, #63	; 0x3f
 800ab3c:	dd05      	ble.n	800ab4a <SSD1306_DrawFilledRectangle+0x6a>
		h = SSD1306_HEIGHT - y;
 800ab3e:	003b      	movs	r3, r7
 800ab40:	1d3a      	adds	r2, r7, #4
 800ab42:	8812      	ldrh	r2, [r2, #0]
 800ab44:	2140      	movs	r1, #64	; 0x40
 800ab46:	1a8a      	subs	r2, r1, r2
 800ab48:	801a      	strh	r2, [r3, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800ab4a:	230f      	movs	r3, #15
 800ab4c:	18fb      	adds	r3, r7, r3
 800ab4e:	2200      	movs	r2, #0
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	230f      	movs	r3, #15
 800ab54:	18fb      	adds	r3, r7, r3
 800ab56:	781a      	ldrb	r2, [r3, #0]
 800ab58:	003b      	movs	r3, r7
 800ab5a:	881b      	ldrh	r3, [r3, #0]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	dc27      	bgt.n	800abb0 <SSD1306_DrawFilledRectangle+0xd0>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 800ab60:	200f      	movs	r0, #15
 800ab62:	183b      	adds	r3, r7, r0
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	1d3b      	adds	r3, r7, #4
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	18d3      	adds	r3, r2, r3
 800ab6e:	b299      	uxth	r1, r3
 800ab70:	1dba      	adds	r2, r7, #6
 800ab72:	1cbb      	adds	r3, r7, #2
 800ab74:	8812      	ldrh	r2, [r2, #0]
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	18d3      	adds	r3, r2, r3
 800ab7a:	b29c      	uxth	r4, r3
 800ab7c:	0005      	movs	r5, r0
 800ab7e:	183b      	adds	r3, r7, r0
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	1d3b      	adds	r3, r7, #4
 800ab86:	881b      	ldrh	r3, [r3, #0]
 800ab88:	18d3      	adds	r3, r2, r3
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	1dbb      	adds	r3, r7, #6
 800ab8e:	8818      	ldrh	r0, [r3, #0]
 800ab90:	2320      	movs	r3, #32
 800ab92:	18fb      	adds	r3, r7, r3
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	0013      	movs	r3, r2
 800ab9a:	0022      	movs	r2, r4
 800ab9c:	f7ff fe09 	bl	800a7b2 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 800aba0:	0028      	movs	r0, r5
 800aba2:	183b      	adds	r3, r7, r0
 800aba4:	781a      	ldrb	r2, [r3, #0]
 800aba6:	183b      	adds	r3, r7, r0
 800aba8:	3201      	adds	r2, #1
 800abaa:	701a      	strb	r2, [r3, #0]
 800abac:	e7d1      	b.n	800ab52 <SSD1306_DrawFilledRectangle+0x72>
		return;
 800abae:	46c0      	nop			; (mov r8, r8)
	}
}
 800abb0:	46bd      	mov	sp, r7
 800abb2:	b004      	add	sp, #16
 800abb4:	bdb0      	pop	{r4, r5, r7, pc}

0800abb6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	af00      	add	r7, sp, #0
	SSD1306_Fill (SSD1306_COLOR_BLACK);
 800abba:	2000      	movs	r0, #0
 800abbc:	f7ff fbd4 	bl	800a368 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800abc0:	f7ff fb9e 	bl	800a300 <SSD1306_UpdateScreen>
}
 800abc4:	46c0      	nop			; (mov r8, r8)
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <SSD1306_Clear_Data>:

void SSD1306_Clear_Data(void){
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 16, 128, 48, SSD1306_COLOR_BLACK);
 800abd0:	2300      	movs	r3, #0
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	2330      	movs	r3, #48	; 0x30
 800abd6:	2280      	movs	r2, #128	; 0x80
 800abd8:	2110      	movs	r1, #16
 800abda:	2000      	movs	r0, #0
 800abdc:	f7ff ff80 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 800abe0:	f7ff fb8e 	bl	800a300 <SSD1306_UpdateScreen>
}
 800abe4:	46c0      	nop			; (mov r8, r8)
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <SSD1306_Clear_Header>:
void SSD1306_Clear_Header(void){
 800abea:	b580      	push	{r7, lr}
 800abec:	b082      	sub	sp, #8
 800abee:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 0, 66, 15, SSD1306_COLOR_BLACK);
 800abf0:	2300      	movs	r3, #0
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	230f      	movs	r3, #15
 800abf6:	2242      	movs	r2, #66	; 0x42
 800abf8:	2100      	movs	r1, #0
 800abfa:	2000      	movs	r0, #0
 800abfc:	f7ff ff70 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawFilledRectangle(82, 0, 45, 15, SSD1306_COLOR_BLACK);
 800ac00:	2300      	movs	r3, #0
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	230f      	movs	r3, #15
 800ac06:	222d      	movs	r2, #45	; 0x2d
 800ac08:	2100      	movs	r1, #0
 800ac0a:	2052      	movs	r0, #82	; 0x52
 800ac0c:	f7ff ff68 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 800ac10:	f7ff fb76 	bl	800a300 <SSD1306_UpdateScreen>
}
 800ac14:	46c0      	nop			; (mov r8, r8)
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <SSD1306_Clear_Bottom>:
void SSD1306_Clear_Bottom(void){
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 52, 128, 14, SSD1306_COLOR_BLACK);
 800ac20:	2300      	movs	r3, #0
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	230e      	movs	r3, #14
 800ac26:	2280      	movs	r2, #128	; 0x80
 800ac28:	2134      	movs	r1, #52	; 0x34
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	f7ff ff58 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 800ac30:	f7ff fb66 	bl	800a300 <SSD1306_UpdateScreen>
}
 800ac34:	46c0      	nop			; (mov r8, r8)
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <SSD1306_Clear_Activity>:
void SSD1306_Clear_Activity(void){
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 16, 128, 13, SSD1306_COLOR_BLACK);
 800ac40:	2300      	movs	r3, #0
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	230d      	movs	r3, #13
 800ac46:	2280      	movs	r2, #128	; 0x80
 800ac48:	2110      	movs	r1, #16
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	f7ff ff48 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 800ac50:	f7ff fb56 	bl	800a300 <SSD1306_UpdateScreen>
}
 800ac54:	46c0      	nop			; (mov r8, r8)
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <SSD1306_Clear_Status1>:
void SSD1306_Clear_Status1(void){
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 27, 128, 13, SSD1306_COLOR_BLACK);
 800ac60:	2300      	movs	r3, #0
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	230d      	movs	r3, #13
 800ac66:	2280      	movs	r2, #128	; 0x80
 800ac68:	211b      	movs	r1, #27
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f7ff ff38 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 800ac70:	f7ff fb46 	bl	800a300 <SSD1306_UpdateScreen>
}
 800ac74:	46c0      	nop			; (mov r8, r8)
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <SSD1306_Clear_Status2>:
void SSD1306_Clear_Status2(void){
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b082      	sub	sp, #8
 800ac7e:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 39, 128, 13, SSD1306_COLOR_BLACK);
 800ac80:	2300      	movs	r3, #0
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	230d      	movs	r3, #13
 800ac86:	2280      	movs	r2, #128	; 0x80
 800ac88:	2127      	movs	r1, #39	; 0x27
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	f7ff ff28 	bl	800aae0 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 800ac90:	f7ff fb36 	bl	800a300 <SSD1306_UpdateScreen>
}
 800ac94:	46c0      	nop			; (mov r8, r8)
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
	...

0800ac9c <SSD1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void SSD1306_I2C_Init() {
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800aca2:	4b06      	ldr	r3, [pc, #24]	; (800acbc <SSD1306_I2C_Init+0x20>)
 800aca4:	607b      	str	r3, [r7, #4]
	while(p>0)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <SSD1306_I2C_Init+0x18>
		p--;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3b01      	subs	r3, #1
 800acb0:	607b      	str	r3, [r7, #4]
	while(p>0)
 800acb2:	e7f8      	b.n	800aca6 <SSD1306_I2C_Init+0xa>
	//HAL_I2C_DeInit(&I2C_PORT);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800acb4:	46c0      	nop			; (mov r8, r8)
 800acb6:	46bd      	mov	sp, r7
 800acb8:	b002      	add	sp, #8
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	0003d090 	.word	0x0003d090

0800acc0 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800acc0:	b590      	push	{r4, r7, lr}
 800acc2:	b0c7      	sub	sp, #284	; 0x11c
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	0004      	movs	r4, r0
 800acc8:	0008      	movs	r0, r1
 800acca:	603a      	str	r2, [r7, #0]
 800accc:	0019      	movs	r1, r3
 800acce:	4b36      	ldr	r3, [pc, #216]	; (800ada8 <SSD1306_I2C_WriteMulti+0xe8>)
 800acd0:	2288      	movs	r2, #136	; 0x88
 800acd2:	0052      	lsls	r2, r2, #1
 800acd4:	4694      	mov	ip, r2
 800acd6:	44bc      	add	ip, r7
 800acd8:	4463      	add	r3, ip
 800acda:	1c22      	adds	r2, r4, #0
 800acdc:	701a      	strb	r2, [r3, #0]
 800acde:	4b33      	ldr	r3, [pc, #204]	; (800adac <SSD1306_I2C_WriteMulti+0xec>)
 800ace0:	2288      	movs	r2, #136	; 0x88
 800ace2:	0052      	lsls	r2, r2, #1
 800ace4:	4694      	mov	ip, r2
 800ace6:	44bc      	add	ip, r7
 800ace8:	4463      	add	r3, ip
 800acea:	1c02      	adds	r2, r0, #0
 800acec:	701a      	strb	r2, [r3, #0]
 800acee:	4b30      	ldr	r3, [pc, #192]	; (800adb0 <SSD1306_I2C_WriteMulti+0xf0>)
 800acf0:	2288      	movs	r2, #136	; 0x88
 800acf2:	0052      	lsls	r2, r2, #1
 800acf4:	4694      	mov	ip, r2
 800acf6:	44bc      	add	ip, r7
 800acf8:	4463      	add	r3, ip
 800acfa:	1c0a      	adds	r2, r1, #0
 800acfc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800acfe:	4b2d      	ldr	r3, [pc, #180]	; (800adb4 <SSD1306_I2C_WriteMulti+0xf4>)
 800ad00:	2288      	movs	r2, #136	; 0x88
 800ad02:	0052      	lsls	r2, r2, #1
 800ad04:	4694      	mov	ip, r2
 800ad06:	44bc      	add	ip, r7
 800ad08:	4463      	add	r3, ip
 800ad0a:	4a28      	ldr	r2, [pc, #160]	; (800adac <SSD1306_I2C_WriteMulti+0xec>)
 800ad0c:	2188      	movs	r1, #136	; 0x88
 800ad0e:	0049      	lsls	r1, r1, #1
 800ad10:	468c      	mov	ip, r1
 800ad12:	44bc      	add	ip, r7
 800ad14:	4462      	add	r2, ip
 800ad16:	7812      	ldrb	r2, [r2, #0]
 800ad18:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800ad1a:	2310      	movs	r3, #16
 800ad1c:	33ff      	adds	r3, #255	; 0xff
 800ad1e:	18fb      	adds	r3, r7, r3
 800ad20:	2200      	movs	r2, #0
 800ad22:	701a      	strb	r2, [r3, #0]
 800ad24:	2310      	movs	r3, #16
 800ad26:	33ff      	adds	r3, #255	; 0xff
 800ad28:	18fb      	adds	r3, r7, r3
 800ad2a:	781a      	ldrb	r2, [r3, #0]
 800ad2c:	4b20      	ldr	r3, [pc, #128]	; (800adb0 <SSD1306_I2C_WriteMulti+0xf0>)
 800ad2e:	2188      	movs	r1, #136	; 0x88
 800ad30:	0049      	lsls	r1, r1, #1
 800ad32:	468c      	mov	ip, r1
 800ad34:	44bc      	add	ip, r7
 800ad36:	4463      	add	r3, ip
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	da16      	bge.n	800ad6c <SSD1306_I2C_WriteMulti+0xac>
dt[i+1] = data[i];
 800ad3e:	2010      	movs	r0, #16
 800ad40:	30ff      	adds	r0, #255	; 0xff
 800ad42:	183b      	adds	r3, r7, r0
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	18d2      	adds	r2, r2, r3
 800ad4a:	183b      	adds	r3, r7, r0
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	7811      	ldrb	r1, [r2, #0]
 800ad52:	4a18      	ldr	r2, [pc, #96]	; (800adb4 <SSD1306_I2C_WriteMulti+0xf4>)
 800ad54:	2488      	movs	r4, #136	; 0x88
 800ad56:	0064      	lsls	r4, r4, #1
 800ad58:	46a4      	mov	ip, r4
 800ad5a:	44bc      	add	ip, r7
 800ad5c:	4462      	add	r2, ip
 800ad5e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800ad60:	183b      	adds	r3, r7, r0
 800ad62:	781a      	ldrb	r2, [r3, #0]
 800ad64:	183b      	adds	r3, r7, r0
 800ad66:	3201      	adds	r2, #1
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	e7db      	b.n	800ad24 <SSD1306_I2C_WriteMulti+0x64>
HAL_I2C_Master_Transmit(&I2C_PORT, address, dt, count+1, 10);
 800ad6c:	4b0e      	ldr	r3, [pc, #56]	; (800ada8 <SSD1306_I2C_WriteMulti+0xe8>)
 800ad6e:	2288      	movs	r2, #136	; 0x88
 800ad70:	0052      	lsls	r2, r2, #1
 800ad72:	4694      	mov	ip, r2
 800ad74:	44bc      	add	ip, r7
 800ad76:	4463      	add	r3, ip
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	b299      	uxth	r1, r3
 800ad7c:	4b0c      	ldr	r3, [pc, #48]	; (800adb0 <SSD1306_I2C_WriteMulti+0xf0>)
 800ad7e:	2288      	movs	r2, #136	; 0x88
 800ad80:	0052      	lsls	r2, r2, #1
 800ad82:	4694      	mov	ip, r2
 800ad84:	44bc      	add	ip, r7
 800ad86:	4463      	add	r3, ip
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	b29c      	uxth	r4, r3
 800ad8e:	230c      	movs	r3, #12
 800ad90:	18fa      	adds	r2, r7, r3
 800ad92:	4809      	ldr	r0, [pc, #36]	; (800adb8 <SSD1306_I2C_WriteMulti+0xf8>)
 800ad94:	230a      	movs	r3, #10
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	0023      	movs	r3, r4
 800ad9a:	f7fa faaf 	bl	80052fc <HAL_I2C_Master_Transmit>
}
 800ad9e:	46c0      	nop			; (mov r8, r8)
 800ada0:	46bd      	mov	sp, r7
 800ada2:	b045      	add	sp, #276	; 0x114
 800ada4:	bd90      	pop	{r4, r7, pc}
 800ada6:	46c0      	nop			; (mov r8, r8)
 800ada8:	fffffef7 	.word	0xfffffef7
 800adac:	fffffef6 	.word	0xfffffef6
 800adb0:	fffffef4 	.word	0xfffffef4
 800adb4:	fffffefc 	.word	0xfffffefc
 800adb8:	200002d8 	.word	0x200002d8

0800adbc <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800adbc:	b590      	push	{r4, r7, lr}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af02      	add	r7, sp, #8
 800adc2:	0004      	movs	r4, r0
 800adc4:	0008      	movs	r0, r1
 800adc6:	0011      	movs	r1, r2
 800adc8:	1dfb      	adds	r3, r7, #7
 800adca:	1c22      	adds	r2, r4, #0
 800adcc:	701a      	strb	r2, [r3, #0]
 800adce:	1dbb      	adds	r3, r7, #6
 800add0:	1c02      	adds	r2, r0, #0
 800add2:	701a      	strb	r2, [r3, #0]
 800add4:	1d7b      	adds	r3, r7, #5
 800add6:	1c0a      	adds	r2, r1, #0
 800add8:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 800adda:	200c      	movs	r0, #12
 800addc:	183b      	adds	r3, r7, r0
 800adde:	1dba      	adds	r2, r7, #6
 800ade0:	7812      	ldrb	r2, [r2, #0]
 800ade2:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 800ade4:	183b      	adds	r3, r7, r0
 800ade6:	1d7a      	adds	r2, r7, #5
 800ade8:	7812      	ldrb	r2, [r2, #0]
 800adea:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&I2C_PORT, address, dt, 2, 10);
 800adec:	1dfb      	adds	r3, r7, #7
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	b299      	uxth	r1, r3
 800adf2:	183a      	adds	r2, r7, r0
 800adf4:	4804      	ldr	r0, [pc, #16]	; (800ae08 <SSD1306_I2C_Write+0x4c>)
 800adf6:	230a      	movs	r3, #10
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	2302      	movs	r3, #2
 800adfc:	f7fa fa7e 	bl	80052fc <HAL_I2C_Master_Transmit>
}
 800ae00:	46c0      	nop			; (mov r8, r8)
 800ae02:	46bd      	mov	sp, r7
 800ae04:	b005      	add	sp, #20
 800ae06:	bd90      	pop	{r4, r7, pc}
 800ae08:	200002d8 	.word	0x200002d8

0800ae0c <atoi>:
 800ae0c:	b510      	push	{r4, lr}
 800ae0e:	220a      	movs	r2, #10
 800ae10:	2100      	movs	r1, #0
 800ae12:	f001 fe91 	bl	800cb38 <strtol>
 800ae16:	bd10      	pop	{r4, pc}

0800ae18 <__errno>:
 800ae18:	4b01      	ldr	r3, [pc, #4]	; (800ae20 <__errno+0x8>)
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	4770      	bx	lr
 800ae1e:	46c0      	nop			; (mov r8, r8)
 800ae20:	20000044 	.word	0x20000044

0800ae24 <__libc_init_array>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	2600      	movs	r6, #0
 800ae28:	4d0c      	ldr	r5, [pc, #48]	; (800ae5c <__libc_init_array+0x38>)
 800ae2a:	4c0d      	ldr	r4, [pc, #52]	; (800ae60 <__libc_init_array+0x3c>)
 800ae2c:	1b64      	subs	r4, r4, r5
 800ae2e:	10a4      	asrs	r4, r4, #2
 800ae30:	42a6      	cmp	r6, r4
 800ae32:	d109      	bne.n	800ae48 <__libc_init_array+0x24>
 800ae34:	2600      	movs	r6, #0
 800ae36:	f003 fe1d 	bl	800ea74 <_init>
 800ae3a:	4d0a      	ldr	r5, [pc, #40]	; (800ae64 <__libc_init_array+0x40>)
 800ae3c:	4c0a      	ldr	r4, [pc, #40]	; (800ae68 <__libc_init_array+0x44>)
 800ae3e:	1b64      	subs	r4, r4, r5
 800ae40:	10a4      	asrs	r4, r4, #2
 800ae42:	42a6      	cmp	r6, r4
 800ae44:	d105      	bne.n	800ae52 <__libc_init_array+0x2e>
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
 800ae48:	00b3      	lsls	r3, r6, #2
 800ae4a:	58eb      	ldr	r3, [r5, r3]
 800ae4c:	4798      	blx	r3
 800ae4e:	3601      	adds	r6, #1
 800ae50:	e7ee      	b.n	800ae30 <__libc_init_array+0xc>
 800ae52:	00b3      	lsls	r3, r6, #2
 800ae54:	58eb      	ldr	r3, [r5, r3]
 800ae56:	4798      	blx	r3
 800ae58:	3601      	adds	r6, #1
 800ae5a:	e7f2      	b.n	800ae42 <__libc_init_array+0x1e>
 800ae5c:	08010228 	.word	0x08010228
 800ae60:	08010228 	.word	0x08010228
 800ae64:	08010228 	.word	0x08010228
 800ae68:	08010238 	.word	0x08010238

0800ae6c <malloc>:
 800ae6c:	b510      	push	{r4, lr}
 800ae6e:	4b03      	ldr	r3, [pc, #12]	; (800ae7c <malloc+0x10>)
 800ae70:	0001      	movs	r1, r0
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	f000 f860 	bl	800af38 <_malloc_r>
 800ae78:	bd10      	pop	{r4, pc}
 800ae7a:	46c0      	nop			; (mov r8, r8)
 800ae7c:	20000044 	.word	0x20000044

0800ae80 <memcpy>:
 800ae80:	2300      	movs	r3, #0
 800ae82:	b510      	push	{r4, lr}
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d100      	bne.n	800ae8a <memcpy+0xa>
 800ae88:	bd10      	pop	{r4, pc}
 800ae8a:	5ccc      	ldrb	r4, [r1, r3]
 800ae8c:	54c4      	strb	r4, [r0, r3]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	e7f8      	b.n	800ae84 <memcpy+0x4>

0800ae92 <memset>:
 800ae92:	0003      	movs	r3, r0
 800ae94:	1812      	adds	r2, r2, r0
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d100      	bne.n	800ae9c <memset+0xa>
 800ae9a:	4770      	bx	lr
 800ae9c:	7019      	strb	r1, [r3, #0]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	e7f9      	b.n	800ae96 <memset+0x4>
	...

0800aea4 <_free_r>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	0005      	movs	r5, r0
 800aea8:	2900      	cmp	r1, #0
 800aeaa:	d010      	beq.n	800aece <_free_r+0x2a>
 800aeac:	1f0c      	subs	r4, r1, #4
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	da00      	bge.n	800aeb6 <_free_r+0x12>
 800aeb4:	18e4      	adds	r4, r4, r3
 800aeb6:	0028      	movs	r0, r5
 800aeb8:	f003 f817 	bl	800deea <__malloc_lock>
 800aebc:	4a1d      	ldr	r2, [pc, #116]	; (800af34 <_free_r+0x90>)
 800aebe:	6813      	ldr	r3, [r2, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d105      	bne.n	800aed0 <_free_r+0x2c>
 800aec4:	6063      	str	r3, [r4, #4]
 800aec6:	6014      	str	r4, [r2, #0]
 800aec8:	0028      	movs	r0, r5
 800aeca:	f003 f80f 	bl	800deec <__malloc_unlock>
 800aece:	bd70      	pop	{r4, r5, r6, pc}
 800aed0:	42a3      	cmp	r3, r4
 800aed2:	d909      	bls.n	800aee8 <_free_r+0x44>
 800aed4:	6821      	ldr	r1, [r4, #0]
 800aed6:	1860      	adds	r0, r4, r1
 800aed8:	4283      	cmp	r3, r0
 800aeda:	d1f3      	bne.n	800aec4 <_free_r+0x20>
 800aedc:	6818      	ldr	r0, [r3, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	1841      	adds	r1, r0, r1
 800aee2:	6021      	str	r1, [r4, #0]
 800aee4:	e7ee      	b.n	800aec4 <_free_r+0x20>
 800aee6:	0013      	movs	r3, r2
 800aee8:	685a      	ldr	r2, [r3, #4]
 800aeea:	2a00      	cmp	r2, #0
 800aeec:	d001      	beq.n	800aef2 <_free_r+0x4e>
 800aeee:	42a2      	cmp	r2, r4
 800aef0:	d9f9      	bls.n	800aee6 <_free_r+0x42>
 800aef2:	6819      	ldr	r1, [r3, #0]
 800aef4:	1858      	adds	r0, r3, r1
 800aef6:	42a0      	cmp	r0, r4
 800aef8:	d10b      	bne.n	800af12 <_free_r+0x6e>
 800aefa:	6820      	ldr	r0, [r4, #0]
 800aefc:	1809      	adds	r1, r1, r0
 800aefe:	1858      	adds	r0, r3, r1
 800af00:	6019      	str	r1, [r3, #0]
 800af02:	4282      	cmp	r2, r0
 800af04:	d1e0      	bne.n	800aec8 <_free_r+0x24>
 800af06:	6810      	ldr	r0, [r2, #0]
 800af08:	6852      	ldr	r2, [r2, #4]
 800af0a:	1841      	adds	r1, r0, r1
 800af0c:	6019      	str	r1, [r3, #0]
 800af0e:	605a      	str	r2, [r3, #4]
 800af10:	e7da      	b.n	800aec8 <_free_r+0x24>
 800af12:	42a0      	cmp	r0, r4
 800af14:	d902      	bls.n	800af1c <_free_r+0x78>
 800af16:	230c      	movs	r3, #12
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	e7d5      	b.n	800aec8 <_free_r+0x24>
 800af1c:	6821      	ldr	r1, [r4, #0]
 800af1e:	1860      	adds	r0, r4, r1
 800af20:	4282      	cmp	r2, r0
 800af22:	d103      	bne.n	800af2c <_free_r+0x88>
 800af24:	6810      	ldr	r0, [r2, #0]
 800af26:	6852      	ldr	r2, [r2, #4]
 800af28:	1841      	adds	r1, r0, r1
 800af2a:	6021      	str	r1, [r4, #0]
 800af2c:	6062      	str	r2, [r4, #4]
 800af2e:	605c      	str	r4, [r3, #4]
 800af30:	e7ca      	b.n	800aec8 <_free_r+0x24>
 800af32:	46c0      	nop			; (mov r8, r8)
 800af34:	20002918 	.word	0x20002918

0800af38 <_malloc_r>:
 800af38:	2303      	movs	r3, #3
 800af3a:	b570      	push	{r4, r5, r6, lr}
 800af3c:	1ccd      	adds	r5, r1, #3
 800af3e:	439d      	bics	r5, r3
 800af40:	3508      	adds	r5, #8
 800af42:	0006      	movs	r6, r0
 800af44:	2d0c      	cmp	r5, #12
 800af46:	d21e      	bcs.n	800af86 <_malloc_r+0x4e>
 800af48:	250c      	movs	r5, #12
 800af4a:	42a9      	cmp	r1, r5
 800af4c:	d81d      	bhi.n	800af8a <_malloc_r+0x52>
 800af4e:	0030      	movs	r0, r6
 800af50:	f002 ffcb 	bl	800deea <__malloc_lock>
 800af54:	4a25      	ldr	r2, [pc, #148]	; (800afec <_malloc_r+0xb4>)
 800af56:	6814      	ldr	r4, [r2, #0]
 800af58:	0021      	movs	r1, r4
 800af5a:	2900      	cmp	r1, #0
 800af5c:	d119      	bne.n	800af92 <_malloc_r+0x5a>
 800af5e:	4c24      	ldr	r4, [pc, #144]	; (800aff0 <_malloc_r+0xb8>)
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d103      	bne.n	800af6e <_malloc_r+0x36>
 800af66:	0030      	movs	r0, r6
 800af68:	f000 fea0 	bl	800bcac <_sbrk_r>
 800af6c:	6020      	str	r0, [r4, #0]
 800af6e:	0029      	movs	r1, r5
 800af70:	0030      	movs	r0, r6
 800af72:	f000 fe9b 	bl	800bcac <_sbrk_r>
 800af76:	1c43      	adds	r3, r0, #1
 800af78:	d12b      	bne.n	800afd2 <_malloc_r+0x9a>
 800af7a:	230c      	movs	r3, #12
 800af7c:	0030      	movs	r0, r6
 800af7e:	6033      	str	r3, [r6, #0]
 800af80:	f002 ffb4 	bl	800deec <__malloc_unlock>
 800af84:	e003      	b.n	800af8e <_malloc_r+0x56>
 800af86:	2d00      	cmp	r5, #0
 800af88:	dadf      	bge.n	800af4a <_malloc_r+0x12>
 800af8a:	230c      	movs	r3, #12
 800af8c:	6033      	str	r3, [r6, #0]
 800af8e:	2000      	movs	r0, #0
 800af90:	bd70      	pop	{r4, r5, r6, pc}
 800af92:	680b      	ldr	r3, [r1, #0]
 800af94:	1b5b      	subs	r3, r3, r5
 800af96:	d419      	bmi.n	800afcc <_malloc_r+0x94>
 800af98:	2b0b      	cmp	r3, #11
 800af9a:	d903      	bls.n	800afa4 <_malloc_r+0x6c>
 800af9c:	600b      	str	r3, [r1, #0]
 800af9e:	18cc      	adds	r4, r1, r3
 800afa0:	6025      	str	r5, [r4, #0]
 800afa2:	e003      	b.n	800afac <_malloc_r+0x74>
 800afa4:	684b      	ldr	r3, [r1, #4]
 800afa6:	428c      	cmp	r4, r1
 800afa8:	d10d      	bne.n	800afc6 <_malloc_r+0x8e>
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	0030      	movs	r0, r6
 800afae:	f002 ff9d 	bl	800deec <__malloc_unlock>
 800afb2:	0020      	movs	r0, r4
 800afb4:	2207      	movs	r2, #7
 800afb6:	300b      	adds	r0, #11
 800afb8:	1d23      	adds	r3, r4, #4
 800afba:	4390      	bics	r0, r2
 800afbc:	1ac3      	subs	r3, r0, r3
 800afbe:	d0e7      	beq.n	800af90 <_malloc_r+0x58>
 800afc0:	425a      	negs	r2, r3
 800afc2:	50e2      	str	r2, [r4, r3]
 800afc4:	e7e4      	b.n	800af90 <_malloc_r+0x58>
 800afc6:	6063      	str	r3, [r4, #4]
 800afc8:	000c      	movs	r4, r1
 800afca:	e7ef      	b.n	800afac <_malloc_r+0x74>
 800afcc:	000c      	movs	r4, r1
 800afce:	6849      	ldr	r1, [r1, #4]
 800afd0:	e7c3      	b.n	800af5a <_malloc_r+0x22>
 800afd2:	2303      	movs	r3, #3
 800afd4:	1cc4      	adds	r4, r0, #3
 800afd6:	439c      	bics	r4, r3
 800afd8:	42a0      	cmp	r0, r4
 800afda:	d0e1      	beq.n	800afa0 <_malloc_r+0x68>
 800afdc:	1a21      	subs	r1, r4, r0
 800afde:	0030      	movs	r0, r6
 800afe0:	f000 fe64 	bl	800bcac <_sbrk_r>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d1db      	bne.n	800afa0 <_malloc_r+0x68>
 800afe8:	e7c7      	b.n	800af7a <_malloc_r+0x42>
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	20002918 	.word	0x20002918
 800aff0:	2000291c 	.word	0x2000291c

0800aff4 <__cvt>:
 800aff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aff6:	b08b      	sub	sp, #44	; 0x2c
 800aff8:	0014      	movs	r4, r2
 800affa:	1e1d      	subs	r5, r3, #0
 800affc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800affe:	da53      	bge.n	800b0a8 <__cvt+0xb4>
 800b000:	2480      	movs	r4, #128	; 0x80
 800b002:	0624      	lsls	r4, r4, #24
 800b004:	191b      	adds	r3, r3, r4
 800b006:	001d      	movs	r5, r3
 800b008:	0014      	movs	r4, r2
 800b00a:	232d      	movs	r3, #45	; 0x2d
 800b00c:	700b      	strb	r3, [r1, #0]
 800b00e:	2320      	movs	r3, #32
 800b010:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b012:	2203      	movs	r2, #3
 800b014:	439e      	bics	r6, r3
 800b016:	2e46      	cmp	r6, #70	; 0x46
 800b018:	d007      	beq.n	800b02a <__cvt+0x36>
 800b01a:	0033      	movs	r3, r6
 800b01c:	3b45      	subs	r3, #69	; 0x45
 800b01e:	4259      	negs	r1, r3
 800b020:	414b      	adcs	r3, r1
 800b022:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b024:	3a01      	subs	r2, #1
 800b026:	18cb      	adds	r3, r1, r3
 800b028:	9310      	str	r3, [sp, #64]	; 0x40
 800b02a:	ab09      	add	r3, sp, #36	; 0x24
 800b02c:	9304      	str	r3, [sp, #16]
 800b02e:	ab08      	add	r3, sp, #32
 800b030:	9303      	str	r3, [sp, #12]
 800b032:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b034:	9200      	str	r2, [sp, #0]
 800b036:	9302      	str	r3, [sp, #8]
 800b038:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b03a:	0022      	movs	r2, r4
 800b03c:	9301      	str	r3, [sp, #4]
 800b03e:	002b      	movs	r3, r5
 800b040:	f001 fe14 	bl	800cc6c <_dtoa_r>
 800b044:	0007      	movs	r7, r0
 800b046:	2e47      	cmp	r6, #71	; 0x47
 800b048:	d102      	bne.n	800b050 <__cvt+0x5c>
 800b04a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b04c:	07db      	lsls	r3, r3, #31
 800b04e:	d524      	bpl.n	800b09a <__cvt+0xa6>
 800b050:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b052:	18fb      	adds	r3, r7, r3
 800b054:	9307      	str	r3, [sp, #28]
 800b056:	2e46      	cmp	r6, #70	; 0x46
 800b058:	d114      	bne.n	800b084 <__cvt+0x90>
 800b05a:	783b      	ldrb	r3, [r7, #0]
 800b05c:	2b30      	cmp	r3, #48	; 0x30
 800b05e:	d10c      	bne.n	800b07a <__cvt+0x86>
 800b060:	2200      	movs	r2, #0
 800b062:	2300      	movs	r3, #0
 800b064:	0020      	movs	r0, r4
 800b066:	0029      	movs	r1, r5
 800b068:	f7f5 f9e6 	bl	8000438 <__aeabi_dcmpeq>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d104      	bne.n	800b07a <__cvt+0x86>
 800b070:	2301      	movs	r3, #1
 800b072:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b074:	1a9b      	subs	r3, r3, r2
 800b076:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b07c:	9a07      	ldr	r2, [sp, #28]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	18d3      	adds	r3, r2, r3
 800b082:	9307      	str	r3, [sp, #28]
 800b084:	2200      	movs	r2, #0
 800b086:	2300      	movs	r3, #0
 800b088:	0020      	movs	r0, r4
 800b08a:	0029      	movs	r1, r5
 800b08c:	f7f5 f9d4 	bl	8000438 <__aeabi_dcmpeq>
 800b090:	2230      	movs	r2, #48	; 0x30
 800b092:	2800      	cmp	r0, #0
 800b094:	d00d      	beq.n	800b0b2 <__cvt+0xbe>
 800b096:	9b07      	ldr	r3, [sp, #28]
 800b098:	9309      	str	r3, [sp, #36]	; 0x24
 800b09a:	0038      	movs	r0, r7
 800b09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0a0:	1bdb      	subs	r3, r3, r7
 800b0a2:	6013      	str	r3, [r2, #0]
 800b0a4:	b00b      	add	sp, #44	; 0x2c
 800b0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	e7af      	b.n	800b00c <__cvt+0x18>
 800b0ac:	1c59      	adds	r1, r3, #1
 800b0ae:	9109      	str	r1, [sp, #36]	; 0x24
 800b0b0:	701a      	strb	r2, [r3, #0]
 800b0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b4:	9907      	ldr	r1, [sp, #28]
 800b0b6:	428b      	cmp	r3, r1
 800b0b8:	d3f8      	bcc.n	800b0ac <__cvt+0xb8>
 800b0ba:	e7ee      	b.n	800b09a <__cvt+0xa6>

0800b0bc <__exponent>:
 800b0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0be:	1c83      	adds	r3, r0, #2
 800b0c0:	b085      	sub	sp, #20
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	0006      	movs	r6, r0
 800b0c6:	000c      	movs	r4, r1
 800b0c8:	7002      	strb	r2, [r0, #0]
 800b0ca:	232b      	movs	r3, #43	; 0x2b
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	da01      	bge.n	800b0d4 <__exponent+0x18>
 800b0d0:	232d      	movs	r3, #45	; 0x2d
 800b0d2:	424c      	negs	r4, r1
 800b0d4:	7073      	strb	r3, [r6, #1]
 800b0d6:	2c09      	cmp	r4, #9
 800b0d8:	dd22      	ble.n	800b120 <__exponent+0x64>
 800b0da:	ab02      	add	r3, sp, #8
 800b0dc:	1ddd      	adds	r5, r3, #7
 800b0de:	0020      	movs	r0, r4
 800b0e0:	210a      	movs	r1, #10
 800b0e2:	f7f5 f993 	bl	800040c <__aeabi_idivmod>
 800b0e6:	1e6f      	subs	r7, r5, #1
 800b0e8:	3130      	adds	r1, #48	; 0x30
 800b0ea:	7039      	strb	r1, [r7, #0]
 800b0ec:	0020      	movs	r0, r4
 800b0ee:	210a      	movs	r1, #10
 800b0f0:	f7f5 f8a6 	bl	8000240 <__divsi3>
 800b0f4:	0004      	movs	r4, r0
 800b0f6:	2809      	cmp	r0, #9
 800b0f8:	dc0b      	bgt.n	800b112 <__exponent+0x56>
 800b0fa:	3d02      	subs	r5, #2
 800b0fc:	3430      	adds	r4, #48	; 0x30
 800b0fe:	9b01      	ldr	r3, [sp, #4]
 800b100:	702c      	strb	r4, [r5, #0]
 800b102:	aa02      	add	r2, sp, #8
 800b104:	3207      	adds	r2, #7
 800b106:	0018      	movs	r0, r3
 800b108:	42aa      	cmp	r2, r5
 800b10a:	d804      	bhi.n	800b116 <__exponent+0x5a>
 800b10c:	1b80      	subs	r0, r0, r6
 800b10e:	b005      	add	sp, #20
 800b110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b112:	003d      	movs	r5, r7
 800b114:	e7e3      	b.n	800b0de <__exponent+0x22>
 800b116:	782a      	ldrb	r2, [r5, #0]
 800b118:	3501      	adds	r5, #1
 800b11a:	701a      	strb	r2, [r3, #0]
 800b11c:	3301      	adds	r3, #1
 800b11e:	e7f0      	b.n	800b102 <__exponent+0x46>
 800b120:	2330      	movs	r3, #48	; 0x30
 800b122:	18e4      	adds	r4, r4, r3
 800b124:	70b3      	strb	r3, [r6, #2]
 800b126:	1d30      	adds	r0, r6, #4
 800b128:	70f4      	strb	r4, [r6, #3]
 800b12a:	e7ef      	b.n	800b10c <__exponent+0x50>

0800b12c <_printf_float>:
 800b12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b12e:	b095      	sub	sp, #84	; 0x54
 800b130:	000c      	movs	r4, r1
 800b132:	920a      	str	r2, [sp, #40]	; 0x28
 800b134:	930b      	str	r3, [sp, #44]	; 0x2c
 800b136:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b138:	9009      	str	r0, [sp, #36]	; 0x24
 800b13a:	f002 fead 	bl	800de98 <_localeconv_r>
 800b13e:	6803      	ldr	r3, [r0, #0]
 800b140:	0018      	movs	r0, r3
 800b142:	930c      	str	r3, [sp, #48]	; 0x30
 800b144:	f7f4 ffe0 	bl	8000108 <strlen>
 800b148:	2300      	movs	r3, #0
 800b14a:	9312      	str	r3, [sp, #72]	; 0x48
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	900e      	str	r0, [sp, #56]	; 0x38
 800b150:	930d      	str	r3, [sp, #52]	; 0x34
 800b152:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b154:	7e27      	ldrb	r7, [r4, #24]
 800b156:	682b      	ldr	r3, [r5, #0]
 800b158:	2207      	movs	r2, #7
 800b15a:	05c9      	lsls	r1, r1, #23
 800b15c:	d545      	bpl.n	800b1ea <_printf_float+0xbe>
 800b15e:	189b      	adds	r3, r3, r2
 800b160:	4393      	bics	r3, r2
 800b162:	001a      	movs	r2, r3
 800b164:	3208      	adds	r2, #8
 800b166:	602a      	str	r2, [r5, #0]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	64a2      	str	r2, [r4, #72]	; 0x48
 800b16e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b170:	2201      	movs	r2, #1
 800b172:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b174:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800b176:	006b      	lsls	r3, r5, #1
 800b178:	085b      	lsrs	r3, r3, #1
 800b17a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b17c:	4252      	negs	r2, r2
 800b17e:	4bac      	ldr	r3, [pc, #688]	; (800b430 <_printf_float+0x304>)
 800b180:	0030      	movs	r0, r6
 800b182:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b184:	f7f7 f8b0 	bl	80022e8 <__aeabi_dcmpun>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d130      	bne.n	800b1ee <_printf_float+0xc2>
 800b18c:	2201      	movs	r2, #1
 800b18e:	4ba8      	ldr	r3, [pc, #672]	; (800b430 <_printf_float+0x304>)
 800b190:	4252      	negs	r2, r2
 800b192:	0030      	movs	r0, r6
 800b194:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b196:	f7f5 f95f 	bl	8000458 <__aeabi_dcmple>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d127      	bne.n	800b1ee <_printf_float+0xc2>
 800b19e:	2200      	movs	r2, #0
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	0030      	movs	r0, r6
 800b1a4:	0029      	movs	r1, r5
 800b1a6:	f7f5 f94d 	bl	8000444 <__aeabi_dcmplt>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d003      	beq.n	800b1b6 <_printf_float+0x8a>
 800b1ae:	0023      	movs	r3, r4
 800b1b0:	222d      	movs	r2, #45	; 0x2d
 800b1b2:	3343      	adds	r3, #67	; 0x43
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	4d9f      	ldr	r5, [pc, #636]	; (800b434 <_printf_float+0x308>)
 800b1b8:	2f47      	cmp	r7, #71	; 0x47
 800b1ba:	d800      	bhi.n	800b1be <_printf_float+0x92>
 800b1bc:	4d9e      	ldr	r5, [pc, #632]	; (800b438 <_printf_float+0x30c>)
 800b1be:	2303      	movs	r3, #3
 800b1c0:	2600      	movs	r6, #0
 800b1c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1c4:	6123      	str	r3, [r4, #16]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	439a      	bics	r2, r3
 800b1ca:	6022      	str	r2, [r4, #0]
 800b1cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ce:	aa13      	add	r2, sp, #76	; 0x4c
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	0021      	movs	r1, r4
 800b1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1d8:	f000 f9f4 	bl	800b5c4 <_printf_common>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d000      	beq.n	800b1e2 <_printf_float+0xb6>
 800b1e0:	e093      	b.n	800b30a <_printf_float+0x1de>
 800b1e2:	2001      	movs	r0, #1
 800b1e4:	4240      	negs	r0, r0
 800b1e6:	b015      	add	sp, #84	; 0x54
 800b1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ea:	3307      	adds	r3, #7
 800b1ec:	e7b8      	b.n	800b160 <_printf_float+0x34>
 800b1ee:	0032      	movs	r2, r6
 800b1f0:	002b      	movs	r3, r5
 800b1f2:	0030      	movs	r0, r6
 800b1f4:	0029      	movs	r1, r5
 800b1f6:	f7f7 f877 	bl	80022e8 <__aeabi_dcmpun>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d004      	beq.n	800b208 <_printf_float+0xdc>
 800b1fe:	4d8f      	ldr	r5, [pc, #572]	; (800b43c <_printf_float+0x310>)
 800b200:	2f47      	cmp	r7, #71	; 0x47
 800b202:	d8dc      	bhi.n	800b1be <_printf_float+0x92>
 800b204:	4d8e      	ldr	r5, [pc, #568]	; (800b440 <_printf_float+0x314>)
 800b206:	e7da      	b.n	800b1be <_printf_float+0x92>
 800b208:	2380      	movs	r3, #128	; 0x80
 800b20a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b20c:	6862      	ldr	r2, [r4, #4]
 800b20e:	00db      	lsls	r3, r3, #3
 800b210:	430b      	orrs	r3, r1
 800b212:	1c51      	adds	r1, r2, #1
 800b214:	d143      	bne.n	800b29e <_printf_float+0x172>
 800b216:	3207      	adds	r2, #7
 800b218:	6062      	str	r2, [r4, #4]
 800b21a:	aa12      	add	r2, sp, #72	; 0x48
 800b21c:	2100      	movs	r1, #0
 800b21e:	9205      	str	r2, [sp, #20]
 800b220:	aa11      	add	r2, sp, #68	; 0x44
 800b222:	9203      	str	r2, [sp, #12]
 800b224:	2223      	movs	r2, #35	; 0x23
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	9106      	str	r1, [sp, #24]
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	a908      	add	r1, sp, #32
 800b22e:	6863      	ldr	r3, [r4, #4]
 800b230:	1852      	adds	r2, r2, r1
 800b232:	9202      	str	r2, [sp, #8]
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	0032      	movs	r2, r6
 800b238:	002b      	movs	r3, r5
 800b23a:	9704      	str	r7, [sp, #16]
 800b23c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b23e:	f7ff fed9 	bl	800aff4 <__cvt>
 800b242:	2320      	movs	r3, #32
 800b244:	003a      	movs	r2, r7
 800b246:	0005      	movs	r5, r0
 800b248:	439a      	bics	r2, r3
 800b24a:	2a47      	cmp	r2, #71	; 0x47
 800b24c:	d107      	bne.n	800b25e <_printf_float+0x132>
 800b24e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b250:	1cda      	adds	r2, r3, #3
 800b252:	db02      	blt.n	800b25a <_printf_float+0x12e>
 800b254:	6862      	ldr	r2, [r4, #4]
 800b256:	4293      	cmp	r3, r2
 800b258:	dd45      	ble.n	800b2e6 <_printf_float+0x1ba>
 800b25a:	3f02      	subs	r7, #2
 800b25c:	b2ff      	uxtb	r7, r7
 800b25e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b260:	2f65      	cmp	r7, #101	; 0x65
 800b262:	d825      	bhi.n	800b2b0 <_printf_float+0x184>
 800b264:	0020      	movs	r0, r4
 800b266:	3901      	subs	r1, #1
 800b268:	003a      	movs	r2, r7
 800b26a:	3050      	adds	r0, #80	; 0x50
 800b26c:	9111      	str	r1, [sp, #68]	; 0x44
 800b26e:	f7ff ff25 	bl	800b0bc <__exponent>
 800b272:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b274:	0006      	movs	r6, r0
 800b276:	1813      	adds	r3, r2, r0
 800b278:	6123      	str	r3, [r4, #16]
 800b27a:	2a01      	cmp	r2, #1
 800b27c:	dc02      	bgt.n	800b284 <_printf_float+0x158>
 800b27e:	6822      	ldr	r2, [r4, #0]
 800b280:	07d2      	lsls	r2, r2, #31
 800b282:	d501      	bpl.n	800b288 <_printf_float+0x15c>
 800b284:	3301      	adds	r3, #1
 800b286:	6123      	str	r3, [r4, #16]
 800b288:	2323      	movs	r3, #35	; 0x23
 800b28a:	aa08      	add	r2, sp, #32
 800b28c:	189b      	adds	r3, r3, r2
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d09b      	beq.n	800b1cc <_printf_float+0xa0>
 800b294:	0023      	movs	r3, r4
 800b296:	222d      	movs	r2, #45	; 0x2d
 800b298:	3343      	adds	r3, #67	; 0x43
 800b29a:	701a      	strb	r2, [r3, #0]
 800b29c:	e796      	b.n	800b1cc <_printf_float+0xa0>
 800b29e:	2f67      	cmp	r7, #103	; 0x67
 800b2a0:	d100      	bne.n	800b2a4 <_printf_float+0x178>
 800b2a2:	e176      	b.n	800b592 <_printf_float+0x466>
 800b2a4:	2f47      	cmp	r7, #71	; 0x47
 800b2a6:	d1b8      	bne.n	800b21a <_printf_float+0xee>
 800b2a8:	2a00      	cmp	r2, #0
 800b2aa:	d1b6      	bne.n	800b21a <_printf_float+0xee>
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	e7b3      	b.n	800b218 <_printf_float+0xec>
 800b2b0:	2f66      	cmp	r7, #102	; 0x66
 800b2b2:	d119      	bne.n	800b2e8 <_printf_float+0x1bc>
 800b2b4:	6863      	ldr	r3, [r4, #4]
 800b2b6:	2900      	cmp	r1, #0
 800b2b8:	dd0c      	ble.n	800b2d4 <_printf_float+0x1a8>
 800b2ba:	6121      	str	r1, [r4, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d102      	bne.n	800b2c6 <_printf_float+0x19a>
 800b2c0:	6822      	ldr	r2, [r4, #0]
 800b2c2:	07d2      	lsls	r2, r2, #31
 800b2c4:	d502      	bpl.n	800b2cc <_printf_float+0x1a0>
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	185b      	adds	r3, r3, r1
 800b2ca:	6123      	str	r3, [r4, #16]
 800b2cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2ce:	2600      	movs	r6, #0
 800b2d0:	65a3      	str	r3, [r4, #88]	; 0x58
 800b2d2:	e7d9      	b.n	800b288 <_printf_float+0x15c>
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d103      	bne.n	800b2e0 <_printf_float+0x1b4>
 800b2d8:	2201      	movs	r2, #1
 800b2da:	6821      	ldr	r1, [r4, #0]
 800b2dc:	4211      	tst	r1, r2
 800b2de:	d000      	beq.n	800b2e2 <_printf_float+0x1b6>
 800b2e0:	1c9a      	adds	r2, r3, #2
 800b2e2:	6122      	str	r2, [r4, #16]
 800b2e4:	e7f2      	b.n	800b2cc <_printf_float+0x1a0>
 800b2e6:	2767      	movs	r7, #103	; 0x67
 800b2e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	db05      	blt.n	800b2fc <_printf_float+0x1d0>
 800b2f0:	6822      	ldr	r2, [r4, #0]
 800b2f2:	6123      	str	r3, [r4, #16]
 800b2f4:	07d2      	lsls	r2, r2, #31
 800b2f6:	d5e9      	bpl.n	800b2cc <_printf_float+0x1a0>
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	e7e6      	b.n	800b2ca <_printf_float+0x19e>
 800b2fc:	2101      	movs	r1, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	dc01      	bgt.n	800b306 <_printf_float+0x1da>
 800b302:	1849      	adds	r1, r1, r1
 800b304:	1ac9      	subs	r1, r1, r3
 800b306:	1852      	adds	r2, r2, r1
 800b308:	e7eb      	b.n	800b2e2 <_printf_float+0x1b6>
 800b30a:	6822      	ldr	r2, [r4, #0]
 800b30c:	0553      	lsls	r3, r2, #21
 800b30e:	d408      	bmi.n	800b322 <_printf_float+0x1f6>
 800b310:	6923      	ldr	r3, [r4, #16]
 800b312:	002a      	movs	r2, r5
 800b314:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b316:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b318:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b31a:	47a8      	blx	r5
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d129      	bne.n	800b374 <_printf_float+0x248>
 800b320:	e75f      	b.n	800b1e2 <_printf_float+0xb6>
 800b322:	2f65      	cmp	r7, #101	; 0x65
 800b324:	d800      	bhi.n	800b328 <_printf_float+0x1fc>
 800b326:	e0e0      	b.n	800b4ea <_printf_float+0x3be>
 800b328:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b32a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b32c:	2200      	movs	r2, #0
 800b32e:	2300      	movs	r3, #0
 800b330:	f7f5 f882 	bl	8000438 <__aeabi_dcmpeq>
 800b334:	2800      	cmp	r0, #0
 800b336:	d034      	beq.n	800b3a2 <_printf_float+0x276>
 800b338:	2301      	movs	r3, #1
 800b33a:	4a42      	ldr	r2, [pc, #264]	; (800b444 <_printf_float+0x318>)
 800b33c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b33e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b340:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b342:	47a8      	blx	r5
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	d100      	bne.n	800b34a <_printf_float+0x21e>
 800b348:	e74b      	b.n	800b1e2 <_printf_float+0xb6>
 800b34a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b34c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b34e:	4293      	cmp	r3, r2
 800b350:	db02      	blt.n	800b358 <_printf_float+0x22c>
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	07db      	lsls	r3, r3, #31
 800b356:	d50d      	bpl.n	800b374 <_printf_float+0x248>
 800b358:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b35a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b35c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b35e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b360:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b362:	47a8      	blx	r5
 800b364:	2500      	movs	r5, #0
 800b366:	1c43      	adds	r3, r0, #1
 800b368:	d100      	bne.n	800b36c <_printf_float+0x240>
 800b36a:	e73a      	b.n	800b1e2 <_printf_float+0xb6>
 800b36c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b36e:	3b01      	subs	r3, #1
 800b370:	42ab      	cmp	r3, r5
 800b372:	dc0a      	bgt.n	800b38a <_printf_float+0x25e>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	079b      	lsls	r3, r3, #30
 800b378:	d500      	bpl.n	800b37c <_printf_float+0x250>
 800b37a:	e108      	b.n	800b58e <_printf_float+0x462>
 800b37c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b37e:	68e0      	ldr	r0, [r4, #12]
 800b380:	4298      	cmp	r0, r3
 800b382:	db00      	blt.n	800b386 <_printf_float+0x25a>
 800b384:	e72f      	b.n	800b1e6 <_printf_float+0xba>
 800b386:	0018      	movs	r0, r3
 800b388:	e72d      	b.n	800b1e6 <_printf_float+0xba>
 800b38a:	0022      	movs	r2, r4
 800b38c:	2301      	movs	r3, #1
 800b38e:	321a      	adds	r2, #26
 800b390:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b392:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b394:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b396:	47b0      	blx	r6
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d100      	bne.n	800b39e <_printf_float+0x272>
 800b39c:	e721      	b.n	800b1e2 <_printf_float+0xb6>
 800b39e:	3501      	adds	r5, #1
 800b3a0:	e7e4      	b.n	800b36c <_printf_float+0x240>
 800b3a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dc2d      	bgt.n	800b404 <_printf_float+0x2d8>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	4a26      	ldr	r2, [pc, #152]	; (800b444 <_printf_float+0x318>)
 800b3ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b3b2:	47b0      	blx	r6
 800b3b4:	1c43      	adds	r3, r0, #1
 800b3b6:	d100      	bne.n	800b3ba <_printf_float+0x28e>
 800b3b8:	e713      	b.n	800b1e2 <_printf_float+0xb6>
 800b3ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d105      	bne.n	800b3cc <_printf_float+0x2a0>
 800b3c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d102      	bne.n	800b3cc <_printf_float+0x2a0>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	07db      	lsls	r3, r3, #31
 800b3ca:	d5d3      	bpl.n	800b374 <_printf_float+0x248>
 800b3cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b3ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3d6:	47b0      	blx	r6
 800b3d8:	2600      	movs	r6, #0
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	d100      	bne.n	800b3e0 <_printf_float+0x2b4>
 800b3de:	e700      	b.n	800b1e2 <_printf_float+0xb6>
 800b3e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3e2:	425b      	negs	r3, r3
 800b3e4:	42b3      	cmp	r3, r6
 800b3e6:	dc01      	bgt.n	800b3ec <_printf_float+0x2c0>
 800b3e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3ea:	e792      	b.n	800b312 <_printf_float+0x1e6>
 800b3ec:	0022      	movs	r2, r4
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	321a      	adds	r2, #26
 800b3f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b3f8:	47b8      	blx	r7
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	d100      	bne.n	800b400 <_printf_float+0x2d4>
 800b3fe:	e6f0      	b.n	800b1e2 <_printf_float+0xb6>
 800b400:	3601      	adds	r6, #1
 800b402:	e7ed      	b.n	800b3e0 <_printf_float+0x2b4>
 800b404:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b406:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800b408:	429f      	cmp	r7, r3
 800b40a:	dd00      	ble.n	800b40e <_printf_float+0x2e2>
 800b40c:	001f      	movs	r7, r3
 800b40e:	2f00      	cmp	r7, #0
 800b410:	dd08      	ble.n	800b424 <_printf_float+0x2f8>
 800b412:	003b      	movs	r3, r7
 800b414:	002a      	movs	r2, r5
 800b416:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b41a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b41c:	47b0      	blx	r6
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	d100      	bne.n	800b424 <_printf_float+0x2f8>
 800b422:	e6de      	b.n	800b1e2 <_printf_float+0xb6>
 800b424:	2300      	movs	r3, #0
 800b426:	930d      	str	r3, [sp, #52]	; 0x34
 800b428:	43fb      	mvns	r3, r7
 800b42a:	17db      	asrs	r3, r3, #31
 800b42c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b42e:	e018      	b.n	800b462 <_printf_float+0x336>
 800b430:	7fefffff 	.word	0x7fefffff
 800b434:	0800ff6e 	.word	0x0800ff6e
 800b438:	0800ff6a 	.word	0x0800ff6a
 800b43c:	0800ff76 	.word	0x0800ff76
 800b440:	0800ff72 	.word	0x0800ff72
 800b444:	0800ff7a 	.word	0x0800ff7a
 800b448:	0022      	movs	r2, r4
 800b44a:	2301      	movs	r3, #1
 800b44c:	321a      	adds	r2, #26
 800b44e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b450:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b452:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b454:	47b0      	blx	r6
 800b456:	1c43      	adds	r3, r0, #1
 800b458:	d100      	bne.n	800b45c <_printf_float+0x330>
 800b45a:	e6c2      	b.n	800b1e2 <_printf_float+0xb6>
 800b45c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b45e:	3301      	adds	r3, #1
 800b460:	930d      	str	r3, [sp, #52]	; 0x34
 800b462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b464:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800b466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b468:	403b      	ands	r3, r7
 800b46a:	1af3      	subs	r3, r6, r3
 800b46c:	4293      	cmp	r3, r2
 800b46e:	dceb      	bgt.n	800b448 <_printf_float+0x31c>
 800b470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b472:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b474:	19ad      	adds	r5, r5, r6
 800b476:	4293      	cmp	r3, r2
 800b478:	db10      	blt.n	800b49c <_printf_float+0x370>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	07db      	lsls	r3, r3, #31
 800b47e:	d40d      	bmi.n	800b49c <_printf_float+0x370>
 800b480:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800b482:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b484:	1bbe      	subs	r6, r7, r6
 800b486:	1aff      	subs	r7, r7, r3
 800b488:	42b7      	cmp	r7, r6
 800b48a:	dd00      	ble.n	800b48e <_printf_float+0x362>
 800b48c:	0037      	movs	r7, r6
 800b48e:	2f00      	cmp	r7, #0
 800b490:	dc0d      	bgt.n	800b4ae <_printf_float+0x382>
 800b492:	43fe      	mvns	r6, r7
 800b494:	17f3      	asrs	r3, r6, #31
 800b496:	2500      	movs	r5, #0
 800b498:	930c      	str	r3, [sp, #48]	; 0x30
 800b49a:	e01c      	b.n	800b4d6 <_printf_float+0x3aa>
 800b49c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b49e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b4a6:	47b8      	blx	r7
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	d1e9      	bne.n	800b480 <_printf_float+0x354>
 800b4ac:	e699      	b.n	800b1e2 <_printf_float+0xb6>
 800b4ae:	003b      	movs	r3, r7
 800b4b0:	002a      	movs	r2, r5
 800b4b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b4b8:	47a8      	blx	r5
 800b4ba:	1c43      	adds	r3, r0, #1
 800b4bc:	d1e9      	bne.n	800b492 <_printf_float+0x366>
 800b4be:	e690      	b.n	800b1e2 <_printf_float+0xb6>
 800b4c0:	0022      	movs	r2, r4
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	321a      	adds	r2, #26
 800b4c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b4cc:	47b0      	blx	r6
 800b4ce:	1c43      	adds	r3, r0, #1
 800b4d0:	d100      	bne.n	800b4d4 <_printf_float+0x3a8>
 800b4d2:	e686      	b.n	800b1e2 <_printf_float+0xb6>
 800b4d4:	3501      	adds	r5, #1
 800b4d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b4d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4dc:	1a9b      	subs	r3, r3, r2
 800b4de:	003a      	movs	r2, r7
 800b4e0:	400a      	ands	r2, r1
 800b4e2:	1a9b      	subs	r3, r3, r2
 800b4e4:	42ab      	cmp	r3, r5
 800b4e6:	dceb      	bgt.n	800b4c0 <_printf_float+0x394>
 800b4e8:	e744      	b.n	800b374 <_printf_float+0x248>
 800b4ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	dc02      	bgt.n	800b4f6 <_printf_float+0x3ca>
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	421a      	tst	r2, r3
 800b4f4:	d032      	beq.n	800b55c <_printf_float+0x430>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	002a      	movs	r2, r5
 800b4fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b500:	47b8      	blx	r7
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	d100      	bne.n	800b508 <_printf_float+0x3dc>
 800b506:	e66c      	b.n	800b1e2 <_printf_float+0xb6>
 800b508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b50a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b50c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b50e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b510:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b512:	3501      	adds	r5, #1
 800b514:	47b8      	blx	r7
 800b516:	1c43      	adds	r3, r0, #1
 800b518:	d100      	bne.n	800b51c <_printf_float+0x3f0>
 800b51a:	e662      	b.n	800b1e2 <_printf_float+0xb6>
 800b51c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b51e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b522:	2200      	movs	r2, #0
 800b524:	1e5f      	subs	r7, r3, #1
 800b526:	2300      	movs	r3, #0
 800b528:	f7f4 ff86 	bl	8000438 <__aeabi_dcmpeq>
 800b52c:	003b      	movs	r3, r7
 800b52e:	2800      	cmp	r0, #0
 800b530:	d014      	beq.n	800b55c <_printf_float+0x430>
 800b532:	2500      	movs	r5, #0
 800b534:	e00a      	b.n	800b54c <_printf_float+0x420>
 800b536:	0022      	movs	r2, r4
 800b538:	2301      	movs	r3, #1
 800b53a:	321a      	adds	r2, #26
 800b53c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b53e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b540:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b542:	47b8      	blx	r7
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d100      	bne.n	800b54a <_printf_float+0x41e>
 800b548:	e64b      	b.n	800b1e2 <_printf_float+0xb6>
 800b54a:	3501      	adds	r5, #1
 800b54c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b54e:	3b01      	subs	r3, #1
 800b550:	42ab      	cmp	r3, r5
 800b552:	dcf0      	bgt.n	800b536 <_printf_float+0x40a>
 800b554:	0022      	movs	r2, r4
 800b556:	0033      	movs	r3, r6
 800b558:	3250      	adds	r2, #80	; 0x50
 800b55a:	e6db      	b.n	800b314 <_printf_float+0x1e8>
 800b55c:	002a      	movs	r2, r5
 800b55e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b560:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b562:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b564:	47a8      	blx	r5
 800b566:	1c43      	adds	r3, r0, #1
 800b568:	d1f4      	bne.n	800b554 <_printf_float+0x428>
 800b56a:	e63a      	b.n	800b1e2 <_printf_float+0xb6>
 800b56c:	0022      	movs	r2, r4
 800b56e:	2301      	movs	r3, #1
 800b570:	3219      	adds	r2, #25
 800b572:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b576:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b578:	47b0      	blx	r6
 800b57a:	1c43      	adds	r3, r0, #1
 800b57c:	d100      	bne.n	800b580 <_printf_float+0x454>
 800b57e:	e630      	b.n	800b1e2 <_printf_float+0xb6>
 800b580:	3501      	adds	r5, #1
 800b582:	68e3      	ldr	r3, [r4, #12]
 800b584:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b586:	1a9b      	subs	r3, r3, r2
 800b588:	42ab      	cmp	r3, r5
 800b58a:	dcef      	bgt.n	800b56c <_printf_float+0x440>
 800b58c:	e6f6      	b.n	800b37c <_printf_float+0x250>
 800b58e:	2500      	movs	r5, #0
 800b590:	e7f7      	b.n	800b582 <_printf_float+0x456>
 800b592:	2a00      	cmp	r2, #0
 800b594:	d100      	bne.n	800b598 <_printf_float+0x46c>
 800b596:	e689      	b.n	800b2ac <_printf_float+0x180>
 800b598:	2100      	movs	r1, #0
 800b59a:	9106      	str	r1, [sp, #24]
 800b59c:	a912      	add	r1, sp, #72	; 0x48
 800b59e:	9105      	str	r1, [sp, #20]
 800b5a0:	a911      	add	r1, sp, #68	; 0x44
 800b5a2:	9103      	str	r1, [sp, #12]
 800b5a4:	2123      	movs	r1, #35	; 0x23
 800b5a6:	a808      	add	r0, sp, #32
 800b5a8:	1809      	adds	r1, r1, r0
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	9200      	str	r2, [sp, #0]
 800b5b0:	002b      	movs	r3, r5
 800b5b2:	9704      	str	r7, [sp, #16]
 800b5b4:	9102      	str	r1, [sp, #8]
 800b5b6:	0032      	movs	r2, r6
 800b5b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ba:	f7ff fd1b 	bl	800aff4 <__cvt>
 800b5be:	0005      	movs	r5, r0
 800b5c0:	e645      	b.n	800b24e <_printf_float+0x122>
 800b5c2:	46c0      	nop			; (mov r8, r8)

0800b5c4 <_printf_common>:
 800b5c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5c6:	0015      	movs	r5, r2
 800b5c8:	9301      	str	r3, [sp, #4]
 800b5ca:	688a      	ldr	r2, [r1, #8]
 800b5cc:	690b      	ldr	r3, [r1, #16]
 800b5ce:	9000      	str	r0, [sp, #0]
 800b5d0:	000c      	movs	r4, r1
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	da00      	bge.n	800b5d8 <_printf_common+0x14>
 800b5d6:	0013      	movs	r3, r2
 800b5d8:	0022      	movs	r2, r4
 800b5da:	602b      	str	r3, [r5, #0]
 800b5dc:	3243      	adds	r2, #67	; 0x43
 800b5de:	7812      	ldrb	r2, [r2, #0]
 800b5e0:	2a00      	cmp	r2, #0
 800b5e2:	d001      	beq.n	800b5e8 <_printf_common+0x24>
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	602b      	str	r3, [r5, #0]
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	069b      	lsls	r3, r3, #26
 800b5ec:	d502      	bpl.n	800b5f4 <_printf_common+0x30>
 800b5ee:	682b      	ldr	r3, [r5, #0]
 800b5f0:	3302      	adds	r3, #2
 800b5f2:	602b      	str	r3, [r5, #0]
 800b5f4:	2706      	movs	r7, #6
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	401f      	ands	r7, r3
 800b5fa:	d027      	beq.n	800b64c <_printf_common+0x88>
 800b5fc:	0023      	movs	r3, r4
 800b5fe:	3343      	adds	r3, #67	; 0x43
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	1e5a      	subs	r2, r3, #1
 800b604:	4193      	sbcs	r3, r2
 800b606:	6822      	ldr	r2, [r4, #0]
 800b608:	0692      	lsls	r2, r2, #26
 800b60a:	d430      	bmi.n	800b66e <_printf_common+0xaa>
 800b60c:	0022      	movs	r2, r4
 800b60e:	9901      	ldr	r1, [sp, #4]
 800b610:	3243      	adds	r2, #67	; 0x43
 800b612:	9800      	ldr	r0, [sp, #0]
 800b614:	9e08      	ldr	r6, [sp, #32]
 800b616:	47b0      	blx	r6
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	d025      	beq.n	800b668 <_printf_common+0xa4>
 800b61c:	2306      	movs	r3, #6
 800b61e:	6820      	ldr	r0, [r4, #0]
 800b620:	682a      	ldr	r2, [r5, #0]
 800b622:	68e1      	ldr	r1, [r4, #12]
 800b624:	4003      	ands	r3, r0
 800b626:	2500      	movs	r5, #0
 800b628:	2b04      	cmp	r3, #4
 800b62a:	d103      	bne.n	800b634 <_printf_common+0x70>
 800b62c:	1a8d      	subs	r5, r1, r2
 800b62e:	43eb      	mvns	r3, r5
 800b630:	17db      	asrs	r3, r3, #31
 800b632:	401d      	ands	r5, r3
 800b634:	68a3      	ldr	r3, [r4, #8]
 800b636:	6922      	ldr	r2, [r4, #16]
 800b638:	4293      	cmp	r3, r2
 800b63a:	dd01      	ble.n	800b640 <_printf_common+0x7c>
 800b63c:	1a9b      	subs	r3, r3, r2
 800b63e:	18ed      	adds	r5, r5, r3
 800b640:	2700      	movs	r7, #0
 800b642:	42bd      	cmp	r5, r7
 800b644:	d120      	bne.n	800b688 <_printf_common+0xc4>
 800b646:	2000      	movs	r0, #0
 800b648:	e010      	b.n	800b66c <_printf_common+0xa8>
 800b64a:	3701      	adds	r7, #1
 800b64c:	68e3      	ldr	r3, [r4, #12]
 800b64e:	682a      	ldr	r2, [r5, #0]
 800b650:	1a9b      	subs	r3, r3, r2
 800b652:	42bb      	cmp	r3, r7
 800b654:	ddd2      	ble.n	800b5fc <_printf_common+0x38>
 800b656:	0022      	movs	r2, r4
 800b658:	2301      	movs	r3, #1
 800b65a:	3219      	adds	r2, #25
 800b65c:	9901      	ldr	r1, [sp, #4]
 800b65e:	9800      	ldr	r0, [sp, #0]
 800b660:	9e08      	ldr	r6, [sp, #32]
 800b662:	47b0      	blx	r6
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d1f0      	bne.n	800b64a <_printf_common+0x86>
 800b668:	2001      	movs	r0, #1
 800b66a:	4240      	negs	r0, r0
 800b66c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b66e:	2030      	movs	r0, #48	; 0x30
 800b670:	18e1      	adds	r1, r4, r3
 800b672:	3143      	adds	r1, #67	; 0x43
 800b674:	7008      	strb	r0, [r1, #0]
 800b676:	0021      	movs	r1, r4
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	3145      	adds	r1, #69	; 0x45
 800b67c:	7809      	ldrb	r1, [r1, #0]
 800b67e:	18a2      	adds	r2, r4, r2
 800b680:	3243      	adds	r2, #67	; 0x43
 800b682:	3302      	adds	r3, #2
 800b684:	7011      	strb	r1, [r2, #0]
 800b686:	e7c1      	b.n	800b60c <_printf_common+0x48>
 800b688:	0022      	movs	r2, r4
 800b68a:	2301      	movs	r3, #1
 800b68c:	321a      	adds	r2, #26
 800b68e:	9901      	ldr	r1, [sp, #4]
 800b690:	9800      	ldr	r0, [sp, #0]
 800b692:	9e08      	ldr	r6, [sp, #32]
 800b694:	47b0      	blx	r6
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	d0e6      	beq.n	800b668 <_printf_common+0xa4>
 800b69a:	3701      	adds	r7, #1
 800b69c:	e7d1      	b.n	800b642 <_printf_common+0x7e>
	...

0800b6a0 <_printf_i>:
 800b6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6a2:	b089      	sub	sp, #36	; 0x24
 800b6a4:	9204      	str	r2, [sp, #16]
 800b6a6:	000a      	movs	r2, r1
 800b6a8:	3243      	adds	r2, #67	; 0x43
 800b6aa:	9305      	str	r3, [sp, #20]
 800b6ac:	9003      	str	r0, [sp, #12]
 800b6ae:	9202      	str	r2, [sp, #8]
 800b6b0:	7e0a      	ldrb	r2, [r1, #24]
 800b6b2:	000c      	movs	r4, r1
 800b6b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6b6:	2a6e      	cmp	r2, #110	; 0x6e
 800b6b8:	d100      	bne.n	800b6bc <_printf_i+0x1c>
 800b6ba:	e086      	b.n	800b7ca <_printf_i+0x12a>
 800b6bc:	d81f      	bhi.n	800b6fe <_printf_i+0x5e>
 800b6be:	2a63      	cmp	r2, #99	; 0x63
 800b6c0:	d033      	beq.n	800b72a <_printf_i+0x8a>
 800b6c2:	d808      	bhi.n	800b6d6 <_printf_i+0x36>
 800b6c4:	2a00      	cmp	r2, #0
 800b6c6:	d100      	bne.n	800b6ca <_printf_i+0x2a>
 800b6c8:	e08c      	b.n	800b7e4 <_printf_i+0x144>
 800b6ca:	2a58      	cmp	r2, #88	; 0x58
 800b6cc:	d04d      	beq.n	800b76a <_printf_i+0xca>
 800b6ce:	0025      	movs	r5, r4
 800b6d0:	3542      	adds	r5, #66	; 0x42
 800b6d2:	702a      	strb	r2, [r5, #0]
 800b6d4:	e030      	b.n	800b738 <_printf_i+0x98>
 800b6d6:	2a64      	cmp	r2, #100	; 0x64
 800b6d8:	d001      	beq.n	800b6de <_printf_i+0x3e>
 800b6da:	2a69      	cmp	r2, #105	; 0x69
 800b6dc:	d1f7      	bne.n	800b6ce <_printf_i+0x2e>
 800b6de:	6819      	ldr	r1, [r3, #0]
 800b6e0:	6825      	ldr	r5, [r4, #0]
 800b6e2:	1d0a      	adds	r2, r1, #4
 800b6e4:	0628      	lsls	r0, r5, #24
 800b6e6:	d529      	bpl.n	800b73c <_printf_i+0x9c>
 800b6e8:	6808      	ldr	r0, [r1, #0]
 800b6ea:	601a      	str	r2, [r3, #0]
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	da03      	bge.n	800b6f8 <_printf_i+0x58>
 800b6f0:	232d      	movs	r3, #45	; 0x2d
 800b6f2:	9a02      	ldr	r2, [sp, #8]
 800b6f4:	4240      	negs	r0, r0
 800b6f6:	7013      	strb	r3, [r2, #0]
 800b6f8:	4e6b      	ldr	r6, [pc, #428]	; (800b8a8 <_printf_i+0x208>)
 800b6fa:	270a      	movs	r7, #10
 800b6fc:	e04f      	b.n	800b79e <_printf_i+0xfe>
 800b6fe:	2a73      	cmp	r2, #115	; 0x73
 800b700:	d074      	beq.n	800b7ec <_printf_i+0x14c>
 800b702:	d808      	bhi.n	800b716 <_printf_i+0x76>
 800b704:	2a6f      	cmp	r2, #111	; 0x6f
 800b706:	d01f      	beq.n	800b748 <_printf_i+0xa8>
 800b708:	2a70      	cmp	r2, #112	; 0x70
 800b70a:	d1e0      	bne.n	800b6ce <_printf_i+0x2e>
 800b70c:	2220      	movs	r2, #32
 800b70e:	6809      	ldr	r1, [r1, #0]
 800b710:	430a      	orrs	r2, r1
 800b712:	6022      	str	r2, [r4, #0]
 800b714:	e003      	b.n	800b71e <_printf_i+0x7e>
 800b716:	2a75      	cmp	r2, #117	; 0x75
 800b718:	d016      	beq.n	800b748 <_printf_i+0xa8>
 800b71a:	2a78      	cmp	r2, #120	; 0x78
 800b71c:	d1d7      	bne.n	800b6ce <_printf_i+0x2e>
 800b71e:	0022      	movs	r2, r4
 800b720:	2178      	movs	r1, #120	; 0x78
 800b722:	3245      	adds	r2, #69	; 0x45
 800b724:	7011      	strb	r1, [r2, #0]
 800b726:	4e61      	ldr	r6, [pc, #388]	; (800b8ac <_printf_i+0x20c>)
 800b728:	e022      	b.n	800b770 <_printf_i+0xd0>
 800b72a:	0025      	movs	r5, r4
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	3542      	adds	r5, #66	; 0x42
 800b730:	1d11      	adds	r1, r2, #4
 800b732:	6019      	str	r1, [r3, #0]
 800b734:	6813      	ldr	r3, [r2, #0]
 800b736:	702b      	strb	r3, [r5, #0]
 800b738:	2301      	movs	r3, #1
 800b73a:	e065      	b.n	800b808 <_printf_i+0x168>
 800b73c:	6808      	ldr	r0, [r1, #0]
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	0669      	lsls	r1, r5, #25
 800b742:	d5d3      	bpl.n	800b6ec <_printf_i+0x4c>
 800b744:	b200      	sxth	r0, r0
 800b746:	e7d1      	b.n	800b6ec <_printf_i+0x4c>
 800b748:	6819      	ldr	r1, [r3, #0]
 800b74a:	6825      	ldr	r5, [r4, #0]
 800b74c:	1d08      	adds	r0, r1, #4
 800b74e:	6018      	str	r0, [r3, #0]
 800b750:	6808      	ldr	r0, [r1, #0]
 800b752:	062e      	lsls	r6, r5, #24
 800b754:	d505      	bpl.n	800b762 <_printf_i+0xc2>
 800b756:	4e54      	ldr	r6, [pc, #336]	; (800b8a8 <_printf_i+0x208>)
 800b758:	2708      	movs	r7, #8
 800b75a:	2a6f      	cmp	r2, #111	; 0x6f
 800b75c:	d01b      	beq.n	800b796 <_printf_i+0xf6>
 800b75e:	270a      	movs	r7, #10
 800b760:	e019      	b.n	800b796 <_printf_i+0xf6>
 800b762:	066d      	lsls	r5, r5, #25
 800b764:	d5f7      	bpl.n	800b756 <_printf_i+0xb6>
 800b766:	b280      	uxth	r0, r0
 800b768:	e7f5      	b.n	800b756 <_printf_i+0xb6>
 800b76a:	3145      	adds	r1, #69	; 0x45
 800b76c:	4e4e      	ldr	r6, [pc, #312]	; (800b8a8 <_printf_i+0x208>)
 800b76e:	700a      	strb	r2, [r1, #0]
 800b770:	6818      	ldr	r0, [r3, #0]
 800b772:	6822      	ldr	r2, [r4, #0]
 800b774:	1d01      	adds	r1, r0, #4
 800b776:	6800      	ldr	r0, [r0, #0]
 800b778:	6019      	str	r1, [r3, #0]
 800b77a:	0615      	lsls	r5, r2, #24
 800b77c:	d521      	bpl.n	800b7c2 <_printf_i+0x122>
 800b77e:	07d3      	lsls	r3, r2, #31
 800b780:	d502      	bpl.n	800b788 <_printf_i+0xe8>
 800b782:	2320      	movs	r3, #32
 800b784:	431a      	orrs	r2, r3
 800b786:	6022      	str	r2, [r4, #0]
 800b788:	2710      	movs	r7, #16
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d103      	bne.n	800b796 <_printf_i+0xf6>
 800b78e:	2320      	movs	r3, #32
 800b790:	6822      	ldr	r2, [r4, #0]
 800b792:	439a      	bics	r2, r3
 800b794:	6022      	str	r2, [r4, #0]
 800b796:	0023      	movs	r3, r4
 800b798:	2200      	movs	r2, #0
 800b79a:	3343      	adds	r3, #67	; 0x43
 800b79c:	701a      	strb	r2, [r3, #0]
 800b79e:	6863      	ldr	r3, [r4, #4]
 800b7a0:	60a3      	str	r3, [r4, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	db58      	blt.n	800b858 <_printf_i+0x1b8>
 800b7a6:	2204      	movs	r2, #4
 800b7a8:	6821      	ldr	r1, [r4, #0]
 800b7aa:	4391      	bics	r1, r2
 800b7ac:	6021      	str	r1, [r4, #0]
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d154      	bne.n	800b85c <_printf_i+0x1bc>
 800b7b2:	9d02      	ldr	r5, [sp, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d05a      	beq.n	800b86e <_printf_i+0x1ce>
 800b7b8:	0025      	movs	r5, r4
 800b7ba:	7833      	ldrb	r3, [r6, #0]
 800b7bc:	3542      	adds	r5, #66	; 0x42
 800b7be:	702b      	strb	r3, [r5, #0]
 800b7c0:	e055      	b.n	800b86e <_printf_i+0x1ce>
 800b7c2:	0655      	lsls	r5, r2, #25
 800b7c4:	d5db      	bpl.n	800b77e <_printf_i+0xde>
 800b7c6:	b280      	uxth	r0, r0
 800b7c8:	e7d9      	b.n	800b77e <_printf_i+0xde>
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	680d      	ldr	r5, [r1, #0]
 800b7ce:	1d10      	adds	r0, r2, #4
 800b7d0:	6949      	ldr	r1, [r1, #20]
 800b7d2:	6018      	str	r0, [r3, #0]
 800b7d4:	6813      	ldr	r3, [r2, #0]
 800b7d6:	062e      	lsls	r6, r5, #24
 800b7d8:	d501      	bpl.n	800b7de <_printf_i+0x13e>
 800b7da:	6019      	str	r1, [r3, #0]
 800b7dc:	e002      	b.n	800b7e4 <_printf_i+0x144>
 800b7de:	066d      	lsls	r5, r5, #25
 800b7e0:	d5fb      	bpl.n	800b7da <_printf_i+0x13a>
 800b7e2:	8019      	strh	r1, [r3, #0]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	9d02      	ldr	r5, [sp, #8]
 800b7e8:	6123      	str	r3, [r4, #16]
 800b7ea:	e04f      	b.n	800b88c <_printf_i+0x1ec>
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	1d11      	adds	r1, r2, #4
 800b7f0:	6019      	str	r1, [r3, #0]
 800b7f2:	6815      	ldr	r5, [r2, #0]
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	6862      	ldr	r2, [r4, #4]
 800b7f8:	0028      	movs	r0, r5
 800b7fa:	f002 fb6b 	bl	800ded4 <memchr>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d001      	beq.n	800b806 <_printf_i+0x166>
 800b802:	1b40      	subs	r0, r0, r5
 800b804:	6060      	str	r0, [r4, #4]
 800b806:	6863      	ldr	r3, [r4, #4]
 800b808:	6123      	str	r3, [r4, #16]
 800b80a:	2300      	movs	r3, #0
 800b80c:	9a02      	ldr	r2, [sp, #8]
 800b80e:	7013      	strb	r3, [r2, #0]
 800b810:	e03c      	b.n	800b88c <_printf_i+0x1ec>
 800b812:	6923      	ldr	r3, [r4, #16]
 800b814:	002a      	movs	r2, r5
 800b816:	9904      	ldr	r1, [sp, #16]
 800b818:	9803      	ldr	r0, [sp, #12]
 800b81a:	9d05      	ldr	r5, [sp, #20]
 800b81c:	47a8      	blx	r5
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	d03e      	beq.n	800b8a0 <_printf_i+0x200>
 800b822:	6823      	ldr	r3, [r4, #0]
 800b824:	079b      	lsls	r3, r3, #30
 800b826:	d415      	bmi.n	800b854 <_printf_i+0x1b4>
 800b828:	9b07      	ldr	r3, [sp, #28]
 800b82a:	68e0      	ldr	r0, [r4, #12]
 800b82c:	4298      	cmp	r0, r3
 800b82e:	da39      	bge.n	800b8a4 <_printf_i+0x204>
 800b830:	0018      	movs	r0, r3
 800b832:	e037      	b.n	800b8a4 <_printf_i+0x204>
 800b834:	0022      	movs	r2, r4
 800b836:	2301      	movs	r3, #1
 800b838:	3219      	adds	r2, #25
 800b83a:	9904      	ldr	r1, [sp, #16]
 800b83c:	9803      	ldr	r0, [sp, #12]
 800b83e:	9e05      	ldr	r6, [sp, #20]
 800b840:	47b0      	blx	r6
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	d02c      	beq.n	800b8a0 <_printf_i+0x200>
 800b846:	3501      	adds	r5, #1
 800b848:	68e3      	ldr	r3, [r4, #12]
 800b84a:	9a07      	ldr	r2, [sp, #28]
 800b84c:	1a9b      	subs	r3, r3, r2
 800b84e:	42ab      	cmp	r3, r5
 800b850:	dcf0      	bgt.n	800b834 <_printf_i+0x194>
 800b852:	e7e9      	b.n	800b828 <_printf_i+0x188>
 800b854:	2500      	movs	r5, #0
 800b856:	e7f7      	b.n	800b848 <_printf_i+0x1a8>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d0ad      	beq.n	800b7b8 <_printf_i+0x118>
 800b85c:	9d02      	ldr	r5, [sp, #8]
 800b85e:	0039      	movs	r1, r7
 800b860:	f7f4 fcea 	bl	8000238 <__aeabi_uidivmod>
 800b864:	5c73      	ldrb	r3, [r6, r1]
 800b866:	3d01      	subs	r5, #1
 800b868:	702b      	strb	r3, [r5, #0]
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d1f7      	bne.n	800b85e <_printf_i+0x1be>
 800b86e:	2f08      	cmp	r7, #8
 800b870:	d109      	bne.n	800b886 <_printf_i+0x1e6>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	07db      	lsls	r3, r3, #31
 800b876:	d506      	bpl.n	800b886 <_printf_i+0x1e6>
 800b878:	6863      	ldr	r3, [r4, #4]
 800b87a:	6922      	ldr	r2, [r4, #16]
 800b87c:	4293      	cmp	r3, r2
 800b87e:	dc02      	bgt.n	800b886 <_printf_i+0x1e6>
 800b880:	2330      	movs	r3, #48	; 0x30
 800b882:	3d01      	subs	r5, #1
 800b884:	702b      	strb	r3, [r5, #0]
 800b886:	9b02      	ldr	r3, [sp, #8]
 800b888:	1b5b      	subs	r3, r3, r5
 800b88a:	6123      	str	r3, [r4, #16]
 800b88c:	9b05      	ldr	r3, [sp, #20]
 800b88e:	aa07      	add	r2, sp, #28
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	0021      	movs	r1, r4
 800b894:	9b04      	ldr	r3, [sp, #16]
 800b896:	9803      	ldr	r0, [sp, #12]
 800b898:	f7ff fe94 	bl	800b5c4 <_printf_common>
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d1b8      	bne.n	800b812 <_printf_i+0x172>
 800b8a0:	2001      	movs	r0, #1
 800b8a2:	4240      	negs	r0, r0
 800b8a4:	b009      	add	sp, #36	; 0x24
 800b8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a8:	0800ff7c 	.word	0x0800ff7c
 800b8ac:	0800ff8d 	.word	0x0800ff8d

0800b8b0 <_scanf_float>:
 800b8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8b2:	b08b      	sub	sp, #44	; 0x2c
 800b8b4:	9002      	str	r0, [sp, #8]
 800b8b6:	9200      	str	r2, [sp, #0]
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	22ae      	movs	r2, #174	; 0xae
 800b8bc:	9305      	str	r3, [sp, #20]
 800b8be:	688b      	ldr	r3, [r1, #8]
 800b8c0:	000e      	movs	r6, r1
 800b8c2:	1e59      	subs	r1, r3, #1
 800b8c4:	0052      	lsls	r2, r2, #1
 800b8c6:	9004      	str	r0, [sp, #16]
 800b8c8:	4291      	cmp	r1, r2
 800b8ca:	d905      	bls.n	800b8d8 <_scanf_float+0x28>
 800b8cc:	3b5e      	subs	r3, #94	; 0x5e
 800b8ce:	3bff      	subs	r3, #255	; 0xff
 800b8d0:	9304      	str	r3, [sp, #16]
 800b8d2:	235e      	movs	r3, #94	; 0x5e
 800b8d4:	33ff      	adds	r3, #255	; 0xff
 800b8d6:	60b3      	str	r3, [r6, #8]
 800b8d8:	23f0      	movs	r3, #240	; 0xf0
 800b8da:	6832      	ldr	r2, [r6, #0]
 800b8dc:	00db      	lsls	r3, r3, #3
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	6033      	str	r3, [r6, #0]
 800b8e2:	0033      	movs	r3, r6
 800b8e4:	2700      	movs	r7, #0
 800b8e6:	331c      	adds	r3, #28
 800b8e8:	001d      	movs	r5, r3
 800b8ea:	003c      	movs	r4, r7
 800b8ec:	9303      	str	r3, [sp, #12]
 800b8ee:	9708      	str	r7, [sp, #32]
 800b8f0:	9707      	str	r7, [sp, #28]
 800b8f2:	9701      	str	r7, [sp, #4]
 800b8f4:	9706      	str	r7, [sp, #24]
 800b8f6:	68b2      	ldr	r2, [r6, #8]
 800b8f8:	2a00      	cmp	r2, #0
 800b8fa:	d013      	beq.n	800b924 <_scanf_float+0x74>
 800b8fc:	9b00      	ldr	r3, [sp, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	9309      	str	r3, [sp, #36]	; 0x24
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	2b49      	cmp	r3, #73	; 0x49
 800b906:	d100      	bne.n	800b90a <_scanf_float+0x5a>
 800b908:	e07c      	b.n	800ba04 <_scanf_float+0x154>
 800b90a:	d854      	bhi.n	800b9b6 <_scanf_float+0x106>
 800b90c:	2b39      	cmp	r3, #57	; 0x39
 800b90e:	d847      	bhi.n	800b9a0 <_scanf_float+0xf0>
 800b910:	2b31      	cmp	r3, #49	; 0x31
 800b912:	d300      	bcc.n	800b916 <_scanf_float+0x66>
 800b914:	e094      	b.n	800ba40 <_scanf_float+0x190>
 800b916:	2b2d      	cmp	r3, #45	; 0x2d
 800b918:	d100      	bne.n	800b91c <_scanf_float+0x6c>
 800b91a:	e09c      	b.n	800ba56 <_scanf_float+0x1a6>
 800b91c:	d817      	bhi.n	800b94e <_scanf_float+0x9e>
 800b91e:	2b2b      	cmp	r3, #43	; 0x2b
 800b920:	d100      	bne.n	800b924 <_scanf_float+0x74>
 800b922:	e098      	b.n	800ba56 <_scanf_float+0x1a6>
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <_scanf_float+0x82>
 800b92a:	6832      	ldr	r2, [r6, #0]
 800b92c:	4b9b      	ldr	r3, [pc, #620]	; (800bb9c <_scanf_float+0x2ec>)
 800b92e:	4013      	ands	r3, r2
 800b930:	6033      	str	r3, [r6, #0]
 800b932:	3c01      	subs	r4, #1
 800b934:	2c01      	cmp	r4, #1
 800b936:	d900      	bls.n	800b93a <_scanf_float+0x8a>
 800b938:	e0ee      	b.n	800bb18 <_scanf_float+0x268>
 800b93a:	24be      	movs	r4, #190	; 0xbe
 800b93c:	0064      	lsls	r4, r4, #1
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	429d      	cmp	r5, r3
 800b942:	d900      	bls.n	800b946 <_scanf_float+0x96>
 800b944:	e0de      	b.n	800bb04 <_scanf_float+0x254>
 800b946:	2701      	movs	r7, #1
 800b948:	0038      	movs	r0, r7
 800b94a:	b00b      	add	sp, #44	; 0x2c
 800b94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b94e:	2b2e      	cmp	r3, #46	; 0x2e
 800b950:	d100      	bne.n	800b954 <_scanf_float+0xa4>
 800b952:	e0a2      	b.n	800ba9a <_scanf_float+0x1ea>
 800b954:	2b30      	cmp	r3, #48	; 0x30
 800b956:	d1e5      	bne.n	800b924 <_scanf_float+0x74>
 800b958:	6831      	ldr	r1, [r6, #0]
 800b95a:	05c8      	lsls	r0, r1, #23
 800b95c:	d570      	bpl.n	800ba40 <_scanf_float+0x190>
 800b95e:	2380      	movs	r3, #128	; 0x80
 800b960:	4399      	bics	r1, r3
 800b962:	9b01      	ldr	r3, [sp, #4]
 800b964:	6031      	str	r1, [r6, #0]
 800b966:	3301      	adds	r3, #1
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	9b04      	ldr	r3, [sp, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d003      	beq.n	800b978 <_scanf_float+0xc8>
 800b970:	3b01      	subs	r3, #1
 800b972:	3201      	adds	r2, #1
 800b974:	9304      	str	r3, [sp, #16]
 800b976:	60b2      	str	r2, [r6, #8]
 800b978:	68b3      	ldr	r3, [r6, #8]
 800b97a:	9a00      	ldr	r2, [sp, #0]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	60b3      	str	r3, [r6, #8]
 800b980:	6933      	ldr	r3, [r6, #16]
 800b982:	3301      	adds	r3, #1
 800b984:	6133      	str	r3, [r6, #16]
 800b986:	9b00      	ldr	r3, [sp, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	9309      	str	r3, [sp, #36]	; 0x24
 800b98c:	3b01      	subs	r3, #1
 800b98e:	6053      	str	r3, [r2, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	dc00      	bgt.n	800b996 <_scanf_float+0xe6>
 800b994:	e0ac      	b.n	800baf0 <_scanf_float+0x240>
 800b996:	6813      	ldr	r3, [r2, #0]
 800b998:	9309      	str	r3, [sp, #36]	; 0x24
 800b99a:	3301      	adds	r3, #1
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	e7aa      	b.n	800b8f6 <_scanf_float+0x46>
 800b9a0:	2b45      	cmp	r3, #69	; 0x45
 800b9a2:	d100      	bne.n	800b9a6 <_scanf_float+0xf6>
 800b9a4:	e083      	b.n	800baae <_scanf_float+0x1fe>
 800b9a6:	2b46      	cmp	r3, #70	; 0x46
 800b9a8:	d06d      	beq.n	800ba86 <_scanf_float+0x1d6>
 800b9aa:	2b41      	cmp	r3, #65	; 0x41
 800b9ac:	d1ba      	bne.n	800b924 <_scanf_float+0x74>
 800b9ae:	2c01      	cmp	r4, #1
 800b9b0:	d1b8      	bne.n	800b924 <_scanf_float+0x74>
 800b9b2:	2402      	movs	r4, #2
 800b9b4:	e04c      	b.n	800ba50 <_scanf_float+0x1a0>
 800b9b6:	2b65      	cmp	r3, #101	; 0x65
 800b9b8:	d079      	beq.n	800baae <_scanf_float+0x1fe>
 800b9ba:	d81b      	bhi.n	800b9f4 <_scanf_float+0x144>
 800b9bc:	2b54      	cmp	r3, #84	; 0x54
 800b9be:	d067      	beq.n	800ba90 <_scanf_float+0x1e0>
 800b9c0:	d813      	bhi.n	800b9ea <_scanf_float+0x13a>
 800b9c2:	2b4e      	cmp	r3, #78	; 0x4e
 800b9c4:	d1ae      	bne.n	800b924 <_scanf_float+0x74>
 800b9c6:	2c00      	cmp	r4, #0
 800b9c8:	d14c      	bne.n	800ba64 <_scanf_float+0x1b4>
 800b9ca:	9a01      	ldr	r2, [sp, #4]
 800b9cc:	2a00      	cmp	r2, #0
 800b9ce:	d14b      	bne.n	800ba68 <_scanf_float+0x1b8>
 800b9d0:	21e0      	movs	r1, #224	; 0xe0
 800b9d2:	20e0      	movs	r0, #224	; 0xe0
 800b9d4:	6832      	ldr	r2, [r6, #0]
 800b9d6:	00c9      	lsls	r1, r1, #3
 800b9d8:	4011      	ands	r1, r2
 800b9da:	00c0      	lsls	r0, r0, #3
 800b9dc:	4281      	cmp	r1, r0
 800b9de:	d143      	bne.n	800ba68 <_scanf_float+0x1b8>
 800b9e0:	496f      	ldr	r1, [pc, #444]	; (800bba0 <_scanf_float+0x2f0>)
 800b9e2:	3401      	adds	r4, #1
 800b9e4:	400a      	ands	r2, r1
 800b9e6:	6032      	str	r2, [r6, #0]
 800b9e8:	e032      	b.n	800ba50 <_scanf_float+0x1a0>
 800b9ea:	2b59      	cmp	r3, #89	; 0x59
 800b9ec:	d023      	beq.n	800ba36 <_scanf_float+0x186>
 800b9ee:	2b61      	cmp	r3, #97	; 0x61
 800b9f0:	d0dd      	beq.n	800b9ae <_scanf_float+0xfe>
 800b9f2:	e797      	b.n	800b924 <_scanf_float+0x74>
 800b9f4:	2b6e      	cmp	r3, #110	; 0x6e
 800b9f6:	d0e6      	beq.n	800b9c6 <_scanf_float+0x116>
 800b9f8:	d818      	bhi.n	800ba2c <_scanf_float+0x17c>
 800b9fa:	2b66      	cmp	r3, #102	; 0x66
 800b9fc:	d043      	beq.n	800ba86 <_scanf_float+0x1d6>
 800b9fe:	2b69      	cmp	r3, #105	; 0x69
 800ba00:	d000      	beq.n	800ba04 <_scanf_float+0x154>
 800ba02:	e78f      	b.n	800b924 <_scanf_float+0x74>
 800ba04:	2f00      	cmp	r7, #0
 800ba06:	d137      	bne.n	800ba78 <_scanf_float+0x1c8>
 800ba08:	9a01      	ldr	r2, [sp, #4]
 800ba0a:	2a00      	cmp	r2, #0
 800ba0c:	d000      	beq.n	800ba10 <_scanf_float+0x160>
 800ba0e:	e78c      	b.n	800b92a <_scanf_float+0x7a>
 800ba10:	21e0      	movs	r1, #224	; 0xe0
 800ba12:	20e0      	movs	r0, #224	; 0xe0
 800ba14:	6832      	ldr	r2, [r6, #0]
 800ba16:	00c9      	lsls	r1, r1, #3
 800ba18:	4011      	ands	r1, r2
 800ba1a:	00c0      	lsls	r0, r0, #3
 800ba1c:	4281      	cmp	r1, r0
 800ba1e:	d000      	beq.n	800ba22 <_scanf_float+0x172>
 800ba20:	e787      	b.n	800b932 <_scanf_float+0x82>
 800ba22:	495f      	ldr	r1, [pc, #380]	; (800bba0 <_scanf_float+0x2f0>)
 800ba24:	3701      	adds	r7, #1
 800ba26:	400a      	ands	r2, r1
 800ba28:	6032      	str	r2, [r6, #0]
 800ba2a:	e011      	b.n	800ba50 <_scanf_float+0x1a0>
 800ba2c:	2b74      	cmp	r3, #116	; 0x74
 800ba2e:	d02f      	beq.n	800ba90 <_scanf_float+0x1e0>
 800ba30:	2b79      	cmp	r3, #121	; 0x79
 800ba32:	d000      	beq.n	800ba36 <_scanf_float+0x186>
 800ba34:	e776      	b.n	800b924 <_scanf_float+0x74>
 800ba36:	2f07      	cmp	r7, #7
 800ba38:	d000      	beq.n	800ba3c <_scanf_float+0x18c>
 800ba3a:	e773      	b.n	800b924 <_scanf_float+0x74>
 800ba3c:	2708      	movs	r7, #8
 800ba3e:	e007      	b.n	800ba50 <_scanf_float+0x1a0>
 800ba40:	19e2      	adds	r2, r4, r7
 800ba42:	2a00      	cmp	r2, #0
 800ba44:	d000      	beq.n	800ba48 <_scanf_float+0x198>
 800ba46:	e76d      	b.n	800b924 <_scanf_float+0x74>
 800ba48:	4a56      	ldr	r2, [pc, #344]	; (800bba4 <_scanf_float+0x2f4>)
 800ba4a:	6831      	ldr	r1, [r6, #0]
 800ba4c:	400a      	ands	r2, r1
 800ba4e:	6032      	str	r2, [r6, #0]
 800ba50:	702b      	strb	r3, [r5, #0]
 800ba52:	3501      	adds	r5, #1
 800ba54:	e790      	b.n	800b978 <_scanf_float+0xc8>
 800ba56:	2180      	movs	r1, #128	; 0x80
 800ba58:	6832      	ldr	r2, [r6, #0]
 800ba5a:	420a      	tst	r2, r1
 800ba5c:	d100      	bne.n	800ba60 <_scanf_float+0x1b0>
 800ba5e:	e761      	b.n	800b924 <_scanf_float+0x74>
 800ba60:	438a      	bics	r2, r1
 800ba62:	e7f4      	b.n	800ba4e <_scanf_float+0x19e>
 800ba64:	2c02      	cmp	r4, #2
 800ba66:	d041      	beq.n	800baec <_scanf_float+0x23c>
 800ba68:	2f01      	cmp	r7, #1
 800ba6a:	d002      	beq.n	800ba72 <_scanf_float+0x1c2>
 800ba6c:	2f04      	cmp	r7, #4
 800ba6e:	d000      	beq.n	800ba72 <_scanf_float+0x1c2>
 800ba70:	e758      	b.n	800b924 <_scanf_float+0x74>
 800ba72:	3701      	adds	r7, #1
 800ba74:	b2ff      	uxtb	r7, r7
 800ba76:	e7eb      	b.n	800ba50 <_scanf_float+0x1a0>
 800ba78:	2102      	movs	r1, #2
 800ba7a:	1efa      	subs	r2, r7, #3
 800ba7c:	438a      	bics	r2, r1
 800ba7e:	b2d2      	uxtb	r2, r2
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	d0f6      	beq.n	800ba72 <_scanf_float+0x1c2>
 800ba84:	e74e      	b.n	800b924 <_scanf_float+0x74>
 800ba86:	2f02      	cmp	r7, #2
 800ba88:	d000      	beq.n	800ba8c <_scanf_float+0x1dc>
 800ba8a:	e74b      	b.n	800b924 <_scanf_float+0x74>
 800ba8c:	2703      	movs	r7, #3
 800ba8e:	e7df      	b.n	800ba50 <_scanf_float+0x1a0>
 800ba90:	2f06      	cmp	r7, #6
 800ba92:	d000      	beq.n	800ba96 <_scanf_float+0x1e6>
 800ba94:	e746      	b.n	800b924 <_scanf_float+0x74>
 800ba96:	2707      	movs	r7, #7
 800ba98:	e7da      	b.n	800ba50 <_scanf_float+0x1a0>
 800ba9a:	6832      	ldr	r2, [r6, #0]
 800ba9c:	0591      	lsls	r1, r2, #22
 800ba9e:	d400      	bmi.n	800baa2 <_scanf_float+0x1f2>
 800baa0:	e740      	b.n	800b924 <_scanf_float+0x74>
 800baa2:	4941      	ldr	r1, [pc, #260]	; (800bba8 <_scanf_float+0x2f8>)
 800baa4:	400a      	ands	r2, r1
 800baa6:	6032      	str	r2, [r6, #0]
 800baa8:	9a01      	ldr	r2, [sp, #4]
 800baaa:	9206      	str	r2, [sp, #24]
 800baac:	e7d0      	b.n	800ba50 <_scanf_float+0x1a0>
 800baae:	21a0      	movs	r1, #160	; 0xa0
 800bab0:	2080      	movs	r0, #128	; 0x80
 800bab2:	6832      	ldr	r2, [r6, #0]
 800bab4:	00c9      	lsls	r1, r1, #3
 800bab6:	4011      	ands	r1, r2
 800bab8:	00c0      	lsls	r0, r0, #3
 800baba:	4281      	cmp	r1, r0
 800babc:	d006      	beq.n	800bacc <_scanf_float+0x21c>
 800babe:	4202      	tst	r2, r0
 800bac0:	d100      	bne.n	800bac4 <_scanf_float+0x214>
 800bac2:	e72f      	b.n	800b924 <_scanf_float+0x74>
 800bac4:	9901      	ldr	r1, [sp, #4]
 800bac6:	2900      	cmp	r1, #0
 800bac8:	d100      	bne.n	800bacc <_scanf_float+0x21c>
 800baca:	e732      	b.n	800b932 <_scanf_float+0x82>
 800bacc:	0591      	lsls	r1, r2, #22
 800bace:	d404      	bmi.n	800bada <_scanf_float+0x22a>
 800bad0:	9901      	ldr	r1, [sp, #4]
 800bad2:	9806      	ldr	r0, [sp, #24]
 800bad4:	9508      	str	r5, [sp, #32]
 800bad6:	1a09      	subs	r1, r1, r0
 800bad8:	9107      	str	r1, [sp, #28]
 800bada:	4931      	ldr	r1, [pc, #196]	; (800bba0 <_scanf_float+0x2f0>)
 800badc:	400a      	ands	r2, r1
 800bade:	21c0      	movs	r1, #192	; 0xc0
 800bae0:	0049      	lsls	r1, r1, #1
 800bae2:	430a      	orrs	r2, r1
 800bae4:	6032      	str	r2, [r6, #0]
 800bae6:	2200      	movs	r2, #0
 800bae8:	9201      	str	r2, [sp, #4]
 800baea:	e7b1      	b.n	800ba50 <_scanf_float+0x1a0>
 800baec:	2403      	movs	r4, #3
 800baee:	e7af      	b.n	800ba50 <_scanf_float+0x1a0>
 800baf0:	23c0      	movs	r3, #192	; 0xc0
 800baf2:	005b      	lsls	r3, r3, #1
 800baf4:	58f3      	ldr	r3, [r6, r3]
 800baf6:	9900      	ldr	r1, [sp, #0]
 800baf8:	9802      	ldr	r0, [sp, #8]
 800bafa:	4798      	blx	r3
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d100      	bne.n	800bb02 <_scanf_float+0x252>
 800bb00:	e6f9      	b.n	800b8f6 <_scanf_float+0x46>
 800bb02:	e70f      	b.n	800b924 <_scanf_float+0x74>
 800bb04:	3d01      	subs	r5, #1
 800bb06:	5933      	ldr	r3, [r6, r4]
 800bb08:	7829      	ldrb	r1, [r5, #0]
 800bb0a:	9a00      	ldr	r2, [sp, #0]
 800bb0c:	9802      	ldr	r0, [sp, #8]
 800bb0e:	4798      	blx	r3
 800bb10:	6933      	ldr	r3, [r6, #16]
 800bb12:	3b01      	subs	r3, #1
 800bb14:	6133      	str	r3, [r6, #16]
 800bb16:	e712      	b.n	800b93e <_scanf_float+0x8e>
 800bb18:	1e7b      	subs	r3, r7, #1
 800bb1a:	2b06      	cmp	r3, #6
 800bb1c:	d826      	bhi.n	800bb6c <_scanf_float+0x2bc>
 800bb1e:	2f02      	cmp	r7, #2
 800bb20:	d839      	bhi.n	800bb96 <_scanf_float+0x2e6>
 800bb22:	24be      	movs	r4, #190	; 0xbe
 800bb24:	0064      	lsls	r4, r4, #1
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	429d      	cmp	r5, r3
 800bb2a:	d800      	bhi.n	800bb2e <_scanf_float+0x27e>
 800bb2c:	e70b      	b.n	800b946 <_scanf_float+0x96>
 800bb2e:	3d01      	subs	r5, #1
 800bb30:	5933      	ldr	r3, [r6, r4]
 800bb32:	7829      	ldrb	r1, [r5, #0]
 800bb34:	9a00      	ldr	r2, [sp, #0]
 800bb36:	9802      	ldr	r0, [sp, #8]
 800bb38:	4798      	blx	r3
 800bb3a:	6933      	ldr	r3, [r6, #16]
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	6133      	str	r3, [r6, #16]
 800bb40:	e7f1      	b.n	800bb26 <_scanf_float+0x276>
 800bb42:	9b04      	ldr	r3, [sp, #16]
 800bb44:	9a00      	ldr	r2, [sp, #0]
 800bb46:	3b01      	subs	r3, #1
 800bb48:	9304      	str	r3, [sp, #16]
 800bb4a:	7819      	ldrb	r1, [r3, #0]
 800bb4c:	23be      	movs	r3, #190	; 0xbe
 800bb4e:	005b      	lsls	r3, r3, #1
 800bb50:	58f3      	ldr	r3, [r6, r3]
 800bb52:	9802      	ldr	r0, [sp, #8]
 800bb54:	9309      	str	r3, [sp, #36]	; 0x24
 800bb56:	4798      	blx	r3
 800bb58:	6933      	ldr	r3, [r6, #16]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	6133      	str	r3, [r6, #16]
 800bb5e:	3c01      	subs	r4, #1
 800bb60:	b2e4      	uxtb	r4, r4
 800bb62:	2c02      	cmp	r4, #2
 800bb64:	d1ed      	bne.n	800bb42 <_scanf_float+0x292>
 800bb66:	3f03      	subs	r7, #3
 800bb68:	b2ff      	uxtb	r7, r7
 800bb6a:	1bed      	subs	r5, r5, r7
 800bb6c:	6833      	ldr	r3, [r6, #0]
 800bb6e:	05da      	lsls	r2, r3, #23
 800bb70:	d537      	bpl.n	800bbe2 <_scanf_float+0x332>
 800bb72:	055b      	lsls	r3, r3, #21
 800bb74:	d51a      	bpl.n	800bbac <_scanf_float+0x2fc>
 800bb76:	24be      	movs	r4, #190	; 0xbe
 800bb78:	0064      	lsls	r4, r4, #1
 800bb7a:	9b03      	ldr	r3, [sp, #12]
 800bb7c:	429d      	cmp	r5, r3
 800bb7e:	d800      	bhi.n	800bb82 <_scanf_float+0x2d2>
 800bb80:	e6e1      	b.n	800b946 <_scanf_float+0x96>
 800bb82:	3d01      	subs	r5, #1
 800bb84:	5933      	ldr	r3, [r6, r4]
 800bb86:	7829      	ldrb	r1, [r5, #0]
 800bb88:	9a00      	ldr	r2, [sp, #0]
 800bb8a:	9802      	ldr	r0, [sp, #8]
 800bb8c:	4798      	blx	r3
 800bb8e:	6933      	ldr	r3, [r6, #16]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	6133      	str	r3, [r6, #16]
 800bb94:	e7f1      	b.n	800bb7a <_scanf_float+0x2ca>
 800bb96:	003c      	movs	r4, r7
 800bb98:	9504      	str	r5, [sp, #16]
 800bb9a:	e7e0      	b.n	800bb5e <_scanf_float+0x2ae>
 800bb9c:	fffffeff 	.word	0xfffffeff
 800bba0:	fffff87f 	.word	0xfffff87f
 800bba4:	fffffe7f 	.word	0xfffffe7f
 800bba8:	fffffd7f 	.word	0xfffffd7f
 800bbac:	6933      	ldr	r3, [r6, #16]
 800bbae:	1e6c      	subs	r4, r5, #1
 800bbb0:	7821      	ldrb	r1, [r4, #0]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	6133      	str	r3, [r6, #16]
 800bbb6:	2965      	cmp	r1, #101	; 0x65
 800bbb8:	d00c      	beq.n	800bbd4 <_scanf_float+0x324>
 800bbba:	2945      	cmp	r1, #69	; 0x45
 800bbbc:	d00a      	beq.n	800bbd4 <_scanf_float+0x324>
 800bbbe:	23be      	movs	r3, #190	; 0xbe
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	58f3      	ldr	r3, [r6, r3]
 800bbc4:	9a00      	ldr	r2, [sp, #0]
 800bbc6:	9802      	ldr	r0, [sp, #8]
 800bbc8:	4798      	blx	r3
 800bbca:	6933      	ldr	r3, [r6, #16]
 800bbcc:	1eac      	subs	r4, r5, #2
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	7821      	ldrb	r1, [r4, #0]
 800bbd2:	6133      	str	r3, [r6, #16]
 800bbd4:	23be      	movs	r3, #190	; 0xbe
 800bbd6:	005b      	lsls	r3, r3, #1
 800bbd8:	58f3      	ldr	r3, [r6, r3]
 800bbda:	9a00      	ldr	r2, [sp, #0]
 800bbdc:	9802      	ldr	r0, [sp, #8]
 800bbde:	4798      	blx	r3
 800bbe0:	0025      	movs	r5, r4
 800bbe2:	2710      	movs	r7, #16
 800bbe4:	6833      	ldr	r3, [r6, #0]
 800bbe6:	401f      	ands	r7, r3
 800bbe8:	d15b      	bne.n	800bca2 <_scanf_float+0x3f2>
 800bbea:	23c0      	movs	r3, #192	; 0xc0
 800bbec:	702f      	strb	r7, [r5, #0]
 800bbee:	6832      	ldr	r2, [r6, #0]
 800bbf0:	00db      	lsls	r3, r3, #3
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	2280      	movs	r2, #128	; 0x80
 800bbf6:	00d2      	lsls	r2, r2, #3
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d11b      	bne.n	800bc34 <_scanf_float+0x384>
 800bbfc:	9a06      	ldr	r2, [sp, #24]
 800bbfe:	9b01      	ldr	r3, [sp, #4]
 800bc00:	1a9b      	subs	r3, r3, r2
 800bc02:	425a      	negs	r2, r3
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d122      	bne.n	800bc4e <_scanf_float+0x39e>
 800bc08:	2200      	movs	r2, #0
 800bc0a:	9903      	ldr	r1, [sp, #12]
 800bc0c:	9802      	ldr	r0, [sp, #8]
 800bc0e:	f000 fef3 	bl	800c9f8 <_strtod_r>
 800bc12:	9b05      	ldr	r3, [sp, #20]
 800bc14:	0004      	movs	r4, r0
 800bc16:	6830      	ldr	r0, [r6, #0]
 800bc18:	000d      	movs	r5, r1
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	0782      	lsls	r2, r0, #30
 800bc1e:	d523      	bpl.n	800bc68 <_scanf_float+0x3b8>
 800bc20:	1d1a      	adds	r2, r3, #4
 800bc22:	9905      	ldr	r1, [sp, #20]
 800bc24:	600a      	str	r2, [r1, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	601c      	str	r4, [r3, #0]
 800bc2a:	605d      	str	r5, [r3, #4]
 800bc2c:	68f3      	ldr	r3, [r6, #12]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	60f3      	str	r3, [r6, #12]
 800bc32:	e689      	b.n	800b948 <_scanf_float+0x98>
 800bc34:	9b07      	ldr	r3, [sp, #28]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d0e6      	beq.n	800bc08 <_scanf_float+0x358>
 800bc3a:	9b08      	ldr	r3, [sp, #32]
 800bc3c:	003a      	movs	r2, r7
 800bc3e:	1c59      	adds	r1, r3, #1
 800bc40:	9802      	ldr	r0, [sp, #8]
 800bc42:	230a      	movs	r3, #10
 800bc44:	f000 ff68 	bl	800cb18 <_strtol_r>
 800bc48:	9b07      	ldr	r3, [sp, #28]
 800bc4a:	9d08      	ldr	r5, [sp, #32]
 800bc4c:	1ac2      	subs	r2, r0, r3
 800bc4e:	0033      	movs	r3, r6
 800bc50:	3370      	adds	r3, #112	; 0x70
 800bc52:	33ff      	adds	r3, #255	; 0xff
 800bc54:	429d      	cmp	r5, r3
 800bc56:	d302      	bcc.n	800bc5e <_scanf_float+0x3ae>
 800bc58:	0035      	movs	r5, r6
 800bc5a:	356f      	adds	r5, #111	; 0x6f
 800bc5c:	35ff      	adds	r5, #255	; 0xff
 800bc5e:	4912      	ldr	r1, [pc, #72]	; (800bca8 <_scanf_float+0x3f8>)
 800bc60:	0028      	movs	r0, r5
 800bc62:	f000 f839 	bl	800bcd8 <siprintf>
 800bc66:	e7cf      	b.n	800bc08 <_scanf_float+0x358>
 800bc68:	2104      	movs	r1, #4
 800bc6a:	4008      	ands	r0, r1
 800bc6c:	1d1a      	adds	r2, r3, #4
 800bc6e:	9001      	str	r0, [sp, #4]
 800bc70:	2800      	cmp	r0, #0
 800bc72:	d1d6      	bne.n	800bc22 <_scanf_float+0x372>
 800bc74:	9905      	ldr	r1, [sp, #20]
 800bc76:	0020      	movs	r0, r4
 800bc78:	600a      	str	r2, [r1, #0]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	0022      	movs	r2, r4
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	0029      	movs	r1, r5
 800bc82:	002b      	movs	r3, r5
 800bc84:	f7f6 fb30 	bl	80022e8 <__aeabi_dcmpun>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d005      	beq.n	800bc98 <_scanf_float+0x3e8>
 800bc8c:	9801      	ldr	r0, [sp, #4]
 800bc8e:	f000 f81f 	bl	800bcd0 <nanf>
 800bc92:	9b00      	ldr	r3, [sp, #0]
 800bc94:	6018      	str	r0, [r3, #0]
 800bc96:	e7c9      	b.n	800bc2c <_scanf_float+0x37c>
 800bc98:	0020      	movs	r0, r4
 800bc9a:	0029      	movs	r1, r5
 800bc9c:	f7f6 fbe2 	bl	8002464 <__aeabi_d2f>
 800bca0:	e7f7      	b.n	800bc92 <_scanf_float+0x3e2>
 800bca2:	2700      	movs	r7, #0
 800bca4:	e650      	b.n	800b948 <_scanf_float+0x98>
 800bca6:	46c0      	nop			; (mov r8, r8)
 800bca8:	0800ff9e 	.word	0x0800ff9e

0800bcac <_sbrk_r>:
 800bcac:	2300      	movs	r3, #0
 800bcae:	b570      	push	{r4, r5, r6, lr}
 800bcb0:	4c06      	ldr	r4, [pc, #24]	; (800bccc <_sbrk_r+0x20>)
 800bcb2:	0005      	movs	r5, r0
 800bcb4:	0008      	movs	r0, r1
 800bcb6:	6023      	str	r3, [r4, #0]
 800bcb8:	f7f8 f89a 	bl	8003df0 <_sbrk>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d103      	bne.n	800bcc8 <_sbrk_r+0x1c>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d000      	beq.n	800bcc8 <_sbrk_r+0x1c>
 800bcc6:	602b      	str	r3, [r5, #0]
 800bcc8:	bd70      	pop	{r4, r5, r6, pc}
 800bcca:	46c0      	nop			; (mov r8, r8)
 800bccc:	20002924 	.word	0x20002924

0800bcd0 <nanf>:
 800bcd0:	4800      	ldr	r0, [pc, #0]	; (800bcd4 <nanf+0x4>)
 800bcd2:	4770      	bx	lr
 800bcd4:	7fc00000 	.word	0x7fc00000

0800bcd8 <siprintf>:
 800bcd8:	b40e      	push	{r1, r2, r3}
 800bcda:	b500      	push	{lr}
 800bcdc:	490b      	ldr	r1, [pc, #44]	; (800bd0c <siprintf+0x34>)
 800bcde:	b09c      	sub	sp, #112	; 0x70
 800bce0:	ab1d      	add	r3, sp, #116	; 0x74
 800bce2:	9002      	str	r0, [sp, #8]
 800bce4:	9006      	str	r0, [sp, #24]
 800bce6:	9107      	str	r1, [sp, #28]
 800bce8:	9104      	str	r1, [sp, #16]
 800bcea:	4809      	ldr	r0, [pc, #36]	; (800bd10 <siprintf+0x38>)
 800bcec:	4909      	ldr	r1, [pc, #36]	; (800bd14 <siprintf+0x3c>)
 800bcee:	cb04      	ldmia	r3!, {r2}
 800bcf0:	9105      	str	r1, [sp, #20]
 800bcf2:	6800      	ldr	r0, [r0, #0]
 800bcf4:	a902      	add	r1, sp, #8
 800bcf6:	9301      	str	r3, [sp, #4]
 800bcf8:	f002 fd60 	bl	800e7bc <_svfiprintf_r>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	9a02      	ldr	r2, [sp, #8]
 800bd00:	7013      	strb	r3, [r2, #0]
 800bd02:	b01c      	add	sp, #112	; 0x70
 800bd04:	bc08      	pop	{r3}
 800bd06:	b003      	add	sp, #12
 800bd08:	4718      	bx	r3
 800bd0a:	46c0      	nop			; (mov r8, r8)
 800bd0c:	7fffffff 	.word	0x7fffffff
 800bd10:	20000044 	.word	0x20000044
 800bd14:	ffff0208 	.word	0xffff0208

0800bd18 <strcat>:
 800bd18:	0002      	movs	r2, r0
 800bd1a:	b510      	push	{r4, lr}
 800bd1c:	7813      	ldrb	r3, [r2, #0]
 800bd1e:	1c54      	adds	r4, r2, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d105      	bne.n	800bd30 <strcat+0x18>
 800bd24:	5ccc      	ldrb	r4, [r1, r3]
 800bd26:	54d4      	strb	r4, [r2, r3]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	2c00      	cmp	r4, #0
 800bd2c:	d1fa      	bne.n	800bd24 <strcat+0xc>
 800bd2e:	bd10      	pop	{r4, pc}
 800bd30:	0022      	movs	r2, r4
 800bd32:	e7f3      	b.n	800bd1c <strcat+0x4>

0800bd34 <strcpy>:
 800bd34:	0003      	movs	r3, r0
 800bd36:	780a      	ldrb	r2, [r1, #0]
 800bd38:	3101      	adds	r1, #1
 800bd3a:	701a      	strb	r2, [r3, #0]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	d1f9      	bne.n	800bd36 <strcpy+0x2>
 800bd42:	4770      	bx	lr

0800bd44 <strstr>:
 800bd44:	b510      	push	{r4, lr}
 800bd46:	7803      	ldrb	r3, [r0, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10f      	bne.n	800bd6c <strstr+0x28>
 800bd4c:	780b      	ldrb	r3, [r1, #0]
 800bd4e:	425a      	negs	r2, r3
 800bd50:	4153      	adcs	r3, r2
 800bd52:	425b      	negs	r3, r3
 800bd54:	4018      	ands	r0, r3
 800bd56:	bd10      	pop	{r4, pc}
 800bd58:	2300      	movs	r3, #0
 800bd5a:	5cca      	ldrb	r2, [r1, r3]
 800bd5c:	2a00      	cmp	r2, #0
 800bd5e:	d0fa      	beq.n	800bd56 <strstr+0x12>
 800bd60:	5cc4      	ldrb	r4, [r0, r3]
 800bd62:	4294      	cmp	r4, r2
 800bd64:	d101      	bne.n	800bd6a <strstr+0x26>
 800bd66:	3301      	adds	r3, #1
 800bd68:	e7f7      	b.n	800bd5a <strstr+0x16>
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	7803      	ldrb	r3, [r0, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1f2      	bne.n	800bd58 <strstr+0x14>
 800bd72:	0018      	movs	r0, r3
 800bd74:	e7ef      	b.n	800bd56 <strstr+0x12>
	...

0800bd78 <sulp>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	0016      	movs	r6, r2
 800bd7c:	000d      	movs	r5, r1
 800bd7e:	f002 fb87 	bl	800e490 <__ulp>
 800bd82:	2e00      	cmp	r6, #0
 800bd84:	d00d      	beq.n	800bda2 <sulp+0x2a>
 800bd86:	236b      	movs	r3, #107	; 0x6b
 800bd88:	006a      	lsls	r2, r5, #1
 800bd8a:	0d52      	lsrs	r2, r2, #21
 800bd8c:	1a9b      	subs	r3, r3, r2
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	dd07      	ble.n	800bda2 <sulp+0x2a>
 800bd92:	2400      	movs	r4, #0
 800bd94:	4a03      	ldr	r2, [pc, #12]	; (800bda4 <sulp+0x2c>)
 800bd96:	051b      	lsls	r3, r3, #20
 800bd98:	189d      	adds	r5, r3, r2
 800bd9a:	002b      	movs	r3, r5
 800bd9c:	0022      	movs	r2, r4
 800bd9e:	f7f5 fce9 	bl	8001774 <__aeabi_dmul>
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	3ff00000 	.word	0x3ff00000

0800bda8 <_strtod_l>:
 800bda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdaa:	b0a7      	sub	sp, #156	; 0x9c
 800bdac:	9307      	str	r3, [sp, #28]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	9004      	str	r0, [sp, #16]
 800bdb2:	9807      	ldr	r0, [sp, #28]
 800bdb4:	9322      	str	r3, [sp, #136]	; 0x88
 800bdb6:	9106      	str	r1, [sp, #24]
 800bdb8:	921d      	str	r2, [sp, #116]	; 0x74
 800bdba:	f002 f86b 	bl	800de94 <__localeconv_l>
 800bdbe:	0005      	movs	r5, r0
 800bdc0:	6800      	ldr	r0, [r0, #0]
 800bdc2:	f7f4 f9a1 	bl	8000108 <strlen>
 800bdc6:	2600      	movs	r6, #0
 800bdc8:	2700      	movs	r7, #0
 800bdca:	9b06      	ldr	r3, [sp, #24]
 800bdcc:	9005      	str	r0, [sp, #20]
 800bdce:	9321      	str	r3, [sp, #132]	; 0x84
 800bdd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdd2:	781a      	ldrb	r2, [r3, #0]
 800bdd4:	2a0d      	cmp	r2, #13
 800bdd6:	d839      	bhi.n	800be4c <_strtod_l+0xa4>
 800bdd8:	2a09      	cmp	r2, #9
 800bdda:	d23d      	bcs.n	800be58 <_strtod_l+0xb0>
 800bddc:	2a00      	cmp	r2, #0
 800bdde:	d044      	beq.n	800be6a <_strtod_l+0xc2>
 800bde0:	2300      	movs	r3, #0
 800bde2:	9313      	str	r3, [sp, #76]	; 0x4c
 800bde4:	2200      	movs	r2, #0
 800bde6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800bde8:	920c      	str	r2, [sp, #48]	; 0x30
 800bdea:	7823      	ldrb	r3, [r4, #0]
 800bdec:	2b30      	cmp	r3, #48	; 0x30
 800bdee:	d000      	beq.n	800bdf2 <_strtod_l+0x4a>
 800bdf0:	e07e      	b.n	800bef0 <_strtod_l+0x148>
 800bdf2:	7863      	ldrb	r3, [r4, #1]
 800bdf4:	2b58      	cmp	r3, #88	; 0x58
 800bdf6:	d002      	beq.n	800bdfe <_strtod_l+0x56>
 800bdf8:	2b78      	cmp	r3, #120	; 0x78
 800bdfa:	d000      	beq.n	800bdfe <_strtod_l+0x56>
 800bdfc:	e06e      	b.n	800bedc <_strtod_l+0x134>
 800bdfe:	9b07      	ldr	r3, [sp, #28]
 800be00:	4a96      	ldr	r2, [pc, #600]	; (800c05c <_strtod_l+0x2b4>)
 800be02:	9302      	str	r3, [sp, #8]
 800be04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be06:	a921      	add	r1, sp, #132	; 0x84
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	ab22      	add	r3, sp, #136	; 0x88
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	9804      	ldr	r0, [sp, #16]
 800be10:	ab23      	add	r3, sp, #140	; 0x8c
 800be12:	f001 fd54 	bl	800d8be <__gethex>
 800be16:	2507      	movs	r5, #7
 800be18:	9005      	str	r0, [sp, #20]
 800be1a:	4005      	ands	r5, r0
 800be1c:	d005      	beq.n	800be2a <_strtod_l+0x82>
 800be1e:	2d06      	cmp	r5, #6
 800be20:	d12f      	bne.n	800be82 <_strtod_l+0xda>
 800be22:	2300      	movs	r3, #0
 800be24:	3401      	adds	r4, #1
 800be26:	9421      	str	r4, [sp, #132]	; 0x84
 800be28:	9313      	str	r3, [sp, #76]	; 0x4c
 800be2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <_strtod_l+0x8e>
 800be30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be32:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d01d      	beq.n	800be78 <_strtod_l+0xd0>
 800be3c:	2380      	movs	r3, #128	; 0x80
 800be3e:	0032      	movs	r2, r6
 800be40:	061b      	lsls	r3, r3, #24
 800be42:	18fb      	adds	r3, r7, r3
 800be44:	0010      	movs	r0, r2
 800be46:	0019      	movs	r1, r3
 800be48:	b027      	add	sp, #156	; 0x9c
 800be4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be4c:	2a2b      	cmp	r2, #43	; 0x2b
 800be4e:	d016      	beq.n	800be7e <_strtod_l+0xd6>
 800be50:	2a2d      	cmp	r2, #45	; 0x2d
 800be52:	d003      	beq.n	800be5c <_strtod_l+0xb4>
 800be54:	2a20      	cmp	r2, #32
 800be56:	d1c3      	bne.n	800bde0 <_strtod_l+0x38>
 800be58:	3301      	adds	r3, #1
 800be5a:	e7b8      	b.n	800bdce <_strtod_l+0x26>
 800be5c:	2201      	movs	r2, #1
 800be5e:	9213      	str	r2, [sp, #76]	; 0x4c
 800be60:	1c5a      	adds	r2, r3, #1
 800be62:	9221      	str	r2, [sp, #132]	; 0x84
 800be64:	785b      	ldrb	r3, [r3, #1]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1bc      	bne.n	800bde4 <_strtod_l+0x3c>
 800be6a:	9b06      	ldr	r3, [sp, #24]
 800be6c:	9321      	str	r3, [sp, #132]	; 0x84
 800be6e:	2300      	movs	r3, #0
 800be70:	9313      	str	r3, [sp, #76]	; 0x4c
 800be72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1db      	bne.n	800be30 <_strtod_l+0x88>
 800be78:	0032      	movs	r2, r6
 800be7a:	003b      	movs	r3, r7
 800be7c:	e7e2      	b.n	800be44 <_strtod_l+0x9c>
 800be7e:	2200      	movs	r2, #0
 800be80:	e7ed      	b.n	800be5e <_strtod_l+0xb6>
 800be82:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800be84:	2a00      	cmp	r2, #0
 800be86:	d007      	beq.n	800be98 <_strtod_l+0xf0>
 800be88:	2135      	movs	r1, #53	; 0x35
 800be8a:	a824      	add	r0, sp, #144	; 0x90
 800be8c:	f002 fbed 	bl	800e66a <__copybits>
 800be90:	9922      	ldr	r1, [sp, #136]	; 0x88
 800be92:	9804      	ldr	r0, [sp, #16]
 800be94:	f002 f863 	bl	800df5e <_Bfree>
 800be98:	1e68      	subs	r0, r5, #1
 800be9a:	2804      	cmp	r0, #4
 800be9c:	d806      	bhi.n	800beac <_strtod_l+0x104>
 800be9e:	f7f4 f93b 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bea2:	030c      	.short	0x030c
 800bea4:	1917      	.short	0x1917
 800bea6:	0c          	.byte	0x0c
 800bea7:	00          	.byte	0x00
 800bea8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800beaa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800beac:	9b05      	ldr	r3, [sp, #20]
 800beae:	071b      	lsls	r3, r3, #28
 800beb0:	d5bb      	bpl.n	800be2a <_strtod_l+0x82>
 800beb2:	2380      	movs	r3, #128	; 0x80
 800beb4:	061b      	lsls	r3, r3, #24
 800beb6:	431f      	orrs	r7, r3
 800beb8:	e7b7      	b.n	800be2a <_strtod_l+0x82>
 800beba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800bebc:	4a68      	ldr	r2, [pc, #416]	; (800c060 <_strtod_l+0x2b8>)
 800bebe:	4969      	ldr	r1, [pc, #420]	; (800c064 <_strtod_l+0x2bc>)
 800bec0:	401a      	ands	r2, r3
 800bec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bec4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800bec6:	185b      	adds	r3, r3, r1
 800bec8:	051b      	lsls	r3, r3, #20
 800beca:	431a      	orrs	r2, r3
 800becc:	0017      	movs	r7, r2
 800bece:	e7ed      	b.n	800beac <_strtod_l+0x104>
 800bed0:	4f65      	ldr	r7, [pc, #404]	; (800c068 <_strtod_l+0x2c0>)
 800bed2:	e7eb      	b.n	800beac <_strtod_l+0x104>
 800bed4:	2601      	movs	r6, #1
 800bed6:	4f65      	ldr	r7, [pc, #404]	; (800c06c <_strtod_l+0x2c4>)
 800bed8:	4276      	negs	r6, r6
 800beda:	e7e7      	b.n	800beac <_strtod_l+0x104>
 800bedc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bede:	1c5a      	adds	r2, r3, #1
 800bee0:	9221      	str	r2, [sp, #132]	; 0x84
 800bee2:	785b      	ldrb	r3, [r3, #1]
 800bee4:	2b30      	cmp	r3, #48	; 0x30
 800bee6:	d0f9      	beq.n	800bedc <_strtod_l+0x134>
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d09e      	beq.n	800be2a <_strtod_l+0x82>
 800beec:	2301      	movs	r3, #1
 800beee:	930c      	str	r3, [sp, #48]	; 0x30
 800bef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bef2:	220a      	movs	r2, #10
 800bef4:	9312      	str	r3, [sp, #72]	; 0x48
 800bef6:	2300      	movs	r3, #0
 800bef8:	930b      	str	r3, [sp, #44]	; 0x2c
 800befa:	9308      	str	r3, [sp, #32]
 800befc:	930a      	str	r3, [sp, #40]	; 0x28
 800befe:	9821      	ldr	r0, [sp, #132]	; 0x84
 800bf00:	7804      	ldrb	r4, [r0, #0]
 800bf02:	0023      	movs	r3, r4
 800bf04:	3b30      	subs	r3, #48	; 0x30
 800bf06:	b2d9      	uxtb	r1, r3
 800bf08:	2909      	cmp	r1, #9
 800bf0a:	d934      	bls.n	800bf76 <_strtod_l+0x1ce>
 800bf0c:	9a05      	ldr	r2, [sp, #20]
 800bf0e:	6829      	ldr	r1, [r5, #0]
 800bf10:	f002 fd52 	bl	800e9b8 <strncmp>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d040      	beq.n	800bf9a <_strtod_l+0x1f2>
 800bf18:	2000      	movs	r0, #0
 800bf1a:	0023      	movs	r3, r4
 800bf1c:	4684      	mov	ip, r0
 800bf1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf20:	9007      	str	r0, [sp, #28]
 800bf22:	9205      	str	r2, [sp, #20]
 800bf24:	2220      	movs	r2, #32
 800bf26:	0019      	movs	r1, r3
 800bf28:	4391      	bics	r1, r2
 800bf2a:	000a      	movs	r2, r1
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	2a45      	cmp	r2, #69	; 0x45
 800bf30:	d000      	beq.n	800bf34 <_strtod_l+0x18c>
 800bf32:	e0bf      	b.n	800c0b4 <_strtod_l+0x30c>
 800bf34:	9b05      	ldr	r3, [sp, #20]
 800bf36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf38:	4303      	orrs	r3, r0
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	428b      	cmp	r3, r1
 800bf3e:	d094      	beq.n	800be6a <_strtod_l+0xc2>
 800bf40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf42:	9306      	str	r3, [sp, #24]
 800bf44:	3301      	adds	r3, #1
 800bf46:	9321      	str	r3, [sp, #132]	; 0x84
 800bf48:	9b06      	ldr	r3, [sp, #24]
 800bf4a:	785b      	ldrb	r3, [r3, #1]
 800bf4c:	2b2b      	cmp	r3, #43	; 0x2b
 800bf4e:	d100      	bne.n	800bf52 <_strtod_l+0x1aa>
 800bf50:	e082      	b.n	800c058 <_strtod_l+0x2b0>
 800bf52:	000c      	movs	r4, r1
 800bf54:	2b2d      	cmp	r3, #45	; 0x2d
 800bf56:	d105      	bne.n	800bf64 <_strtod_l+0x1bc>
 800bf58:	2401      	movs	r4, #1
 800bf5a:	9b06      	ldr	r3, [sp, #24]
 800bf5c:	3302      	adds	r3, #2
 800bf5e:	9321      	str	r3, [sp, #132]	; 0x84
 800bf60:	9b06      	ldr	r3, [sp, #24]
 800bf62:	789b      	ldrb	r3, [r3, #2]
 800bf64:	001a      	movs	r2, r3
 800bf66:	3a30      	subs	r2, #48	; 0x30
 800bf68:	2a09      	cmp	r2, #9
 800bf6a:	d800      	bhi.n	800bf6e <_strtod_l+0x1c6>
 800bf6c:	e084      	b.n	800c078 <_strtod_l+0x2d0>
 800bf6e:	9a06      	ldr	r2, [sp, #24]
 800bf70:	2100      	movs	r1, #0
 800bf72:	9221      	str	r2, [sp, #132]	; 0x84
 800bf74:	e09e      	b.n	800c0b4 <_strtod_l+0x30c>
 800bf76:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bf78:	2908      	cmp	r1, #8
 800bf7a:	dc09      	bgt.n	800bf90 <_strtod_l+0x1e8>
 800bf7c:	9908      	ldr	r1, [sp, #32]
 800bf7e:	4351      	muls	r1, r2
 800bf80:	18cb      	adds	r3, r1, r3
 800bf82:	9308      	str	r3, [sp, #32]
 800bf84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf86:	3001      	adds	r0, #1
 800bf88:	3301      	adds	r3, #1
 800bf8a:	930a      	str	r3, [sp, #40]	; 0x28
 800bf8c:	9021      	str	r0, [sp, #132]	; 0x84
 800bf8e:	e7b6      	b.n	800befe <_strtod_l+0x156>
 800bf90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf92:	4351      	muls	r1, r2
 800bf94:	18cb      	adds	r3, r1, r3
 800bf96:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf98:	e7f4      	b.n	800bf84 <_strtod_l+0x1dc>
 800bf9a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf9c:	9b05      	ldr	r3, [sp, #20]
 800bf9e:	4694      	mov	ip, r2
 800bfa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfa2:	4463      	add	r3, ip
 800bfa4:	9321      	str	r3, [sp, #132]	; 0x84
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	2a00      	cmp	r2, #0
 800bfaa:	d036      	beq.n	800c01a <_strtod_l+0x272>
 800bfac:	4684      	mov	ip, r0
 800bfae:	9205      	str	r2, [sp, #20]
 800bfb0:	001a      	movs	r2, r3
 800bfb2:	3a30      	subs	r2, #48	; 0x30
 800bfb4:	2a09      	cmp	r2, #9
 800bfb6:	d912      	bls.n	800bfde <_strtod_l+0x236>
 800bfb8:	2201      	movs	r2, #1
 800bfba:	9207      	str	r2, [sp, #28]
 800bfbc:	e7b2      	b.n	800bf24 <_strtod_l+0x17c>
 800bfbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	9221      	str	r2, [sp, #132]	; 0x84
 800bfc6:	785b      	ldrb	r3, [r3, #1]
 800bfc8:	2b30      	cmp	r3, #48	; 0x30
 800bfca:	d0f8      	beq.n	800bfbe <_strtod_l+0x216>
 800bfcc:	001a      	movs	r2, r3
 800bfce:	3a31      	subs	r2, #49	; 0x31
 800bfd0:	2a08      	cmp	r2, #8
 800bfd2:	d83c      	bhi.n	800c04e <_strtod_l+0x2a6>
 800bfd4:	4684      	mov	ip, r0
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bfda:	9005      	str	r0, [sp, #20]
 800bfdc:	9212      	str	r2, [sp, #72]	; 0x48
 800bfde:	3b30      	subs	r3, #48	; 0x30
 800bfe0:	1c42      	adds	r2, r0, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d013      	beq.n	800c00e <_strtod_l+0x266>
 800bfe6:	210a      	movs	r1, #10
 800bfe8:	4494      	add	ip, r2
 800bfea:	9a05      	ldr	r2, [sp, #20]
 800bfec:	1885      	adds	r5, r0, r2
 800bfee:	42aa      	cmp	r2, r5
 800bff0:	d115      	bne.n	800c01e <_strtod_l+0x276>
 800bff2:	9905      	ldr	r1, [sp, #20]
 800bff4:	9a05      	ldr	r2, [sp, #20]
 800bff6:	3101      	adds	r1, #1
 800bff8:	1809      	adds	r1, r1, r0
 800bffa:	1812      	adds	r2, r2, r0
 800bffc:	9105      	str	r1, [sp, #20]
 800bffe:	2a08      	cmp	r2, #8
 800c000:	dc1b      	bgt.n	800c03a <_strtod_l+0x292>
 800c002:	220a      	movs	r2, #10
 800c004:	9908      	ldr	r1, [sp, #32]
 800c006:	434a      	muls	r2, r1
 800c008:	189b      	adds	r3, r3, r2
 800c00a:	2200      	movs	r2, #0
 800c00c:	9308      	str	r3, [sp, #32]
 800c00e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c010:	0010      	movs	r0, r2
 800c012:	1c59      	adds	r1, r3, #1
 800c014:	9121      	str	r1, [sp, #132]	; 0x84
 800c016:	785b      	ldrb	r3, [r3, #1]
 800c018:	e7ca      	b.n	800bfb0 <_strtod_l+0x208>
 800c01a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c01c:	e7d4      	b.n	800bfc8 <_strtod_l+0x220>
 800c01e:	1c54      	adds	r4, r2, #1
 800c020:	2a08      	cmp	r2, #8
 800c022:	dc04      	bgt.n	800c02e <_strtod_l+0x286>
 800c024:	9a08      	ldr	r2, [sp, #32]
 800c026:	434a      	muls	r2, r1
 800c028:	9208      	str	r2, [sp, #32]
 800c02a:	0022      	movs	r2, r4
 800c02c:	e7df      	b.n	800bfee <_strtod_l+0x246>
 800c02e:	2c10      	cmp	r4, #16
 800c030:	dcfb      	bgt.n	800c02a <_strtod_l+0x282>
 800c032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c034:	434a      	muls	r2, r1
 800c036:	920b      	str	r2, [sp, #44]	; 0x2c
 800c038:	e7f7      	b.n	800c02a <_strtod_l+0x282>
 800c03a:	9905      	ldr	r1, [sp, #20]
 800c03c:	2200      	movs	r2, #0
 800c03e:	2910      	cmp	r1, #16
 800c040:	dce5      	bgt.n	800c00e <_strtod_l+0x266>
 800c042:	210a      	movs	r1, #10
 800c044:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c046:	4341      	muls	r1, r0
 800c048:	185b      	adds	r3, r3, r1
 800c04a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c04c:	e7df      	b.n	800c00e <_strtod_l+0x266>
 800c04e:	2200      	movs	r2, #0
 800c050:	4694      	mov	ip, r2
 800c052:	9205      	str	r2, [sp, #20]
 800c054:	3201      	adds	r2, #1
 800c056:	e7b0      	b.n	800bfba <_strtod_l+0x212>
 800c058:	000c      	movs	r4, r1
 800c05a:	e77e      	b.n	800bf5a <_strtod_l+0x1b2>
 800c05c:	0800ffa4 	.word	0x0800ffa4
 800c060:	ffefffff 	.word	0xffefffff
 800c064:	00000433 	.word	0x00000433
 800c068:	7ff00000 	.word	0x7ff00000
 800c06c:	7fffffff 	.word	0x7fffffff
 800c070:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	9221      	str	r2, [sp, #132]	; 0x84
 800c076:	785b      	ldrb	r3, [r3, #1]
 800c078:	2b30      	cmp	r3, #48	; 0x30
 800c07a:	d0f9      	beq.n	800c070 <_strtod_l+0x2c8>
 800c07c:	001a      	movs	r2, r3
 800c07e:	3a31      	subs	r2, #49	; 0x31
 800c080:	2100      	movs	r1, #0
 800c082:	2a08      	cmp	r2, #8
 800c084:	d816      	bhi.n	800c0b4 <_strtod_l+0x30c>
 800c086:	3b30      	subs	r3, #48	; 0x30
 800c088:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800c08a:	930e      	str	r3, [sp, #56]	; 0x38
 800c08c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c08e:	1c59      	adds	r1, r3, #1
 800c090:	9121      	str	r1, [sp, #132]	; 0x84
 800c092:	785b      	ldrb	r3, [r3, #1]
 800c094:	001a      	movs	r2, r3
 800c096:	3a30      	subs	r2, #48	; 0x30
 800c098:	2a09      	cmp	r2, #9
 800c09a:	d932      	bls.n	800c102 <_strtod_l+0x35a>
 800c09c:	1b4a      	subs	r2, r1, r5
 800c09e:	4dad      	ldr	r5, [pc, #692]	; (800c354 <_strtod_l+0x5ac>)
 800c0a0:	0029      	movs	r1, r5
 800c0a2:	2a08      	cmp	r2, #8
 800c0a4:	dc03      	bgt.n	800c0ae <_strtod_l+0x306>
 800c0a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c0a8:	42a9      	cmp	r1, r5
 800c0aa:	dd00      	ble.n	800c0ae <_strtod_l+0x306>
 800c0ac:	0029      	movs	r1, r5
 800c0ae:	2c00      	cmp	r4, #0
 800c0b0:	d000      	beq.n	800c0b4 <_strtod_l+0x30c>
 800c0b2:	4249      	negs	r1, r1
 800c0b4:	9a05      	ldr	r2, [sp, #20]
 800c0b6:	2a00      	cmp	r2, #0
 800c0b8:	d149      	bne.n	800c14e <_strtod_l+0x3a6>
 800c0ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0bc:	4310      	orrs	r0, r2
 800c0be:	d000      	beq.n	800c0c2 <_strtod_l+0x31a>
 800c0c0:	e6b3      	b.n	800be2a <_strtod_l+0x82>
 800c0c2:	9a07      	ldr	r2, [sp, #28]
 800c0c4:	2a00      	cmp	r2, #0
 800c0c6:	d000      	beq.n	800c0ca <_strtod_l+0x322>
 800c0c8:	e6cf      	b.n	800be6a <_strtod_l+0xc2>
 800c0ca:	2b4e      	cmp	r3, #78	; 0x4e
 800c0cc:	d025      	beq.n	800c11a <_strtod_l+0x372>
 800c0ce:	dc1f      	bgt.n	800c110 <_strtod_l+0x368>
 800c0d0:	2b49      	cmp	r3, #73	; 0x49
 800c0d2:	d000      	beq.n	800c0d6 <_strtod_l+0x32e>
 800c0d4:	e6c9      	b.n	800be6a <_strtod_l+0xc2>
 800c0d6:	49a0      	ldr	r1, [pc, #640]	; (800c358 <_strtod_l+0x5b0>)
 800c0d8:	a821      	add	r0, sp, #132	; 0x84
 800c0da:	f001 fe2d 	bl	800dd38 <__match>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	d100      	bne.n	800c0e4 <_strtod_l+0x33c>
 800c0e2:	e6c2      	b.n	800be6a <_strtod_l+0xc2>
 800c0e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0e6:	499d      	ldr	r1, [pc, #628]	; (800c35c <_strtod_l+0x5b4>)
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	a821      	add	r0, sp, #132	; 0x84
 800c0ec:	9321      	str	r3, [sp, #132]	; 0x84
 800c0ee:	f001 fe23 	bl	800dd38 <__match>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d102      	bne.n	800c0fc <_strtod_l+0x354>
 800c0f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	9321      	str	r3, [sp, #132]	; 0x84
 800c0fc:	4f98      	ldr	r7, [pc, #608]	; (800c360 <_strtod_l+0x5b8>)
 800c0fe:	2600      	movs	r6, #0
 800c100:	e693      	b.n	800be2a <_strtod_l+0x82>
 800c102:	220a      	movs	r2, #10
 800c104:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c106:	434a      	muls	r2, r1
 800c108:	18d2      	adds	r2, r2, r3
 800c10a:	3a30      	subs	r2, #48	; 0x30
 800c10c:	920e      	str	r2, [sp, #56]	; 0x38
 800c10e:	e7bd      	b.n	800c08c <_strtod_l+0x2e4>
 800c110:	2b69      	cmp	r3, #105	; 0x69
 800c112:	d0e0      	beq.n	800c0d6 <_strtod_l+0x32e>
 800c114:	2b6e      	cmp	r3, #110	; 0x6e
 800c116:	d000      	beq.n	800c11a <_strtod_l+0x372>
 800c118:	e6a7      	b.n	800be6a <_strtod_l+0xc2>
 800c11a:	4992      	ldr	r1, [pc, #584]	; (800c364 <_strtod_l+0x5bc>)
 800c11c:	a821      	add	r0, sp, #132	; 0x84
 800c11e:	f001 fe0b 	bl	800dd38 <__match>
 800c122:	2800      	cmp	r0, #0
 800c124:	d100      	bne.n	800c128 <_strtod_l+0x380>
 800c126:	e6a0      	b.n	800be6a <_strtod_l+0xc2>
 800c128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b28      	cmp	r3, #40	; 0x28
 800c12e:	d10c      	bne.n	800c14a <_strtod_l+0x3a2>
 800c130:	aa24      	add	r2, sp, #144	; 0x90
 800c132:	498d      	ldr	r1, [pc, #564]	; (800c368 <_strtod_l+0x5c0>)
 800c134:	a821      	add	r0, sp, #132	; 0x84
 800c136:	f001 fe13 	bl	800dd60 <__hexnan>
 800c13a:	2805      	cmp	r0, #5
 800c13c:	d105      	bne.n	800c14a <_strtod_l+0x3a2>
 800c13e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c140:	4a87      	ldr	r2, [pc, #540]	; (800c360 <_strtod_l+0x5b8>)
 800c142:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800c144:	431a      	orrs	r2, r3
 800c146:	0017      	movs	r7, r2
 800c148:	e66f      	b.n	800be2a <_strtod_l+0x82>
 800c14a:	4f88      	ldr	r7, [pc, #544]	; (800c36c <_strtod_l+0x5c4>)
 800c14c:	e7d7      	b.n	800c0fe <_strtod_l+0x356>
 800c14e:	4663      	mov	r3, ip
 800c150:	1acb      	subs	r3, r1, r3
 800c152:	9307      	str	r3, [sp, #28]
 800c154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c156:	2b00      	cmp	r3, #0
 800c158:	d101      	bne.n	800c15e <_strtod_l+0x3b6>
 800c15a:	9b05      	ldr	r3, [sp, #20]
 800c15c:	930a      	str	r3, [sp, #40]	; 0x28
 800c15e:	9c05      	ldr	r4, [sp, #20]
 800c160:	2c10      	cmp	r4, #16
 800c162:	dd00      	ble.n	800c166 <_strtod_l+0x3be>
 800c164:	2410      	movs	r4, #16
 800c166:	9808      	ldr	r0, [sp, #32]
 800c168:	f7f6 f94a 	bl	8002400 <__aeabi_ui2d>
 800c16c:	9b05      	ldr	r3, [sp, #20]
 800c16e:	0006      	movs	r6, r0
 800c170:	000f      	movs	r7, r1
 800c172:	2b09      	cmp	r3, #9
 800c174:	dc15      	bgt.n	800c1a2 <_strtod_l+0x3fa>
 800c176:	9b07      	ldr	r3, [sp, #28]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d100      	bne.n	800c17e <_strtod_l+0x3d6>
 800c17c:	e655      	b.n	800be2a <_strtod_l+0x82>
 800c17e:	9b07      	ldr	r3, [sp, #28]
 800c180:	2b00      	cmp	r3, #0
 800c182:	dc00      	bgt.n	800c186 <_strtod_l+0x3de>
 800c184:	e07d      	b.n	800c282 <_strtod_l+0x4da>
 800c186:	2b16      	cmp	r3, #22
 800c188:	dc62      	bgt.n	800c250 <_strtod_l+0x4a8>
 800c18a:	00dc      	lsls	r4, r3, #3
 800c18c:	4b78      	ldr	r3, [pc, #480]	; (800c370 <_strtod_l+0x5c8>)
 800c18e:	0032      	movs	r2, r6
 800c190:	1919      	adds	r1, r3, r4
 800c192:	003b      	movs	r3, r7
 800c194:	6808      	ldr	r0, [r1, #0]
 800c196:	6849      	ldr	r1, [r1, #4]
 800c198:	f7f5 faec 	bl	8001774 <__aeabi_dmul>
 800c19c:	0006      	movs	r6, r0
 800c19e:	000f      	movs	r7, r1
 800c1a0:	e643      	b.n	800be2a <_strtod_l+0x82>
 800c1a2:	0022      	movs	r2, r4
 800c1a4:	4b72      	ldr	r3, [pc, #456]	; (800c370 <_strtod_l+0x5c8>)
 800c1a6:	3a09      	subs	r2, #9
 800c1a8:	00d2      	lsls	r2, r2, #3
 800c1aa:	189b      	adds	r3, r3, r2
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	f7f5 fae0 	bl	8001774 <__aeabi_dmul>
 800c1b4:	0006      	movs	r6, r0
 800c1b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c1b8:	000f      	movs	r7, r1
 800c1ba:	f7f6 f921 	bl	8002400 <__aeabi_ui2d>
 800c1be:	000b      	movs	r3, r1
 800c1c0:	0002      	movs	r2, r0
 800c1c2:	0039      	movs	r1, r7
 800c1c4:	0030      	movs	r0, r6
 800c1c6:	f7f4 fbaf 	bl	8000928 <__aeabi_dadd>
 800c1ca:	9b05      	ldr	r3, [sp, #20]
 800c1cc:	0006      	movs	r6, r0
 800c1ce:	000f      	movs	r7, r1
 800c1d0:	2b0f      	cmp	r3, #15
 800c1d2:	ddd0      	ble.n	800c176 <_strtod_l+0x3ce>
 800c1d4:	9b05      	ldr	r3, [sp, #20]
 800c1d6:	1b1c      	subs	r4, r3, r4
 800c1d8:	9b07      	ldr	r3, [sp, #28]
 800c1da:	18e4      	adds	r4, r4, r3
 800c1dc:	2c00      	cmp	r4, #0
 800c1de:	dc00      	bgt.n	800c1e2 <_strtod_l+0x43a>
 800c1e0:	e094      	b.n	800c30c <_strtod_l+0x564>
 800c1e2:	230f      	movs	r3, #15
 800c1e4:	4023      	ands	r3, r4
 800c1e6:	d00a      	beq.n	800c1fe <_strtod_l+0x456>
 800c1e8:	4961      	ldr	r1, [pc, #388]	; (800c370 <_strtod_l+0x5c8>)
 800c1ea:	00db      	lsls	r3, r3, #3
 800c1ec:	18c9      	adds	r1, r1, r3
 800c1ee:	0032      	movs	r2, r6
 800c1f0:	6808      	ldr	r0, [r1, #0]
 800c1f2:	6849      	ldr	r1, [r1, #4]
 800c1f4:	003b      	movs	r3, r7
 800c1f6:	f7f5 fabd 	bl	8001774 <__aeabi_dmul>
 800c1fa:	0006      	movs	r6, r0
 800c1fc:	000f      	movs	r7, r1
 800c1fe:	230f      	movs	r3, #15
 800c200:	439c      	bics	r4, r3
 800c202:	d06e      	beq.n	800c2e2 <_strtod_l+0x53a>
 800c204:	3326      	adds	r3, #38	; 0x26
 800c206:	33ff      	adds	r3, #255	; 0xff
 800c208:	429c      	cmp	r4, r3
 800c20a:	dd48      	ble.n	800c29e <_strtod_l+0x4f6>
 800c20c:	2400      	movs	r4, #0
 800c20e:	9405      	str	r4, [sp, #20]
 800c210:	940b      	str	r4, [sp, #44]	; 0x2c
 800c212:	940a      	str	r4, [sp, #40]	; 0x28
 800c214:	2322      	movs	r3, #34	; 0x22
 800c216:	2600      	movs	r6, #0
 800c218:	9a04      	ldr	r2, [sp, #16]
 800c21a:	4f51      	ldr	r7, [pc, #324]	; (800c360 <_strtod_l+0x5b8>)
 800c21c:	6013      	str	r3, [r2, #0]
 800c21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c220:	42b3      	cmp	r3, r6
 800c222:	d100      	bne.n	800c226 <_strtod_l+0x47e>
 800c224:	e601      	b.n	800be2a <_strtod_l+0x82>
 800c226:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c228:	9804      	ldr	r0, [sp, #16]
 800c22a:	f001 fe98 	bl	800df5e <_Bfree>
 800c22e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c230:	9804      	ldr	r0, [sp, #16]
 800c232:	f001 fe94 	bl	800df5e <_Bfree>
 800c236:	9905      	ldr	r1, [sp, #20]
 800c238:	9804      	ldr	r0, [sp, #16]
 800c23a:	f001 fe90 	bl	800df5e <_Bfree>
 800c23e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c240:	9804      	ldr	r0, [sp, #16]
 800c242:	f001 fe8c 	bl	800df5e <_Bfree>
 800c246:	0021      	movs	r1, r4
 800c248:	9804      	ldr	r0, [sp, #16]
 800c24a:	f001 fe88 	bl	800df5e <_Bfree>
 800c24e:	e5ec      	b.n	800be2a <_strtod_l+0x82>
 800c250:	2325      	movs	r3, #37	; 0x25
 800c252:	9a05      	ldr	r2, [sp, #20]
 800c254:	1a9b      	subs	r3, r3, r2
 800c256:	9a07      	ldr	r2, [sp, #28]
 800c258:	4293      	cmp	r3, r2
 800c25a:	dbbb      	blt.n	800c1d4 <_strtod_l+0x42c>
 800c25c:	230f      	movs	r3, #15
 800c25e:	9a05      	ldr	r2, [sp, #20]
 800c260:	4c43      	ldr	r4, [pc, #268]	; (800c370 <_strtod_l+0x5c8>)
 800c262:	1a9d      	subs	r5, r3, r2
 800c264:	00e9      	lsls	r1, r5, #3
 800c266:	1861      	adds	r1, r4, r1
 800c268:	0032      	movs	r2, r6
 800c26a:	6808      	ldr	r0, [r1, #0]
 800c26c:	6849      	ldr	r1, [r1, #4]
 800c26e:	003b      	movs	r3, r7
 800c270:	f7f5 fa80 	bl	8001774 <__aeabi_dmul>
 800c274:	9b07      	ldr	r3, [sp, #28]
 800c276:	1b5e      	subs	r6, r3, r5
 800c278:	00f6      	lsls	r6, r6, #3
 800c27a:	19a6      	adds	r6, r4, r6
 800c27c:	6832      	ldr	r2, [r6, #0]
 800c27e:	6873      	ldr	r3, [r6, #4]
 800c280:	e78a      	b.n	800c198 <_strtod_l+0x3f0>
 800c282:	9b07      	ldr	r3, [sp, #28]
 800c284:	3316      	adds	r3, #22
 800c286:	dba5      	blt.n	800c1d4 <_strtod_l+0x42c>
 800c288:	9b07      	ldr	r3, [sp, #28]
 800c28a:	0030      	movs	r0, r6
 800c28c:	00da      	lsls	r2, r3, #3
 800c28e:	4b38      	ldr	r3, [pc, #224]	; (800c370 <_strtod_l+0x5c8>)
 800c290:	0039      	movs	r1, r7
 800c292:	1a9b      	subs	r3, r3, r2
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	f7f4 fe62 	bl	8000f60 <__aeabi_ddiv>
 800c29c:	e77e      	b.n	800c19c <_strtod_l+0x3f4>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	0030      	movs	r0, r6
 800c2a2:	0039      	movs	r1, r7
 800c2a4:	001d      	movs	r5, r3
 800c2a6:	1124      	asrs	r4, r4, #4
 800c2a8:	2c01      	cmp	r4, #1
 800c2aa:	dc1d      	bgt.n	800c2e8 <_strtod_l+0x540>
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <_strtod_l+0x50c>
 800c2b0:	0006      	movs	r6, r0
 800c2b2:	000f      	movs	r7, r1
 800c2b4:	4b2f      	ldr	r3, [pc, #188]	; (800c374 <_strtod_l+0x5cc>)
 800c2b6:	00ed      	lsls	r5, r5, #3
 800c2b8:	18ff      	adds	r7, r7, r3
 800c2ba:	4b2f      	ldr	r3, [pc, #188]	; (800c378 <_strtod_l+0x5d0>)
 800c2bc:	0032      	movs	r2, r6
 800c2be:	195d      	adds	r5, r3, r5
 800c2c0:	6828      	ldr	r0, [r5, #0]
 800c2c2:	6869      	ldr	r1, [r5, #4]
 800c2c4:	003b      	movs	r3, r7
 800c2c6:	f7f5 fa55 	bl	8001774 <__aeabi_dmul>
 800c2ca:	4b25      	ldr	r3, [pc, #148]	; (800c360 <_strtod_l+0x5b8>)
 800c2cc:	4a2b      	ldr	r2, [pc, #172]	; (800c37c <_strtod_l+0x5d4>)
 800c2ce:	0006      	movs	r6, r0
 800c2d0:	400b      	ands	r3, r1
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d89a      	bhi.n	800c20c <_strtod_l+0x464>
 800c2d6:	4a2a      	ldr	r2, [pc, #168]	; (800c380 <_strtod_l+0x5d8>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d913      	bls.n	800c304 <_strtod_l+0x55c>
 800c2dc:	2601      	movs	r6, #1
 800c2de:	4f29      	ldr	r7, [pc, #164]	; (800c384 <_strtod_l+0x5dc>)
 800c2e0:	4276      	negs	r6, r6
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9306      	str	r3, [sp, #24]
 800c2e6:	e07b      	b.n	800c3e0 <_strtod_l+0x638>
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	4214      	tst	r4, r2
 800c2ec:	d007      	beq.n	800c2fe <_strtod_l+0x556>
 800c2ee:	4a22      	ldr	r2, [pc, #136]	; (800c378 <_strtod_l+0x5d0>)
 800c2f0:	00eb      	lsls	r3, r5, #3
 800c2f2:	189b      	adds	r3, r3, r2
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	f7f5 fa3c 	bl	8001774 <__aeabi_dmul>
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	3501      	adds	r5, #1
 800c300:	1064      	asrs	r4, r4, #1
 800c302:	e7d1      	b.n	800c2a8 <_strtod_l+0x500>
 800c304:	23d4      	movs	r3, #212	; 0xd4
 800c306:	049b      	lsls	r3, r3, #18
 800c308:	18cf      	adds	r7, r1, r3
 800c30a:	e7ea      	b.n	800c2e2 <_strtod_l+0x53a>
 800c30c:	2c00      	cmp	r4, #0
 800c30e:	d0e8      	beq.n	800c2e2 <_strtod_l+0x53a>
 800c310:	230f      	movs	r3, #15
 800c312:	4264      	negs	r4, r4
 800c314:	4023      	ands	r3, r4
 800c316:	d00a      	beq.n	800c32e <_strtod_l+0x586>
 800c318:	4a15      	ldr	r2, [pc, #84]	; (800c370 <_strtod_l+0x5c8>)
 800c31a:	00db      	lsls	r3, r3, #3
 800c31c:	18d3      	adds	r3, r2, r3
 800c31e:	0030      	movs	r0, r6
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	0039      	movs	r1, r7
 800c326:	f7f4 fe1b 	bl	8000f60 <__aeabi_ddiv>
 800c32a:	0006      	movs	r6, r0
 800c32c:	000f      	movs	r7, r1
 800c32e:	1124      	asrs	r4, r4, #4
 800c330:	d0d7      	beq.n	800c2e2 <_strtod_l+0x53a>
 800c332:	2c1f      	cmp	r4, #31
 800c334:	dd28      	ble.n	800c388 <_strtod_l+0x5e0>
 800c336:	2400      	movs	r4, #0
 800c338:	9405      	str	r4, [sp, #20]
 800c33a:	940b      	str	r4, [sp, #44]	; 0x2c
 800c33c:	940a      	str	r4, [sp, #40]	; 0x28
 800c33e:	2322      	movs	r3, #34	; 0x22
 800c340:	9a04      	ldr	r2, [sp, #16]
 800c342:	2600      	movs	r6, #0
 800c344:	6013      	str	r3, [r2, #0]
 800c346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c348:	2700      	movs	r7, #0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d000      	beq.n	800c350 <_strtod_l+0x5a8>
 800c34e:	e76a      	b.n	800c226 <_strtod_l+0x47e>
 800c350:	e56b      	b.n	800be2a <_strtod_l+0x82>
 800c352:	46c0      	nop			; (mov r8, r8)
 800c354:	00004e1f 	.word	0x00004e1f
 800c358:	0800ff6f 	.word	0x0800ff6f
 800c35c:	0800fffb 	.word	0x0800fffb
 800c360:	7ff00000 	.word	0x7ff00000
 800c364:	0800ff77 	.word	0x0800ff77
 800c368:	0800ffb8 	.word	0x0800ffb8
 800c36c:	fff80000 	.word	0xfff80000
 800c370:	08010038 	.word	0x08010038
 800c374:	fcb00000 	.word	0xfcb00000
 800c378:	08010010 	.word	0x08010010
 800c37c:	7ca00000 	.word	0x7ca00000
 800c380:	7c900000 	.word	0x7c900000
 800c384:	7fefffff 	.word	0x7fefffff
 800c388:	2310      	movs	r3, #16
 800c38a:	4023      	ands	r3, r4
 800c38c:	9306      	str	r3, [sp, #24]
 800c38e:	d001      	beq.n	800c394 <_strtod_l+0x5ec>
 800c390:	236a      	movs	r3, #106	; 0x6a
 800c392:	9306      	str	r3, [sp, #24]
 800c394:	2300      	movs	r3, #0
 800c396:	0030      	movs	r0, r6
 800c398:	0039      	movs	r1, r7
 800c39a:	001d      	movs	r5, r3
 800c39c:	2c00      	cmp	r4, #0
 800c39e:	dd00      	ble.n	800c3a2 <_strtod_l+0x5fa>
 800c3a0:	e10e      	b.n	800c5c0 <_strtod_l+0x818>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <_strtod_l+0x602>
 800c3a6:	0006      	movs	r6, r0
 800c3a8:	000f      	movs	r7, r1
 800c3aa:	9b06      	ldr	r3, [sp, #24]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00f      	beq.n	800c3d0 <_strtod_l+0x628>
 800c3b0:	236b      	movs	r3, #107	; 0x6b
 800c3b2:	0079      	lsls	r1, r7, #1
 800c3b4:	0d49      	lsrs	r1, r1, #21
 800c3b6:	003a      	movs	r2, r7
 800c3b8:	1a5b      	subs	r3, r3, r1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	dd08      	ble.n	800c3d0 <_strtod_l+0x628>
 800c3be:	2b1f      	cmp	r3, #31
 800c3c0:	dc00      	bgt.n	800c3c4 <_strtod_l+0x61c>
 800c3c2:	e112      	b.n	800c5ea <_strtod_l+0x842>
 800c3c4:	2600      	movs	r6, #0
 800c3c6:	2b34      	cmp	r3, #52	; 0x34
 800c3c8:	dc00      	bgt.n	800c3cc <_strtod_l+0x624>
 800c3ca:	e107      	b.n	800c5dc <_strtod_l+0x834>
 800c3cc:	27dc      	movs	r7, #220	; 0xdc
 800c3ce:	04bf      	lsls	r7, r7, #18
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	0030      	movs	r0, r6
 800c3d6:	0039      	movs	r1, r7
 800c3d8:	f7f4 f82e 	bl	8000438 <__aeabi_dcmpeq>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d1aa      	bne.n	800c336 <_strtod_l+0x58e>
 800c3e0:	9b08      	ldr	r3, [sp, #32]
 800c3e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c3e8:	9b05      	ldr	r3, [sp, #20]
 800c3ea:	9804      	ldr	r0, [sp, #16]
 800c3ec:	f001 fe0e 	bl	800e00c <__s2b>
 800c3f0:	900b      	str	r0, [sp, #44]	; 0x2c
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d100      	bne.n	800c3f8 <_strtod_l+0x650>
 800c3f6:	e709      	b.n	800c20c <_strtod_l+0x464>
 800c3f8:	9b07      	ldr	r3, [sp, #28]
 800c3fa:	9a07      	ldr	r2, [sp, #28]
 800c3fc:	17db      	asrs	r3, r3, #31
 800c3fe:	4252      	negs	r2, r2
 800c400:	4013      	ands	r3, r2
 800c402:	9315      	str	r3, [sp, #84]	; 0x54
 800c404:	9b07      	ldr	r3, [sp, #28]
 800c406:	2400      	movs	r4, #0
 800c408:	43db      	mvns	r3, r3
 800c40a:	9a07      	ldr	r2, [sp, #28]
 800c40c:	17db      	asrs	r3, r3, #31
 800c40e:	401a      	ands	r2, r3
 800c410:	921c      	str	r2, [sp, #112]	; 0x70
 800c412:	9405      	str	r4, [sp, #20]
 800c414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c416:	9804      	ldr	r0, [sp, #16]
 800c418:	6859      	ldr	r1, [r3, #4]
 800c41a:	f001 fd68 	bl	800deee <_Balloc>
 800c41e:	900a      	str	r0, [sp, #40]	; 0x28
 800c420:	2800      	cmp	r0, #0
 800c422:	d100      	bne.n	800c426 <_strtod_l+0x67e>
 800c424:	e6f6      	b.n	800c214 <_strtod_l+0x46c>
 800c426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c428:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	310c      	adds	r1, #12
 800c42e:	1c9a      	adds	r2, r3, #2
 800c430:	0092      	lsls	r2, r2, #2
 800c432:	300c      	adds	r0, #12
 800c434:	9308      	str	r3, [sp, #32]
 800c436:	f7fe fd23 	bl	800ae80 <memcpy>
 800c43a:	ab24      	add	r3, sp, #144	; 0x90
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	ab23      	add	r3, sp, #140	; 0x8c
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	0032      	movs	r2, r6
 800c444:	003b      	movs	r3, r7
 800c446:	9804      	ldr	r0, [sp, #16]
 800c448:	960e      	str	r6, [sp, #56]	; 0x38
 800c44a:	970f      	str	r7, [sp, #60]	; 0x3c
 800c44c:	f002 f892 	bl	800e574 <__d2b>
 800c450:	9022      	str	r0, [sp, #136]	; 0x88
 800c452:	2800      	cmp	r0, #0
 800c454:	d100      	bne.n	800c458 <_strtod_l+0x6b0>
 800c456:	e6dd      	b.n	800c214 <_strtod_l+0x46c>
 800c458:	2101      	movs	r1, #1
 800c45a:	9804      	ldr	r0, [sp, #16]
 800c45c:	f001 fe5d 	bl	800e11a <__i2b>
 800c460:	9005      	str	r0, [sp, #20]
 800c462:	2800      	cmp	r0, #0
 800c464:	d100      	bne.n	800c468 <_strtod_l+0x6c0>
 800c466:	e6d5      	b.n	800c214 <_strtod_l+0x46c>
 800c468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	da00      	bge.n	800c470 <_strtod_l+0x6c8>
 800c46e:	e0c1      	b.n	800c5f4 <_strtod_l+0x84c>
 800c470:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c472:	189d      	adds	r5, r3, r2
 800c474:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c476:	4694      	mov	ip, r2
 800c478:	9906      	ldr	r1, [sp, #24]
 800c47a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c47c:	1a5b      	subs	r3, r3, r1
 800c47e:	2136      	movs	r1, #54	; 0x36
 800c480:	189b      	adds	r3, r3, r2
 800c482:	1a8a      	subs	r2, r1, r2
 800c484:	49b2      	ldr	r1, [pc, #712]	; (800c750 <_strtod_l+0x9a8>)
 800c486:	3b01      	subs	r3, #1
 800c488:	2001      	movs	r0, #1
 800c48a:	428b      	cmp	r3, r1
 800c48c:	db00      	blt.n	800c490 <_strtod_l+0x6e8>
 800c48e:	e0bd      	b.n	800c60c <_strtod_l+0x864>
 800c490:	1ac9      	subs	r1, r1, r3
 800c492:	1a52      	subs	r2, r2, r1
 800c494:	291f      	cmp	r1, #31
 800c496:	dd00      	ble.n	800c49a <_strtod_l+0x6f2>
 800c498:	e0b1      	b.n	800c5fe <_strtod_l+0x856>
 800c49a:	4088      	lsls	r0, r1
 800c49c:	2300      	movs	r3, #0
 800c49e:	9014      	str	r0, [sp, #80]	; 0x50
 800c4a0:	9310      	str	r3, [sp, #64]	; 0x40
 800c4a2:	18ab      	adds	r3, r5, r2
 800c4a4:	9308      	str	r3, [sp, #32]
 800c4a6:	0013      	movs	r3, r2
 800c4a8:	9a06      	ldr	r2, [sp, #24]
 800c4aa:	4463      	add	r3, ip
 800c4ac:	18d3      	adds	r3, r2, r3
 800c4ae:	9a08      	ldr	r2, [sp, #32]
 800c4b0:	930c      	str	r3, [sp, #48]	; 0x30
 800c4b2:	002b      	movs	r3, r5
 800c4b4:	4295      	cmp	r5, r2
 800c4b6:	dd00      	ble.n	800c4ba <_strtod_l+0x712>
 800c4b8:	0013      	movs	r3, r2
 800c4ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	dd00      	ble.n	800c4c2 <_strtod_l+0x71a>
 800c4c0:	0013      	movs	r3, r2
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	dd06      	ble.n	800c4d4 <_strtod_l+0x72c>
 800c4c6:	9a08      	ldr	r2, [sp, #32]
 800c4c8:	1aed      	subs	r5, r5, r3
 800c4ca:	1ad2      	subs	r2, r2, r3
 800c4cc:	9208      	str	r2, [sp, #32]
 800c4ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4d0:	1ad2      	subs	r2, r2, r3
 800c4d2:	920c      	str	r2, [sp, #48]	; 0x30
 800c4d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d017      	beq.n	800c50a <_strtod_l+0x762>
 800c4da:	001a      	movs	r2, r3
 800c4dc:	9905      	ldr	r1, [sp, #20]
 800c4de:	9804      	ldr	r0, [sp, #16]
 800c4e0:	f001 feb4 	bl	800e24c <__pow5mult>
 800c4e4:	9005      	str	r0, [sp, #20]
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d100      	bne.n	800c4ec <_strtod_l+0x744>
 800c4ea:	e693      	b.n	800c214 <_strtod_l+0x46c>
 800c4ec:	0001      	movs	r1, r0
 800c4ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c4f0:	9804      	ldr	r0, [sp, #16]
 800c4f2:	f001 fe1b 	bl	800e12c <__multiply>
 800c4f6:	9012      	str	r0, [sp, #72]	; 0x48
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d100      	bne.n	800c4fe <_strtod_l+0x756>
 800c4fc:	e68a      	b.n	800c214 <_strtod_l+0x46c>
 800c4fe:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c500:	9804      	ldr	r0, [sp, #16]
 800c502:	f001 fd2c 	bl	800df5e <_Bfree>
 800c506:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c508:	9322      	str	r3, [sp, #136]	; 0x88
 800c50a:	9b08      	ldr	r3, [sp, #32]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dd00      	ble.n	800c512 <_strtod_l+0x76a>
 800c510:	e07f      	b.n	800c612 <_strtod_l+0x86a>
 800c512:	9b07      	ldr	r3, [sp, #28]
 800c514:	2b00      	cmp	r3, #0
 800c516:	dd08      	ble.n	800c52a <_strtod_l+0x782>
 800c518:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c51a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c51c:	9804      	ldr	r0, [sp, #16]
 800c51e:	f001 fe95 	bl	800e24c <__pow5mult>
 800c522:	900a      	str	r0, [sp, #40]	; 0x28
 800c524:	2800      	cmp	r0, #0
 800c526:	d100      	bne.n	800c52a <_strtod_l+0x782>
 800c528:	e674      	b.n	800c214 <_strtod_l+0x46c>
 800c52a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	dd08      	ble.n	800c542 <_strtod_l+0x79a>
 800c530:	001a      	movs	r2, r3
 800c532:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c534:	9804      	ldr	r0, [sp, #16]
 800c536:	f001 fedb 	bl	800e2f0 <__lshift>
 800c53a:	900a      	str	r0, [sp, #40]	; 0x28
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d100      	bne.n	800c542 <_strtod_l+0x79a>
 800c540:	e668      	b.n	800c214 <_strtod_l+0x46c>
 800c542:	2d00      	cmp	r5, #0
 800c544:	dd08      	ble.n	800c558 <_strtod_l+0x7b0>
 800c546:	002a      	movs	r2, r5
 800c548:	9905      	ldr	r1, [sp, #20]
 800c54a:	9804      	ldr	r0, [sp, #16]
 800c54c:	f001 fed0 	bl	800e2f0 <__lshift>
 800c550:	9005      	str	r0, [sp, #20]
 800c552:	2800      	cmp	r0, #0
 800c554:	d100      	bne.n	800c558 <_strtod_l+0x7b0>
 800c556:	e65d      	b.n	800c214 <_strtod_l+0x46c>
 800c558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c55a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c55c:	9804      	ldr	r0, [sp, #16]
 800c55e:	f001 ff33 	bl	800e3c8 <__mdiff>
 800c562:	1e04      	subs	r4, r0, #0
 800c564:	d100      	bne.n	800c568 <_strtod_l+0x7c0>
 800c566:	e655      	b.n	800c214 <_strtod_l+0x46c>
 800c568:	2500      	movs	r5, #0
 800c56a:	68c3      	ldr	r3, [r0, #12]
 800c56c:	9905      	ldr	r1, [sp, #20]
 800c56e:	60c5      	str	r5, [r0, #12]
 800c570:	9312      	str	r3, [sp, #72]	; 0x48
 800c572:	f001 ff0f 	bl	800e394 <__mcmp>
 800c576:	42a8      	cmp	r0, r5
 800c578:	da55      	bge.n	800c626 <_strtod_l+0x87e>
 800c57a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c57c:	42ab      	cmp	r3, r5
 800c57e:	d11b      	bne.n	800c5b8 <_strtod_l+0x810>
 800c580:	42ae      	cmp	r6, r5
 800c582:	d119      	bne.n	800c5b8 <_strtod_l+0x810>
 800c584:	033b      	lsls	r3, r7, #12
 800c586:	42ab      	cmp	r3, r5
 800c588:	d116      	bne.n	800c5b8 <_strtod_l+0x810>
 800c58a:	22d6      	movs	r2, #214	; 0xd6
 800c58c:	4b71      	ldr	r3, [pc, #452]	; (800c754 <_strtod_l+0x9ac>)
 800c58e:	04d2      	lsls	r2, r2, #19
 800c590:	403b      	ands	r3, r7
 800c592:	4293      	cmp	r3, r2
 800c594:	d910      	bls.n	800c5b8 <_strtod_l+0x810>
 800c596:	6963      	ldr	r3, [r4, #20]
 800c598:	42ab      	cmp	r3, r5
 800c59a:	d102      	bne.n	800c5a2 <_strtod_l+0x7fa>
 800c59c:	6923      	ldr	r3, [r4, #16]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	dd0a      	ble.n	800c5b8 <_strtod_l+0x810>
 800c5a2:	0021      	movs	r1, r4
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	9804      	ldr	r0, [sp, #16]
 800c5a8:	f001 fea2 	bl	800e2f0 <__lshift>
 800c5ac:	9905      	ldr	r1, [sp, #20]
 800c5ae:	0004      	movs	r4, r0
 800c5b0:	f001 fef0 	bl	800e394 <__mcmp>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	dc6b      	bgt.n	800c690 <_strtod_l+0x8e8>
 800c5b8:	9b06      	ldr	r3, [sp, #24]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d178      	bne.n	800c6b0 <_strtod_l+0x908>
 800c5be:	e632      	b.n	800c226 <_strtod_l+0x47e>
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	4214      	tst	r4, r2
 800c5c4:	d007      	beq.n	800c5d6 <_strtod_l+0x82e>
 800c5c6:	4a64      	ldr	r2, [pc, #400]	; (800c758 <_strtod_l+0x9b0>)
 800c5c8:	00eb      	lsls	r3, r5, #3
 800c5ca:	18d3      	adds	r3, r2, r3
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	f7f5 f8d0 	bl	8001774 <__aeabi_dmul>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	3501      	adds	r5, #1
 800c5d8:	1064      	asrs	r4, r4, #1
 800c5da:	e6df      	b.n	800c39c <_strtod_l+0x5f4>
 800c5dc:	2101      	movs	r1, #1
 800c5de:	3b20      	subs	r3, #32
 800c5e0:	4249      	negs	r1, r1
 800c5e2:	4099      	lsls	r1, r3
 800c5e4:	400a      	ands	r2, r1
 800c5e6:	0017      	movs	r7, r2
 800c5e8:	e6f2      	b.n	800c3d0 <_strtod_l+0x628>
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	4252      	negs	r2, r2
 800c5ee:	409a      	lsls	r2, r3
 800c5f0:	4016      	ands	r6, r2
 800c5f2:	e6ed      	b.n	800c3d0 <_strtod_l+0x628>
 800c5f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c5f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c5f8:	1ad2      	subs	r2, r2, r3
 800c5fa:	4694      	mov	ip, r2
 800c5fc:	e73c      	b.n	800c478 <_strtod_l+0x6d0>
 800c5fe:	4957      	ldr	r1, [pc, #348]	; (800c75c <_strtod_l+0x9b4>)
 800c600:	1acb      	subs	r3, r1, r3
 800c602:	0001      	movs	r1, r0
 800c604:	4099      	lsls	r1, r3
 800c606:	9110      	str	r1, [sp, #64]	; 0x40
 800c608:	9014      	str	r0, [sp, #80]	; 0x50
 800c60a:	e74a      	b.n	800c4a2 <_strtod_l+0x6fa>
 800c60c:	2300      	movs	r3, #0
 800c60e:	9310      	str	r3, [sp, #64]	; 0x40
 800c610:	e7fa      	b.n	800c608 <_strtod_l+0x860>
 800c612:	9a08      	ldr	r2, [sp, #32]
 800c614:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c616:	9804      	ldr	r0, [sp, #16]
 800c618:	f001 fe6a 	bl	800e2f0 <__lshift>
 800c61c:	9022      	str	r0, [sp, #136]	; 0x88
 800c61e:	2800      	cmp	r0, #0
 800c620:	d000      	beq.n	800c624 <_strtod_l+0x87c>
 800c622:	e776      	b.n	800c512 <_strtod_l+0x76a>
 800c624:	e5f6      	b.n	800c214 <_strtod_l+0x46c>
 800c626:	970c      	str	r7, [sp, #48]	; 0x30
 800c628:	2800      	cmp	r0, #0
 800c62a:	d000      	beq.n	800c62e <_strtod_l+0x886>
 800c62c:	e0a0      	b.n	800c770 <_strtod_l+0x9c8>
 800c62e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c630:	033b      	lsls	r3, r7, #12
 800c632:	0b1b      	lsrs	r3, r3, #12
 800c634:	2a00      	cmp	r2, #0
 800c636:	d027      	beq.n	800c688 <_strtod_l+0x8e0>
 800c638:	4a49      	ldr	r2, [pc, #292]	; (800c760 <_strtod_l+0x9b8>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d157      	bne.n	800c6ee <_strtod_l+0x946>
 800c63e:	2201      	movs	r2, #1
 800c640:	9b06      	ldr	r3, [sp, #24]
 800c642:	4252      	negs	r2, r2
 800c644:	0031      	movs	r1, r6
 800c646:	0010      	movs	r0, r2
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00b      	beq.n	800c664 <_strtod_l+0x8bc>
 800c64c:	25d4      	movs	r5, #212	; 0xd4
 800c64e:	4b41      	ldr	r3, [pc, #260]	; (800c754 <_strtod_l+0x9ac>)
 800c650:	04ed      	lsls	r5, r5, #19
 800c652:	403b      	ands	r3, r7
 800c654:	0010      	movs	r0, r2
 800c656:	42ab      	cmp	r3, r5
 800c658:	d804      	bhi.n	800c664 <_strtod_l+0x8bc>
 800c65a:	306c      	adds	r0, #108	; 0x6c
 800c65c:	0d1b      	lsrs	r3, r3, #20
 800c65e:	1ac3      	subs	r3, r0, r3
 800c660:	409a      	lsls	r2, r3
 800c662:	0010      	movs	r0, r2
 800c664:	4281      	cmp	r1, r0
 800c666:	d142      	bne.n	800c6ee <_strtod_l+0x946>
 800c668:	4b3e      	ldr	r3, [pc, #248]	; (800c764 <_strtod_l+0x9bc>)
 800c66a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d102      	bne.n	800c676 <_strtod_l+0x8ce>
 800c670:	1c4b      	adds	r3, r1, #1
 800c672:	d100      	bne.n	800c676 <_strtod_l+0x8ce>
 800c674:	e5ce      	b.n	800c214 <_strtod_l+0x46c>
 800c676:	4b37      	ldr	r3, [pc, #220]	; (800c754 <_strtod_l+0x9ac>)
 800c678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c67a:	2600      	movs	r6, #0
 800c67c:	401a      	ands	r2, r3
 800c67e:	0013      	movs	r3, r2
 800c680:	2280      	movs	r2, #128	; 0x80
 800c682:	0352      	lsls	r2, r2, #13
 800c684:	189f      	adds	r7, r3, r2
 800c686:	e797      	b.n	800c5b8 <_strtod_l+0x810>
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d130      	bne.n	800c6ee <_strtod_l+0x946>
 800c68c:	2e00      	cmp	r6, #0
 800c68e:	d12e      	bne.n	800c6ee <_strtod_l+0x946>
 800c690:	9906      	ldr	r1, [sp, #24]
 800c692:	003b      	movs	r3, r7
 800c694:	4a2f      	ldr	r2, [pc, #188]	; (800c754 <_strtod_l+0x9ac>)
 800c696:	2900      	cmp	r1, #0
 800c698:	d020      	beq.n	800c6dc <_strtod_l+0x934>
 800c69a:	0011      	movs	r1, r2
 800c69c:	20d6      	movs	r0, #214	; 0xd6
 800c69e:	4039      	ands	r1, r7
 800c6a0:	04c0      	lsls	r0, r0, #19
 800c6a2:	4281      	cmp	r1, r0
 800c6a4:	dc1a      	bgt.n	800c6dc <_strtod_l+0x934>
 800c6a6:	23dc      	movs	r3, #220	; 0xdc
 800c6a8:	049b      	lsls	r3, r3, #18
 800c6aa:	4299      	cmp	r1, r3
 800c6ac:	dc00      	bgt.n	800c6b0 <_strtod_l+0x908>
 800c6ae:	e646      	b.n	800c33e <_strtod_l+0x596>
 800c6b0:	4b2d      	ldr	r3, [pc, #180]	; (800c768 <_strtod_l+0x9c0>)
 800c6b2:	0030      	movs	r0, r6
 800c6b4:	931b      	str	r3, [sp, #108]	; 0x6c
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	931a      	str	r3, [sp, #104]	; 0x68
 800c6ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c6bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6be:	0039      	movs	r1, r7
 800c6c0:	f7f5 f858 	bl	8001774 <__aeabi_dmul>
 800c6c4:	0006      	movs	r6, r0
 800c6c6:	000f      	movs	r7, r1
 800c6c8:	1e0b      	subs	r3, r1, #0
 800c6ca:	d000      	beq.n	800c6ce <_strtod_l+0x926>
 800c6cc:	e5ab      	b.n	800c226 <_strtod_l+0x47e>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d000      	beq.n	800c6d4 <_strtod_l+0x92c>
 800c6d2:	e5a8      	b.n	800c226 <_strtod_l+0x47e>
 800c6d4:	9a04      	ldr	r2, [sp, #16]
 800c6d6:	3322      	adds	r3, #34	; 0x22
 800c6d8:	6013      	str	r3, [r2, #0]
 800c6da:	e5a4      	b.n	800c226 <_strtod_l+0x47e>
 800c6dc:	2601      	movs	r6, #1
 800c6de:	4013      	ands	r3, r2
 800c6e0:	4a22      	ldr	r2, [pc, #136]	; (800c76c <_strtod_l+0x9c4>)
 800c6e2:	4276      	negs	r6, r6
 800c6e4:	189b      	adds	r3, r3, r2
 800c6e6:	4a1e      	ldr	r2, [pc, #120]	; (800c760 <_strtod_l+0x9b8>)
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	0017      	movs	r7, r2
 800c6ec:	e764      	b.n	800c5b8 <_strtod_l+0x810>
 800c6ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d015      	beq.n	800c720 <_strtod_l+0x978>
 800c6f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6f8:	4213      	tst	r3, r2
 800c6fa:	d100      	bne.n	800c6fe <_strtod_l+0x956>
 800c6fc:	e75c      	b.n	800c5b8 <_strtod_l+0x810>
 800c6fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c700:	9a06      	ldr	r2, [sp, #24]
 800c702:	0030      	movs	r0, r6
 800c704:	0039      	movs	r1, r7
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00f      	beq.n	800c72a <_strtod_l+0x982>
 800c70a:	f7ff fb35 	bl	800bd78 <sulp>
 800c70e:	0002      	movs	r2, r0
 800c710:	000b      	movs	r3, r1
 800c712:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c714:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c716:	f7f4 f907 	bl	8000928 <__aeabi_dadd>
 800c71a:	0006      	movs	r6, r0
 800c71c:	000f      	movs	r7, r1
 800c71e:	e74b      	b.n	800c5b8 <_strtod_l+0x810>
 800c720:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c722:	4233      	tst	r3, r6
 800c724:	d100      	bne.n	800c728 <_strtod_l+0x980>
 800c726:	e747      	b.n	800c5b8 <_strtod_l+0x810>
 800c728:	e7e9      	b.n	800c6fe <_strtod_l+0x956>
 800c72a:	f7ff fb25 	bl	800bd78 <sulp>
 800c72e:	0002      	movs	r2, r0
 800c730:	000b      	movs	r3, r1
 800c732:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c734:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c736:	f7f5 fa8f 	bl	8001c58 <__aeabi_dsub>
 800c73a:	2200      	movs	r2, #0
 800c73c:	2300      	movs	r3, #0
 800c73e:	0006      	movs	r6, r0
 800c740:	000f      	movs	r7, r1
 800c742:	f7f3 fe79 	bl	8000438 <__aeabi_dcmpeq>
 800c746:	2800      	cmp	r0, #0
 800c748:	d000      	beq.n	800c74c <_strtod_l+0x9a4>
 800c74a:	e5f8      	b.n	800c33e <_strtod_l+0x596>
 800c74c:	e734      	b.n	800c5b8 <_strtod_l+0x810>
 800c74e:	46c0      	nop			; (mov r8, r8)
 800c750:	fffffc02 	.word	0xfffffc02
 800c754:	7ff00000 	.word	0x7ff00000
 800c758:	0800ffd0 	.word	0x0800ffd0
 800c75c:	fffffbe2 	.word	0xfffffbe2
 800c760:	000fffff 	.word	0x000fffff
 800c764:	7fefffff 	.word	0x7fefffff
 800c768:	39500000 	.word	0x39500000
 800c76c:	fff00000 	.word	0xfff00000
 800c770:	9905      	ldr	r1, [sp, #20]
 800c772:	0020      	movs	r0, r4
 800c774:	f001 ff52 	bl	800e61c <__ratio>
 800c778:	2380      	movs	r3, #128	; 0x80
 800c77a:	2200      	movs	r2, #0
 800c77c:	05db      	lsls	r3, r3, #23
 800c77e:	9008      	str	r0, [sp, #32]
 800c780:	9109      	str	r1, [sp, #36]	; 0x24
 800c782:	f7f3 fe69 	bl	8000458 <__aeabi_dcmple>
 800c786:	2800      	cmp	r0, #0
 800c788:	d100      	bne.n	800c78c <_strtod_l+0x9e4>
 800c78a:	e07f      	b.n	800c88c <_strtod_l+0xae4>
 800c78c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d04b      	beq.n	800c82a <_strtod_l+0xa82>
 800c792:	2200      	movs	r2, #0
 800c794:	4b8a      	ldr	r3, [pc, #552]	; (800c9c0 <_strtod_l+0xc18>)
 800c796:	9210      	str	r2, [sp, #64]	; 0x40
 800c798:	9311      	str	r3, [sp, #68]	; 0x44
 800c79a:	4b89      	ldr	r3, [pc, #548]	; (800c9c0 <_strtod_l+0xc18>)
 800c79c:	9308      	str	r3, [sp, #32]
 800c79e:	4a89      	ldr	r2, [pc, #548]	; (800c9c4 <_strtod_l+0xc1c>)
 800c7a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	9314      	str	r3, [sp, #80]	; 0x50
 800c7a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7a8:	4b87      	ldr	r3, [pc, #540]	; (800c9c8 <_strtod_l+0xc20>)
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d000      	beq.n	800c7b0 <_strtod_l+0xa08>
 800c7ae:	e0ba      	b.n	800c926 <_strtod_l+0xb7e>
 800c7b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7b4:	921a      	str	r2, [sp, #104]	; 0x68
 800c7b6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c7b8:	4a84      	ldr	r2, [pc, #528]	; (800c9cc <_strtod_l+0xc24>)
 800c7ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7bc:	4694      	mov	ip, r2
 800c7be:	4463      	add	r3, ip
 800c7c0:	001f      	movs	r7, r3
 800c7c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7c6:	0030      	movs	r0, r6
 800c7c8:	0039      	movs	r1, r7
 800c7ca:	920c      	str	r2, [sp, #48]	; 0x30
 800c7cc:	930d      	str	r3, [sp, #52]	; 0x34
 800c7ce:	f001 fe5f 	bl	800e490 <__ulp>
 800c7d2:	0002      	movs	r2, r0
 800c7d4:	000b      	movs	r3, r1
 800c7d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c7d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c7da:	f7f4 ffcb 	bl	8001774 <__aeabi_dmul>
 800c7de:	0032      	movs	r2, r6
 800c7e0:	003b      	movs	r3, r7
 800c7e2:	f7f4 f8a1 	bl	8000928 <__aeabi_dadd>
 800c7e6:	4a77      	ldr	r2, [pc, #476]	; (800c9c4 <_strtod_l+0xc1c>)
 800c7e8:	4b79      	ldr	r3, [pc, #484]	; (800c9d0 <_strtod_l+0xc28>)
 800c7ea:	0006      	movs	r6, r0
 800c7ec:	400a      	ands	r2, r1
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d964      	bls.n	800c8bc <_strtod_l+0xb14>
 800c7f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7f4:	4a77      	ldr	r2, [pc, #476]	; (800c9d4 <_strtod_l+0xc2c>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d103      	bne.n	800c802 <_strtod_l+0xa5a>
 800c7fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	d100      	bne.n	800c802 <_strtod_l+0xa5a>
 800c800:	e508      	b.n	800c214 <_strtod_l+0x46c>
 800c802:	2601      	movs	r6, #1
 800c804:	4f73      	ldr	r7, [pc, #460]	; (800c9d4 <_strtod_l+0xc2c>)
 800c806:	4276      	negs	r6, r6
 800c808:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c80a:	9804      	ldr	r0, [sp, #16]
 800c80c:	f001 fba7 	bl	800df5e <_Bfree>
 800c810:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c812:	9804      	ldr	r0, [sp, #16]
 800c814:	f001 fba3 	bl	800df5e <_Bfree>
 800c818:	9905      	ldr	r1, [sp, #20]
 800c81a:	9804      	ldr	r0, [sp, #16]
 800c81c:	f001 fb9f 	bl	800df5e <_Bfree>
 800c820:	0021      	movs	r1, r4
 800c822:	9804      	ldr	r0, [sp, #16]
 800c824:	f001 fb9b 	bl	800df5e <_Bfree>
 800c828:	e5f4      	b.n	800c414 <_strtod_l+0x66c>
 800c82a:	2e00      	cmp	r6, #0
 800c82c:	d11e      	bne.n	800c86c <_strtod_l+0xac4>
 800c82e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c830:	031b      	lsls	r3, r3, #12
 800c832:	d121      	bne.n	800c878 <_strtod_l+0xad0>
 800c834:	9808      	ldr	r0, [sp, #32]
 800c836:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c838:	2200      	movs	r2, #0
 800c83a:	4b61      	ldr	r3, [pc, #388]	; (800c9c0 <_strtod_l+0xc18>)
 800c83c:	f7f3 fe02 	bl	8000444 <__aeabi_dcmplt>
 800c840:	2800      	cmp	r0, #0
 800c842:	d11f      	bne.n	800c884 <_strtod_l+0xadc>
 800c844:	9808      	ldr	r0, [sp, #32]
 800c846:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c848:	2200      	movs	r2, #0
 800c84a:	4b63      	ldr	r3, [pc, #396]	; (800c9d8 <_strtod_l+0xc30>)
 800c84c:	f7f4 ff92 	bl	8001774 <__aeabi_dmul>
 800c850:	0005      	movs	r5, r0
 800c852:	9108      	str	r1, [sp, #32]
 800c854:	2280      	movs	r2, #128	; 0x80
 800c856:	0612      	lsls	r2, r2, #24
 800c858:	4694      	mov	ip, r2
 800c85a:	9b08      	ldr	r3, [sp, #32]
 800c85c:	951e      	str	r5, [sp, #120]	; 0x78
 800c85e:	4463      	add	r3, ip
 800c860:	931f      	str	r3, [sp, #124]	; 0x7c
 800c862:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c864:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c866:	9210      	str	r2, [sp, #64]	; 0x40
 800c868:	9311      	str	r3, [sp, #68]	; 0x44
 800c86a:	e798      	b.n	800c79e <_strtod_l+0x9f6>
 800c86c:	2e01      	cmp	r6, #1
 800c86e:	d103      	bne.n	800c878 <_strtod_l+0xad0>
 800c870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c872:	2b00      	cmp	r3, #0
 800c874:	d100      	bne.n	800c878 <_strtod_l+0xad0>
 800c876:	e562      	b.n	800c33e <_strtod_l+0x596>
 800c878:	2200      	movs	r2, #0
 800c87a:	4b58      	ldr	r3, [pc, #352]	; (800c9dc <_strtod_l+0xc34>)
 800c87c:	2500      	movs	r5, #0
 800c87e:	9210      	str	r2, [sp, #64]	; 0x40
 800c880:	9311      	str	r3, [sp, #68]	; 0x44
 800c882:	e78a      	b.n	800c79a <_strtod_l+0x9f2>
 800c884:	4b54      	ldr	r3, [pc, #336]	; (800c9d8 <_strtod_l+0xc30>)
 800c886:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800c888:	9308      	str	r3, [sp, #32]
 800c88a:	e7e3      	b.n	800c854 <_strtod_l+0xaac>
 800c88c:	4b52      	ldr	r3, [pc, #328]	; (800c9d8 <_strtod_l+0xc30>)
 800c88e:	9808      	ldr	r0, [sp, #32]
 800c890:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c892:	2200      	movs	r2, #0
 800c894:	f7f4 ff6e 	bl	8001774 <__aeabi_dmul>
 800c898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c89a:	0005      	movs	r5, r0
 800c89c:	9108      	str	r1, [sp, #32]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d107      	bne.n	800c8b2 <_strtod_l+0xb0a>
 800c8a2:	2380      	movs	r3, #128	; 0x80
 800c8a4:	061b      	lsls	r3, r3, #24
 800c8a6:	18cb      	adds	r3, r1, r3
 800c8a8:	9016      	str	r0, [sp, #88]	; 0x58
 800c8aa:	9317      	str	r3, [sp, #92]	; 0x5c
 800c8ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c8ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8b0:	e7d9      	b.n	800c866 <_strtod_l+0xabe>
 800c8b2:	0002      	movs	r2, r0
 800c8b4:	9b08      	ldr	r3, [sp, #32]
 800c8b6:	9216      	str	r2, [sp, #88]	; 0x58
 800c8b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c8ba:	e7f7      	b.n	800c8ac <_strtod_l+0xb04>
 800c8bc:	23d4      	movs	r3, #212	; 0xd4
 800c8be:	049b      	lsls	r3, r3, #18
 800c8c0:	18cf      	adds	r7, r1, r3
 800c8c2:	9b06      	ldr	r3, [sp, #24]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d19f      	bne.n	800c808 <_strtod_l+0xa60>
 800c8c8:	4b3e      	ldr	r3, [pc, #248]	; (800c9c4 <_strtod_l+0xc1c>)
 800c8ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8cc:	970c      	str	r7, [sp, #48]	; 0x30
 800c8ce:	403b      	ands	r3, r7
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d199      	bne.n	800c808 <_strtod_l+0xa60>
 800c8d4:	9908      	ldr	r1, [sp, #32]
 800c8d6:	0028      	movs	r0, r5
 800c8d8:	f7f5 fd22 	bl	8002320 <__aeabi_d2iz>
 800c8dc:	f7f5 fd56 	bl	800238c <__aeabi_i2d>
 800c8e0:	000b      	movs	r3, r1
 800c8e2:	0002      	movs	r2, r0
 800c8e4:	9908      	ldr	r1, [sp, #32]
 800c8e6:	0028      	movs	r0, r5
 800c8e8:	f7f5 f9b6 	bl	8001c58 <__aeabi_dsub>
 800c8ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8ee:	9008      	str	r0, [sp, #32]
 800c8f0:	9109      	str	r1, [sp, #36]	; 0x24
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d104      	bne.n	800c900 <_strtod_l+0xb58>
 800c8f6:	2e00      	cmp	r6, #0
 800c8f8:	d102      	bne.n	800c900 <_strtod_l+0xb58>
 800c8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8fc:	031b      	lsls	r3, r3, #12
 800c8fe:	d058      	beq.n	800c9b2 <_strtod_l+0xc0a>
 800c900:	9808      	ldr	r0, [sp, #32]
 800c902:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c904:	4a36      	ldr	r2, [pc, #216]	; (800c9e0 <_strtod_l+0xc38>)
 800c906:	4b37      	ldr	r3, [pc, #220]	; (800c9e4 <_strtod_l+0xc3c>)
 800c908:	f7f3 fd9c 	bl	8000444 <__aeabi_dcmplt>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d000      	beq.n	800c912 <_strtod_l+0xb6a>
 800c910:	e489      	b.n	800c226 <_strtod_l+0x47e>
 800c912:	9808      	ldr	r0, [sp, #32]
 800c914:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c916:	4a34      	ldr	r2, [pc, #208]	; (800c9e8 <_strtod_l+0xc40>)
 800c918:	4b2f      	ldr	r3, [pc, #188]	; (800c9d8 <_strtod_l+0xc30>)
 800c91a:	f7f3 fda7 	bl	800046c <__aeabi_dcmpgt>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d100      	bne.n	800c924 <_strtod_l+0xb7c>
 800c922:	e771      	b.n	800c808 <_strtod_l+0xa60>
 800c924:	e47f      	b.n	800c226 <_strtod_l+0x47e>
 800c926:	9b06      	ldr	r3, [sp, #24]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d02a      	beq.n	800c982 <_strtod_l+0xbda>
 800c92c:	23d4      	movs	r3, #212	; 0xd4
 800c92e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c930:	04db      	lsls	r3, r3, #19
 800c932:	429a      	cmp	r2, r3
 800c934:	d825      	bhi.n	800c982 <_strtod_l+0xbda>
 800c936:	4a2d      	ldr	r2, [pc, #180]	; (800c9ec <_strtod_l+0xc44>)
 800c938:	4b2d      	ldr	r3, [pc, #180]	; (800c9f0 <_strtod_l+0xc48>)
 800c93a:	0028      	movs	r0, r5
 800c93c:	9908      	ldr	r1, [sp, #32]
 800c93e:	f7f3 fd8b 	bl	8000458 <__aeabi_dcmple>
 800c942:	2800      	cmp	r0, #0
 800c944:	d016      	beq.n	800c974 <_strtod_l+0xbcc>
 800c946:	0028      	movs	r0, r5
 800c948:	9908      	ldr	r1, [sp, #32]
 800c94a:	f7f3 fe27 	bl	800059c <__aeabi_d2uiz>
 800c94e:	2800      	cmp	r0, #0
 800c950:	d100      	bne.n	800c954 <_strtod_l+0xbac>
 800c952:	3001      	adds	r0, #1
 800c954:	f7f5 fd54 	bl	8002400 <__aeabi_ui2d>
 800c958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c95a:	0005      	movs	r5, r0
 800c95c:	9108      	str	r1, [sp, #32]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d122      	bne.n	800c9a8 <_strtod_l+0xc00>
 800c962:	2380      	movs	r3, #128	; 0x80
 800c964:	061b      	lsls	r3, r3, #24
 800c966:	18cb      	adds	r3, r1, r3
 800c968:	9018      	str	r0, [sp, #96]	; 0x60
 800c96a:	9319      	str	r3, [sp, #100]	; 0x64
 800c96c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c96e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c970:	9210      	str	r2, [sp, #64]	; 0x40
 800c972:	9311      	str	r3, [sp, #68]	; 0x44
 800c974:	22d6      	movs	r2, #214	; 0xd6
 800c976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c978:	04d2      	lsls	r2, r2, #19
 800c97a:	189b      	adds	r3, r3, r2
 800c97c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c97e:	1a9b      	subs	r3, r3, r2
 800c980:	9311      	str	r3, [sp, #68]	; 0x44
 800c982:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c984:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c986:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c988:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800c98a:	f001 fd81 	bl	800e490 <__ulp>
 800c98e:	0002      	movs	r2, r0
 800c990:	000b      	movs	r3, r1
 800c992:	0030      	movs	r0, r6
 800c994:	0039      	movs	r1, r7
 800c996:	f7f4 feed 	bl	8001774 <__aeabi_dmul>
 800c99a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c99c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c99e:	f7f3 ffc3 	bl	8000928 <__aeabi_dadd>
 800c9a2:	0006      	movs	r6, r0
 800c9a4:	000f      	movs	r7, r1
 800c9a6:	e78c      	b.n	800c8c2 <_strtod_l+0xb1a>
 800c9a8:	0002      	movs	r2, r0
 800c9aa:	9b08      	ldr	r3, [sp, #32]
 800c9ac:	9218      	str	r2, [sp, #96]	; 0x60
 800c9ae:	9319      	str	r3, [sp, #100]	; 0x64
 800c9b0:	e7dc      	b.n	800c96c <_strtod_l+0xbc4>
 800c9b2:	4a0b      	ldr	r2, [pc, #44]	; (800c9e0 <_strtod_l+0xc38>)
 800c9b4:	4b0f      	ldr	r3, [pc, #60]	; (800c9f4 <_strtod_l+0xc4c>)
 800c9b6:	9808      	ldr	r0, [sp, #32]
 800c9b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9ba:	f7f3 fd43 	bl	8000444 <__aeabi_dcmplt>
 800c9be:	e7ae      	b.n	800c91e <_strtod_l+0xb76>
 800c9c0:	3ff00000 	.word	0x3ff00000
 800c9c4:	7ff00000 	.word	0x7ff00000
 800c9c8:	7fe00000 	.word	0x7fe00000
 800c9cc:	fcb00000 	.word	0xfcb00000
 800c9d0:	7c9fffff 	.word	0x7c9fffff
 800c9d4:	7fefffff 	.word	0x7fefffff
 800c9d8:	3fe00000 	.word	0x3fe00000
 800c9dc:	bff00000 	.word	0xbff00000
 800c9e0:	94a03595 	.word	0x94a03595
 800c9e4:	3fdfffff 	.word	0x3fdfffff
 800c9e8:	35afe535 	.word	0x35afe535
 800c9ec:	ffc00000 	.word	0xffc00000
 800c9f0:	41dfffff 	.word	0x41dfffff
 800c9f4:	3fcfffff 	.word	0x3fcfffff

0800c9f8 <_strtod_r>:
 800c9f8:	4b04      	ldr	r3, [pc, #16]	; (800ca0c <_strtod_r+0x14>)
 800c9fa:	b510      	push	{r4, lr}
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	6a1b      	ldr	r3, [r3, #32]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d100      	bne.n	800ca06 <_strtod_r+0xe>
 800ca04:	4b02      	ldr	r3, [pc, #8]	; (800ca10 <_strtod_r+0x18>)
 800ca06:	f7ff f9cf 	bl	800bda8 <_strtod_l>
 800ca0a:	bd10      	pop	{r4, pc}
 800ca0c:	20000044 	.word	0x20000044
 800ca10:	200000a8 	.word	0x200000a8

0800ca14 <_strtol_l.isra.0>:
 800ca14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca16:	001f      	movs	r7, r3
 800ca18:	000e      	movs	r6, r1
 800ca1a:	b087      	sub	sp, #28
 800ca1c:	9005      	str	r0, [sp, #20]
 800ca1e:	9101      	str	r1, [sp, #4]
 800ca20:	9202      	str	r2, [sp, #8]
 800ca22:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca24:	7834      	ldrb	r4, [r6, #0]
 800ca26:	f001 fa32 	bl	800de8e <__locale_ctype_ptr_l>
 800ca2a:	2208      	movs	r2, #8
 800ca2c:	1900      	adds	r0, r0, r4
 800ca2e:	7843      	ldrb	r3, [r0, #1]
 800ca30:	1c75      	adds	r5, r6, #1
 800ca32:	4013      	ands	r3, r2
 800ca34:	d136      	bne.n	800caa4 <_strtol_l.isra.0+0x90>
 800ca36:	2c2d      	cmp	r4, #45	; 0x2d
 800ca38:	d136      	bne.n	800caa8 <_strtol_l.isra.0+0x94>
 800ca3a:	1cb5      	adds	r5, r6, #2
 800ca3c:	7874      	ldrb	r4, [r6, #1]
 800ca3e:	2601      	movs	r6, #1
 800ca40:	2f00      	cmp	r7, #0
 800ca42:	d062      	beq.n	800cb0a <_strtol_l.isra.0+0xf6>
 800ca44:	2f10      	cmp	r7, #16
 800ca46:	d109      	bne.n	800ca5c <_strtol_l.isra.0+0x48>
 800ca48:	2c30      	cmp	r4, #48	; 0x30
 800ca4a:	d107      	bne.n	800ca5c <_strtol_l.isra.0+0x48>
 800ca4c:	2220      	movs	r2, #32
 800ca4e:	782b      	ldrb	r3, [r5, #0]
 800ca50:	4393      	bics	r3, r2
 800ca52:	2b58      	cmp	r3, #88	; 0x58
 800ca54:	d154      	bne.n	800cb00 <_strtol_l.isra.0+0xec>
 800ca56:	2710      	movs	r7, #16
 800ca58:	786c      	ldrb	r4, [r5, #1]
 800ca5a:	3502      	adds	r5, #2
 800ca5c:	4b2d      	ldr	r3, [pc, #180]	; (800cb14 <_strtol_l.isra.0+0x100>)
 800ca5e:	0039      	movs	r1, r7
 800ca60:	18f3      	adds	r3, r6, r3
 800ca62:	0018      	movs	r0, r3
 800ca64:	9303      	str	r3, [sp, #12]
 800ca66:	f7f3 fbe7 	bl	8000238 <__aeabi_uidivmod>
 800ca6a:	9104      	str	r1, [sp, #16]
 800ca6c:	2101      	movs	r1, #1
 800ca6e:	2300      	movs	r3, #0
 800ca70:	4249      	negs	r1, r1
 800ca72:	0002      	movs	r2, r0
 800ca74:	468c      	mov	ip, r1
 800ca76:	0018      	movs	r0, r3
 800ca78:	0021      	movs	r1, r4
 800ca7a:	3930      	subs	r1, #48	; 0x30
 800ca7c:	2909      	cmp	r1, #9
 800ca7e:	d81a      	bhi.n	800cab6 <_strtol_l.isra.0+0xa2>
 800ca80:	000c      	movs	r4, r1
 800ca82:	42a7      	cmp	r7, r4
 800ca84:	dd23      	ble.n	800cace <_strtol_l.isra.0+0xba>
 800ca86:	1c59      	adds	r1, r3, #1
 800ca88:	d009      	beq.n	800ca9e <_strtol_l.isra.0+0x8a>
 800ca8a:	4663      	mov	r3, ip
 800ca8c:	4282      	cmp	r2, r0
 800ca8e:	d306      	bcc.n	800ca9e <_strtol_l.isra.0+0x8a>
 800ca90:	d102      	bne.n	800ca98 <_strtol_l.isra.0+0x84>
 800ca92:	9904      	ldr	r1, [sp, #16]
 800ca94:	42a1      	cmp	r1, r4
 800ca96:	db02      	blt.n	800ca9e <_strtol_l.isra.0+0x8a>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	4378      	muls	r0, r7
 800ca9c:	1820      	adds	r0, r4, r0
 800ca9e:	782c      	ldrb	r4, [r5, #0]
 800caa0:	3501      	adds	r5, #1
 800caa2:	e7e9      	b.n	800ca78 <_strtol_l.isra.0+0x64>
 800caa4:	002e      	movs	r6, r5
 800caa6:	e7bc      	b.n	800ca22 <_strtol_l.isra.0+0xe>
 800caa8:	2c2b      	cmp	r4, #43	; 0x2b
 800caaa:	d001      	beq.n	800cab0 <_strtol_l.isra.0+0x9c>
 800caac:	001e      	movs	r6, r3
 800caae:	e7c7      	b.n	800ca40 <_strtol_l.isra.0+0x2c>
 800cab0:	1cb5      	adds	r5, r6, #2
 800cab2:	7874      	ldrb	r4, [r6, #1]
 800cab4:	e7fa      	b.n	800caac <_strtol_l.isra.0+0x98>
 800cab6:	0021      	movs	r1, r4
 800cab8:	3941      	subs	r1, #65	; 0x41
 800caba:	2919      	cmp	r1, #25
 800cabc:	d801      	bhi.n	800cac2 <_strtol_l.isra.0+0xae>
 800cabe:	3c37      	subs	r4, #55	; 0x37
 800cac0:	e7df      	b.n	800ca82 <_strtol_l.isra.0+0x6e>
 800cac2:	0021      	movs	r1, r4
 800cac4:	3961      	subs	r1, #97	; 0x61
 800cac6:	2919      	cmp	r1, #25
 800cac8:	d801      	bhi.n	800cace <_strtol_l.isra.0+0xba>
 800caca:	3c57      	subs	r4, #87	; 0x57
 800cacc:	e7d9      	b.n	800ca82 <_strtol_l.isra.0+0x6e>
 800cace:	1c5a      	adds	r2, r3, #1
 800cad0:	d108      	bne.n	800cae4 <_strtol_l.isra.0+0xd0>
 800cad2:	9a05      	ldr	r2, [sp, #20]
 800cad4:	3323      	adds	r3, #35	; 0x23
 800cad6:	6013      	str	r3, [r2, #0]
 800cad8:	9b02      	ldr	r3, [sp, #8]
 800cada:	9803      	ldr	r0, [sp, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d109      	bne.n	800caf4 <_strtol_l.isra.0+0xe0>
 800cae0:	b007      	add	sp, #28
 800cae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cae4:	2e00      	cmp	r6, #0
 800cae6:	d000      	beq.n	800caea <_strtol_l.isra.0+0xd6>
 800cae8:	4240      	negs	r0, r0
 800caea:	9a02      	ldr	r2, [sp, #8]
 800caec:	2a00      	cmp	r2, #0
 800caee:	d0f7      	beq.n	800cae0 <_strtol_l.isra.0+0xcc>
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <_strtol_l.isra.0+0xe4>
 800caf4:	1e6b      	subs	r3, r5, #1
 800caf6:	9301      	str	r3, [sp, #4]
 800caf8:	9b02      	ldr	r3, [sp, #8]
 800cafa:	9a01      	ldr	r2, [sp, #4]
 800cafc:	601a      	str	r2, [r3, #0]
 800cafe:	e7ef      	b.n	800cae0 <_strtol_l.isra.0+0xcc>
 800cb00:	2430      	movs	r4, #48	; 0x30
 800cb02:	2f00      	cmp	r7, #0
 800cb04:	d1aa      	bne.n	800ca5c <_strtol_l.isra.0+0x48>
 800cb06:	2708      	movs	r7, #8
 800cb08:	e7a8      	b.n	800ca5c <_strtol_l.isra.0+0x48>
 800cb0a:	2c30      	cmp	r4, #48	; 0x30
 800cb0c:	d09e      	beq.n	800ca4c <_strtol_l.isra.0+0x38>
 800cb0e:	270a      	movs	r7, #10
 800cb10:	e7a4      	b.n	800ca5c <_strtol_l.isra.0+0x48>
 800cb12:	46c0      	nop			; (mov r8, r8)
 800cb14:	7fffffff 	.word	0x7fffffff

0800cb18 <_strtol_r>:
 800cb18:	b513      	push	{r0, r1, r4, lr}
 800cb1a:	4c05      	ldr	r4, [pc, #20]	; (800cb30 <_strtol_r+0x18>)
 800cb1c:	6824      	ldr	r4, [r4, #0]
 800cb1e:	6a24      	ldr	r4, [r4, #32]
 800cb20:	2c00      	cmp	r4, #0
 800cb22:	d100      	bne.n	800cb26 <_strtol_r+0xe>
 800cb24:	4c03      	ldr	r4, [pc, #12]	; (800cb34 <_strtol_r+0x1c>)
 800cb26:	9400      	str	r4, [sp, #0]
 800cb28:	f7ff ff74 	bl	800ca14 <_strtol_l.isra.0>
 800cb2c:	bd16      	pop	{r1, r2, r4, pc}
 800cb2e:	46c0      	nop			; (mov r8, r8)
 800cb30:	20000044 	.word	0x20000044
 800cb34:	200000a8 	.word	0x200000a8

0800cb38 <strtol>:
 800cb38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb3a:	0013      	movs	r3, r2
 800cb3c:	4a06      	ldr	r2, [pc, #24]	; (800cb58 <strtol+0x20>)
 800cb3e:	0005      	movs	r5, r0
 800cb40:	6810      	ldr	r0, [r2, #0]
 800cb42:	6a04      	ldr	r4, [r0, #32]
 800cb44:	2c00      	cmp	r4, #0
 800cb46:	d100      	bne.n	800cb4a <strtol+0x12>
 800cb48:	4c04      	ldr	r4, [pc, #16]	; (800cb5c <strtol+0x24>)
 800cb4a:	000a      	movs	r2, r1
 800cb4c:	9400      	str	r4, [sp, #0]
 800cb4e:	0029      	movs	r1, r5
 800cb50:	f7ff ff60 	bl	800ca14 <_strtol_l.isra.0>
 800cb54:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	20000044 	.word	0x20000044
 800cb5c:	200000a8 	.word	0x200000a8

0800cb60 <quorem>:
 800cb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb62:	6903      	ldr	r3, [r0, #16]
 800cb64:	690c      	ldr	r4, [r1, #16]
 800cb66:	b089      	sub	sp, #36	; 0x24
 800cb68:	0007      	movs	r7, r0
 800cb6a:	9105      	str	r1, [sp, #20]
 800cb6c:	2600      	movs	r6, #0
 800cb6e:	42a3      	cmp	r3, r4
 800cb70:	db65      	blt.n	800cc3e <quorem+0xde>
 800cb72:	000b      	movs	r3, r1
 800cb74:	3c01      	subs	r4, #1
 800cb76:	3314      	adds	r3, #20
 800cb78:	00a5      	lsls	r5, r4, #2
 800cb7a:	9303      	str	r3, [sp, #12]
 800cb7c:	195b      	adds	r3, r3, r5
 800cb7e:	9304      	str	r3, [sp, #16]
 800cb80:	0003      	movs	r3, r0
 800cb82:	3314      	adds	r3, #20
 800cb84:	9302      	str	r3, [sp, #8]
 800cb86:	195d      	adds	r5, r3, r5
 800cb88:	9b04      	ldr	r3, [sp, #16]
 800cb8a:	6828      	ldr	r0, [r5, #0]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	1c59      	adds	r1, r3, #1
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	f7f3 facb 	bl	800012c <__udivsi3>
 800cb96:	9001      	str	r0, [sp, #4]
 800cb98:	42b0      	cmp	r0, r6
 800cb9a:	d029      	beq.n	800cbf0 <quorem+0x90>
 800cb9c:	9b03      	ldr	r3, [sp, #12]
 800cb9e:	9802      	ldr	r0, [sp, #8]
 800cba0:	469c      	mov	ip, r3
 800cba2:	9606      	str	r6, [sp, #24]
 800cba4:	4662      	mov	r2, ip
 800cba6:	ca08      	ldmia	r2!, {r3}
 800cba8:	4694      	mov	ip, r2
 800cbaa:	9a01      	ldr	r2, [sp, #4]
 800cbac:	b299      	uxth	r1, r3
 800cbae:	4351      	muls	r1, r2
 800cbb0:	0c1b      	lsrs	r3, r3, #16
 800cbb2:	4353      	muls	r3, r2
 800cbb4:	1989      	adds	r1, r1, r6
 800cbb6:	0c0a      	lsrs	r2, r1, #16
 800cbb8:	189b      	adds	r3, r3, r2
 800cbba:	9307      	str	r3, [sp, #28]
 800cbbc:	0c1e      	lsrs	r6, r3, #16
 800cbbe:	6803      	ldr	r3, [r0, #0]
 800cbc0:	b289      	uxth	r1, r1
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	9b06      	ldr	r3, [sp, #24]
 800cbc6:	18d2      	adds	r2, r2, r3
 800cbc8:	6803      	ldr	r3, [r0, #0]
 800cbca:	1a52      	subs	r2, r2, r1
 800cbcc:	0c19      	lsrs	r1, r3, #16
 800cbce:	466b      	mov	r3, sp
 800cbd0:	8b9b      	ldrh	r3, [r3, #28]
 800cbd2:	1acb      	subs	r3, r1, r3
 800cbd4:	1411      	asrs	r1, r2, #16
 800cbd6:	185b      	adds	r3, r3, r1
 800cbd8:	1419      	asrs	r1, r3, #16
 800cbda:	b292      	uxth	r2, r2
 800cbdc:	041b      	lsls	r3, r3, #16
 800cbde:	431a      	orrs	r2, r3
 800cbe0:	9b04      	ldr	r3, [sp, #16]
 800cbe2:	9106      	str	r1, [sp, #24]
 800cbe4:	c004      	stmia	r0!, {r2}
 800cbe6:	4563      	cmp	r3, ip
 800cbe8:	d2dc      	bcs.n	800cba4 <quorem+0x44>
 800cbea:	682b      	ldr	r3, [r5, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d02d      	beq.n	800cc4c <quorem+0xec>
 800cbf0:	9905      	ldr	r1, [sp, #20]
 800cbf2:	0038      	movs	r0, r7
 800cbf4:	f001 fbce 	bl	800e394 <__mcmp>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	db1f      	blt.n	800cc3c <quorem+0xdc>
 800cbfc:	2500      	movs	r5, #0
 800cbfe:	9b01      	ldr	r3, [sp, #4]
 800cc00:	9802      	ldr	r0, [sp, #8]
 800cc02:	3301      	adds	r3, #1
 800cc04:	9903      	ldr	r1, [sp, #12]
 800cc06:	9301      	str	r3, [sp, #4]
 800cc08:	6802      	ldr	r2, [r0, #0]
 800cc0a:	c908      	ldmia	r1!, {r3}
 800cc0c:	b292      	uxth	r2, r2
 800cc0e:	1955      	adds	r5, r2, r5
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	1aaa      	subs	r2, r5, r2
 800cc14:	6805      	ldr	r5, [r0, #0]
 800cc16:	0c1b      	lsrs	r3, r3, #16
 800cc18:	0c2d      	lsrs	r5, r5, #16
 800cc1a:	1aeb      	subs	r3, r5, r3
 800cc1c:	1415      	asrs	r5, r2, #16
 800cc1e:	195b      	adds	r3, r3, r5
 800cc20:	141d      	asrs	r5, r3, #16
 800cc22:	b292      	uxth	r2, r2
 800cc24:	041b      	lsls	r3, r3, #16
 800cc26:	4313      	orrs	r3, r2
 800cc28:	c008      	stmia	r0!, {r3}
 800cc2a:	9b04      	ldr	r3, [sp, #16]
 800cc2c:	428b      	cmp	r3, r1
 800cc2e:	d2eb      	bcs.n	800cc08 <quorem+0xa8>
 800cc30:	9a02      	ldr	r2, [sp, #8]
 800cc32:	00a3      	lsls	r3, r4, #2
 800cc34:	18d3      	adds	r3, r2, r3
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	2a00      	cmp	r2, #0
 800cc3a:	d011      	beq.n	800cc60 <quorem+0x100>
 800cc3c:	9e01      	ldr	r6, [sp, #4]
 800cc3e:	0030      	movs	r0, r6
 800cc40:	b009      	add	sp, #36	; 0x24
 800cc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc44:	682b      	ldr	r3, [r5, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d104      	bne.n	800cc54 <quorem+0xf4>
 800cc4a:	3c01      	subs	r4, #1
 800cc4c:	9b02      	ldr	r3, [sp, #8]
 800cc4e:	3d04      	subs	r5, #4
 800cc50:	42ab      	cmp	r3, r5
 800cc52:	d3f7      	bcc.n	800cc44 <quorem+0xe4>
 800cc54:	613c      	str	r4, [r7, #16]
 800cc56:	e7cb      	b.n	800cbf0 <quorem+0x90>
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	2a00      	cmp	r2, #0
 800cc5c:	d104      	bne.n	800cc68 <quorem+0x108>
 800cc5e:	3c01      	subs	r4, #1
 800cc60:	9a02      	ldr	r2, [sp, #8]
 800cc62:	3b04      	subs	r3, #4
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d3f7      	bcc.n	800cc58 <quorem+0xf8>
 800cc68:	613c      	str	r4, [r7, #16]
 800cc6a:	e7e7      	b.n	800cc3c <quorem+0xdc>

0800cc6c <_dtoa_r>:
 800cc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc6e:	0016      	movs	r6, r2
 800cc70:	001f      	movs	r7, r3
 800cc72:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cc74:	b09b      	sub	sp, #108	; 0x6c
 800cc76:	9002      	str	r0, [sp, #8]
 800cc78:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800cc7a:	9606      	str	r6, [sp, #24]
 800cc7c:	9707      	str	r7, [sp, #28]
 800cc7e:	2c00      	cmp	r4, #0
 800cc80:	d108      	bne.n	800cc94 <_dtoa_r+0x28>
 800cc82:	2010      	movs	r0, #16
 800cc84:	f7fe f8f2 	bl	800ae6c <malloc>
 800cc88:	9b02      	ldr	r3, [sp, #8]
 800cc8a:	6258      	str	r0, [r3, #36]	; 0x24
 800cc8c:	6044      	str	r4, [r0, #4]
 800cc8e:	6084      	str	r4, [r0, #8]
 800cc90:	6004      	str	r4, [r0, #0]
 800cc92:	60c4      	str	r4, [r0, #12]
 800cc94:	9b02      	ldr	r3, [sp, #8]
 800cc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc98:	6819      	ldr	r1, [r3, #0]
 800cc9a:	2900      	cmp	r1, #0
 800cc9c:	d00b      	beq.n	800ccb6 <_dtoa_r+0x4a>
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	2301      	movs	r3, #1
 800cca2:	4093      	lsls	r3, r2
 800cca4:	604a      	str	r2, [r1, #4]
 800cca6:	608b      	str	r3, [r1, #8]
 800cca8:	9802      	ldr	r0, [sp, #8]
 800ccaa:	f001 f958 	bl	800df5e <_Bfree>
 800ccae:	2200      	movs	r2, #0
 800ccb0:	9b02      	ldr	r3, [sp, #8]
 800ccb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb4:	601a      	str	r2, [r3, #0]
 800ccb6:	2f00      	cmp	r7, #0
 800ccb8:	da20      	bge.n	800ccfc <_dtoa_r+0x90>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	602b      	str	r3, [r5, #0]
 800ccbe:	007b      	lsls	r3, r7, #1
 800ccc0:	085b      	lsrs	r3, r3, #1
 800ccc2:	9307      	str	r3, [sp, #28]
 800ccc4:	9c07      	ldr	r4, [sp, #28]
 800ccc6:	4bb2      	ldr	r3, [pc, #712]	; (800cf90 <_dtoa_r+0x324>)
 800ccc8:	0022      	movs	r2, r4
 800ccca:	9317      	str	r3, [sp, #92]	; 0x5c
 800cccc:	401a      	ands	r2, r3
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d117      	bne.n	800cd02 <_dtoa_r+0x96>
 800ccd2:	4bb0      	ldr	r3, [pc, #704]	; (800cf94 <_dtoa_r+0x328>)
 800ccd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	9b06      	ldr	r3, [sp, #24]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d103      	bne.n	800cce6 <_dtoa_r+0x7a>
 800ccde:	0324      	lsls	r4, r4, #12
 800cce0:	d101      	bne.n	800cce6 <_dtoa_r+0x7a>
 800cce2:	f000 fd87 	bl	800d7f4 <_dtoa_r+0xb88>
 800cce6:	4bac      	ldr	r3, [pc, #688]	; (800cf98 <_dtoa_r+0x32c>)
 800cce8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ccea:	9308      	str	r3, [sp, #32]
 800ccec:	2a00      	cmp	r2, #0
 800ccee:	d002      	beq.n	800ccf6 <_dtoa_r+0x8a>
 800ccf0:	4baa      	ldr	r3, [pc, #680]	; (800cf9c <_dtoa_r+0x330>)
 800ccf2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ccf4:	6013      	str	r3, [r2, #0]
 800ccf6:	9808      	ldr	r0, [sp, #32]
 800ccf8:	b01b      	add	sp, #108	; 0x6c
 800ccfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	602b      	str	r3, [r5, #0]
 800cd00:	e7e0      	b.n	800ccc4 <_dtoa_r+0x58>
 800cd02:	9e06      	ldr	r6, [sp, #24]
 800cd04:	9f07      	ldr	r7, [sp, #28]
 800cd06:	2200      	movs	r2, #0
 800cd08:	2300      	movs	r3, #0
 800cd0a:	0030      	movs	r0, r6
 800cd0c:	0039      	movs	r1, r7
 800cd0e:	f7f3 fb93 	bl	8000438 <__aeabi_dcmpeq>
 800cd12:	1e05      	subs	r5, r0, #0
 800cd14:	d00b      	beq.n	800cd2e <_dtoa_r+0xc2>
 800cd16:	2301      	movs	r3, #1
 800cd18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cd1a:	6013      	str	r3, [r2, #0]
 800cd1c:	4ba0      	ldr	r3, [pc, #640]	; (800cfa0 <_dtoa_r+0x334>)
 800cd1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cd20:	9308      	str	r3, [sp, #32]
 800cd22:	2a00      	cmp	r2, #0
 800cd24:	d0e7      	beq.n	800ccf6 <_dtoa_r+0x8a>
 800cd26:	4a9f      	ldr	r2, [pc, #636]	; (800cfa4 <_dtoa_r+0x338>)
 800cd28:	9924      	ldr	r1, [sp, #144]	; 0x90
 800cd2a:	600a      	str	r2, [r1, #0]
 800cd2c:	e7e3      	b.n	800ccf6 <_dtoa_r+0x8a>
 800cd2e:	ab18      	add	r3, sp, #96	; 0x60
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	ab19      	add	r3, sp, #100	; 0x64
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	0032      	movs	r2, r6
 800cd38:	003b      	movs	r3, r7
 800cd3a:	9802      	ldr	r0, [sp, #8]
 800cd3c:	f001 fc1a 	bl	800e574 <__d2b>
 800cd40:	0063      	lsls	r3, r4, #1
 800cd42:	9003      	str	r0, [sp, #12]
 800cd44:	0d5b      	lsrs	r3, r3, #21
 800cd46:	d074      	beq.n	800ce32 <_dtoa_r+0x1c6>
 800cd48:	033a      	lsls	r2, r7, #12
 800cd4a:	4c97      	ldr	r4, [pc, #604]	; (800cfa8 <_dtoa_r+0x33c>)
 800cd4c:	0b12      	lsrs	r2, r2, #12
 800cd4e:	4314      	orrs	r4, r2
 800cd50:	0021      	movs	r1, r4
 800cd52:	4a96      	ldr	r2, [pc, #600]	; (800cfac <_dtoa_r+0x340>)
 800cd54:	0030      	movs	r0, r6
 800cd56:	9516      	str	r5, [sp, #88]	; 0x58
 800cd58:	189e      	adds	r6, r3, r2
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	4b94      	ldr	r3, [pc, #592]	; (800cfb0 <_dtoa_r+0x344>)
 800cd5e:	f7f4 ff7b 	bl	8001c58 <__aeabi_dsub>
 800cd62:	4a94      	ldr	r2, [pc, #592]	; (800cfb4 <_dtoa_r+0x348>)
 800cd64:	4b94      	ldr	r3, [pc, #592]	; (800cfb8 <_dtoa_r+0x34c>)
 800cd66:	f7f4 fd05 	bl	8001774 <__aeabi_dmul>
 800cd6a:	4a94      	ldr	r2, [pc, #592]	; (800cfbc <_dtoa_r+0x350>)
 800cd6c:	4b94      	ldr	r3, [pc, #592]	; (800cfc0 <_dtoa_r+0x354>)
 800cd6e:	f7f3 fddb 	bl	8000928 <__aeabi_dadd>
 800cd72:	0004      	movs	r4, r0
 800cd74:	0030      	movs	r0, r6
 800cd76:	000d      	movs	r5, r1
 800cd78:	f7f5 fb08 	bl	800238c <__aeabi_i2d>
 800cd7c:	4a91      	ldr	r2, [pc, #580]	; (800cfc4 <_dtoa_r+0x358>)
 800cd7e:	4b92      	ldr	r3, [pc, #584]	; (800cfc8 <_dtoa_r+0x35c>)
 800cd80:	f7f4 fcf8 	bl	8001774 <__aeabi_dmul>
 800cd84:	0002      	movs	r2, r0
 800cd86:	000b      	movs	r3, r1
 800cd88:	0020      	movs	r0, r4
 800cd8a:	0029      	movs	r1, r5
 800cd8c:	f7f3 fdcc 	bl	8000928 <__aeabi_dadd>
 800cd90:	0004      	movs	r4, r0
 800cd92:	000d      	movs	r5, r1
 800cd94:	f7f5 fac4 	bl	8002320 <__aeabi_d2iz>
 800cd98:	2200      	movs	r2, #0
 800cd9a:	0007      	movs	r7, r0
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	0020      	movs	r0, r4
 800cda0:	0029      	movs	r1, r5
 800cda2:	f7f3 fb4f 	bl	8000444 <__aeabi_dcmplt>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d009      	beq.n	800cdbe <_dtoa_r+0x152>
 800cdaa:	0038      	movs	r0, r7
 800cdac:	f7f5 faee 	bl	800238c <__aeabi_i2d>
 800cdb0:	002b      	movs	r3, r5
 800cdb2:	0022      	movs	r2, r4
 800cdb4:	f7f3 fb40 	bl	8000438 <__aeabi_dcmpeq>
 800cdb8:	4243      	negs	r3, r0
 800cdba:	4158      	adcs	r0, r3
 800cdbc:	1a3f      	subs	r7, r7, r0
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	9314      	str	r3, [sp, #80]	; 0x50
 800cdc2:	2f16      	cmp	r7, #22
 800cdc4:	d80d      	bhi.n	800cde2 <_dtoa_r+0x176>
 800cdc6:	4981      	ldr	r1, [pc, #516]	; (800cfcc <_dtoa_r+0x360>)
 800cdc8:	00fb      	lsls	r3, r7, #3
 800cdca:	18c9      	adds	r1, r1, r3
 800cdcc:	6808      	ldr	r0, [r1, #0]
 800cdce:	6849      	ldr	r1, [r1, #4]
 800cdd0:	9a06      	ldr	r2, [sp, #24]
 800cdd2:	9b07      	ldr	r3, [sp, #28]
 800cdd4:	f7f3 fb4a 	bl	800046c <__aeabi_dcmpgt>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d046      	beq.n	800ce6a <_dtoa_r+0x1fe>
 800cddc:	2300      	movs	r3, #0
 800cdde:	3f01      	subs	r7, #1
 800cde0:	9314      	str	r3, [sp, #80]	; 0x50
 800cde2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cde4:	1b9e      	subs	r6, r3, r6
 800cde6:	2300      	movs	r3, #0
 800cde8:	930a      	str	r3, [sp, #40]	; 0x28
 800cdea:	0033      	movs	r3, r6
 800cdec:	3b01      	subs	r3, #1
 800cdee:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdf0:	d504      	bpl.n	800cdfc <_dtoa_r+0x190>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	1b9b      	subs	r3, r3, r6
 800cdf6:	930a      	str	r3, [sp, #40]	; 0x28
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdfc:	2f00      	cmp	r7, #0
 800cdfe:	db36      	blt.n	800ce6e <_dtoa_r+0x202>
 800ce00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce02:	9711      	str	r7, [sp, #68]	; 0x44
 800ce04:	19db      	adds	r3, r3, r7
 800ce06:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce08:	2300      	movs	r3, #0
 800ce0a:	9304      	str	r3, [sp, #16]
 800ce0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ce0e:	2401      	movs	r4, #1
 800ce10:	2b09      	cmp	r3, #9
 800ce12:	d900      	bls.n	800ce16 <_dtoa_r+0x1aa>
 800ce14:	e084      	b.n	800cf20 <_dtoa_r+0x2b4>
 800ce16:	2b05      	cmp	r3, #5
 800ce18:	dd02      	ble.n	800ce20 <_dtoa_r+0x1b4>
 800ce1a:	2400      	movs	r4, #0
 800ce1c:	3b04      	subs	r3, #4
 800ce1e:	9320      	str	r3, [sp, #128]	; 0x80
 800ce20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ce22:	1e98      	subs	r0, r3, #2
 800ce24:	2803      	cmp	r0, #3
 800ce26:	d900      	bls.n	800ce2a <_dtoa_r+0x1be>
 800ce28:	e084      	b.n	800cf34 <_dtoa_r+0x2c8>
 800ce2a:	f7f3 f975 	bl	8000118 <__gnu_thumb1_case_uqi>
 800ce2e:	7775      	.short	0x7775
 800ce30:	6a28      	.short	0x6a28
 800ce32:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ce34:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ce36:	189e      	adds	r6, r3, r2
 800ce38:	4b65      	ldr	r3, [pc, #404]	; (800cfd0 <_dtoa_r+0x364>)
 800ce3a:	18f2      	adds	r2, r6, r3
 800ce3c:	2a20      	cmp	r2, #32
 800ce3e:	dd0f      	ble.n	800ce60 <_dtoa_r+0x1f4>
 800ce40:	2340      	movs	r3, #64	; 0x40
 800ce42:	1a9b      	subs	r3, r3, r2
 800ce44:	409c      	lsls	r4, r3
 800ce46:	4b63      	ldr	r3, [pc, #396]	; (800cfd4 <_dtoa_r+0x368>)
 800ce48:	9806      	ldr	r0, [sp, #24]
 800ce4a:	18f3      	adds	r3, r6, r3
 800ce4c:	40d8      	lsrs	r0, r3
 800ce4e:	4320      	orrs	r0, r4
 800ce50:	f7f5 fad6 	bl	8002400 <__aeabi_ui2d>
 800ce54:	2301      	movs	r3, #1
 800ce56:	4c60      	ldr	r4, [pc, #384]	; (800cfd8 <_dtoa_r+0x36c>)
 800ce58:	3e01      	subs	r6, #1
 800ce5a:	1909      	adds	r1, r1, r4
 800ce5c:	9316      	str	r3, [sp, #88]	; 0x58
 800ce5e:	e77c      	b.n	800cd5a <_dtoa_r+0xee>
 800ce60:	2320      	movs	r3, #32
 800ce62:	9806      	ldr	r0, [sp, #24]
 800ce64:	1a9b      	subs	r3, r3, r2
 800ce66:	4098      	lsls	r0, r3
 800ce68:	e7f2      	b.n	800ce50 <_dtoa_r+0x1e4>
 800ce6a:	9014      	str	r0, [sp, #80]	; 0x50
 800ce6c:	e7b9      	b.n	800cde2 <_dtoa_r+0x176>
 800ce6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce70:	1bdb      	subs	r3, r3, r7
 800ce72:	930a      	str	r3, [sp, #40]	; 0x28
 800ce74:	427b      	negs	r3, r7
 800ce76:	9304      	str	r3, [sp, #16]
 800ce78:	2300      	movs	r3, #0
 800ce7a:	9311      	str	r3, [sp, #68]	; 0x44
 800ce7c:	e7c6      	b.n	800ce0c <_dtoa_r+0x1a0>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	930d      	str	r3, [sp, #52]	; 0x34
 800ce82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	dd59      	ble.n	800cf3c <_dtoa_r+0x2d0>
 800ce88:	930c      	str	r3, [sp, #48]	; 0x30
 800ce8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce8c:	9a02      	ldr	r2, [sp, #8]
 800ce8e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800ce90:	2200      	movs	r2, #0
 800ce92:	606a      	str	r2, [r5, #4]
 800ce94:	3204      	adds	r2, #4
 800ce96:	0010      	movs	r0, r2
 800ce98:	3014      	adds	r0, #20
 800ce9a:	6869      	ldr	r1, [r5, #4]
 800ce9c:	4298      	cmp	r0, r3
 800ce9e:	d952      	bls.n	800cf46 <_dtoa_r+0x2da>
 800cea0:	9802      	ldr	r0, [sp, #8]
 800cea2:	f001 f824 	bl	800deee <_Balloc>
 800cea6:	9b02      	ldr	r3, [sp, #8]
 800cea8:	6028      	str	r0, [r5, #0]
 800ceaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	9308      	str	r3, [sp, #32]
 800ceb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb2:	2b0e      	cmp	r3, #14
 800ceb4:	d900      	bls.n	800ceb8 <_dtoa_r+0x24c>
 800ceb6:	e10a      	b.n	800d0ce <_dtoa_r+0x462>
 800ceb8:	2c00      	cmp	r4, #0
 800ceba:	d100      	bne.n	800cebe <_dtoa_r+0x252>
 800cebc:	e107      	b.n	800d0ce <_dtoa_r+0x462>
 800cebe:	9b06      	ldr	r3, [sp, #24]
 800cec0:	9c07      	ldr	r4, [sp, #28]
 800cec2:	9312      	str	r3, [sp, #72]	; 0x48
 800cec4:	9413      	str	r4, [sp, #76]	; 0x4c
 800cec6:	2f00      	cmp	r7, #0
 800cec8:	dc00      	bgt.n	800cecc <_dtoa_r+0x260>
 800ceca:	e089      	b.n	800cfe0 <_dtoa_r+0x374>
 800cecc:	210f      	movs	r1, #15
 800cece:	003a      	movs	r2, r7
 800ced0:	4b3e      	ldr	r3, [pc, #248]	; (800cfcc <_dtoa_r+0x360>)
 800ced2:	400a      	ands	r2, r1
 800ced4:	00d2      	lsls	r2, r2, #3
 800ced6:	189b      	adds	r3, r3, r2
 800ced8:	681d      	ldr	r5, [r3, #0]
 800ceda:	685e      	ldr	r6, [r3, #4]
 800cedc:	2302      	movs	r3, #2
 800cede:	113c      	asrs	r4, r7, #4
 800cee0:	930e      	str	r3, [sp, #56]	; 0x38
 800cee2:	06e3      	lsls	r3, r4, #27
 800cee4:	d50b      	bpl.n	800cefe <_dtoa_r+0x292>
 800cee6:	4b3d      	ldr	r3, [pc, #244]	; (800cfdc <_dtoa_r+0x370>)
 800cee8:	400c      	ands	r4, r1
 800ceea:	6a1a      	ldr	r2, [r3, #32]
 800ceec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceee:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cef0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cef2:	f7f4 f835 	bl	8000f60 <__aeabi_ddiv>
 800cef6:	2303      	movs	r3, #3
 800cef8:	9006      	str	r0, [sp, #24]
 800cefa:	9107      	str	r1, [sp, #28]
 800cefc:	930e      	str	r3, [sp, #56]	; 0x38
 800cefe:	2300      	movs	r3, #0
 800cf00:	e03a      	b.n	800cf78 <_dtoa_r+0x30c>
 800cf02:	2301      	movs	r3, #1
 800cf04:	930d      	str	r3, [sp, #52]	; 0x34
 800cf06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf08:	18fb      	adds	r3, r7, r3
 800cf0a:	930c      	str	r3, [sp, #48]	; 0x30
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	dcbb      	bgt.n	800ce8c <_dtoa_r+0x220>
 800cf14:	2301      	movs	r3, #1
 800cf16:	e7b9      	b.n	800ce8c <_dtoa_r+0x220>
 800cf18:	2300      	movs	r3, #0
 800cf1a:	e7b1      	b.n	800ce80 <_dtoa_r+0x214>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	e7f1      	b.n	800cf04 <_dtoa_r+0x298>
 800cf20:	2300      	movs	r3, #0
 800cf22:	940d      	str	r4, [sp, #52]	; 0x34
 800cf24:	9320      	str	r3, [sp, #128]	; 0x80
 800cf26:	3b01      	subs	r3, #1
 800cf28:	2200      	movs	r2, #0
 800cf2a:	930c      	str	r3, [sp, #48]	; 0x30
 800cf2c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf2e:	3313      	adds	r3, #19
 800cf30:	9221      	str	r2, [sp, #132]	; 0x84
 800cf32:	e7ab      	b.n	800ce8c <_dtoa_r+0x220>
 800cf34:	2301      	movs	r3, #1
 800cf36:	930d      	str	r3, [sp, #52]	; 0x34
 800cf38:	3b02      	subs	r3, #2
 800cf3a:	e7f5      	b.n	800cf28 <_dtoa_r+0x2bc>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	930c      	str	r3, [sp, #48]	; 0x30
 800cf40:	9309      	str	r3, [sp, #36]	; 0x24
 800cf42:	001a      	movs	r2, r3
 800cf44:	e7f4      	b.n	800cf30 <_dtoa_r+0x2c4>
 800cf46:	3101      	adds	r1, #1
 800cf48:	6069      	str	r1, [r5, #4]
 800cf4a:	0052      	lsls	r2, r2, #1
 800cf4c:	e7a3      	b.n	800ce96 <_dtoa_r+0x22a>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	421c      	tst	r4, r3
 800cf52:	d00e      	beq.n	800cf72 <_dtoa_r+0x306>
 800cf54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf56:	4a21      	ldr	r2, [pc, #132]	; (800cfdc <_dtoa_r+0x370>)
 800cf58:	3301      	adds	r3, #1
 800cf5a:	930e      	str	r3, [sp, #56]	; 0x38
 800cf5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf5e:	0028      	movs	r0, r5
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	189b      	adds	r3, r3, r2
 800cf64:	0031      	movs	r1, r6
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	f7f4 fc03 	bl	8001774 <__aeabi_dmul>
 800cf6e:	0005      	movs	r5, r0
 800cf70:	000e      	movs	r6, r1
 800cf72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf74:	1064      	asrs	r4, r4, #1
 800cf76:	3301      	adds	r3, #1
 800cf78:	9310      	str	r3, [sp, #64]	; 0x40
 800cf7a:	2c00      	cmp	r4, #0
 800cf7c:	d1e7      	bne.n	800cf4e <_dtoa_r+0x2e2>
 800cf7e:	9806      	ldr	r0, [sp, #24]
 800cf80:	9907      	ldr	r1, [sp, #28]
 800cf82:	002a      	movs	r2, r5
 800cf84:	0033      	movs	r3, r6
 800cf86:	f7f3 ffeb 	bl	8000f60 <__aeabi_ddiv>
 800cf8a:	9006      	str	r0, [sp, #24]
 800cf8c:	9107      	str	r1, [sp, #28]
 800cf8e:	e042      	b.n	800d016 <_dtoa_r+0x3aa>
 800cf90:	7ff00000 	.word	0x7ff00000
 800cf94:	0000270f 	.word	0x0000270f
 800cf98:	08010001 	.word	0x08010001
 800cf9c:	08010004 	.word	0x08010004
 800cfa0:	0800ff7a 	.word	0x0800ff7a
 800cfa4:	0800ff7b 	.word	0x0800ff7b
 800cfa8:	3ff00000 	.word	0x3ff00000
 800cfac:	fffffc01 	.word	0xfffffc01
 800cfb0:	3ff80000 	.word	0x3ff80000
 800cfb4:	636f4361 	.word	0x636f4361
 800cfb8:	3fd287a7 	.word	0x3fd287a7
 800cfbc:	8b60c8b3 	.word	0x8b60c8b3
 800cfc0:	3fc68a28 	.word	0x3fc68a28
 800cfc4:	509f79fb 	.word	0x509f79fb
 800cfc8:	3fd34413 	.word	0x3fd34413
 800cfcc:	08010038 	.word	0x08010038
 800cfd0:	00000432 	.word	0x00000432
 800cfd4:	00000412 	.word	0x00000412
 800cfd8:	fe100000 	.word	0xfe100000
 800cfdc:	08010010 	.word	0x08010010
 800cfe0:	2302      	movs	r3, #2
 800cfe2:	930e      	str	r3, [sp, #56]	; 0x38
 800cfe4:	2f00      	cmp	r7, #0
 800cfe6:	d016      	beq.n	800d016 <_dtoa_r+0x3aa>
 800cfe8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cfea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cfec:	427c      	negs	r4, r7
 800cfee:	330d      	adds	r3, #13
 800cff0:	4023      	ands	r3, r4
 800cff2:	4ace      	ldr	r2, [pc, #824]	; (800d32c <_dtoa_r+0x6c0>)
 800cff4:	00db      	lsls	r3, r3, #3
 800cff6:	18d3      	adds	r3, r2, r3
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	f7f4 fbba 	bl	8001774 <__aeabi_dmul>
 800d000:	2300      	movs	r3, #0
 800d002:	2601      	movs	r6, #1
 800d004:	001d      	movs	r5, r3
 800d006:	9006      	str	r0, [sp, #24]
 800d008:	9107      	str	r1, [sp, #28]
 800d00a:	1124      	asrs	r4, r4, #4
 800d00c:	2c00      	cmp	r4, #0
 800d00e:	d000      	beq.n	800d012 <_dtoa_r+0x3a6>
 800d010:	e08c      	b.n	800d12c <_dtoa_r+0x4c0>
 800d012:	2b00      	cmp	r3, #0
 800d014:	d1b9      	bne.n	800cf8a <_dtoa_r+0x31e>
 800d016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d100      	bne.n	800d01e <_dtoa_r+0x3b2>
 800d01c:	e096      	b.n	800d14c <_dtoa_r+0x4e0>
 800d01e:	9c06      	ldr	r4, [sp, #24]
 800d020:	9d07      	ldr	r5, [sp, #28]
 800d022:	2200      	movs	r2, #0
 800d024:	4bc2      	ldr	r3, [pc, #776]	; (800d330 <_dtoa_r+0x6c4>)
 800d026:	0020      	movs	r0, r4
 800d028:	0029      	movs	r1, r5
 800d02a:	f7f3 fa0b 	bl	8000444 <__aeabi_dcmplt>
 800d02e:	2800      	cmp	r0, #0
 800d030:	d100      	bne.n	800d034 <_dtoa_r+0x3c8>
 800d032:	e08b      	b.n	800d14c <_dtoa_r+0x4e0>
 800d034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d036:	2b00      	cmp	r3, #0
 800d038:	d100      	bne.n	800d03c <_dtoa_r+0x3d0>
 800d03a:	e087      	b.n	800d14c <_dtoa_r+0x4e0>
 800d03c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d03e:	2b00      	cmp	r3, #0
 800d040:	dd41      	ble.n	800d0c6 <_dtoa_r+0x45a>
 800d042:	4bbc      	ldr	r3, [pc, #752]	; (800d334 <_dtoa_r+0x6c8>)
 800d044:	2200      	movs	r2, #0
 800d046:	0020      	movs	r0, r4
 800d048:	0029      	movs	r1, r5
 800d04a:	f7f4 fb93 	bl	8001774 <__aeabi_dmul>
 800d04e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d050:	9006      	str	r0, [sp, #24]
 800d052:	9107      	str	r1, [sp, #28]
 800d054:	3301      	adds	r3, #1
 800d056:	930e      	str	r3, [sp, #56]	; 0x38
 800d058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d05a:	1e7e      	subs	r6, r7, #1
 800d05c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d05e:	9310      	str	r3, [sp, #64]	; 0x40
 800d060:	f7f5 f994 	bl	800238c <__aeabi_i2d>
 800d064:	9a06      	ldr	r2, [sp, #24]
 800d066:	9b07      	ldr	r3, [sp, #28]
 800d068:	f7f4 fb84 	bl	8001774 <__aeabi_dmul>
 800d06c:	2200      	movs	r2, #0
 800d06e:	4bb2      	ldr	r3, [pc, #712]	; (800d338 <_dtoa_r+0x6cc>)
 800d070:	f7f3 fc5a 	bl	8000928 <__aeabi_dadd>
 800d074:	4ab1      	ldr	r2, [pc, #708]	; (800d33c <_dtoa_r+0x6d0>)
 800d076:	900e      	str	r0, [sp, #56]	; 0x38
 800d078:	910f      	str	r1, [sp, #60]	; 0x3c
 800d07a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800d07c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d07e:	4694      	mov	ip, r2
 800d080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d082:	4463      	add	r3, ip
 800d084:	9315      	str	r3, [sp, #84]	; 0x54
 800d086:	001d      	movs	r5, r3
 800d088:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d161      	bne.n	800d152 <_dtoa_r+0x4e6>
 800d08e:	9806      	ldr	r0, [sp, #24]
 800d090:	9907      	ldr	r1, [sp, #28]
 800d092:	2200      	movs	r2, #0
 800d094:	4baa      	ldr	r3, [pc, #680]	; (800d340 <_dtoa_r+0x6d4>)
 800d096:	f7f4 fddf 	bl	8001c58 <__aeabi_dsub>
 800d09a:	0022      	movs	r2, r4
 800d09c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d09e:	9006      	str	r0, [sp, #24]
 800d0a0:	9107      	str	r1, [sp, #28]
 800d0a2:	f7f3 f9e3 	bl	800046c <__aeabi_dcmpgt>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d000      	beq.n	800d0ac <_dtoa_r+0x440>
 800d0aa:	e2a8      	b.n	800d5fe <_dtoa_r+0x992>
 800d0ac:	48a5      	ldr	r0, [pc, #660]	; (800d344 <_dtoa_r+0x6d8>)
 800d0ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d0b0:	4684      	mov	ip, r0
 800d0b2:	4461      	add	r1, ip
 800d0b4:	000b      	movs	r3, r1
 800d0b6:	9806      	ldr	r0, [sp, #24]
 800d0b8:	9907      	ldr	r1, [sp, #28]
 800d0ba:	0022      	movs	r2, r4
 800d0bc:	f7f3 f9c2 	bl	8000444 <__aeabi_dcmplt>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d000      	beq.n	800d0c6 <_dtoa_r+0x45a>
 800d0c4:	e295      	b.n	800d5f2 <_dtoa_r+0x986>
 800d0c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d0ca:	9306      	str	r3, [sp, #24]
 800d0cc:	9407      	str	r4, [sp, #28]
 800d0ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	da00      	bge.n	800d0d6 <_dtoa_r+0x46a>
 800d0d4:	e15c      	b.n	800d390 <_dtoa_r+0x724>
 800d0d6:	2f0e      	cmp	r7, #14
 800d0d8:	dd00      	ble.n	800d0dc <_dtoa_r+0x470>
 800d0da:	e159      	b.n	800d390 <_dtoa_r+0x724>
 800d0dc:	4b93      	ldr	r3, [pc, #588]	; (800d32c <_dtoa_r+0x6c0>)
 800d0de:	00fa      	lsls	r2, r7, #3
 800d0e0:	189b      	adds	r3, r3, r2
 800d0e2:	685c      	ldr	r4, [r3, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	9304      	str	r3, [sp, #16]
 800d0e8:	9405      	str	r4, [sp, #20]
 800d0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	db00      	blt.n	800d0f2 <_dtoa_r+0x486>
 800d0f0:	e0d8      	b.n	800d2a4 <_dtoa_r+0x638>
 800d0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	dd00      	ble.n	800d0fa <_dtoa_r+0x48e>
 800d0f8:	e0d4      	b.n	800d2a4 <_dtoa_r+0x638>
 800d0fa:	d000      	beq.n	800d0fe <_dtoa_r+0x492>
 800d0fc:	e27d      	b.n	800d5fa <_dtoa_r+0x98e>
 800d0fe:	9804      	ldr	r0, [sp, #16]
 800d100:	9905      	ldr	r1, [sp, #20]
 800d102:	2200      	movs	r2, #0
 800d104:	4b8e      	ldr	r3, [pc, #568]	; (800d340 <_dtoa_r+0x6d4>)
 800d106:	f7f4 fb35 	bl	8001774 <__aeabi_dmul>
 800d10a:	9a06      	ldr	r2, [sp, #24]
 800d10c:	9b07      	ldr	r3, [sp, #28]
 800d10e:	f7f3 f9b7 	bl	8000480 <__aeabi_dcmpge>
 800d112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d114:	9304      	str	r3, [sp, #16]
 800d116:	001e      	movs	r6, r3
 800d118:	2800      	cmp	r0, #0
 800d11a:	d000      	beq.n	800d11e <_dtoa_r+0x4b2>
 800d11c:	e24f      	b.n	800d5be <_dtoa_r+0x952>
 800d11e:	9b08      	ldr	r3, [sp, #32]
 800d120:	9a08      	ldr	r2, [sp, #32]
 800d122:	1c5d      	adds	r5, r3, #1
 800d124:	2331      	movs	r3, #49	; 0x31
 800d126:	3701      	adds	r7, #1
 800d128:	7013      	strb	r3, [r2, #0]
 800d12a:	e24b      	b.n	800d5c4 <_dtoa_r+0x958>
 800d12c:	4234      	tst	r4, r6
 800d12e:	d00a      	beq.n	800d146 <_dtoa_r+0x4da>
 800d130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d132:	4a85      	ldr	r2, [pc, #532]	; (800d348 <_dtoa_r+0x6dc>)
 800d134:	3301      	adds	r3, #1
 800d136:	930e      	str	r3, [sp, #56]	; 0x38
 800d138:	00eb      	lsls	r3, r5, #3
 800d13a:	189b      	adds	r3, r3, r2
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	f7f4 fb18 	bl	8001774 <__aeabi_dmul>
 800d144:	0033      	movs	r3, r6
 800d146:	1064      	asrs	r4, r4, #1
 800d148:	3501      	adds	r5, #1
 800d14a:	e75f      	b.n	800d00c <_dtoa_r+0x3a0>
 800d14c:	003e      	movs	r6, r7
 800d14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d150:	e784      	b.n	800d05c <_dtoa_r+0x3f0>
 800d152:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d154:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d156:	1e5a      	subs	r2, r3, #1
 800d158:	4b74      	ldr	r3, [pc, #464]	; (800d32c <_dtoa_r+0x6c0>)
 800d15a:	00d2      	lsls	r2, r2, #3
 800d15c:	189b      	adds	r3, r3, r2
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	2900      	cmp	r1, #0
 800d164:	d049      	beq.n	800d1fa <_dtoa_r+0x58e>
 800d166:	2000      	movs	r0, #0
 800d168:	4978      	ldr	r1, [pc, #480]	; (800d34c <_dtoa_r+0x6e0>)
 800d16a:	f7f3 fef9 	bl	8000f60 <__aeabi_ddiv>
 800d16e:	002b      	movs	r3, r5
 800d170:	0022      	movs	r2, r4
 800d172:	f7f4 fd71 	bl	8001c58 <__aeabi_dsub>
 800d176:	9b08      	ldr	r3, [sp, #32]
 800d178:	900e      	str	r0, [sp, #56]	; 0x38
 800d17a:	910f      	str	r1, [sp, #60]	; 0x3c
 800d17c:	9315      	str	r3, [sp, #84]	; 0x54
 800d17e:	9806      	ldr	r0, [sp, #24]
 800d180:	9907      	ldr	r1, [sp, #28]
 800d182:	f7f5 f8cd 	bl	8002320 <__aeabi_d2iz>
 800d186:	0004      	movs	r4, r0
 800d188:	f7f5 f900 	bl	800238c <__aeabi_i2d>
 800d18c:	0002      	movs	r2, r0
 800d18e:	000b      	movs	r3, r1
 800d190:	9806      	ldr	r0, [sp, #24]
 800d192:	9907      	ldr	r1, [sp, #28]
 800d194:	f7f4 fd60 	bl	8001c58 <__aeabi_dsub>
 800d198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d19a:	3430      	adds	r4, #48	; 0x30
 800d19c:	1c5d      	adds	r5, r3, #1
 800d19e:	701c      	strb	r4, [r3, #0]
 800d1a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1a4:	9006      	str	r0, [sp, #24]
 800d1a6:	9107      	str	r1, [sp, #28]
 800d1a8:	f7f3 f94c 	bl	8000444 <__aeabi_dcmplt>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d16c      	bne.n	800d28a <_dtoa_r+0x61e>
 800d1b0:	9a06      	ldr	r2, [sp, #24]
 800d1b2:	9b07      	ldr	r3, [sp, #28]
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	495e      	ldr	r1, [pc, #376]	; (800d330 <_dtoa_r+0x6c4>)
 800d1b8:	f7f4 fd4e 	bl	8001c58 <__aeabi_dsub>
 800d1bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1c0:	f7f3 f940 	bl	8000444 <__aeabi_dcmplt>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d000      	beq.n	800d1ca <_dtoa_r+0x55e>
 800d1c8:	e0c3      	b.n	800d352 <_dtoa_r+0x6e6>
 800d1ca:	9b08      	ldr	r3, [sp, #32]
 800d1cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d1ce:	1aeb      	subs	r3, r5, r3
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	dc00      	bgt.n	800d1d6 <_dtoa_r+0x56a>
 800d1d4:	e777      	b.n	800d0c6 <_dtoa_r+0x45a>
 800d1d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d1d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1da:	2200      	movs	r2, #0
 800d1dc:	4b55      	ldr	r3, [pc, #340]	; (800d334 <_dtoa_r+0x6c8>)
 800d1de:	f7f4 fac9 	bl	8001774 <__aeabi_dmul>
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	900e      	str	r0, [sp, #56]	; 0x38
 800d1e6:	910f      	str	r1, [sp, #60]	; 0x3c
 800d1e8:	9806      	ldr	r0, [sp, #24]
 800d1ea:	9907      	ldr	r1, [sp, #28]
 800d1ec:	4b51      	ldr	r3, [pc, #324]	; (800d334 <_dtoa_r+0x6c8>)
 800d1ee:	f7f4 fac1 	bl	8001774 <__aeabi_dmul>
 800d1f2:	9515      	str	r5, [sp, #84]	; 0x54
 800d1f4:	9006      	str	r0, [sp, #24]
 800d1f6:	9107      	str	r1, [sp, #28]
 800d1f8:	e7c1      	b.n	800d17e <_dtoa_r+0x512>
 800d1fa:	0020      	movs	r0, r4
 800d1fc:	0029      	movs	r1, r5
 800d1fe:	f7f4 fab9 	bl	8001774 <__aeabi_dmul>
 800d202:	9c08      	ldr	r4, [sp, #32]
 800d204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d206:	0023      	movs	r3, r4
 800d208:	4694      	mov	ip, r2
 800d20a:	900e      	str	r0, [sp, #56]	; 0x38
 800d20c:	910f      	str	r1, [sp, #60]	; 0x3c
 800d20e:	4463      	add	r3, ip
 800d210:	9315      	str	r3, [sp, #84]	; 0x54
 800d212:	9806      	ldr	r0, [sp, #24]
 800d214:	9907      	ldr	r1, [sp, #28]
 800d216:	f7f5 f883 	bl	8002320 <__aeabi_d2iz>
 800d21a:	0005      	movs	r5, r0
 800d21c:	f7f5 f8b6 	bl	800238c <__aeabi_i2d>
 800d220:	000b      	movs	r3, r1
 800d222:	0002      	movs	r2, r0
 800d224:	9806      	ldr	r0, [sp, #24]
 800d226:	9907      	ldr	r1, [sp, #28]
 800d228:	f7f4 fd16 	bl	8001c58 <__aeabi_dsub>
 800d22c:	3530      	adds	r5, #48	; 0x30
 800d22e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d230:	7025      	strb	r5, [r4, #0]
 800d232:	3401      	adds	r4, #1
 800d234:	9006      	str	r0, [sp, #24]
 800d236:	9107      	str	r1, [sp, #28]
 800d238:	42a3      	cmp	r3, r4
 800d23a:	d12a      	bne.n	800d292 <_dtoa_r+0x626>
 800d23c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d23e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d240:	9a08      	ldr	r2, [sp, #32]
 800d242:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d244:	4694      	mov	ip, r2
 800d246:	4463      	add	r3, ip
 800d248:	2200      	movs	r2, #0
 800d24a:	001d      	movs	r5, r3
 800d24c:	4b3f      	ldr	r3, [pc, #252]	; (800d34c <_dtoa_r+0x6e0>)
 800d24e:	f7f3 fb6b 	bl	8000928 <__aeabi_dadd>
 800d252:	0002      	movs	r2, r0
 800d254:	000b      	movs	r3, r1
 800d256:	9806      	ldr	r0, [sp, #24]
 800d258:	9907      	ldr	r1, [sp, #28]
 800d25a:	f7f3 f907 	bl	800046c <__aeabi_dcmpgt>
 800d25e:	2800      	cmp	r0, #0
 800d260:	d000      	beq.n	800d264 <_dtoa_r+0x5f8>
 800d262:	e076      	b.n	800d352 <_dtoa_r+0x6e6>
 800d264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d268:	2000      	movs	r0, #0
 800d26a:	4938      	ldr	r1, [pc, #224]	; (800d34c <_dtoa_r+0x6e0>)
 800d26c:	f7f4 fcf4 	bl	8001c58 <__aeabi_dsub>
 800d270:	0002      	movs	r2, r0
 800d272:	000b      	movs	r3, r1
 800d274:	9806      	ldr	r0, [sp, #24]
 800d276:	9907      	ldr	r1, [sp, #28]
 800d278:	f7f3 f8e4 	bl	8000444 <__aeabi_dcmplt>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d100      	bne.n	800d282 <_dtoa_r+0x616>
 800d280:	e721      	b.n	800d0c6 <_dtoa_r+0x45a>
 800d282:	1e6b      	subs	r3, r5, #1
 800d284:	781a      	ldrb	r2, [r3, #0]
 800d286:	2a30      	cmp	r2, #48	; 0x30
 800d288:	d001      	beq.n	800d28e <_dtoa_r+0x622>
 800d28a:	0037      	movs	r7, r6
 800d28c:	e03f      	b.n	800d30e <_dtoa_r+0x6a2>
 800d28e:	001d      	movs	r5, r3
 800d290:	e7f7      	b.n	800d282 <_dtoa_r+0x616>
 800d292:	9806      	ldr	r0, [sp, #24]
 800d294:	9907      	ldr	r1, [sp, #28]
 800d296:	2200      	movs	r2, #0
 800d298:	4b26      	ldr	r3, [pc, #152]	; (800d334 <_dtoa_r+0x6c8>)
 800d29a:	f7f4 fa6b 	bl	8001774 <__aeabi_dmul>
 800d29e:	9006      	str	r0, [sp, #24]
 800d2a0:	9107      	str	r1, [sp, #28]
 800d2a2:	e7b6      	b.n	800d212 <_dtoa_r+0x5a6>
 800d2a4:	9e08      	ldr	r6, [sp, #32]
 800d2a6:	9a04      	ldr	r2, [sp, #16]
 800d2a8:	9b05      	ldr	r3, [sp, #20]
 800d2aa:	9806      	ldr	r0, [sp, #24]
 800d2ac:	9907      	ldr	r1, [sp, #28]
 800d2ae:	f7f3 fe57 	bl	8000f60 <__aeabi_ddiv>
 800d2b2:	f7f5 f835 	bl	8002320 <__aeabi_d2iz>
 800d2b6:	0004      	movs	r4, r0
 800d2b8:	f7f5 f868 	bl	800238c <__aeabi_i2d>
 800d2bc:	9a04      	ldr	r2, [sp, #16]
 800d2be:	9b05      	ldr	r3, [sp, #20]
 800d2c0:	f7f4 fa58 	bl	8001774 <__aeabi_dmul>
 800d2c4:	0002      	movs	r2, r0
 800d2c6:	000b      	movs	r3, r1
 800d2c8:	9806      	ldr	r0, [sp, #24]
 800d2ca:	9907      	ldr	r1, [sp, #28]
 800d2cc:	f7f4 fcc4 	bl	8001c58 <__aeabi_dsub>
 800d2d0:	0023      	movs	r3, r4
 800d2d2:	3330      	adds	r3, #48	; 0x30
 800d2d4:	7033      	strb	r3, [r6, #0]
 800d2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2d8:	9b08      	ldr	r3, [sp, #32]
 800d2da:	1c75      	adds	r5, r6, #1
 800d2dc:	1aeb      	subs	r3, r5, r3
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d148      	bne.n	800d374 <_dtoa_r+0x708>
 800d2e2:	0002      	movs	r2, r0
 800d2e4:	000b      	movs	r3, r1
 800d2e6:	f7f3 fb1f 	bl	8000928 <__aeabi_dadd>
 800d2ea:	9a04      	ldr	r2, [sp, #16]
 800d2ec:	9b05      	ldr	r3, [sp, #20]
 800d2ee:	9006      	str	r0, [sp, #24]
 800d2f0:	9107      	str	r1, [sp, #28]
 800d2f2:	f7f3 f8bb 	bl	800046c <__aeabi_dcmpgt>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d12a      	bne.n	800d350 <_dtoa_r+0x6e4>
 800d2fa:	9a04      	ldr	r2, [sp, #16]
 800d2fc:	9b05      	ldr	r3, [sp, #20]
 800d2fe:	9806      	ldr	r0, [sp, #24]
 800d300:	9907      	ldr	r1, [sp, #28]
 800d302:	f7f3 f899 	bl	8000438 <__aeabi_dcmpeq>
 800d306:	2800      	cmp	r0, #0
 800d308:	d001      	beq.n	800d30e <_dtoa_r+0x6a2>
 800d30a:	07e3      	lsls	r3, r4, #31
 800d30c:	d420      	bmi.n	800d350 <_dtoa_r+0x6e4>
 800d30e:	9903      	ldr	r1, [sp, #12]
 800d310:	9802      	ldr	r0, [sp, #8]
 800d312:	f000 fe24 	bl	800df5e <_Bfree>
 800d316:	2300      	movs	r3, #0
 800d318:	702b      	strb	r3, [r5, #0]
 800d31a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d31c:	3701      	adds	r7, #1
 800d31e:	601f      	str	r7, [r3, #0]
 800d320:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d322:	2b00      	cmp	r3, #0
 800d324:	d100      	bne.n	800d328 <_dtoa_r+0x6bc>
 800d326:	e4e6      	b.n	800ccf6 <_dtoa_r+0x8a>
 800d328:	601d      	str	r5, [r3, #0]
 800d32a:	e4e4      	b.n	800ccf6 <_dtoa_r+0x8a>
 800d32c:	08010038 	.word	0x08010038
 800d330:	3ff00000 	.word	0x3ff00000
 800d334:	40240000 	.word	0x40240000
 800d338:	401c0000 	.word	0x401c0000
 800d33c:	fcc00000 	.word	0xfcc00000
 800d340:	40140000 	.word	0x40140000
 800d344:	7cc00000 	.word	0x7cc00000
 800d348:	08010010 	.word	0x08010010
 800d34c:	3fe00000 	.word	0x3fe00000
 800d350:	003e      	movs	r6, r7
 800d352:	1e6b      	subs	r3, r5, #1
 800d354:	781a      	ldrb	r2, [r3, #0]
 800d356:	2a39      	cmp	r2, #57	; 0x39
 800d358:	d106      	bne.n	800d368 <_dtoa_r+0x6fc>
 800d35a:	9a08      	ldr	r2, [sp, #32]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d107      	bne.n	800d370 <_dtoa_r+0x704>
 800d360:	2330      	movs	r3, #48	; 0x30
 800d362:	7013      	strb	r3, [r2, #0]
 800d364:	0013      	movs	r3, r2
 800d366:	3601      	adds	r6, #1
 800d368:	781a      	ldrb	r2, [r3, #0]
 800d36a:	3201      	adds	r2, #1
 800d36c:	701a      	strb	r2, [r3, #0]
 800d36e:	e78c      	b.n	800d28a <_dtoa_r+0x61e>
 800d370:	001d      	movs	r5, r3
 800d372:	e7ee      	b.n	800d352 <_dtoa_r+0x6e6>
 800d374:	2200      	movs	r2, #0
 800d376:	4ba4      	ldr	r3, [pc, #656]	; (800d608 <_dtoa_r+0x99c>)
 800d378:	f7f4 f9fc 	bl	8001774 <__aeabi_dmul>
 800d37c:	2200      	movs	r2, #0
 800d37e:	2300      	movs	r3, #0
 800d380:	9006      	str	r0, [sp, #24]
 800d382:	9107      	str	r1, [sp, #28]
 800d384:	002e      	movs	r6, r5
 800d386:	f7f3 f857 	bl	8000438 <__aeabi_dcmpeq>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d08b      	beq.n	800d2a6 <_dtoa_r+0x63a>
 800d38e:	e7be      	b.n	800d30e <_dtoa_r+0x6a2>
 800d390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d392:	2a00      	cmp	r2, #0
 800d394:	d100      	bne.n	800d398 <_dtoa_r+0x72c>
 800d396:	e0da      	b.n	800d54e <_dtoa_r+0x8e2>
 800d398:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d39a:	2a01      	cmp	r2, #1
 800d39c:	dd00      	ble.n	800d3a0 <_dtoa_r+0x734>
 800d39e:	e0bd      	b.n	800d51c <_dtoa_r+0x8b0>
 800d3a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d3a2:	2a00      	cmp	r2, #0
 800d3a4:	d100      	bne.n	800d3a8 <_dtoa_r+0x73c>
 800d3a6:	e0b5      	b.n	800d514 <_dtoa_r+0x8a8>
 800d3a8:	4a98      	ldr	r2, [pc, #608]	; (800d60c <_dtoa_r+0x9a0>)
 800d3aa:	189b      	adds	r3, r3, r2
 800d3ac:	9d04      	ldr	r5, [sp, #16]
 800d3ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d3b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3b2:	2101      	movs	r1, #1
 800d3b4:	18d2      	adds	r2, r2, r3
 800d3b6:	920a      	str	r2, [sp, #40]	; 0x28
 800d3b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3ba:	9802      	ldr	r0, [sp, #8]
 800d3bc:	18d3      	adds	r3, r2, r3
 800d3be:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3c0:	f000 feab 	bl	800e11a <__i2b>
 800d3c4:	0006      	movs	r6, r0
 800d3c6:	2c00      	cmp	r4, #0
 800d3c8:	dd0e      	ble.n	800d3e8 <_dtoa_r+0x77c>
 800d3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	dd0b      	ble.n	800d3e8 <_dtoa_r+0x77c>
 800d3d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3d2:	0023      	movs	r3, r4
 800d3d4:	4294      	cmp	r4, r2
 800d3d6:	dd00      	ble.n	800d3da <_dtoa_r+0x76e>
 800d3d8:	0013      	movs	r3, r2
 800d3da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3dc:	1ae4      	subs	r4, r4, r3
 800d3de:	1ad2      	subs	r2, r2, r3
 800d3e0:	920a      	str	r2, [sp, #40]	; 0x28
 800d3e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3e8:	9b04      	ldr	r3, [sp, #16]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d01f      	beq.n	800d42e <_dtoa_r+0x7c2>
 800d3ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d100      	bne.n	800d3f6 <_dtoa_r+0x78a>
 800d3f4:	e0af      	b.n	800d556 <_dtoa_r+0x8ea>
 800d3f6:	2d00      	cmp	r5, #0
 800d3f8:	d011      	beq.n	800d41e <_dtoa_r+0x7b2>
 800d3fa:	0031      	movs	r1, r6
 800d3fc:	002a      	movs	r2, r5
 800d3fe:	9802      	ldr	r0, [sp, #8]
 800d400:	f000 ff24 	bl	800e24c <__pow5mult>
 800d404:	9a03      	ldr	r2, [sp, #12]
 800d406:	0001      	movs	r1, r0
 800d408:	0006      	movs	r6, r0
 800d40a:	9802      	ldr	r0, [sp, #8]
 800d40c:	f000 fe8e 	bl	800e12c <__multiply>
 800d410:	9903      	ldr	r1, [sp, #12]
 800d412:	9010      	str	r0, [sp, #64]	; 0x40
 800d414:	9802      	ldr	r0, [sp, #8]
 800d416:	f000 fda2 	bl	800df5e <_Bfree>
 800d41a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d41c:	9303      	str	r3, [sp, #12]
 800d41e:	9b04      	ldr	r3, [sp, #16]
 800d420:	1b5a      	subs	r2, r3, r5
 800d422:	d004      	beq.n	800d42e <_dtoa_r+0x7c2>
 800d424:	9903      	ldr	r1, [sp, #12]
 800d426:	9802      	ldr	r0, [sp, #8]
 800d428:	f000 ff10 	bl	800e24c <__pow5mult>
 800d42c:	9003      	str	r0, [sp, #12]
 800d42e:	2101      	movs	r1, #1
 800d430:	9802      	ldr	r0, [sp, #8]
 800d432:	f000 fe72 	bl	800e11a <__i2b>
 800d436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d438:	9004      	str	r0, [sp, #16]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d100      	bne.n	800d440 <_dtoa_r+0x7d4>
 800d43e:	e1e3      	b.n	800d808 <_dtoa_r+0xb9c>
 800d440:	001a      	movs	r2, r3
 800d442:	0001      	movs	r1, r0
 800d444:	9802      	ldr	r0, [sp, #8]
 800d446:	f000 ff01 	bl	800e24c <__pow5mult>
 800d44a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d44c:	9004      	str	r0, [sp, #16]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	dd00      	ble.n	800d454 <_dtoa_r+0x7e8>
 800d452:	e082      	b.n	800d55a <_dtoa_r+0x8ee>
 800d454:	2500      	movs	r5, #0
 800d456:	9b06      	ldr	r3, [sp, #24]
 800d458:	42ab      	cmp	r3, r5
 800d45a:	d10e      	bne.n	800d47a <_dtoa_r+0x80e>
 800d45c:	9b07      	ldr	r3, [sp, #28]
 800d45e:	031b      	lsls	r3, r3, #12
 800d460:	42ab      	cmp	r3, r5
 800d462:	d10a      	bne.n	800d47a <_dtoa_r+0x80e>
 800d464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d466:	9a07      	ldr	r2, [sp, #28]
 800d468:	4213      	tst	r3, r2
 800d46a:	d006      	beq.n	800d47a <_dtoa_r+0x80e>
 800d46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d46e:	3501      	adds	r5, #1
 800d470:	3301      	adds	r3, #1
 800d472:	930a      	str	r3, [sp, #40]	; 0x28
 800d474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d476:	3301      	adds	r3, #1
 800d478:	930b      	str	r3, [sp, #44]	; 0x2c
 800d47a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d47c:	2001      	movs	r0, #1
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d16c      	bne.n	800d55c <_dtoa_r+0x8f0>
 800d482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d484:	1818      	adds	r0, r3, r0
 800d486:	231f      	movs	r3, #31
 800d488:	4018      	ands	r0, r3
 800d48a:	d07e      	beq.n	800d58a <_dtoa_r+0x91e>
 800d48c:	3301      	adds	r3, #1
 800d48e:	1a1b      	subs	r3, r3, r0
 800d490:	2b04      	cmp	r3, #4
 800d492:	dd70      	ble.n	800d576 <_dtoa_r+0x90a>
 800d494:	231c      	movs	r3, #28
 800d496:	1a18      	subs	r0, r3, r0
 800d498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d49a:	1824      	adds	r4, r4, r0
 800d49c:	181b      	adds	r3, r3, r0
 800d49e:	930a      	str	r3, [sp, #40]	; 0x28
 800d4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4a2:	181b      	adds	r3, r3, r0
 800d4a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	dd05      	ble.n	800d4b8 <_dtoa_r+0x84c>
 800d4ac:	001a      	movs	r2, r3
 800d4ae:	9903      	ldr	r1, [sp, #12]
 800d4b0:	9802      	ldr	r0, [sp, #8]
 800d4b2:	f000 ff1d 	bl	800e2f0 <__lshift>
 800d4b6:	9003      	str	r0, [sp, #12]
 800d4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	dd05      	ble.n	800d4ca <_dtoa_r+0x85e>
 800d4be:	001a      	movs	r2, r3
 800d4c0:	9904      	ldr	r1, [sp, #16]
 800d4c2:	9802      	ldr	r0, [sp, #8]
 800d4c4:	f000 ff14 	bl	800e2f0 <__lshift>
 800d4c8:	9004      	str	r0, [sp, #16]
 800d4ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d05e      	beq.n	800d58e <_dtoa_r+0x922>
 800d4d0:	9904      	ldr	r1, [sp, #16]
 800d4d2:	9803      	ldr	r0, [sp, #12]
 800d4d4:	f000 ff5e 	bl	800e394 <__mcmp>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	da58      	bge.n	800d58e <_dtoa_r+0x922>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	220a      	movs	r2, #10
 800d4e0:	9903      	ldr	r1, [sp, #12]
 800d4e2:	9802      	ldr	r0, [sp, #8]
 800d4e4:	f000 fd54 	bl	800df90 <__multadd>
 800d4e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4ea:	3f01      	subs	r7, #1
 800d4ec:	9003      	str	r0, [sp, #12]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d100      	bne.n	800d4f4 <_dtoa_r+0x888>
 800d4f2:	e190      	b.n	800d816 <_dtoa_r+0xbaa>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	0031      	movs	r1, r6
 800d4f8:	220a      	movs	r2, #10
 800d4fa:	9802      	ldr	r0, [sp, #8]
 800d4fc:	f000 fd48 	bl	800df90 <__multadd>
 800d500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d502:	0006      	movs	r6, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	dd00      	ble.n	800d50a <_dtoa_r+0x89e>
 800d508:	e088      	b.n	800d61c <_dtoa_r+0x9b0>
 800d50a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	dc00      	bgt.n	800d512 <_dtoa_r+0x8a6>
 800d510:	e084      	b.n	800d61c <_dtoa_r+0x9b0>
 800d512:	e044      	b.n	800d59e <_dtoa_r+0x932>
 800d514:	2336      	movs	r3, #54	; 0x36
 800d516:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d518:	1a9b      	subs	r3, r3, r2
 800d51a:	e747      	b.n	800d3ac <_dtoa_r+0x740>
 800d51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d51e:	1e5d      	subs	r5, r3, #1
 800d520:	9b04      	ldr	r3, [sp, #16]
 800d522:	42ab      	cmp	r3, r5
 800d524:	db08      	blt.n	800d538 <_dtoa_r+0x8cc>
 800d526:	1b5d      	subs	r5, r3, r5
 800d528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	da0c      	bge.n	800d548 <_dtoa_r+0x8dc>
 800d52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d532:	1a9c      	subs	r4, r3, r2
 800d534:	2300      	movs	r3, #0
 800d536:	e73b      	b.n	800d3b0 <_dtoa_r+0x744>
 800d538:	9b04      	ldr	r3, [sp, #16]
 800d53a:	9504      	str	r5, [sp, #16]
 800d53c:	1aea      	subs	r2, r5, r3
 800d53e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d540:	2500      	movs	r5, #0
 800d542:	189b      	adds	r3, r3, r2
 800d544:	9311      	str	r3, [sp, #68]	; 0x44
 800d546:	e7ef      	b.n	800d528 <_dtoa_r+0x8bc>
 800d548:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d54c:	e730      	b.n	800d3b0 <_dtoa_r+0x744>
 800d54e:	9d04      	ldr	r5, [sp, #16]
 800d550:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d552:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800d554:	e737      	b.n	800d3c6 <_dtoa_r+0x75a>
 800d556:	9a04      	ldr	r2, [sp, #16]
 800d558:	e764      	b.n	800d424 <_dtoa_r+0x7b8>
 800d55a:	2500      	movs	r5, #0
 800d55c:	9b04      	ldr	r3, [sp, #16]
 800d55e:	9a04      	ldr	r2, [sp, #16]
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	9310      	str	r3, [sp, #64]	; 0x40
 800d564:	3303      	adds	r3, #3
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	18d3      	adds	r3, r2, r3
 800d56a:	6858      	ldr	r0, [r3, #4]
 800d56c:	f000 fd8c 	bl	800e088 <__hi0bits>
 800d570:	2320      	movs	r3, #32
 800d572:	1a18      	subs	r0, r3, r0
 800d574:	e785      	b.n	800d482 <_dtoa_r+0x816>
 800d576:	2b04      	cmp	r3, #4
 800d578:	d095      	beq.n	800d4a6 <_dtoa_r+0x83a>
 800d57a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d57c:	331c      	adds	r3, #28
 800d57e:	18d2      	adds	r2, r2, r3
 800d580:	920a      	str	r2, [sp, #40]	; 0x28
 800d582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d584:	18e4      	adds	r4, r4, r3
 800d586:	18d3      	adds	r3, r2, r3
 800d588:	e78c      	b.n	800d4a4 <_dtoa_r+0x838>
 800d58a:	0003      	movs	r3, r0
 800d58c:	e7f5      	b.n	800d57a <_dtoa_r+0x90e>
 800d58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d590:	2b00      	cmp	r3, #0
 800d592:	dc3d      	bgt.n	800d610 <_dtoa_r+0x9a4>
 800d594:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d596:	2b02      	cmp	r3, #2
 800d598:	dd3a      	ble.n	800d610 <_dtoa_r+0x9a4>
 800d59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d59c:	930c      	str	r3, [sp, #48]	; 0x30
 800d59e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10c      	bne.n	800d5be <_dtoa_r+0x952>
 800d5a4:	9904      	ldr	r1, [sp, #16]
 800d5a6:	2205      	movs	r2, #5
 800d5a8:	9802      	ldr	r0, [sp, #8]
 800d5aa:	f000 fcf1 	bl	800df90 <__multadd>
 800d5ae:	9004      	str	r0, [sp, #16]
 800d5b0:	0001      	movs	r1, r0
 800d5b2:	9803      	ldr	r0, [sp, #12]
 800d5b4:	f000 feee 	bl	800e394 <__mcmp>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	dd00      	ble.n	800d5be <_dtoa_r+0x952>
 800d5bc:	e5af      	b.n	800d11e <_dtoa_r+0x4b2>
 800d5be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5c0:	9d08      	ldr	r5, [sp, #32]
 800d5c2:	43df      	mvns	r7, r3
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5c8:	9904      	ldr	r1, [sp, #16]
 800d5ca:	9802      	ldr	r0, [sp, #8]
 800d5cc:	f000 fcc7 	bl	800df5e <_Bfree>
 800d5d0:	2e00      	cmp	r6, #0
 800d5d2:	d100      	bne.n	800d5d6 <_dtoa_r+0x96a>
 800d5d4:	e69b      	b.n	800d30e <_dtoa_r+0x6a2>
 800d5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d005      	beq.n	800d5e8 <_dtoa_r+0x97c>
 800d5dc:	42b3      	cmp	r3, r6
 800d5de:	d003      	beq.n	800d5e8 <_dtoa_r+0x97c>
 800d5e0:	0019      	movs	r1, r3
 800d5e2:	9802      	ldr	r0, [sp, #8]
 800d5e4:	f000 fcbb 	bl	800df5e <_Bfree>
 800d5e8:	0031      	movs	r1, r6
 800d5ea:	9802      	ldr	r0, [sp, #8]
 800d5ec:	f000 fcb7 	bl	800df5e <_Bfree>
 800d5f0:	e68d      	b.n	800d30e <_dtoa_r+0x6a2>
 800d5f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5f4:	9304      	str	r3, [sp, #16]
 800d5f6:	001e      	movs	r6, r3
 800d5f8:	e7e1      	b.n	800d5be <_dtoa_r+0x952>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	e7fa      	b.n	800d5f4 <_dtoa_r+0x988>
 800d5fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d600:	0037      	movs	r7, r6
 800d602:	9304      	str	r3, [sp, #16]
 800d604:	001e      	movs	r6, r3
 800d606:	e58a      	b.n	800d11e <_dtoa_r+0x4b2>
 800d608:	40240000 	.word	0x40240000
 800d60c:	00000433 	.word	0x00000433
 800d610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d612:	2b00      	cmp	r3, #0
 800d614:	d100      	bne.n	800d618 <_dtoa_r+0x9ac>
 800d616:	e0b2      	b.n	800d77e <_dtoa_r+0xb12>
 800d618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d61a:	930c      	str	r3, [sp, #48]	; 0x30
 800d61c:	2c00      	cmp	r4, #0
 800d61e:	dd05      	ble.n	800d62c <_dtoa_r+0x9c0>
 800d620:	0031      	movs	r1, r6
 800d622:	0022      	movs	r2, r4
 800d624:	9802      	ldr	r0, [sp, #8]
 800d626:	f000 fe63 	bl	800e2f0 <__lshift>
 800d62a:	0006      	movs	r6, r0
 800d62c:	0030      	movs	r0, r6
 800d62e:	2d00      	cmp	r5, #0
 800d630:	d011      	beq.n	800d656 <_dtoa_r+0x9ea>
 800d632:	6871      	ldr	r1, [r6, #4]
 800d634:	9802      	ldr	r0, [sp, #8]
 800d636:	f000 fc5a 	bl	800deee <_Balloc>
 800d63a:	0031      	movs	r1, r6
 800d63c:	0004      	movs	r4, r0
 800d63e:	6933      	ldr	r3, [r6, #16]
 800d640:	310c      	adds	r1, #12
 800d642:	1c9a      	adds	r2, r3, #2
 800d644:	0092      	lsls	r2, r2, #2
 800d646:	300c      	adds	r0, #12
 800d648:	f7fd fc1a 	bl	800ae80 <memcpy>
 800d64c:	2201      	movs	r2, #1
 800d64e:	0021      	movs	r1, r4
 800d650:	9802      	ldr	r0, [sp, #8]
 800d652:	f000 fe4d 	bl	800e2f0 <__lshift>
 800d656:	9609      	str	r6, [sp, #36]	; 0x24
 800d658:	0006      	movs	r6, r0
 800d65a:	9b08      	ldr	r3, [sp, #32]
 800d65c:	930a      	str	r3, [sp, #40]	; 0x28
 800d65e:	9904      	ldr	r1, [sp, #16]
 800d660:	9803      	ldr	r0, [sp, #12]
 800d662:	f7ff fa7d 	bl	800cb60 <quorem>
 800d666:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d668:	900d      	str	r0, [sp, #52]	; 0x34
 800d66a:	0004      	movs	r4, r0
 800d66c:	9803      	ldr	r0, [sp, #12]
 800d66e:	f000 fe91 	bl	800e394 <__mcmp>
 800d672:	0032      	movs	r2, r6
 800d674:	9010      	str	r0, [sp, #64]	; 0x40
 800d676:	9904      	ldr	r1, [sp, #16]
 800d678:	9802      	ldr	r0, [sp, #8]
 800d67a:	f000 fea5 	bl	800e3c8 <__mdiff>
 800d67e:	2301      	movs	r3, #1
 800d680:	930b      	str	r3, [sp, #44]	; 0x2c
 800d682:	68c3      	ldr	r3, [r0, #12]
 800d684:	3430      	adds	r4, #48	; 0x30
 800d686:	0005      	movs	r5, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d104      	bne.n	800d696 <_dtoa_r+0xa2a>
 800d68c:	0001      	movs	r1, r0
 800d68e:	9803      	ldr	r0, [sp, #12]
 800d690:	f000 fe80 	bl	800e394 <__mcmp>
 800d694:	900b      	str	r0, [sp, #44]	; 0x2c
 800d696:	0029      	movs	r1, r5
 800d698:	9802      	ldr	r0, [sp, #8]
 800d69a:	f000 fc60 	bl	800df5e <_Bfree>
 800d69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	d10e      	bne.n	800d6c4 <_dtoa_r+0xa58>
 800d6a6:	9a06      	ldr	r2, [sp, #24]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	4213      	tst	r3, r2
 800d6ac:	d10a      	bne.n	800d6c4 <_dtoa_r+0xa58>
 800d6ae:	2c39      	cmp	r4, #57	; 0x39
 800d6b0:	d026      	beq.n	800d700 <_dtoa_r+0xa94>
 800d6b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	dd01      	ble.n	800d6bc <_dtoa_r+0xa50>
 800d6b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d6ba:	3431      	adds	r4, #49	; 0x31
 800d6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6be:	1c5d      	adds	r5, r3, #1
 800d6c0:	701c      	strb	r4, [r3, #0]
 800d6c2:	e781      	b.n	800d5c8 <_dtoa_r+0x95c>
 800d6c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	db07      	blt.n	800d6da <_dtoa_r+0xa6e>
 800d6ca:	001d      	movs	r5, r3
 800d6cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d6ce:	431d      	orrs	r5, r3
 800d6d0:	d122      	bne.n	800d718 <_dtoa_r+0xaac>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	9a06      	ldr	r2, [sp, #24]
 800d6d6:	4213      	tst	r3, r2
 800d6d8:	d11e      	bne.n	800d718 <_dtoa_r+0xaac>
 800d6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	dded      	ble.n	800d6bc <_dtoa_r+0xa50>
 800d6e0:	9903      	ldr	r1, [sp, #12]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	9802      	ldr	r0, [sp, #8]
 800d6e6:	f000 fe03 	bl	800e2f0 <__lshift>
 800d6ea:	9904      	ldr	r1, [sp, #16]
 800d6ec:	9003      	str	r0, [sp, #12]
 800d6ee:	f000 fe51 	bl	800e394 <__mcmp>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	dc02      	bgt.n	800d6fc <_dtoa_r+0xa90>
 800d6f6:	d1e1      	bne.n	800d6bc <_dtoa_r+0xa50>
 800d6f8:	07e3      	lsls	r3, r4, #31
 800d6fa:	d5df      	bpl.n	800d6bc <_dtoa_r+0xa50>
 800d6fc:	2c39      	cmp	r4, #57	; 0x39
 800d6fe:	d1db      	bne.n	800d6b8 <_dtoa_r+0xa4c>
 800d700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d704:	1c5d      	adds	r5, r3, #1
 800d706:	2339      	movs	r3, #57	; 0x39
 800d708:	7013      	strb	r3, [r2, #0]
 800d70a:	1e6b      	subs	r3, r5, #1
 800d70c:	781a      	ldrb	r2, [r3, #0]
 800d70e:	2a39      	cmp	r2, #57	; 0x39
 800d710:	d067      	beq.n	800d7e2 <_dtoa_r+0xb76>
 800d712:	3201      	adds	r2, #1
 800d714:	701a      	strb	r2, [r3, #0]
 800d716:	e757      	b.n	800d5c8 <_dtoa_r+0x95c>
 800d718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d71a:	1c5d      	adds	r5, r3, #1
 800d71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d71e:	2b00      	cmp	r3, #0
 800d720:	dd04      	ble.n	800d72c <_dtoa_r+0xac0>
 800d722:	2c39      	cmp	r4, #57	; 0x39
 800d724:	d0ec      	beq.n	800d700 <_dtoa_r+0xa94>
 800d726:	3401      	adds	r4, #1
 800d728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d72a:	e7c9      	b.n	800d6c0 <_dtoa_r+0xa54>
 800d72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d72e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d730:	701c      	strb	r4, [r3, #0]
 800d732:	9b08      	ldr	r3, [sp, #32]
 800d734:	1aeb      	subs	r3, r5, r3
 800d736:	4293      	cmp	r3, r2
 800d738:	d03e      	beq.n	800d7b8 <_dtoa_r+0xb4c>
 800d73a:	2300      	movs	r3, #0
 800d73c:	220a      	movs	r2, #10
 800d73e:	9903      	ldr	r1, [sp, #12]
 800d740:	9802      	ldr	r0, [sp, #8]
 800d742:	f000 fc25 	bl	800df90 <__multadd>
 800d746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d748:	9003      	str	r0, [sp, #12]
 800d74a:	42b3      	cmp	r3, r6
 800d74c:	d109      	bne.n	800d762 <_dtoa_r+0xaf6>
 800d74e:	2300      	movs	r3, #0
 800d750:	220a      	movs	r2, #10
 800d752:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d754:	9802      	ldr	r0, [sp, #8]
 800d756:	f000 fc1b 	bl	800df90 <__multadd>
 800d75a:	9009      	str	r0, [sp, #36]	; 0x24
 800d75c:	0006      	movs	r6, r0
 800d75e:	950a      	str	r5, [sp, #40]	; 0x28
 800d760:	e77d      	b.n	800d65e <_dtoa_r+0x9f2>
 800d762:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d764:	2300      	movs	r3, #0
 800d766:	220a      	movs	r2, #10
 800d768:	9802      	ldr	r0, [sp, #8]
 800d76a:	f000 fc11 	bl	800df90 <__multadd>
 800d76e:	2300      	movs	r3, #0
 800d770:	9009      	str	r0, [sp, #36]	; 0x24
 800d772:	220a      	movs	r2, #10
 800d774:	0031      	movs	r1, r6
 800d776:	9802      	ldr	r0, [sp, #8]
 800d778:	f000 fc0a 	bl	800df90 <__multadd>
 800d77c:	e7ee      	b.n	800d75c <_dtoa_r+0xaf0>
 800d77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d780:	930c      	str	r3, [sp, #48]	; 0x30
 800d782:	9b08      	ldr	r3, [sp, #32]
 800d784:	9306      	str	r3, [sp, #24]
 800d786:	9904      	ldr	r1, [sp, #16]
 800d788:	9803      	ldr	r0, [sp, #12]
 800d78a:	f7ff f9e9 	bl	800cb60 <quorem>
 800d78e:	9b06      	ldr	r3, [sp, #24]
 800d790:	3030      	adds	r0, #48	; 0x30
 800d792:	1c5d      	adds	r5, r3, #1
 800d794:	7018      	strb	r0, [r3, #0]
 800d796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d798:	9b08      	ldr	r3, [sp, #32]
 800d79a:	0004      	movs	r4, r0
 800d79c:	1aeb      	subs	r3, r5, r3
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	dd08      	ble.n	800d7b4 <_dtoa_r+0xb48>
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	220a      	movs	r2, #10
 800d7a6:	9903      	ldr	r1, [sp, #12]
 800d7a8:	9802      	ldr	r0, [sp, #8]
 800d7aa:	f000 fbf1 	bl	800df90 <__multadd>
 800d7ae:	9506      	str	r5, [sp, #24]
 800d7b0:	9003      	str	r0, [sp, #12]
 800d7b2:	e7e8      	b.n	800d786 <_dtoa_r+0xb1a>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b8:	9903      	ldr	r1, [sp, #12]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	9802      	ldr	r0, [sp, #8]
 800d7be:	f000 fd97 	bl	800e2f0 <__lshift>
 800d7c2:	9904      	ldr	r1, [sp, #16]
 800d7c4:	9003      	str	r0, [sp, #12]
 800d7c6:	f000 fde5 	bl	800e394 <__mcmp>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	dc9d      	bgt.n	800d70a <_dtoa_r+0xa9e>
 800d7ce:	d101      	bne.n	800d7d4 <_dtoa_r+0xb68>
 800d7d0:	07e3      	lsls	r3, r4, #31
 800d7d2:	d49a      	bmi.n	800d70a <_dtoa_r+0xa9e>
 800d7d4:	1e6b      	subs	r3, r5, #1
 800d7d6:	781a      	ldrb	r2, [r3, #0]
 800d7d8:	2a30      	cmp	r2, #48	; 0x30
 800d7da:	d000      	beq.n	800d7de <_dtoa_r+0xb72>
 800d7dc:	e6f4      	b.n	800d5c8 <_dtoa_r+0x95c>
 800d7de:	001d      	movs	r5, r3
 800d7e0:	e7f8      	b.n	800d7d4 <_dtoa_r+0xb68>
 800d7e2:	9a08      	ldr	r2, [sp, #32]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d103      	bne.n	800d7f0 <_dtoa_r+0xb84>
 800d7e8:	2331      	movs	r3, #49	; 0x31
 800d7ea:	3701      	adds	r7, #1
 800d7ec:	7013      	strb	r3, [r2, #0]
 800d7ee:	e6eb      	b.n	800d5c8 <_dtoa_r+0x95c>
 800d7f0:	001d      	movs	r5, r3
 800d7f2:	e78a      	b.n	800d70a <_dtoa_r+0xa9e>
 800d7f4:	4b0b      	ldr	r3, [pc, #44]	; (800d824 <_dtoa_r+0xbb8>)
 800d7f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d7f8:	9308      	str	r3, [sp, #32]
 800d7fa:	4b0b      	ldr	r3, [pc, #44]	; (800d828 <_dtoa_r+0xbbc>)
 800d7fc:	2a00      	cmp	r2, #0
 800d7fe:	d001      	beq.n	800d804 <_dtoa_r+0xb98>
 800d800:	f7ff fa77 	bl	800ccf2 <_dtoa_r+0x86>
 800d804:	f7ff fa77 	bl	800ccf6 <_dtoa_r+0x8a>
 800d808:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	dc00      	bgt.n	800d810 <_dtoa_r+0xba4>
 800d80e:	e621      	b.n	800d454 <_dtoa_r+0x7e8>
 800d810:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800d812:	2001      	movs	r0, #1
 800d814:	e635      	b.n	800d482 <_dtoa_r+0x816>
 800d816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d818:	2b00      	cmp	r3, #0
 800d81a:	dcb2      	bgt.n	800d782 <_dtoa_r+0xb16>
 800d81c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d81e:	2b02      	cmp	r3, #2
 800d820:	ddaf      	ble.n	800d782 <_dtoa_r+0xb16>
 800d822:	e6bc      	b.n	800d59e <_dtoa_r+0x932>
 800d824:	0800fff8 	.word	0x0800fff8
 800d828:	08010000 	.word	0x08010000

0800d82c <rshift>:
 800d82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d82e:	0004      	movs	r4, r0
 800d830:	6905      	ldr	r5, [r0, #16]
 800d832:	3414      	adds	r4, #20
 800d834:	114b      	asrs	r3, r1, #5
 800d836:	0026      	movs	r6, r4
 800d838:	429d      	cmp	r5, r3
 800d83a:	dd14      	ble.n	800d866 <rshift+0x3a>
 800d83c:	221f      	movs	r2, #31
 800d83e:	00ad      	lsls	r5, r5, #2
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	4011      	ands	r1, r2
 800d844:	1965      	adds	r5, r4, r5
 800d846:	18e3      	adds	r3, r4, r3
 800d848:	0022      	movs	r2, r4
 800d84a:	2900      	cmp	r1, #0
 800d84c:	d01e      	beq.n	800d88c <rshift+0x60>
 800d84e:	cb04      	ldmia	r3!, {r2}
 800d850:	2720      	movs	r7, #32
 800d852:	40ca      	lsrs	r2, r1
 800d854:	46a4      	mov	ip, r4
 800d856:	1a7f      	subs	r7, r7, r1
 800d858:	4666      	mov	r6, ip
 800d85a:	429d      	cmp	r5, r3
 800d85c:	d80b      	bhi.n	800d876 <rshift+0x4a>
 800d85e:	6032      	str	r2, [r6, #0]
 800d860:	2a00      	cmp	r2, #0
 800d862:	d000      	beq.n	800d866 <rshift+0x3a>
 800d864:	3604      	adds	r6, #4
 800d866:	1b33      	subs	r3, r6, r4
 800d868:	109b      	asrs	r3, r3, #2
 800d86a:	6103      	str	r3, [r0, #16]
 800d86c:	42a6      	cmp	r6, r4
 800d86e:	d101      	bne.n	800d874 <rshift+0x48>
 800d870:	2300      	movs	r3, #0
 800d872:	6143      	str	r3, [r0, #20]
 800d874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d876:	681e      	ldr	r6, [r3, #0]
 800d878:	40be      	lsls	r6, r7
 800d87a:	4332      	orrs	r2, r6
 800d87c:	4666      	mov	r6, ip
 800d87e:	c604      	stmia	r6!, {r2}
 800d880:	cb04      	ldmia	r3!, {r2}
 800d882:	46b4      	mov	ip, r6
 800d884:	40ca      	lsrs	r2, r1
 800d886:	e7e7      	b.n	800d858 <rshift+0x2c>
 800d888:	cb02      	ldmia	r3!, {r1}
 800d88a:	c202      	stmia	r2!, {r1}
 800d88c:	0016      	movs	r6, r2
 800d88e:	429d      	cmp	r5, r3
 800d890:	d8fa      	bhi.n	800d888 <rshift+0x5c>
 800d892:	e7e8      	b.n	800d866 <rshift+0x3a>

0800d894 <__hexdig_fun>:
 800d894:	0003      	movs	r3, r0
 800d896:	3b30      	subs	r3, #48	; 0x30
 800d898:	2b09      	cmp	r3, #9
 800d89a:	d803      	bhi.n	800d8a4 <__hexdig_fun+0x10>
 800d89c:	3820      	subs	r0, #32
 800d89e:	b2c3      	uxtb	r3, r0
 800d8a0:	0018      	movs	r0, r3
 800d8a2:	4770      	bx	lr
 800d8a4:	0003      	movs	r3, r0
 800d8a6:	3b61      	subs	r3, #97	; 0x61
 800d8a8:	2b05      	cmp	r3, #5
 800d8aa:	d801      	bhi.n	800d8b0 <__hexdig_fun+0x1c>
 800d8ac:	3847      	subs	r0, #71	; 0x47
 800d8ae:	e7f6      	b.n	800d89e <__hexdig_fun+0xa>
 800d8b0:	0002      	movs	r2, r0
 800d8b2:	3a41      	subs	r2, #65	; 0x41
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	2a05      	cmp	r2, #5
 800d8b8:	d8f2      	bhi.n	800d8a0 <__hexdig_fun+0xc>
 800d8ba:	3827      	subs	r0, #39	; 0x27
 800d8bc:	e7ef      	b.n	800d89e <__hexdig_fun+0xa>

0800d8be <__gethex>:
 800d8be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8c0:	b08d      	sub	sp, #52	; 0x34
 800d8c2:	9005      	str	r0, [sp, #20]
 800d8c4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d8c6:	9109      	str	r1, [sp, #36]	; 0x24
 800d8c8:	9202      	str	r2, [sp, #8]
 800d8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d8cc:	f000 fae2 	bl	800de94 <__localeconv_l>
 800d8d0:	6803      	ldr	r3, [r0, #0]
 800d8d2:	0018      	movs	r0, r3
 800d8d4:	9307      	str	r3, [sp, #28]
 800d8d6:	f7f2 fc17 	bl	8000108 <strlen>
 800d8da:	2202      	movs	r2, #2
 800d8dc:	9b07      	ldr	r3, [sp, #28]
 800d8de:	4252      	negs	r2, r2
 800d8e0:	181b      	adds	r3, r3, r0
 800d8e2:	3b01      	subs	r3, #1
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	9004      	str	r0, [sp, #16]
 800d8e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ec:	6819      	ldr	r1, [r3, #0]
 800d8ee:	1c8b      	adds	r3, r1, #2
 800d8f0:	1a52      	subs	r2, r2, r1
 800d8f2:	18d1      	adds	r1, r2, r3
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	9108      	str	r1, [sp, #32]
 800d8f8:	9901      	ldr	r1, [sp, #4]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	7808      	ldrb	r0, [r1, #0]
 800d8fe:	2830      	cmp	r0, #48	; 0x30
 800d900:	d0f7      	beq.n	800d8f2 <__gethex+0x34>
 800d902:	f7ff ffc7 	bl	800d894 <__hexdig_fun>
 800d906:	1e07      	subs	r7, r0, #0
 800d908:	d000      	beq.n	800d90c <__gethex+0x4e>
 800d90a:	e06f      	b.n	800d9ec <__gethex+0x12e>
 800d90c:	9a04      	ldr	r2, [sp, #16]
 800d90e:	9907      	ldr	r1, [sp, #28]
 800d910:	9801      	ldr	r0, [sp, #4]
 800d912:	f001 f851 	bl	800e9b8 <strncmp>
 800d916:	2800      	cmp	r0, #0
 800d918:	d000      	beq.n	800d91c <__gethex+0x5e>
 800d91a:	e06d      	b.n	800d9f8 <__gethex+0x13a>
 800d91c:	9b01      	ldr	r3, [sp, #4]
 800d91e:	9a04      	ldr	r2, [sp, #16]
 800d920:	189c      	adds	r4, r3, r2
 800d922:	7820      	ldrb	r0, [r4, #0]
 800d924:	f7ff ffb6 	bl	800d894 <__hexdig_fun>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d069      	beq.n	800da00 <__gethex+0x142>
 800d92c:	9401      	str	r4, [sp, #4]
 800d92e:	9b01      	ldr	r3, [sp, #4]
 800d930:	7818      	ldrb	r0, [r3, #0]
 800d932:	2830      	cmp	r0, #48	; 0x30
 800d934:	d009      	beq.n	800d94a <__gethex+0x8c>
 800d936:	f7ff ffad 	bl	800d894 <__hexdig_fun>
 800d93a:	4243      	negs	r3, r0
 800d93c:	4143      	adcs	r3, r0
 800d93e:	9303      	str	r3, [sp, #12]
 800d940:	2301      	movs	r3, #1
 800d942:	0026      	movs	r6, r4
 800d944:	9308      	str	r3, [sp, #32]
 800d946:	9c01      	ldr	r4, [sp, #4]
 800d948:	e004      	b.n	800d954 <__gethex+0x96>
 800d94a:	9b01      	ldr	r3, [sp, #4]
 800d94c:	3301      	adds	r3, #1
 800d94e:	9301      	str	r3, [sp, #4]
 800d950:	e7ed      	b.n	800d92e <__gethex+0x70>
 800d952:	3401      	adds	r4, #1
 800d954:	7820      	ldrb	r0, [r4, #0]
 800d956:	f7ff ff9d 	bl	800d894 <__hexdig_fun>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	d1f9      	bne.n	800d952 <__gethex+0x94>
 800d95e:	9a04      	ldr	r2, [sp, #16]
 800d960:	9907      	ldr	r1, [sp, #28]
 800d962:	0020      	movs	r0, r4
 800d964:	f001 f828 	bl	800e9b8 <strncmp>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d109      	bne.n	800d980 <__gethex+0xc2>
 800d96c:	2e00      	cmp	r6, #0
 800d96e:	d10a      	bne.n	800d986 <__gethex+0xc8>
 800d970:	9b04      	ldr	r3, [sp, #16]
 800d972:	18e4      	adds	r4, r4, r3
 800d974:	0026      	movs	r6, r4
 800d976:	7820      	ldrb	r0, [r4, #0]
 800d978:	f7ff ff8c 	bl	800d894 <__hexdig_fun>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d139      	bne.n	800d9f4 <__gethex+0x136>
 800d980:	2700      	movs	r7, #0
 800d982:	42be      	cmp	r6, r7
 800d984:	d001      	beq.n	800d98a <__gethex+0xcc>
 800d986:	1b37      	subs	r7, r6, r4
 800d988:	00bf      	lsls	r7, r7, #2
 800d98a:	7823      	ldrb	r3, [r4, #0]
 800d98c:	2b50      	cmp	r3, #80	; 0x50
 800d98e:	d001      	beq.n	800d994 <__gethex+0xd6>
 800d990:	2b70      	cmp	r3, #112	; 0x70
 800d992:	d142      	bne.n	800da1a <__gethex+0x15c>
 800d994:	7863      	ldrb	r3, [r4, #1]
 800d996:	2b2b      	cmp	r3, #43	; 0x2b
 800d998:	d034      	beq.n	800da04 <__gethex+0x146>
 800d99a:	2b2d      	cmp	r3, #45	; 0x2d
 800d99c:	d036      	beq.n	800da0c <__gethex+0x14e>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	1c66      	adds	r6, r4, #1
 800d9a2:	9306      	str	r3, [sp, #24]
 800d9a4:	7830      	ldrb	r0, [r6, #0]
 800d9a6:	f7ff ff75 	bl	800d894 <__hexdig_fun>
 800d9aa:	1e43      	subs	r3, r0, #1
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	2b18      	cmp	r3, #24
 800d9b0:	d833      	bhi.n	800da1a <__gethex+0x15c>
 800d9b2:	3810      	subs	r0, #16
 800d9b4:	0005      	movs	r5, r0
 800d9b6:	3601      	adds	r6, #1
 800d9b8:	7830      	ldrb	r0, [r6, #0]
 800d9ba:	f7ff ff6b 	bl	800d894 <__hexdig_fun>
 800d9be:	1e43      	subs	r3, r0, #1
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	2b18      	cmp	r3, #24
 800d9c4:	d924      	bls.n	800da10 <__gethex+0x152>
 800d9c6:	9b06      	ldr	r3, [sp, #24]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d000      	beq.n	800d9ce <__gethex+0x110>
 800d9cc:	426d      	negs	r5, r5
 800d9ce:	197f      	adds	r7, r7, r5
 800d9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9d2:	601e      	str	r6, [r3, #0]
 800d9d4:	9b03      	ldr	r3, [sp, #12]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d021      	beq.n	800da1e <__gethex+0x160>
 800d9da:	9b08      	ldr	r3, [sp, #32]
 800d9dc:	2606      	movs	r6, #6
 800d9de:	425a      	negs	r2, r3
 800d9e0:	4153      	adcs	r3, r2
 800d9e2:	425b      	negs	r3, r3
 800d9e4:	401e      	ands	r6, r3
 800d9e6:	0030      	movs	r0, r6
 800d9e8:	b00d      	add	sp, #52	; 0x34
 800d9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	9303      	str	r3, [sp, #12]
 800d9f0:	001e      	movs	r6, r3
 800d9f2:	e7a8      	b.n	800d946 <__gethex+0x88>
 800d9f4:	3401      	adds	r4, #1
 800d9f6:	e7be      	b.n	800d976 <__gethex+0xb8>
 800d9f8:	9c01      	ldr	r4, [sp, #4]
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	9303      	str	r3, [sp, #12]
 800d9fe:	e7c4      	b.n	800d98a <__gethex+0xcc>
 800da00:	0007      	movs	r7, r0
 800da02:	e7fa      	b.n	800d9fa <__gethex+0x13c>
 800da04:	2300      	movs	r3, #0
 800da06:	9306      	str	r3, [sp, #24]
 800da08:	1ca6      	adds	r6, r4, #2
 800da0a:	e7cb      	b.n	800d9a4 <__gethex+0xe6>
 800da0c:	2301      	movs	r3, #1
 800da0e:	e7fa      	b.n	800da06 <__gethex+0x148>
 800da10:	230a      	movs	r3, #10
 800da12:	435d      	muls	r5, r3
 800da14:	182d      	adds	r5, r5, r0
 800da16:	3d10      	subs	r5, #16
 800da18:	e7cd      	b.n	800d9b6 <__gethex+0xf8>
 800da1a:	0026      	movs	r6, r4
 800da1c:	e7d8      	b.n	800d9d0 <__gethex+0x112>
 800da1e:	9b01      	ldr	r3, [sp, #4]
 800da20:	9903      	ldr	r1, [sp, #12]
 800da22:	1ae3      	subs	r3, r4, r3
 800da24:	3b01      	subs	r3, #1
 800da26:	2b07      	cmp	r3, #7
 800da28:	dc47      	bgt.n	800daba <__gethex+0x1fc>
 800da2a:	9805      	ldr	r0, [sp, #20]
 800da2c:	f000 fa5f 	bl	800deee <_Balloc>
 800da30:	0003      	movs	r3, r0
 800da32:	3314      	adds	r3, #20
 800da34:	9303      	str	r3, [sp, #12]
 800da36:	9308      	str	r3, [sp, #32]
 800da38:	2300      	movs	r3, #0
 800da3a:	0005      	movs	r5, r0
 800da3c:	001e      	movs	r6, r3
 800da3e:	9306      	str	r3, [sp, #24]
 800da40:	9b01      	ldr	r3, [sp, #4]
 800da42:	42a3      	cmp	r3, r4
 800da44:	d33c      	bcc.n	800dac0 <__gethex+0x202>
 800da46:	9c08      	ldr	r4, [sp, #32]
 800da48:	9b03      	ldr	r3, [sp, #12]
 800da4a:	c440      	stmia	r4!, {r6}
 800da4c:	1ae4      	subs	r4, r4, r3
 800da4e:	10a4      	asrs	r4, r4, #2
 800da50:	612c      	str	r4, [r5, #16]
 800da52:	0030      	movs	r0, r6
 800da54:	f000 fb18 	bl	800e088 <__hi0bits>
 800da58:	9b02      	ldr	r3, [sp, #8]
 800da5a:	0164      	lsls	r4, r4, #5
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	1a26      	subs	r6, r4, r0
 800da60:	9301      	str	r3, [sp, #4]
 800da62:	429e      	cmp	r6, r3
 800da64:	dd5f      	ble.n	800db26 <__gethex+0x268>
 800da66:	1af6      	subs	r6, r6, r3
 800da68:	0031      	movs	r1, r6
 800da6a:	0028      	movs	r0, r5
 800da6c:	f000 fe13 	bl	800e696 <__any_on>
 800da70:	1e04      	subs	r4, r0, #0
 800da72:	d00f      	beq.n	800da94 <__gethex+0x1d6>
 800da74:	2401      	movs	r4, #1
 800da76:	211f      	movs	r1, #31
 800da78:	0020      	movs	r0, r4
 800da7a:	1e73      	subs	r3, r6, #1
 800da7c:	4019      	ands	r1, r3
 800da7e:	4088      	lsls	r0, r1
 800da80:	0001      	movs	r1, r0
 800da82:	115a      	asrs	r2, r3, #5
 800da84:	9803      	ldr	r0, [sp, #12]
 800da86:	0092      	lsls	r2, r2, #2
 800da88:	5812      	ldr	r2, [r2, r0]
 800da8a:	420a      	tst	r2, r1
 800da8c:	d002      	beq.n	800da94 <__gethex+0x1d6>
 800da8e:	42a3      	cmp	r3, r4
 800da90:	dc41      	bgt.n	800db16 <__gethex+0x258>
 800da92:	2402      	movs	r4, #2
 800da94:	0031      	movs	r1, r6
 800da96:	0028      	movs	r0, r5
 800da98:	f7ff fec8 	bl	800d82c <rshift>
 800da9c:	19bf      	adds	r7, r7, r6
 800da9e:	9b02      	ldr	r3, [sp, #8]
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	9304      	str	r3, [sp, #16]
 800daa4:	42bb      	cmp	r3, r7
 800daa6:	da4e      	bge.n	800db46 <__gethex+0x288>
 800daa8:	0029      	movs	r1, r5
 800daaa:	9805      	ldr	r0, [sp, #20]
 800daac:	f000 fa57 	bl	800df5e <_Bfree>
 800dab0:	2300      	movs	r3, #0
 800dab2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dab4:	26a3      	movs	r6, #163	; 0xa3
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	e795      	b.n	800d9e6 <__gethex+0x128>
 800daba:	3101      	adds	r1, #1
 800dabc:	105b      	asrs	r3, r3, #1
 800dabe:	e7b2      	b.n	800da26 <__gethex+0x168>
 800dac0:	1e63      	subs	r3, r4, #1
 800dac2:	9309      	str	r3, [sp, #36]	; 0x24
 800dac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	4293      	cmp	r3, r2
 800daca:	d015      	beq.n	800daf8 <__gethex+0x23a>
 800dacc:	9b06      	ldr	r3, [sp, #24]
 800dace:	2b20      	cmp	r3, #32
 800dad0:	d105      	bne.n	800dade <__gethex+0x220>
 800dad2:	9b08      	ldr	r3, [sp, #32]
 800dad4:	601e      	str	r6, [r3, #0]
 800dad6:	2600      	movs	r6, #0
 800dad8:	3304      	adds	r3, #4
 800dada:	9308      	str	r3, [sp, #32]
 800dadc:	9606      	str	r6, [sp, #24]
 800dade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dae0:	7818      	ldrb	r0, [r3, #0]
 800dae2:	f7ff fed7 	bl	800d894 <__hexdig_fun>
 800dae6:	230f      	movs	r3, #15
 800dae8:	4018      	ands	r0, r3
 800daea:	9b06      	ldr	r3, [sp, #24]
 800daec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800daee:	4098      	lsls	r0, r3
 800daf0:	3304      	adds	r3, #4
 800daf2:	4306      	orrs	r6, r0
 800daf4:	9306      	str	r3, [sp, #24]
 800daf6:	e7a3      	b.n	800da40 <__gethex+0x182>
 800daf8:	2301      	movs	r3, #1
 800dafa:	9a04      	ldr	r2, [sp, #16]
 800dafc:	1a9c      	subs	r4, r3, r2
 800dafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db00:	191c      	adds	r4, r3, r4
 800db02:	9b01      	ldr	r3, [sp, #4]
 800db04:	429c      	cmp	r4, r3
 800db06:	d3e1      	bcc.n	800dacc <__gethex+0x20e>
 800db08:	9907      	ldr	r1, [sp, #28]
 800db0a:	0020      	movs	r0, r4
 800db0c:	f000 ff54 	bl	800e9b8 <strncmp>
 800db10:	2800      	cmp	r0, #0
 800db12:	d1db      	bne.n	800dacc <__gethex+0x20e>
 800db14:	e794      	b.n	800da40 <__gethex+0x182>
 800db16:	1eb1      	subs	r1, r6, #2
 800db18:	0028      	movs	r0, r5
 800db1a:	f000 fdbc 	bl	800e696 <__any_on>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d0b7      	beq.n	800da92 <__gethex+0x1d4>
 800db22:	2403      	movs	r4, #3
 800db24:	e7b6      	b.n	800da94 <__gethex+0x1d6>
 800db26:	9b01      	ldr	r3, [sp, #4]
 800db28:	2400      	movs	r4, #0
 800db2a:	429e      	cmp	r6, r3
 800db2c:	dab7      	bge.n	800da9e <__gethex+0x1e0>
 800db2e:	1b9e      	subs	r6, r3, r6
 800db30:	0029      	movs	r1, r5
 800db32:	0032      	movs	r2, r6
 800db34:	9805      	ldr	r0, [sp, #20]
 800db36:	f000 fbdb 	bl	800e2f0 <__lshift>
 800db3a:	0003      	movs	r3, r0
 800db3c:	3314      	adds	r3, #20
 800db3e:	0005      	movs	r5, r0
 800db40:	1bbf      	subs	r7, r7, r6
 800db42:	9303      	str	r3, [sp, #12]
 800db44:	e7ab      	b.n	800da9e <__gethex+0x1e0>
 800db46:	9b02      	ldr	r3, [sp, #8]
 800db48:	685e      	ldr	r6, [r3, #4]
 800db4a:	42be      	cmp	r6, r7
 800db4c:	dd6b      	ble.n	800dc26 <__gethex+0x368>
 800db4e:	9b01      	ldr	r3, [sp, #4]
 800db50:	1bf6      	subs	r6, r6, r7
 800db52:	42b3      	cmp	r3, r6
 800db54:	dc32      	bgt.n	800dbbc <__gethex+0x2fe>
 800db56:	9b02      	ldr	r3, [sp, #8]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d026      	beq.n	800dbac <__gethex+0x2ee>
 800db5e:	2b03      	cmp	r3, #3
 800db60:	d028      	beq.n	800dbb4 <__gethex+0x2f6>
 800db62:	2b01      	cmp	r3, #1
 800db64:	d119      	bne.n	800db9a <__gethex+0x2dc>
 800db66:	9b01      	ldr	r3, [sp, #4]
 800db68:	42b3      	cmp	r3, r6
 800db6a:	d116      	bne.n	800db9a <__gethex+0x2dc>
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	dc0d      	bgt.n	800db8c <__gethex+0x2ce>
 800db70:	9b02      	ldr	r3, [sp, #8]
 800db72:	2662      	movs	r6, #98	; 0x62
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	9a01      	ldr	r2, [sp, #4]
 800db7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	2301      	movs	r3, #1
 800db80:	9a03      	ldr	r2, [sp, #12]
 800db82:	612b      	str	r3, [r5, #16]
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db88:	601d      	str	r5, [r3, #0]
 800db8a:	e72c      	b.n	800d9e6 <__gethex+0x128>
 800db8c:	9901      	ldr	r1, [sp, #4]
 800db8e:	0028      	movs	r0, r5
 800db90:	3901      	subs	r1, #1
 800db92:	f000 fd80 	bl	800e696 <__any_on>
 800db96:	2800      	cmp	r0, #0
 800db98:	d1ea      	bne.n	800db70 <__gethex+0x2b2>
 800db9a:	0029      	movs	r1, r5
 800db9c:	9805      	ldr	r0, [sp, #20]
 800db9e:	f000 f9de 	bl	800df5e <_Bfree>
 800dba2:	2300      	movs	r3, #0
 800dba4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dba6:	2650      	movs	r6, #80	; 0x50
 800dba8:	6013      	str	r3, [r2, #0]
 800dbaa:	e71c      	b.n	800d9e6 <__gethex+0x128>
 800dbac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d0de      	beq.n	800db70 <__gethex+0x2b2>
 800dbb2:	e7f2      	b.n	800db9a <__gethex+0x2dc>
 800dbb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1da      	bne.n	800db70 <__gethex+0x2b2>
 800dbba:	e7ee      	b.n	800db9a <__gethex+0x2dc>
 800dbbc:	1e77      	subs	r7, r6, #1
 800dbbe:	2c00      	cmp	r4, #0
 800dbc0:	d12f      	bne.n	800dc22 <__gethex+0x364>
 800dbc2:	2f00      	cmp	r7, #0
 800dbc4:	d004      	beq.n	800dbd0 <__gethex+0x312>
 800dbc6:	0039      	movs	r1, r7
 800dbc8:	0028      	movs	r0, r5
 800dbca:	f000 fd64 	bl	800e696 <__any_on>
 800dbce:	0004      	movs	r4, r0
 800dbd0:	231f      	movs	r3, #31
 800dbd2:	117a      	asrs	r2, r7, #5
 800dbd4:	401f      	ands	r7, r3
 800dbd6:	3b1e      	subs	r3, #30
 800dbd8:	40bb      	lsls	r3, r7
 800dbda:	9903      	ldr	r1, [sp, #12]
 800dbdc:	0092      	lsls	r2, r2, #2
 800dbde:	5852      	ldr	r2, [r2, r1]
 800dbe0:	421a      	tst	r2, r3
 800dbe2:	d001      	beq.n	800dbe8 <__gethex+0x32a>
 800dbe4:	2302      	movs	r3, #2
 800dbe6:	431c      	orrs	r4, r3
 800dbe8:	9b01      	ldr	r3, [sp, #4]
 800dbea:	0031      	movs	r1, r6
 800dbec:	1b9b      	subs	r3, r3, r6
 800dbee:	2602      	movs	r6, #2
 800dbf0:	0028      	movs	r0, r5
 800dbf2:	9301      	str	r3, [sp, #4]
 800dbf4:	f7ff fe1a 	bl	800d82c <rshift>
 800dbf8:	9b02      	ldr	r3, [sp, #8]
 800dbfa:	685f      	ldr	r7, [r3, #4]
 800dbfc:	2c00      	cmp	r4, #0
 800dbfe:	d040      	beq.n	800dc82 <__gethex+0x3c4>
 800dc00:	9b02      	ldr	r3, [sp, #8]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	d010      	beq.n	800dc2a <__gethex+0x36c>
 800dc08:	2b03      	cmp	r3, #3
 800dc0a:	d012      	beq.n	800dc32 <__gethex+0x374>
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d106      	bne.n	800dc1e <__gethex+0x360>
 800dc10:	07a2      	lsls	r2, r4, #30
 800dc12:	d504      	bpl.n	800dc1e <__gethex+0x360>
 800dc14:	9a03      	ldr	r2, [sp, #12]
 800dc16:	6812      	ldr	r2, [r2, #0]
 800dc18:	4314      	orrs	r4, r2
 800dc1a:	421c      	tst	r4, r3
 800dc1c:	d10c      	bne.n	800dc38 <__gethex+0x37a>
 800dc1e:	2310      	movs	r3, #16
 800dc20:	e02e      	b.n	800dc80 <__gethex+0x3c2>
 800dc22:	2401      	movs	r4, #1
 800dc24:	e7d4      	b.n	800dbd0 <__gethex+0x312>
 800dc26:	2601      	movs	r6, #1
 800dc28:	e7e8      	b.n	800dbfc <__gethex+0x33e>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dc2e:	1a9b      	subs	r3, r3, r2
 800dc30:	9313      	str	r3, [sp, #76]	; 0x4c
 800dc32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d0f2      	beq.n	800dc1e <__gethex+0x360>
 800dc38:	692c      	ldr	r4, [r5, #16]
 800dc3a:	00a3      	lsls	r3, r4, #2
 800dc3c:	9304      	str	r3, [sp, #16]
 800dc3e:	002b      	movs	r3, r5
 800dc40:	00a2      	lsls	r2, r4, #2
 800dc42:	3314      	adds	r3, #20
 800dc44:	1899      	adds	r1, r3, r2
 800dc46:	2200      	movs	r2, #0
 800dc48:	4694      	mov	ip, r2
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	1c50      	adds	r0, r2, #1
 800dc4e:	d01d      	beq.n	800dc8c <__gethex+0x3ce>
 800dc50:	3201      	adds	r2, #1
 800dc52:	601a      	str	r2, [r3, #0]
 800dc54:	002b      	movs	r3, r5
 800dc56:	3314      	adds	r3, #20
 800dc58:	2e02      	cmp	r6, #2
 800dc5a:	d13a      	bne.n	800dcd2 <__gethex+0x414>
 800dc5c:	9a02      	ldr	r2, [sp, #8]
 800dc5e:	9901      	ldr	r1, [sp, #4]
 800dc60:	6812      	ldr	r2, [r2, #0]
 800dc62:	3a01      	subs	r2, #1
 800dc64:	428a      	cmp	r2, r1
 800dc66:	d10a      	bne.n	800dc7e <__gethex+0x3c0>
 800dc68:	114a      	asrs	r2, r1, #5
 800dc6a:	211f      	movs	r1, #31
 800dc6c:	9801      	ldr	r0, [sp, #4]
 800dc6e:	0092      	lsls	r2, r2, #2
 800dc70:	4001      	ands	r1, r0
 800dc72:	2001      	movs	r0, #1
 800dc74:	0004      	movs	r4, r0
 800dc76:	408c      	lsls	r4, r1
 800dc78:	58d3      	ldr	r3, [r2, r3]
 800dc7a:	4223      	tst	r3, r4
 800dc7c:	d148      	bne.n	800dd10 <__gethex+0x452>
 800dc7e:	2320      	movs	r3, #32
 800dc80:	431e      	orrs	r6, r3
 800dc82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc84:	601d      	str	r5, [r3, #0]
 800dc86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc88:	601f      	str	r7, [r3, #0]
 800dc8a:	e6ac      	b.n	800d9e6 <__gethex+0x128>
 800dc8c:	4662      	mov	r2, ip
 800dc8e:	c304      	stmia	r3!, {r2}
 800dc90:	4299      	cmp	r1, r3
 800dc92:	d8da      	bhi.n	800dc4a <__gethex+0x38c>
 800dc94:	68ab      	ldr	r3, [r5, #8]
 800dc96:	429c      	cmp	r4, r3
 800dc98:	db12      	blt.n	800dcc0 <__gethex+0x402>
 800dc9a:	686b      	ldr	r3, [r5, #4]
 800dc9c:	9805      	ldr	r0, [sp, #20]
 800dc9e:	1c59      	adds	r1, r3, #1
 800dca0:	f000 f925 	bl	800deee <_Balloc>
 800dca4:	0029      	movs	r1, r5
 800dca6:	692b      	ldr	r3, [r5, #16]
 800dca8:	9003      	str	r0, [sp, #12]
 800dcaa:	1c9a      	adds	r2, r3, #2
 800dcac:	0092      	lsls	r2, r2, #2
 800dcae:	310c      	adds	r1, #12
 800dcb0:	300c      	adds	r0, #12
 800dcb2:	f7fd f8e5 	bl	800ae80 <memcpy>
 800dcb6:	0029      	movs	r1, r5
 800dcb8:	9805      	ldr	r0, [sp, #20]
 800dcba:	f000 f950 	bl	800df5e <_Bfree>
 800dcbe:	9d03      	ldr	r5, [sp, #12]
 800dcc0:	692b      	ldr	r3, [r5, #16]
 800dcc2:	1c5a      	adds	r2, r3, #1
 800dcc4:	612a      	str	r2, [r5, #16]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	3304      	adds	r3, #4
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	18eb      	adds	r3, r5, r3
 800dcce:	605a      	str	r2, [r3, #4]
 800dcd0:	e7c0      	b.n	800dc54 <__gethex+0x396>
 800dcd2:	692a      	ldr	r2, [r5, #16]
 800dcd4:	42a2      	cmp	r2, r4
 800dcd6:	dd0a      	ble.n	800dcee <__gethex+0x430>
 800dcd8:	2101      	movs	r1, #1
 800dcda:	0028      	movs	r0, r5
 800dcdc:	f7ff fda6 	bl	800d82c <rshift>
 800dce0:	9b02      	ldr	r3, [sp, #8]
 800dce2:	3701      	adds	r7, #1
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	2601      	movs	r6, #1
 800dce8:	42bb      	cmp	r3, r7
 800dcea:	dac8      	bge.n	800dc7e <__gethex+0x3c0>
 800dcec:	e6dc      	b.n	800daa8 <__gethex+0x1ea>
 800dcee:	241f      	movs	r4, #31
 800dcf0:	9a01      	ldr	r2, [sp, #4]
 800dcf2:	2601      	movs	r6, #1
 800dcf4:	4022      	ands	r2, r4
 800dcf6:	1e14      	subs	r4, r2, #0
 800dcf8:	d0c1      	beq.n	800dc7e <__gethex+0x3c0>
 800dcfa:	9a04      	ldr	r2, [sp, #16]
 800dcfc:	189b      	adds	r3, r3, r2
 800dcfe:	3b04      	subs	r3, #4
 800dd00:	6818      	ldr	r0, [r3, #0]
 800dd02:	f000 f9c1 	bl	800e088 <__hi0bits>
 800dd06:	2120      	movs	r1, #32
 800dd08:	1b0c      	subs	r4, r1, r4
 800dd0a:	42a0      	cmp	r0, r4
 800dd0c:	dbe4      	blt.n	800dcd8 <__gethex+0x41a>
 800dd0e:	e7b6      	b.n	800dc7e <__gethex+0x3c0>
 800dd10:	0006      	movs	r6, r0
 800dd12:	e7b4      	b.n	800dc7e <__gethex+0x3c0>

0800dd14 <L_shift>:
 800dd14:	2308      	movs	r3, #8
 800dd16:	b570      	push	{r4, r5, r6, lr}
 800dd18:	2520      	movs	r5, #32
 800dd1a:	1a9a      	subs	r2, r3, r2
 800dd1c:	0092      	lsls	r2, r2, #2
 800dd1e:	1aad      	subs	r5, r5, r2
 800dd20:	6843      	ldr	r3, [r0, #4]
 800dd22:	6806      	ldr	r6, [r0, #0]
 800dd24:	001c      	movs	r4, r3
 800dd26:	40ac      	lsls	r4, r5
 800dd28:	40d3      	lsrs	r3, r2
 800dd2a:	4334      	orrs	r4, r6
 800dd2c:	6004      	str	r4, [r0, #0]
 800dd2e:	6043      	str	r3, [r0, #4]
 800dd30:	3004      	adds	r0, #4
 800dd32:	4288      	cmp	r0, r1
 800dd34:	d3f4      	bcc.n	800dd20 <L_shift+0xc>
 800dd36:	bd70      	pop	{r4, r5, r6, pc}

0800dd38 <__match>:
 800dd38:	b530      	push	{r4, r5, lr}
 800dd3a:	6803      	ldr	r3, [r0, #0]
 800dd3c:	780c      	ldrb	r4, [r1, #0]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	2c00      	cmp	r4, #0
 800dd42:	d102      	bne.n	800dd4a <__match+0x12>
 800dd44:	6003      	str	r3, [r0, #0]
 800dd46:	2001      	movs	r0, #1
 800dd48:	bd30      	pop	{r4, r5, pc}
 800dd4a:	781a      	ldrb	r2, [r3, #0]
 800dd4c:	0015      	movs	r5, r2
 800dd4e:	3d41      	subs	r5, #65	; 0x41
 800dd50:	2d19      	cmp	r5, #25
 800dd52:	d800      	bhi.n	800dd56 <__match+0x1e>
 800dd54:	3220      	adds	r2, #32
 800dd56:	3101      	adds	r1, #1
 800dd58:	42a2      	cmp	r2, r4
 800dd5a:	d0ef      	beq.n	800dd3c <__match+0x4>
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	e7f3      	b.n	800dd48 <__match+0x10>

0800dd60 <__hexnan>:
 800dd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd62:	b08b      	sub	sp, #44	; 0x2c
 800dd64:	9201      	str	r2, [sp, #4]
 800dd66:	680a      	ldr	r2, [r1, #0]
 800dd68:	9901      	ldr	r1, [sp, #4]
 800dd6a:	1153      	asrs	r3, r2, #5
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	18cb      	adds	r3, r1, r3
 800dd70:	9304      	str	r3, [sp, #16]
 800dd72:	231f      	movs	r3, #31
 800dd74:	401a      	ands	r2, r3
 800dd76:	9008      	str	r0, [sp, #32]
 800dd78:	9206      	str	r2, [sp, #24]
 800dd7a:	d002      	beq.n	800dd82 <__hexnan+0x22>
 800dd7c:	9b04      	ldr	r3, [sp, #16]
 800dd7e:	3304      	adds	r3, #4
 800dd80:	9304      	str	r3, [sp, #16]
 800dd82:	9b04      	ldr	r3, [sp, #16]
 800dd84:	2500      	movs	r5, #0
 800dd86:	1f1e      	subs	r6, r3, #4
 800dd88:	0037      	movs	r7, r6
 800dd8a:	0034      	movs	r4, r6
 800dd8c:	9b08      	ldr	r3, [sp, #32]
 800dd8e:	6035      	str	r5, [r6, #0]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	9507      	str	r5, [sp, #28]
 800dd94:	9305      	str	r3, [sp, #20]
 800dd96:	9502      	str	r5, [sp, #8]
 800dd98:	9b05      	ldr	r3, [sp, #20]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd9e:	9b05      	ldr	r3, [sp, #20]
 800dda0:	785b      	ldrb	r3, [r3, #1]
 800dda2:	9303      	str	r3, [sp, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d028      	beq.n	800ddfa <__hexnan+0x9a>
 800dda8:	9803      	ldr	r0, [sp, #12]
 800ddaa:	f7ff fd73 	bl	800d894 <__hexdig_fun>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d145      	bne.n	800de3e <__hexnan+0xde>
 800ddb2:	9b03      	ldr	r3, [sp, #12]
 800ddb4:	2b20      	cmp	r3, #32
 800ddb6:	d819      	bhi.n	800ddec <__hexnan+0x8c>
 800ddb8:	9b02      	ldr	r3, [sp, #8]
 800ddba:	9a07      	ldr	r2, [sp, #28]
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	dd12      	ble.n	800dde6 <__hexnan+0x86>
 800ddc0:	42bc      	cmp	r4, r7
 800ddc2:	d206      	bcs.n	800ddd2 <__hexnan+0x72>
 800ddc4:	2d07      	cmp	r5, #7
 800ddc6:	dc04      	bgt.n	800ddd2 <__hexnan+0x72>
 800ddc8:	002a      	movs	r2, r5
 800ddca:	0039      	movs	r1, r7
 800ddcc:	0020      	movs	r0, r4
 800ddce:	f7ff ffa1 	bl	800dd14 <L_shift>
 800ddd2:	9b01      	ldr	r3, [sp, #4]
 800ddd4:	2508      	movs	r5, #8
 800ddd6:	429c      	cmp	r4, r3
 800ddd8:	d905      	bls.n	800dde6 <__hexnan+0x86>
 800ddda:	1f27      	subs	r7, r4, #4
 800dddc:	2500      	movs	r5, #0
 800ddde:	003c      	movs	r4, r7
 800dde0:	9b02      	ldr	r3, [sp, #8]
 800dde2:	603d      	str	r5, [r7, #0]
 800dde4:	9307      	str	r3, [sp, #28]
 800dde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde8:	9305      	str	r3, [sp, #20]
 800ddea:	e7d5      	b.n	800dd98 <__hexnan+0x38>
 800ddec:	9b03      	ldr	r3, [sp, #12]
 800ddee:	2b29      	cmp	r3, #41	; 0x29
 800ddf0:	d14a      	bne.n	800de88 <__hexnan+0x128>
 800ddf2:	9b05      	ldr	r3, [sp, #20]
 800ddf4:	9a08      	ldr	r2, [sp, #32]
 800ddf6:	3302      	adds	r3, #2
 800ddf8:	6013      	str	r3, [r2, #0]
 800ddfa:	9b02      	ldr	r3, [sp, #8]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d043      	beq.n	800de88 <__hexnan+0x128>
 800de00:	42bc      	cmp	r4, r7
 800de02:	d206      	bcs.n	800de12 <__hexnan+0xb2>
 800de04:	2d07      	cmp	r5, #7
 800de06:	dc04      	bgt.n	800de12 <__hexnan+0xb2>
 800de08:	002a      	movs	r2, r5
 800de0a:	0039      	movs	r1, r7
 800de0c:	0020      	movs	r0, r4
 800de0e:	f7ff ff81 	bl	800dd14 <L_shift>
 800de12:	9b01      	ldr	r3, [sp, #4]
 800de14:	429c      	cmp	r4, r3
 800de16:	d926      	bls.n	800de66 <__hexnan+0x106>
 800de18:	cc04      	ldmia	r4!, {r2}
 800de1a:	601a      	str	r2, [r3, #0]
 800de1c:	3304      	adds	r3, #4
 800de1e:	42a6      	cmp	r6, r4
 800de20:	d2fa      	bcs.n	800de18 <__hexnan+0xb8>
 800de22:	2200      	movs	r2, #0
 800de24:	c304      	stmia	r3!, {r2}
 800de26:	429e      	cmp	r6, r3
 800de28:	d2fc      	bcs.n	800de24 <__hexnan+0xc4>
 800de2a:	6833      	ldr	r3, [r6, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d104      	bne.n	800de3a <__hexnan+0xda>
 800de30:	9b01      	ldr	r3, [sp, #4]
 800de32:	429e      	cmp	r6, r3
 800de34:	d126      	bne.n	800de84 <__hexnan+0x124>
 800de36:	2301      	movs	r3, #1
 800de38:	6033      	str	r3, [r6, #0]
 800de3a:	2005      	movs	r0, #5
 800de3c:	e025      	b.n	800de8a <__hexnan+0x12a>
 800de3e:	9b02      	ldr	r3, [sp, #8]
 800de40:	3501      	adds	r5, #1
 800de42:	3301      	adds	r3, #1
 800de44:	9302      	str	r3, [sp, #8]
 800de46:	2d08      	cmp	r5, #8
 800de48:	dd06      	ble.n	800de58 <__hexnan+0xf8>
 800de4a:	9b01      	ldr	r3, [sp, #4]
 800de4c:	429c      	cmp	r4, r3
 800de4e:	d9ca      	bls.n	800dde6 <__hexnan+0x86>
 800de50:	2300      	movs	r3, #0
 800de52:	2501      	movs	r5, #1
 800de54:	3c04      	subs	r4, #4
 800de56:	6023      	str	r3, [r4, #0]
 800de58:	220f      	movs	r2, #15
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	4010      	ands	r0, r2
 800de5e:	011b      	lsls	r3, r3, #4
 800de60:	4318      	orrs	r0, r3
 800de62:	6020      	str	r0, [r4, #0]
 800de64:	e7bf      	b.n	800dde6 <__hexnan+0x86>
 800de66:	9b06      	ldr	r3, [sp, #24]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d0de      	beq.n	800de2a <__hexnan+0xca>
 800de6c:	2120      	movs	r1, #32
 800de6e:	9a06      	ldr	r2, [sp, #24]
 800de70:	9b04      	ldr	r3, [sp, #16]
 800de72:	1a89      	subs	r1, r1, r2
 800de74:	2201      	movs	r2, #1
 800de76:	4252      	negs	r2, r2
 800de78:	40ca      	lsrs	r2, r1
 800de7a:	3b04      	subs	r3, #4
 800de7c:	6819      	ldr	r1, [r3, #0]
 800de7e:	400a      	ands	r2, r1
 800de80:	601a      	str	r2, [r3, #0]
 800de82:	e7d2      	b.n	800de2a <__hexnan+0xca>
 800de84:	3e04      	subs	r6, #4
 800de86:	e7d0      	b.n	800de2a <__hexnan+0xca>
 800de88:	2004      	movs	r0, #4
 800de8a:	b00b      	add	sp, #44	; 0x2c
 800de8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de8e <__locale_ctype_ptr_l>:
 800de8e:	30ec      	adds	r0, #236	; 0xec
 800de90:	6800      	ldr	r0, [r0, #0]
 800de92:	4770      	bx	lr

0800de94 <__localeconv_l>:
 800de94:	30f0      	adds	r0, #240	; 0xf0
 800de96:	4770      	bx	lr

0800de98 <_localeconv_r>:
 800de98:	4b03      	ldr	r3, [pc, #12]	; (800dea8 <_localeconv_r+0x10>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	6a18      	ldr	r0, [r3, #32]
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d100      	bne.n	800dea4 <_localeconv_r+0xc>
 800dea2:	4802      	ldr	r0, [pc, #8]	; (800deac <_localeconv_r+0x14>)
 800dea4:	30f0      	adds	r0, #240	; 0xf0
 800dea6:	4770      	bx	lr
 800dea8:	20000044 	.word	0x20000044
 800deac:	200000a8 	.word	0x200000a8

0800deb0 <__ascii_mbtowc>:
 800deb0:	b082      	sub	sp, #8
 800deb2:	2900      	cmp	r1, #0
 800deb4:	d100      	bne.n	800deb8 <__ascii_mbtowc+0x8>
 800deb6:	a901      	add	r1, sp, #4
 800deb8:	1e10      	subs	r0, r2, #0
 800deba:	d006      	beq.n	800deca <__ascii_mbtowc+0x1a>
 800debc:	2b00      	cmp	r3, #0
 800debe:	d006      	beq.n	800dece <__ascii_mbtowc+0x1e>
 800dec0:	7813      	ldrb	r3, [r2, #0]
 800dec2:	600b      	str	r3, [r1, #0]
 800dec4:	7810      	ldrb	r0, [r2, #0]
 800dec6:	1e43      	subs	r3, r0, #1
 800dec8:	4198      	sbcs	r0, r3
 800deca:	b002      	add	sp, #8
 800decc:	4770      	bx	lr
 800dece:	2002      	movs	r0, #2
 800ded0:	4240      	negs	r0, r0
 800ded2:	e7fa      	b.n	800deca <__ascii_mbtowc+0x1a>

0800ded4 <memchr>:
 800ded4:	b2c9      	uxtb	r1, r1
 800ded6:	1882      	adds	r2, r0, r2
 800ded8:	4290      	cmp	r0, r2
 800deda:	d101      	bne.n	800dee0 <memchr+0xc>
 800dedc:	2000      	movs	r0, #0
 800dede:	4770      	bx	lr
 800dee0:	7803      	ldrb	r3, [r0, #0]
 800dee2:	428b      	cmp	r3, r1
 800dee4:	d0fb      	beq.n	800dede <memchr+0xa>
 800dee6:	3001      	adds	r0, #1
 800dee8:	e7f6      	b.n	800ded8 <memchr+0x4>

0800deea <__malloc_lock>:
 800deea:	4770      	bx	lr

0800deec <__malloc_unlock>:
 800deec:	4770      	bx	lr

0800deee <_Balloc>:
 800deee:	b570      	push	{r4, r5, r6, lr}
 800def0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800def2:	0004      	movs	r4, r0
 800def4:	000d      	movs	r5, r1
 800def6:	2e00      	cmp	r6, #0
 800def8:	d107      	bne.n	800df0a <_Balloc+0x1c>
 800defa:	2010      	movs	r0, #16
 800defc:	f7fc ffb6 	bl	800ae6c <malloc>
 800df00:	6260      	str	r0, [r4, #36]	; 0x24
 800df02:	6046      	str	r6, [r0, #4]
 800df04:	6086      	str	r6, [r0, #8]
 800df06:	6006      	str	r6, [r0, #0]
 800df08:	60c6      	str	r6, [r0, #12]
 800df0a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800df0c:	68f3      	ldr	r3, [r6, #12]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d013      	beq.n	800df3a <_Balloc+0x4c>
 800df12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df14:	00aa      	lsls	r2, r5, #2
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	189b      	adds	r3, r3, r2
 800df1a:	6818      	ldr	r0, [r3, #0]
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d118      	bne.n	800df52 <_Balloc+0x64>
 800df20:	2101      	movs	r1, #1
 800df22:	000e      	movs	r6, r1
 800df24:	40ae      	lsls	r6, r5
 800df26:	1d72      	adds	r2, r6, #5
 800df28:	0092      	lsls	r2, r2, #2
 800df2a:	0020      	movs	r0, r4
 800df2c:	f000 fbd5 	bl	800e6da <_calloc_r>
 800df30:	2800      	cmp	r0, #0
 800df32:	d00c      	beq.n	800df4e <_Balloc+0x60>
 800df34:	6045      	str	r5, [r0, #4]
 800df36:	6086      	str	r6, [r0, #8]
 800df38:	e00d      	b.n	800df56 <_Balloc+0x68>
 800df3a:	2221      	movs	r2, #33	; 0x21
 800df3c:	2104      	movs	r1, #4
 800df3e:	0020      	movs	r0, r4
 800df40:	f000 fbcb 	bl	800e6da <_calloc_r>
 800df44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df46:	60f0      	str	r0, [r6, #12]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1e1      	bne.n	800df12 <_Balloc+0x24>
 800df4e:	2000      	movs	r0, #0
 800df50:	bd70      	pop	{r4, r5, r6, pc}
 800df52:	6802      	ldr	r2, [r0, #0]
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	2300      	movs	r3, #0
 800df58:	6103      	str	r3, [r0, #16]
 800df5a:	60c3      	str	r3, [r0, #12]
 800df5c:	e7f8      	b.n	800df50 <_Balloc+0x62>

0800df5e <_Bfree>:
 800df5e:	b570      	push	{r4, r5, r6, lr}
 800df60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800df62:	0006      	movs	r6, r0
 800df64:	000d      	movs	r5, r1
 800df66:	2c00      	cmp	r4, #0
 800df68:	d107      	bne.n	800df7a <_Bfree+0x1c>
 800df6a:	2010      	movs	r0, #16
 800df6c:	f7fc ff7e 	bl	800ae6c <malloc>
 800df70:	6270      	str	r0, [r6, #36]	; 0x24
 800df72:	6044      	str	r4, [r0, #4]
 800df74:	6084      	str	r4, [r0, #8]
 800df76:	6004      	str	r4, [r0, #0]
 800df78:	60c4      	str	r4, [r0, #12]
 800df7a:	2d00      	cmp	r5, #0
 800df7c:	d007      	beq.n	800df8e <_Bfree+0x30>
 800df7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800df80:	686a      	ldr	r2, [r5, #4]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	0092      	lsls	r2, r2, #2
 800df86:	189b      	adds	r3, r3, r2
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	602a      	str	r2, [r5, #0]
 800df8c:	601d      	str	r5, [r3, #0]
 800df8e:	bd70      	pop	{r4, r5, r6, pc}

0800df90 <__multadd>:
 800df90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df92:	001e      	movs	r6, r3
 800df94:	2314      	movs	r3, #20
 800df96:	469c      	mov	ip, r3
 800df98:	0007      	movs	r7, r0
 800df9a:	000c      	movs	r4, r1
 800df9c:	2000      	movs	r0, #0
 800df9e:	690d      	ldr	r5, [r1, #16]
 800dfa0:	448c      	add	ip, r1
 800dfa2:	4663      	mov	r3, ip
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	b299      	uxth	r1, r3
 800dfaa:	4663      	mov	r3, ip
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4351      	muls	r1, r2
 800dfb0:	0c1b      	lsrs	r3, r3, #16
 800dfb2:	4353      	muls	r3, r2
 800dfb4:	1989      	adds	r1, r1, r6
 800dfb6:	0c0e      	lsrs	r6, r1, #16
 800dfb8:	199b      	adds	r3, r3, r6
 800dfba:	b289      	uxth	r1, r1
 800dfbc:	0c1e      	lsrs	r6, r3, #16
 800dfbe:	041b      	lsls	r3, r3, #16
 800dfc0:	185b      	adds	r3, r3, r1
 800dfc2:	4661      	mov	r1, ip
 800dfc4:	c108      	stmia	r1!, {r3}
 800dfc6:	468c      	mov	ip, r1
 800dfc8:	4285      	cmp	r5, r0
 800dfca:	dcea      	bgt.n	800dfa2 <__multadd+0x12>
 800dfcc:	2e00      	cmp	r6, #0
 800dfce:	d01b      	beq.n	800e008 <__multadd+0x78>
 800dfd0:	68a3      	ldr	r3, [r4, #8]
 800dfd2:	42ab      	cmp	r3, r5
 800dfd4:	dc12      	bgt.n	800dffc <__multadd+0x6c>
 800dfd6:	6863      	ldr	r3, [r4, #4]
 800dfd8:	0038      	movs	r0, r7
 800dfda:	1c59      	adds	r1, r3, #1
 800dfdc:	f7ff ff87 	bl	800deee <_Balloc>
 800dfe0:	0021      	movs	r1, r4
 800dfe2:	6923      	ldr	r3, [r4, #16]
 800dfe4:	9001      	str	r0, [sp, #4]
 800dfe6:	1c9a      	adds	r2, r3, #2
 800dfe8:	0092      	lsls	r2, r2, #2
 800dfea:	310c      	adds	r1, #12
 800dfec:	300c      	adds	r0, #12
 800dfee:	f7fc ff47 	bl	800ae80 <memcpy>
 800dff2:	0021      	movs	r1, r4
 800dff4:	0038      	movs	r0, r7
 800dff6:	f7ff ffb2 	bl	800df5e <_Bfree>
 800dffa:	9c01      	ldr	r4, [sp, #4]
 800dffc:	1d2b      	adds	r3, r5, #4
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	18e3      	adds	r3, r4, r3
 800e002:	3501      	adds	r5, #1
 800e004:	605e      	str	r6, [r3, #4]
 800e006:	6125      	str	r5, [r4, #16]
 800e008:	0020      	movs	r0, r4
 800e00a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800e00c <__s2b>:
 800e00c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e00e:	0006      	movs	r6, r0
 800e010:	0018      	movs	r0, r3
 800e012:	000c      	movs	r4, r1
 800e014:	3008      	adds	r0, #8
 800e016:	2109      	movs	r1, #9
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	0015      	movs	r5, r2
 800e01c:	f7f2 f910 	bl	8000240 <__divsi3>
 800e020:	2301      	movs	r3, #1
 800e022:	2100      	movs	r1, #0
 800e024:	4283      	cmp	r3, r0
 800e026:	db1f      	blt.n	800e068 <__s2b+0x5c>
 800e028:	0030      	movs	r0, r6
 800e02a:	f7ff ff60 	bl	800deee <_Balloc>
 800e02e:	9b08      	ldr	r3, [sp, #32]
 800e030:	6143      	str	r3, [r0, #20]
 800e032:	2301      	movs	r3, #1
 800e034:	6103      	str	r3, [r0, #16]
 800e036:	2d09      	cmp	r5, #9
 800e038:	dd19      	ble.n	800e06e <__s2b+0x62>
 800e03a:	0023      	movs	r3, r4
 800e03c:	3309      	adds	r3, #9
 800e03e:	001f      	movs	r7, r3
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	1964      	adds	r4, r4, r5
 800e044:	783b      	ldrb	r3, [r7, #0]
 800e046:	0001      	movs	r1, r0
 800e048:	3b30      	subs	r3, #48	; 0x30
 800e04a:	220a      	movs	r2, #10
 800e04c:	0030      	movs	r0, r6
 800e04e:	3701      	adds	r7, #1
 800e050:	f7ff ff9e 	bl	800df90 <__multadd>
 800e054:	42a7      	cmp	r7, r4
 800e056:	d1f5      	bne.n	800e044 <__s2b+0x38>
 800e058:	9b00      	ldr	r3, [sp, #0]
 800e05a:	195c      	adds	r4, r3, r5
 800e05c:	3c08      	subs	r4, #8
 800e05e:	002f      	movs	r7, r5
 800e060:	9b01      	ldr	r3, [sp, #4]
 800e062:	429f      	cmp	r7, r3
 800e064:	db06      	blt.n	800e074 <__s2b+0x68>
 800e066:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e068:	005b      	lsls	r3, r3, #1
 800e06a:	3101      	adds	r1, #1
 800e06c:	e7da      	b.n	800e024 <__s2b+0x18>
 800e06e:	340a      	adds	r4, #10
 800e070:	2509      	movs	r5, #9
 800e072:	e7f4      	b.n	800e05e <__s2b+0x52>
 800e074:	1b63      	subs	r3, r4, r5
 800e076:	5ddb      	ldrb	r3, [r3, r7]
 800e078:	0001      	movs	r1, r0
 800e07a:	3b30      	subs	r3, #48	; 0x30
 800e07c:	220a      	movs	r2, #10
 800e07e:	0030      	movs	r0, r6
 800e080:	f7ff ff86 	bl	800df90 <__multadd>
 800e084:	3701      	adds	r7, #1
 800e086:	e7eb      	b.n	800e060 <__s2b+0x54>

0800e088 <__hi0bits>:
 800e088:	0003      	movs	r3, r0
 800e08a:	0c02      	lsrs	r2, r0, #16
 800e08c:	2000      	movs	r0, #0
 800e08e:	4282      	cmp	r2, r0
 800e090:	d101      	bne.n	800e096 <__hi0bits+0xe>
 800e092:	041b      	lsls	r3, r3, #16
 800e094:	3010      	adds	r0, #16
 800e096:	0e1a      	lsrs	r2, r3, #24
 800e098:	d101      	bne.n	800e09e <__hi0bits+0x16>
 800e09a:	3008      	adds	r0, #8
 800e09c:	021b      	lsls	r3, r3, #8
 800e09e:	0f1a      	lsrs	r2, r3, #28
 800e0a0:	d101      	bne.n	800e0a6 <__hi0bits+0x1e>
 800e0a2:	3004      	adds	r0, #4
 800e0a4:	011b      	lsls	r3, r3, #4
 800e0a6:	0f9a      	lsrs	r2, r3, #30
 800e0a8:	d101      	bne.n	800e0ae <__hi0bits+0x26>
 800e0aa:	3002      	adds	r0, #2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	db03      	blt.n	800e0ba <__hi0bits+0x32>
 800e0b2:	3001      	adds	r0, #1
 800e0b4:	005b      	lsls	r3, r3, #1
 800e0b6:	d400      	bmi.n	800e0ba <__hi0bits+0x32>
 800e0b8:	2020      	movs	r0, #32
 800e0ba:	4770      	bx	lr

0800e0bc <__lo0bits>:
 800e0bc:	2207      	movs	r2, #7
 800e0be:	6803      	ldr	r3, [r0, #0]
 800e0c0:	b510      	push	{r4, lr}
 800e0c2:	0001      	movs	r1, r0
 800e0c4:	401a      	ands	r2, r3
 800e0c6:	d00d      	beq.n	800e0e4 <__lo0bits+0x28>
 800e0c8:	2401      	movs	r4, #1
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	4223      	tst	r3, r4
 800e0ce:	d105      	bne.n	800e0dc <__lo0bits+0x20>
 800e0d0:	3002      	adds	r0, #2
 800e0d2:	4203      	tst	r3, r0
 800e0d4:	d003      	beq.n	800e0de <__lo0bits+0x22>
 800e0d6:	40e3      	lsrs	r3, r4
 800e0d8:	0020      	movs	r0, r4
 800e0da:	600b      	str	r3, [r1, #0]
 800e0dc:	bd10      	pop	{r4, pc}
 800e0de:	089b      	lsrs	r3, r3, #2
 800e0e0:	600b      	str	r3, [r1, #0]
 800e0e2:	e7fb      	b.n	800e0dc <__lo0bits+0x20>
 800e0e4:	b29c      	uxth	r4, r3
 800e0e6:	0010      	movs	r0, r2
 800e0e8:	2c00      	cmp	r4, #0
 800e0ea:	d101      	bne.n	800e0f0 <__lo0bits+0x34>
 800e0ec:	2010      	movs	r0, #16
 800e0ee:	0c1b      	lsrs	r3, r3, #16
 800e0f0:	b2da      	uxtb	r2, r3
 800e0f2:	2a00      	cmp	r2, #0
 800e0f4:	d101      	bne.n	800e0fa <__lo0bits+0x3e>
 800e0f6:	3008      	adds	r0, #8
 800e0f8:	0a1b      	lsrs	r3, r3, #8
 800e0fa:	071a      	lsls	r2, r3, #28
 800e0fc:	d101      	bne.n	800e102 <__lo0bits+0x46>
 800e0fe:	3004      	adds	r0, #4
 800e100:	091b      	lsrs	r3, r3, #4
 800e102:	079a      	lsls	r2, r3, #30
 800e104:	d101      	bne.n	800e10a <__lo0bits+0x4e>
 800e106:	3002      	adds	r0, #2
 800e108:	089b      	lsrs	r3, r3, #2
 800e10a:	07da      	lsls	r2, r3, #31
 800e10c:	d4e8      	bmi.n	800e0e0 <__lo0bits+0x24>
 800e10e:	085b      	lsrs	r3, r3, #1
 800e110:	d001      	beq.n	800e116 <__lo0bits+0x5a>
 800e112:	3001      	adds	r0, #1
 800e114:	e7e4      	b.n	800e0e0 <__lo0bits+0x24>
 800e116:	2020      	movs	r0, #32
 800e118:	e7e0      	b.n	800e0dc <__lo0bits+0x20>

0800e11a <__i2b>:
 800e11a:	b510      	push	{r4, lr}
 800e11c:	000c      	movs	r4, r1
 800e11e:	2101      	movs	r1, #1
 800e120:	f7ff fee5 	bl	800deee <_Balloc>
 800e124:	2301      	movs	r3, #1
 800e126:	6144      	str	r4, [r0, #20]
 800e128:	6103      	str	r3, [r0, #16]
 800e12a:	bd10      	pop	{r4, pc}

0800e12c <__multiply>:
 800e12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e12e:	690b      	ldr	r3, [r1, #16]
 800e130:	0014      	movs	r4, r2
 800e132:	6912      	ldr	r2, [r2, #16]
 800e134:	b089      	sub	sp, #36	; 0x24
 800e136:	000d      	movs	r5, r1
 800e138:	4293      	cmp	r3, r2
 800e13a:	da01      	bge.n	800e140 <__multiply+0x14>
 800e13c:	0025      	movs	r5, r4
 800e13e:	000c      	movs	r4, r1
 800e140:	692f      	ldr	r7, [r5, #16]
 800e142:	6926      	ldr	r6, [r4, #16]
 800e144:	6869      	ldr	r1, [r5, #4]
 800e146:	19bb      	adds	r3, r7, r6
 800e148:	9302      	str	r3, [sp, #8]
 800e14a:	68ab      	ldr	r3, [r5, #8]
 800e14c:	19ba      	adds	r2, r7, r6
 800e14e:	4293      	cmp	r3, r2
 800e150:	da00      	bge.n	800e154 <__multiply+0x28>
 800e152:	3101      	adds	r1, #1
 800e154:	f7ff fecb 	bl	800deee <_Balloc>
 800e158:	0002      	movs	r2, r0
 800e15a:	19bb      	adds	r3, r7, r6
 800e15c:	3214      	adds	r2, #20
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	18d3      	adds	r3, r2, r3
 800e162:	469c      	mov	ip, r3
 800e164:	2100      	movs	r1, #0
 800e166:	0013      	movs	r3, r2
 800e168:	9004      	str	r0, [sp, #16]
 800e16a:	4563      	cmp	r3, ip
 800e16c:	d31d      	bcc.n	800e1aa <__multiply+0x7e>
 800e16e:	3514      	adds	r5, #20
 800e170:	00bf      	lsls	r7, r7, #2
 800e172:	19eb      	adds	r3, r5, r7
 800e174:	3414      	adds	r4, #20
 800e176:	00b6      	lsls	r6, r6, #2
 800e178:	9305      	str	r3, [sp, #20]
 800e17a:	19a3      	adds	r3, r4, r6
 800e17c:	9503      	str	r5, [sp, #12]
 800e17e:	9401      	str	r4, [sp, #4]
 800e180:	9307      	str	r3, [sp, #28]
 800e182:	9b07      	ldr	r3, [sp, #28]
 800e184:	9901      	ldr	r1, [sp, #4]
 800e186:	4299      	cmp	r1, r3
 800e188:	d311      	bcc.n	800e1ae <__multiply+0x82>
 800e18a:	9b02      	ldr	r3, [sp, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	dd06      	ble.n	800e19e <__multiply+0x72>
 800e190:	2304      	movs	r3, #4
 800e192:	425b      	negs	r3, r3
 800e194:	449c      	add	ip, r3
 800e196:	4663      	mov	r3, ip
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d051      	beq.n	800e242 <__multiply+0x116>
 800e19e:	9b04      	ldr	r3, [sp, #16]
 800e1a0:	9a02      	ldr	r2, [sp, #8]
 800e1a2:	0018      	movs	r0, r3
 800e1a4:	611a      	str	r2, [r3, #16]
 800e1a6:	b009      	add	sp, #36	; 0x24
 800e1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1aa:	c302      	stmia	r3!, {r1}
 800e1ac:	e7dd      	b.n	800e16a <__multiply+0x3e>
 800e1ae:	9b01      	ldr	r3, [sp, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	b298      	uxth	r0, r3
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d01c      	beq.n	800e1f2 <__multiply+0xc6>
 800e1b8:	0015      	movs	r5, r2
 800e1ba:	2600      	movs	r6, #0
 800e1bc:	9f03      	ldr	r7, [sp, #12]
 800e1be:	cf02      	ldmia	r7!, {r1}
 800e1c0:	682c      	ldr	r4, [r5, #0]
 800e1c2:	b28b      	uxth	r3, r1
 800e1c4:	4343      	muls	r3, r0
 800e1c6:	0c09      	lsrs	r1, r1, #16
 800e1c8:	4341      	muls	r1, r0
 800e1ca:	b2a4      	uxth	r4, r4
 800e1cc:	191b      	adds	r3, r3, r4
 800e1ce:	199b      	adds	r3, r3, r6
 800e1d0:	000e      	movs	r6, r1
 800e1d2:	6829      	ldr	r1, [r5, #0]
 800e1d4:	9506      	str	r5, [sp, #24]
 800e1d6:	0c09      	lsrs	r1, r1, #16
 800e1d8:	1871      	adds	r1, r6, r1
 800e1da:	0c1e      	lsrs	r6, r3, #16
 800e1dc:	1989      	adds	r1, r1, r6
 800e1de:	0c0e      	lsrs	r6, r1, #16
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	0409      	lsls	r1, r1, #16
 800e1e4:	430b      	orrs	r3, r1
 800e1e6:	c508      	stmia	r5!, {r3}
 800e1e8:	9b05      	ldr	r3, [sp, #20]
 800e1ea:	42bb      	cmp	r3, r7
 800e1ec:	d8e7      	bhi.n	800e1be <__multiply+0x92>
 800e1ee:	9b06      	ldr	r3, [sp, #24]
 800e1f0:	605e      	str	r6, [r3, #4]
 800e1f2:	9b01      	ldr	r3, [sp, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	0c1d      	lsrs	r5, r3, #16
 800e1f8:	d01e      	beq.n	800e238 <__multiply+0x10c>
 800e1fa:	0010      	movs	r0, r2
 800e1fc:	2700      	movs	r7, #0
 800e1fe:	6813      	ldr	r3, [r2, #0]
 800e200:	9e03      	ldr	r6, [sp, #12]
 800e202:	6831      	ldr	r1, [r6, #0]
 800e204:	6804      	ldr	r4, [r0, #0]
 800e206:	b289      	uxth	r1, r1
 800e208:	4369      	muls	r1, r5
 800e20a:	0c24      	lsrs	r4, r4, #16
 800e20c:	1909      	adds	r1, r1, r4
 800e20e:	19c9      	adds	r1, r1, r7
 800e210:	040f      	lsls	r7, r1, #16
 800e212:	b29b      	uxth	r3, r3
 800e214:	433b      	orrs	r3, r7
 800e216:	6003      	str	r3, [r0, #0]
 800e218:	ce80      	ldmia	r6!, {r7}
 800e21a:	6843      	ldr	r3, [r0, #4]
 800e21c:	0c3f      	lsrs	r7, r7, #16
 800e21e:	436f      	muls	r7, r5
 800e220:	b29b      	uxth	r3, r3
 800e222:	18fb      	adds	r3, r7, r3
 800e224:	0c09      	lsrs	r1, r1, #16
 800e226:	185b      	adds	r3, r3, r1
 800e228:	9905      	ldr	r1, [sp, #20]
 800e22a:	9006      	str	r0, [sp, #24]
 800e22c:	0c1f      	lsrs	r7, r3, #16
 800e22e:	3004      	adds	r0, #4
 800e230:	42b1      	cmp	r1, r6
 800e232:	d8e6      	bhi.n	800e202 <__multiply+0xd6>
 800e234:	9906      	ldr	r1, [sp, #24]
 800e236:	604b      	str	r3, [r1, #4]
 800e238:	9b01      	ldr	r3, [sp, #4]
 800e23a:	3204      	adds	r2, #4
 800e23c:	3304      	adds	r3, #4
 800e23e:	9301      	str	r3, [sp, #4]
 800e240:	e79f      	b.n	800e182 <__multiply+0x56>
 800e242:	9b02      	ldr	r3, [sp, #8]
 800e244:	3b01      	subs	r3, #1
 800e246:	9302      	str	r3, [sp, #8]
 800e248:	e79f      	b.n	800e18a <__multiply+0x5e>
	...

0800e24c <__pow5mult>:
 800e24c:	2303      	movs	r3, #3
 800e24e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e250:	4013      	ands	r3, r2
 800e252:	0005      	movs	r5, r0
 800e254:	000e      	movs	r6, r1
 800e256:	0014      	movs	r4, r2
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d008      	beq.n	800e26e <__pow5mult+0x22>
 800e25c:	4922      	ldr	r1, [pc, #136]	; (800e2e8 <__pow5mult+0x9c>)
 800e25e:	3b01      	subs	r3, #1
 800e260:	009a      	lsls	r2, r3, #2
 800e262:	5852      	ldr	r2, [r2, r1]
 800e264:	2300      	movs	r3, #0
 800e266:	0031      	movs	r1, r6
 800e268:	f7ff fe92 	bl	800df90 <__multadd>
 800e26c:	0006      	movs	r6, r0
 800e26e:	10a3      	asrs	r3, r4, #2
 800e270:	9301      	str	r3, [sp, #4]
 800e272:	d036      	beq.n	800e2e2 <__pow5mult+0x96>
 800e274:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800e276:	2c00      	cmp	r4, #0
 800e278:	d107      	bne.n	800e28a <__pow5mult+0x3e>
 800e27a:	2010      	movs	r0, #16
 800e27c:	f7fc fdf6 	bl	800ae6c <malloc>
 800e280:	6268      	str	r0, [r5, #36]	; 0x24
 800e282:	6044      	str	r4, [r0, #4]
 800e284:	6084      	str	r4, [r0, #8]
 800e286:	6004      	str	r4, [r0, #0]
 800e288:	60c4      	str	r4, [r0, #12]
 800e28a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800e28c:	68bc      	ldr	r4, [r7, #8]
 800e28e:	2c00      	cmp	r4, #0
 800e290:	d107      	bne.n	800e2a2 <__pow5mult+0x56>
 800e292:	4916      	ldr	r1, [pc, #88]	; (800e2ec <__pow5mult+0xa0>)
 800e294:	0028      	movs	r0, r5
 800e296:	f7ff ff40 	bl	800e11a <__i2b>
 800e29a:	2300      	movs	r3, #0
 800e29c:	0004      	movs	r4, r0
 800e29e:	60b8      	str	r0, [r7, #8]
 800e2a0:	6003      	str	r3, [r0, #0]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	9b01      	ldr	r3, [sp, #4]
 800e2a6:	4213      	tst	r3, r2
 800e2a8:	d00a      	beq.n	800e2c0 <__pow5mult+0x74>
 800e2aa:	0031      	movs	r1, r6
 800e2ac:	0022      	movs	r2, r4
 800e2ae:	0028      	movs	r0, r5
 800e2b0:	f7ff ff3c 	bl	800e12c <__multiply>
 800e2b4:	0007      	movs	r7, r0
 800e2b6:	0031      	movs	r1, r6
 800e2b8:	0028      	movs	r0, r5
 800e2ba:	f7ff fe50 	bl	800df5e <_Bfree>
 800e2be:	003e      	movs	r6, r7
 800e2c0:	9b01      	ldr	r3, [sp, #4]
 800e2c2:	105b      	asrs	r3, r3, #1
 800e2c4:	9301      	str	r3, [sp, #4]
 800e2c6:	d00c      	beq.n	800e2e2 <__pow5mult+0x96>
 800e2c8:	6820      	ldr	r0, [r4, #0]
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d107      	bne.n	800e2de <__pow5mult+0x92>
 800e2ce:	0022      	movs	r2, r4
 800e2d0:	0021      	movs	r1, r4
 800e2d2:	0028      	movs	r0, r5
 800e2d4:	f7ff ff2a 	bl	800e12c <__multiply>
 800e2d8:	2300      	movs	r3, #0
 800e2da:	6020      	str	r0, [r4, #0]
 800e2dc:	6003      	str	r3, [r0, #0]
 800e2de:	0004      	movs	r4, r0
 800e2e0:	e7df      	b.n	800e2a2 <__pow5mult+0x56>
 800e2e2:	0030      	movs	r0, r6
 800e2e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e2e6:	46c0      	nop			; (mov r8, r8)
 800e2e8:	08010100 	.word	0x08010100
 800e2ec:	00000271 	.word	0x00000271

0800e2f0 <__lshift>:
 800e2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2f2:	000d      	movs	r5, r1
 800e2f4:	0017      	movs	r7, r2
 800e2f6:	692b      	ldr	r3, [r5, #16]
 800e2f8:	1154      	asrs	r4, r2, #5
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	18e3      	adds	r3, r4, r3
 800e2fe:	9301      	str	r3, [sp, #4]
 800e300:	3301      	adds	r3, #1
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	6849      	ldr	r1, [r1, #4]
 800e306:	68ab      	ldr	r3, [r5, #8]
 800e308:	9002      	str	r0, [sp, #8]
 800e30a:	9a00      	ldr	r2, [sp, #0]
 800e30c:	4293      	cmp	r3, r2
 800e30e:	db35      	blt.n	800e37c <__lshift+0x8c>
 800e310:	9802      	ldr	r0, [sp, #8]
 800e312:	f7ff fdec 	bl	800deee <_Balloc>
 800e316:	2300      	movs	r3, #0
 800e318:	0002      	movs	r2, r0
 800e31a:	0006      	movs	r6, r0
 800e31c:	0019      	movs	r1, r3
 800e31e:	3214      	adds	r2, #20
 800e320:	42a3      	cmp	r3, r4
 800e322:	db2e      	blt.n	800e382 <__lshift+0x92>
 800e324:	43e3      	mvns	r3, r4
 800e326:	17db      	asrs	r3, r3, #31
 800e328:	401c      	ands	r4, r3
 800e32a:	002b      	movs	r3, r5
 800e32c:	00a4      	lsls	r4, r4, #2
 800e32e:	1914      	adds	r4, r2, r4
 800e330:	692a      	ldr	r2, [r5, #16]
 800e332:	3314      	adds	r3, #20
 800e334:	0092      	lsls	r2, r2, #2
 800e336:	189a      	adds	r2, r3, r2
 800e338:	4694      	mov	ip, r2
 800e33a:	221f      	movs	r2, #31
 800e33c:	4017      	ands	r7, r2
 800e33e:	d024      	beq.n	800e38a <__lshift+0x9a>
 800e340:	3201      	adds	r2, #1
 800e342:	1bd2      	subs	r2, r2, r7
 800e344:	9203      	str	r2, [sp, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	6819      	ldr	r1, [r3, #0]
 800e34a:	0020      	movs	r0, r4
 800e34c:	40b9      	lsls	r1, r7
 800e34e:	430a      	orrs	r2, r1
 800e350:	c404      	stmia	r4!, {r2}
 800e352:	cb04      	ldmia	r3!, {r2}
 800e354:	9903      	ldr	r1, [sp, #12]
 800e356:	40ca      	lsrs	r2, r1
 800e358:	459c      	cmp	ip, r3
 800e35a:	d8f5      	bhi.n	800e348 <__lshift+0x58>
 800e35c:	6042      	str	r2, [r0, #4]
 800e35e:	2a00      	cmp	r2, #0
 800e360:	d002      	beq.n	800e368 <__lshift+0x78>
 800e362:	9b01      	ldr	r3, [sp, #4]
 800e364:	3302      	adds	r3, #2
 800e366:	9300      	str	r3, [sp, #0]
 800e368:	9b00      	ldr	r3, [sp, #0]
 800e36a:	9802      	ldr	r0, [sp, #8]
 800e36c:	3b01      	subs	r3, #1
 800e36e:	6133      	str	r3, [r6, #16]
 800e370:	0029      	movs	r1, r5
 800e372:	f7ff fdf4 	bl	800df5e <_Bfree>
 800e376:	0030      	movs	r0, r6
 800e378:	b005      	add	sp, #20
 800e37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e37c:	3101      	adds	r1, #1
 800e37e:	005b      	lsls	r3, r3, #1
 800e380:	e7c3      	b.n	800e30a <__lshift+0x1a>
 800e382:	0098      	lsls	r0, r3, #2
 800e384:	5011      	str	r1, [r2, r0]
 800e386:	3301      	adds	r3, #1
 800e388:	e7ca      	b.n	800e320 <__lshift+0x30>
 800e38a:	cb04      	ldmia	r3!, {r2}
 800e38c:	c404      	stmia	r4!, {r2}
 800e38e:	459c      	cmp	ip, r3
 800e390:	d8fb      	bhi.n	800e38a <__lshift+0x9a>
 800e392:	e7e9      	b.n	800e368 <__lshift+0x78>

0800e394 <__mcmp>:
 800e394:	690a      	ldr	r2, [r1, #16]
 800e396:	6903      	ldr	r3, [r0, #16]
 800e398:	b530      	push	{r4, r5, lr}
 800e39a:	1a9b      	subs	r3, r3, r2
 800e39c:	d10d      	bne.n	800e3ba <__mcmp+0x26>
 800e39e:	0092      	lsls	r2, r2, #2
 800e3a0:	3014      	adds	r0, #20
 800e3a2:	3114      	adds	r1, #20
 800e3a4:	1884      	adds	r4, r0, r2
 800e3a6:	1889      	adds	r1, r1, r2
 800e3a8:	3c04      	subs	r4, #4
 800e3aa:	3904      	subs	r1, #4
 800e3ac:	6825      	ldr	r5, [r4, #0]
 800e3ae:	680a      	ldr	r2, [r1, #0]
 800e3b0:	4295      	cmp	r5, r2
 800e3b2:	d004      	beq.n	800e3be <__mcmp+0x2a>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	4295      	cmp	r5, r2
 800e3b8:	d304      	bcc.n	800e3c4 <__mcmp+0x30>
 800e3ba:	0018      	movs	r0, r3
 800e3bc:	bd30      	pop	{r4, r5, pc}
 800e3be:	42a0      	cmp	r0, r4
 800e3c0:	d3f2      	bcc.n	800e3a8 <__mcmp+0x14>
 800e3c2:	e7fa      	b.n	800e3ba <__mcmp+0x26>
 800e3c4:	425b      	negs	r3, r3
 800e3c6:	e7f8      	b.n	800e3ba <__mcmp+0x26>

0800e3c8 <__mdiff>:
 800e3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ca:	000d      	movs	r5, r1
 800e3cc:	b085      	sub	sp, #20
 800e3ce:	0007      	movs	r7, r0
 800e3d0:	0011      	movs	r1, r2
 800e3d2:	0028      	movs	r0, r5
 800e3d4:	0014      	movs	r4, r2
 800e3d6:	f7ff ffdd 	bl	800e394 <__mcmp>
 800e3da:	1e06      	subs	r6, r0, #0
 800e3dc:	d108      	bne.n	800e3f0 <__mdiff+0x28>
 800e3de:	0001      	movs	r1, r0
 800e3e0:	0038      	movs	r0, r7
 800e3e2:	f7ff fd84 	bl	800deee <_Balloc>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	6146      	str	r6, [r0, #20]
 800e3ea:	6103      	str	r3, [r0, #16]
 800e3ec:	b005      	add	sp, #20
 800e3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	9301      	str	r3, [sp, #4]
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	db04      	blt.n	800e402 <__mdiff+0x3a>
 800e3f8:	0023      	movs	r3, r4
 800e3fa:	002c      	movs	r4, r5
 800e3fc:	001d      	movs	r5, r3
 800e3fe:	2300      	movs	r3, #0
 800e400:	9301      	str	r3, [sp, #4]
 800e402:	6861      	ldr	r1, [r4, #4]
 800e404:	0038      	movs	r0, r7
 800e406:	f7ff fd72 	bl	800deee <_Balloc>
 800e40a:	002f      	movs	r7, r5
 800e40c:	2200      	movs	r2, #0
 800e40e:	9b01      	ldr	r3, [sp, #4]
 800e410:	6926      	ldr	r6, [r4, #16]
 800e412:	60c3      	str	r3, [r0, #12]
 800e414:	3414      	adds	r4, #20
 800e416:	00b3      	lsls	r3, r6, #2
 800e418:	18e3      	adds	r3, r4, r3
 800e41a:	9302      	str	r3, [sp, #8]
 800e41c:	692b      	ldr	r3, [r5, #16]
 800e41e:	3714      	adds	r7, #20
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	18fb      	adds	r3, r7, r3
 800e424:	9303      	str	r3, [sp, #12]
 800e426:	0003      	movs	r3, r0
 800e428:	4694      	mov	ip, r2
 800e42a:	3314      	adds	r3, #20
 800e42c:	cc20      	ldmia	r4!, {r5}
 800e42e:	cf04      	ldmia	r7!, {r2}
 800e430:	9201      	str	r2, [sp, #4]
 800e432:	b2aa      	uxth	r2, r5
 800e434:	4494      	add	ip, r2
 800e436:	466a      	mov	r2, sp
 800e438:	4661      	mov	r1, ip
 800e43a:	8892      	ldrh	r2, [r2, #4]
 800e43c:	0c2d      	lsrs	r5, r5, #16
 800e43e:	1a8a      	subs	r2, r1, r2
 800e440:	9901      	ldr	r1, [sp, #4]
 800e442:	0c09      	lsrs	r1, r1, #16
 800e444:	1a69      	subs	r1, r5, r1
 800e446:	1415      	asrs	r5, r2, #16
 800e448:	1949      	adds	r1, r1, r5
 800e44a:	140d      	asrs	r5, r1, #16
 800e44c:	b292      	uxth	r2, r2
 800e44e:	0409      	lsls	r1, r1, #16
 800e450:	430a      	orrs	r2, r1
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	9a03      	ldr	r2, [sp, #12]
 800e456:	46ac      	mov	ip, r5
 800e458:	3304      	adds	r3, #4
 800e45a:	42ba      	cmp	r2, r7
 800e45c:	d8e6      	bhi.n	800e42c <__mdiff+0x64>
 800e45e:	9902      	ldr	r1, [sp, #8]
 800e460:	001a      	movs	r2, r3
 800e462:	428c      	cmp	r4, r1
 800e464:	d305      	bcc.n	800e472 <__mdiff+0xaa>
 800e466:	3a04      	subs	r2, #4
 800e468:	6813      	ldr	r3, [r2, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00e      	beq.n	800e48c <__mdiff+0xc4>
 800e46e:	6106      	str	r6, [r0, #16]
 800e470:	e7bc      	b.n	800e3ec <__mdiff+0x24>
 800e472:	cc04      	ldmia	r4!, {r2}
 800e474:	b291      	uxth	r1, r2
 800e476:	4461      	add	r1, ip
 800e478:	140d      	asrs	r5, r1, #16
 800e47a:	0c12      	lsrs	r2, r2, #16
 800e47c:	1952      	adds	r2, r2, r5
 800e47e:	1415      	asrs	r5, r2, #16
 800e480:	b289      	uxth	r1, r1
 800e482:	0412      	lsls	r2, r2, #16
 800e484:	430a      	orrs	r2, r1
 800e486:	46ac      	mov	ip, r5
 800e488:	c304      	stmia	r3!, {r2}
 800e48a:	e7e8      	b.n	800e45e <__mdiff+0x96>
 800e48c:	3e01      	subs	r6, #1
 800e48e:	e7ea      	b.n	800e466 <__mdiff+0x9e>

0800e490 <__ulp>:
 800e490:	000b      	movs	r3, r1
 800e492:	4910      	ldr	r1, [pc, #64]	; (800e4d4 <__ulp+0x44>)
 800e494:	b510      	push	{r4, lr}
 800e496:	4019      	ands	r1, r3
 800e498:	4b0f      	ldr	r3, [pc, #60]	; (800e4d8 <__ulp+0x48>)
 800e49a:	18c9      	adds	r1, r1, r3
 800e49c:	2900      	cmp	r1, #0
 800e49e:	dd04      	ble.n	800e4aa <__ulp+0x1a>
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	000b      	movs	r3, r1
 800e4a4:	0010      	movs	r0, r2
 800e4a6:	0019      	movs	r1, r3
 800e4a8:	bd10      	pop	{r4, pc}
 800e4aa:	4249      	negs	r1, r1
 800e4ac:	1509      	asrs	r1, r1, #20
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	2913      	cmp	r1, #19
 800e4b4:	dc04      	bgt.n	800e4c0 <__ulp+0x30>
 800e4b6:	2080      	movs	r0, #128	; 0x80
 800e4b8:	0300      	lsls	r0, r0, #12
 800e4ba:	4108      	asrs	r0, r1
 800e4bc:	0003      	movs	r3, r0
 800e4be:	e7f1      	b.n	800e4a4 <__ulp+0x14>
 800e4c0:	3914      	subs	r1, #20
 800e4c2:	2001      	movs	r0, #1
 800e4c4:	291e      	cmp	r1, #30
 800e4c6:	dc02      	bgt.n	800e4ce <__ulp+0x3e>
 800e4c8:	241f      	movs	r4, #31
 800e4ca:	1a61      	subs	r1, r4, r1
 800e4cc:	4088      	lsls	r0, r1
 800e4ce:	0002      	movs	r2, r0
 800e4d0:	e7e8      	b.n	800e4a4 <__ulp+0x14>
 800e4d2:	46c0      	nop			; (mov r8, r8)
 800e4d4:	7ff00000 	.word	0x7ff00000
 800e4d8:	fcc00000 	.word	0xfcc00000

0800e4dc <__b2d>:
 800e4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4de:	0006      	movs	r6, r0
 800e4e0:	6903      	ldr	r3, [r0, #16]
 800e4e2:	3614      	adds	r6, #20
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	18f3      	adds	r3, r6, r3
 800e4e8:	1f1d      	subs	r5, r3, #4
 800e4ea:	682c      	ldr	r4, [r5, #0]
 800e4ec:	000f      	movs	r7, r1
 800e4ee:	0020      	movs	r0, r4
 800e4f0:	9301      	str	r3, [sp, #4]
 800e4f2:	f7ff fdc9 	bl	800e088 <__hi0bits>
 800e4f6:	2320      	movs	r3, #32
 800e4f8:	1a1b      	subs	r3, r3, r0
 800e4fa:	603b      	str	r3, [r7, #0]
 800e4fc:	491c      	ldr	r1, [pc, #112]	; (800e570 <__b2d+0x94>)
 800e4fe:	280a      	cmp	r0, #10
 800e500:	dc16      	bgt.n	800e530 <__b2d+0x54>
 800e502:	230b      	movs	r3, #11
 800e504:	0027      	movs	r7, r4
 800e506:	1a1b      	subs	r3, r3, r0
 800e508:	40df      	lsrs	r7, r3
 800e50a:	4339      	orrs	r1, r7
 800e50c:	469c      	mov	ip, r3
 800e50e:	000b      	movs	r3, r1
 800e510:	2100      	movs	r1, #0
 800e512:	42ae      	cmp	r6, r5
 800e514:	d202      	bcs.n	800e51c <__b2d+0x40>
 800e516:	9901      	ldr	r1, [sp, #4]
 800e518:	3908      	subs	r1, #8
 800e51a:	6809      	ldr	r1, [r1, #0]
 800e51c:	3015      	adds	r0, #21
 800e51e:	4084      	lsls	r4, r0
 800e520:	4660      	mov	r0, ip
 800e522:	40c1      	lsrs	r1, r0
 800e524:	430c      	orrs	r4, r1
 800e526:	0022      	movs	r2, r4
 800e528:	0010      	movs	r0, r2
 800e52a:	0019      	movs	r1, r3
 800e52c:	b003      	add	sp, #12
 800e52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e530:	2700      	movs	r7, #0
 800e532:	42ae      	cmp	r6, r5
 800e534:	d202      	bcs.n	800e53c <__b2d+0x60>
 800e536:	9d01      	ldr	r5, [sp, #4]
 800e538:	3d08      	subs	r5, #8
 800e53a:	682f      	ldr	r7, [r5, #0]
 800e53c:	380b      	subs	r0, #11
 800e53e:	4684      	mov	ip, r0
 800e540:	1e03      	subs	r3, r0, #0
 800e542:	d012      	beq.n	800e56a <__b2d+0x8e>
 800e544:	409c      	lsls	r4, r3
 800e546:	2020      	movs	r0, #32
 800e548:	4321      	orrs	r1, r4
 800e54a:	003c      	movs	r4, r7
 800e54c:	1ac0      	subs	r0, r0, r3
 800e54e:	40c4      	lsrs	r4, r0
 800e550:	4321      	orrs	r1, r4
 800e552:	000b      	movs	r3, r1
 800e554:	2100      	movs	r1, #0
 800e556:	42b5      	cmp	r5, r6
 800e558:	d901      	bls.n	800e55e <__b2d+0x82>
 800e55a:	3d04      	subs	r5, #4
 800e55c:	6829      	ldr	r1, [r5, #0]
 800e55e:	4664      	mov	r4, ip
 800e560:	40c1      	lsrs	r1, r0
 800e562:	40a7      	lsls	r7, r4
 800e564:	430f      	orrs	r7, r1
 800e566:	003a      	movs	r2, r7
 800e568:	e7de      	b.n	800e528 <__b2d+0x4c>
 800e56a:	4321      	orrs	r1, r4
 800e56c:	000b      	movs	r3, r1
 800e56e:	e7fa      	b.n	800e566 <__b2d+0x8a>
 800e570:	3ff00000 	.word	0x3ff00000

0800e574 <__d2b>:
 800e574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e576:	001d      	movs	r5, r3
 800e578:	2101      	movs	r1, #1
 800e57a:	0014      	movs	r4, r2
 800e57c:	9f08      	ldr	r7, [sp, #32]
 800e57e:	f7ff fcb6 	bl	800deee <_Balloc>
 800e582:	032b      	lsls	r3, r5, #12
 800e584:	006d      	lsls	r5, r5, #1
 800e586:	0006      	movs	r6, r0
 800e588:	0b1b      	lsrs	r3, r3, #12
 800e58a:	0d6d      	lsrs	r5, r5, #21
 800e58c:	d124      	bne.n	800e5d8 <__d2b+0x64>
 800e58e:	9301      	str	r3, [sp, #4]
 800e590:	2c00      	cmp	r4, #0
 800e592:	d027      	beq.n	800e5e4 <__d2b+0x70>
 800e594:	4668      	mov	r0, sp
 800e596:	9400      	str	r4, [sp, #0]
 800e598:	f7ff fd90 	bl	800e0bc <__lo0bits>
 800e59c:	9c00      	ldr	r4, [sp, #0]
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	d01e      	beq.n	800e5e0 <__d2b+0x6c>
 800e5a2:	9b01      	ldr	r3, [sp, #4]
 800e5a4:	2120      	movs	r1, #32
 800e5a6:	001a      	movs	r2, r3
 800e5a8:	1a09      	subs	r1, r1, r0
 800e5aa:	408a      	lsls	r2, r1
 800e5ac:	40c3      	lsrs	r3, r0
 800e5ae:	4322      	orrs	r2, r4
 800e5b0:	6172      	str	r2, [r6, #20]
 800e5b2:	9301      	str	r3, [sp, #4]
 800e5b4:	9c01      	ldr	r4, [sp, #4]
 800e5b6:	61b4      	str	r4, [r6, #24]
 800e5b8:	1e63      	subs	r3, r4, #1
 800e5ba:	419c      	sbcs	r4, r3
 800e5bc:	3401      	adds	r4, #1
 800e5be:	6134      	str	r4, [r6, #16]
 800e5c0:	2d00      	cmp	r5, #0
 800e5c2:	d018      	beq.n	800e5f6 <__d2b+0x82>
 800e5c4:	4b12      	ldr	r3, [pc, #72]	; (800e610 <__d2b+0x9c>)
 800e5c6:	18ed      	adds	r5, r5, r3
 800e5c8:	2335      	movs	r3, #53	; 0x35
 800e5ca:	182d      	adds	r5, r5, r0
 800e5cc:	603d      	str	r5, [r7, #0]
 800e5ce:	1a18      	subs	r0, r3, r0
 800e5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5d2:	6018      	str	r0, [r3, #0]
 800e5d4:	0030      	movs	r0, r6
 800e5d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e5d8:	2280      	movs	r2, #128	; 0x80
 800e5da:	0352      	lsls	r2, r2, #13
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	e7d6      	b.n	800e58e <__d2b+0x1a>
 800e5e0:	6174      	str	r4, [r6, #20]
 800e5e2:	e7e7      	b.n	800e5b4 <__d2b+0x40>
 800e5e4:	a801      	add	r0, sp, #4
 800e5e6:	f7ff fd69 	bl	800e0bc <__lo0bits>
 800e5ea:	2401      	movs	r4, #1
 800e5ec:	9b01      	ldr	r3, [sp, #4]
 800e5ee:	6134      	str	r4, [r6, #16]
 800e5f0:	6173      	str	r3, [r6, #20]
 800e5f2:	3020      	adds	r0, #32
 800e5f4:	e7e4      	b.n	800e5c0 <__d2b+0x4c>
 800e5f6:	4b07      	ldr	r3, [pc, #28]	; (800e614 <__d2b+0xa0>)
 800e5f8:	18c0      	adds	r0, r0, r3
 800e5fa:	4b07      	ldr	r3, [pc, #28]	; (800e618 <__d2b+0xa4>)
 800e5fc:	6038      	str	r0, [r7, #0]
 800e5fe:	18e3      	adds	r3, r4, r3
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	18f3      	adds	r3, r6, r3
 800e604:	6958      	ldr	r0, [r3, #20]
 800e606:	f7ff fd3f 	bl	800e088 <__hi0bits>
 800e60a:	0164      	lsls	r4, r4, #5
 800e60c:	1a20      	subs	r0, r4, r0
 800e60e:	e7df      	b.n	800e5d0 <__d2b+0x5c>
 800e610:	fffffbcd 	.word	0xfffffbcd
 800e614:	fffffbce 	.word	0xfffffbce
 800e618:	3fffffff 	.word	0x3fffffff

0800e61c <__ratio>:
 800e61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e61e:	b085      	sub	sp, #20
 800e620:	000f      	movs	r7, r1
 800e622:	a902      	add	r1, sp, #8
 800e624:	0006      	movs	r6, r0
 800e626:	f7ff ff59 	bl	800e4dc <__b2d>
 800e62a:	0004      	movs	r4, r0
 800e62c:	000d      	movs	r5, r1
 800e62e:	0038      	movs	r0, r7
 800e630:	a903      	add	r1, sp, #12
 800e632:	9400      	str	r4, [sp, #0]
 800e634:	9501      	str	r5, [sp, #4]
 800e636:	f7ff ff51 	bl	800e4dc <__b2d>
 800e63a:	6936      	ldr	r6, [r6, #16]
 800e63c:	693f      	ldr	r7, [r7, #16]
 800e63e:	0002      	movs	r2, r0
 800e640:	1bf7      	subs	r7, r6, r7
 800e642:	017e      	lsls	r6, r7, #5
 800e644:	46b4      	mov	ip, r6
 800e646:	9f03      	ldr	r7, [sp, #12]
 800e648:	9e02      	ldr	r6, [sp, #8]
 800e64a:	000b      	movs	r3, r1
 800e64c:	1bf6      	subs	r6, r6, r7
 800e64e:	4466      	add	r6, ip
 800e650:	0537      	lsls	r7, r6, #20
 800e652:	2e00      	cmp	r6, #0
 800e654:	dd07      	ble.n	800e666 <__ratio+0x4a>
 800e656:	1979      	adds	r1, r7, r5
 800e658:	9101      	str	r1, [sp, #4]
 800e65a:	9800      	ldr	r0, [sp, #0]
 800e65c:	9901      	ldr	r1, [sp, #4]
 800e65e:	f7f2 fc7f 	bl	8000f60 <__aeabi_ddiv>
 800e662:	b005      	add	sp, #20
 800e664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e666:	1bcb      	subs	r3, r1, r7
 800e668:	e7f7      	b.n	800e65a <__ratio+0x3e>

0800e66a <__copybits>:
 800e66a:	0013      	movs	r3, r2
 800e66c:	3901      	subs	r1, #1
 800e66e:	b510      	push	{r4, lr}
 800e670:	1149      	asrs	r1, r1, #5
 800e672:	6912      	ldr	r2, [r2, #16]
 800e674:	3101      	adds	r1, #1
 800e676:	0089      	lsls	r1, r1, #2
 800e678:	3314      	adds	r3, #20
 800e67a:	0092      	lsls	r2, r2, #2
 800e67c:	1841      	adds	r1, r0, r1
 800e67e:	189a      	adds	r2, r3, r2
 800e680:	429a      	cmp	r2, r3
 800e682:	d803      	bhi.n	800e68c <__copybits+0x22>
 800e684:	2300      	movs	r3, #0
 800e686:	4281      	cmp	r1, r0
 800e688:	d803      	bhi.n	800e692 <__copybits+0x28>
 800e68a:	bd10      	pop	{r4, pc}
 800e68c:	cb10      	ldmia	r3!, {r4}
 800e68e:	c010      	stmia	r0!, {r4}
 800e690:	e7f6      	b.n	800e680 <__copybits+0x16>
 800e692:	c008      	stmia	r0!, {r3}
 800e694:	e7f7      	b.n	800e686 <__copybits+0x1c>

0800e696 <__any_on>:
 800e696:	0002      	movs	r2, r0
 800e698:	6900      	ldr	r0, [r0, #16]
 800e69a:	b510      	push	{r4, lr}
 800e69c:	3214      	adds	r2, #20
 800e69e:	114b      	asrs	r3, r1, #5
 800e6a0:	4298      	cmp	r0, r3
 800e6a2:	db12      	blt.n	800e6ca <__any_on+0x34>
 800e6a4:	dd0b      	ble.n	800e6be <__any_on+0x28>
 800e6a6:	201f      	movs	r0, #31
 800e6a8:	4001      	ands	r1, r0
 800e6aa:	d008      	beq.n	800e6be <__any_on+0x28>
 800e6ac:	0098      	lsls	r0, r3, #2
 800e6ae:	5884      	ldr	r4, [r0, r2]
 800e6b0:	0020      	movs	r0, r4
 800e6b2:	40c8      	lsrs	r0, r1
 800e6b4:	4088      	lsls	r0, r1
 800e6b6:	0001      	movs	r1, r0
 800e6b8:	2001      	movs	r0, #1
 800e6ba:	428c      	cmp	r4, r1
 800e6bc:	d104      	bne.n	800e6c8 <__any_on+0x32>
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	18d3      	adds	r3, r2, r3
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d803      	bhi.n	800e6ce <__any_on+0x38>
 800e6c6:	2000      	movs	r0, #0
 800e6c8:	bd10      	pop	{r4, pc}
 800e6ca:	0003      	movs	r3, r0
 800e6cc:	e7f7      	b.n	800e6be <__any_on+0x28>
 800e6ce:	3b04      	subs	r3, #4
 800e6d0:	6819      	ldr	r1, [r3, #0]
 800e6d2:	2900      	cmp	r1, #0
 800e6d4:	d0f5      	beq.n	800e6c2 <__any_on+0x2c>
 800e6d6:	2001      	movs	r0, #1
 800e6d8:	e7f6      	b.n	800e6c8 <__any_on+0x32>

0800e6da <_calloc_r>:
 800e6da:	434a      	muls	r2, r1
 800e6dc:	b570      	push	{r4, r5, r6, lr}
 800e6de:	0011      	movs	r1, r2
 800e6e0:	0014      	movs	r4, r2
 800e6e2:	f7fc fc29 	bl	800af38 <_malloc_r>
 800e6e6:	1e05      	subs	r5, r0, #0
 800e6e8:	d003      	beq.n	800e6f2 <_calloc_r+0x18>
 800e6ea:	0022      	movs	r2, r4
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	f7fc fbd0 	bl	800ae92 <memset>
 800e6f2:	0028      	movs	r0, r5
 800e6f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e6f8 <__ssputs_r>:
 800e6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6fa:	688e      	ldr	r6, [r1, #8]
 800e6fc:	b085      	sub	sp, #20
 800e6fe:	0007      	movs	r7, r0
 800e700:	000c      	movs	r4, r1
 800e702:	9203      	str	r2, [sp, #12]
 800e704:	9301      	str	r3, [sp, #4]
 800e706:	429e      	cmp	r6, r3
 800e708:	d83c      	bhi.n	800e784 <__ssputs_r+0x8c>
 800e70a:	2390      	movs	r3, #144	; 0x90
 800e70c:	898a      	ldrh	r2, [r1, #12]
 800e70e:	00db      	lsls	r3, r3, #3
 800e710:	421a      	tst	r2, r3
 800e712:	d034      	beq.n	800e77e <__ssputs_r+0x86>
 800e714:	2503      	movs	r5, #3
 800e716:	6909      	ldr	r1, [r1, #16]
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	1a5b      	subs	r3, r3, r1
 800e71c:	9302      	str	r3, [sp, #8]
 800e71e:	6963      	ldr	r3, [r4, #20]
 800e720:	9802      	ldr	r0, [sp, #8]
 800e722:	435d      	muls	r5, r3
 800e724:	0feb      	lsrs	r3, r5, #31
 800e726:	195d      	adds	r5, r3, r5
 800e728:	9b01      	ldr	r3, [sp, #4]
 800e72a:	106d      	asrs	r5, r5, #1
 800e72c:	3301      	adds	r3, #1
 800e72e:	181b      	adds	r3, r3, r0
 800e730:	42ab      	cmp	r3, r5
 800e732:	d900      	bls.n	800e736 <__ssputs_r+0x3e>
 800e734:	001d      	movs	r5, r3
 800e736:	0553      	lsls	r3, r2, #21
 800e738:	d532      	bpl.n	800e7a0 <__ssputs_r+0xa8>
 800e73a:	0029      	movs	r1, r5
 800e73c:	0038      	movs	r0, r7
 800e73e:	f7fc fbfb 	bl	800af38 <_malloc_r>
 800e742:	1e06      	subs	r6, r0, #0
 800e744:	d109      	bne.n	800e75a <__ssputs_r+0x62>
 800e746:	230c      	movs	r3, #12
 800e748:	603b      	str	r3, [r7, #0]
 800e74a:	2340      	movs	r3, #64	; 0x40
 800e74c:	2001      	movs	r0, #1
 800e74e:	89a2      	ldrh	r2, [r4, #12]
 800e750:	4240      	negs	r0, r0
 800e752:	4313      	orrs	r3, r2
 800e754:	81a3      	strh	r3, [r4, #12]
 800e756:	b005      	add	sp, #20
 800e758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e75a:	9a02      	ldr	r2, [sp, #8]
 800e75c:	6921      	ldr	r1, [r4, #16]
 800e75e:	f7fc fb8f 	bl	800ae80 <memcpy>
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	4a14      	ldr	r2, [pc, #80]	; (800e7b8 <__ssputs_r+0xc0>)
 800e766:	401a      	ands	r2, r3
 800e768:	2380      	movs	r3, #128	; 0x80
 800e76a:	4313      	orrs	r3, r2
 800e76c:	81a3      	strh	r3, [r4, #12]
 800e76e:	9b02      	ldr	r3, [sp, #8]
 800e770:	6126      	str	r6, [r4, #16]
 800e772:	18f6      	adds	r6, r6, r3
 800e774:	6026      	str	r6, [r4, #0]
 800e776:	6165      	str	r5, [r4, #20]
 800e778:	9e01      	ldr	r6, [sp, #4]
 800e77a:	1aed      	subs	r5, r5, r3
 800e77c:	60a5      	str	r5, [r4, #8]
 800e77e:	9b01      	ldr	r3, [sp, #4]
 800e780:	429e      	cmp	r6, r3
 800e782:	d900      	bls.n	800e786 <__ssputs_r+0x8e>
 800e784:	9e01      	ldr	r6, [sp, #4]
 800e786:	0032      	movs	r2, r6
 800e788:	9903      	ldr	r1, [sp, #12]
 800e78a:	6820      	ldr	r0, [r4, #0]
 800e78c:	f000 f931 	bl	800e9f2 <memmove>
 800e790:	68a3      	ldr	r3, [r4, #8]
 800e792:	2000      	movs	r0, #0
 800e794:	1b9b      	subs	r3, r3, r6
 800e796:	60a3      	str	r3, [r4, #8]
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	199e      	adds	r6, r3, r6
 800e79c:	6026      	str	r6, [r4, #0]
 800e79e:	e7da      	b.n	800e756 <__ssputs_r+0x5e>
 800e7a0:	002a      	movs	r2, r5
 800e7a2:	0038      	movs	r0, r7
 800e7a4:	f000 f938 	bl	800ea18 <_realloc_r>
 800e7a8:	1e06      	subs	r6, r0, #0
 800e7aa:	d1e0      	bne.n	800e76e <__ssputs_r+0x76>
 800e7ac:	6921      	ldr	r1, [r4, #16]
 800e7ae:	0038      	movs	r0, r7
 800e7b0:	f7fc fb78 	bl	800aea4 <_free_r>
 800e7b4:	e7c7      	b.n	800e746 <__ssputs_r+0x4e>
 800e7b6:	46c0      	nop			; (mov r8, r8)
 800e7b8:	fffffb7f 	.word	0xfffffb7f

0800e7bc <_svfiprintf_r>:
 800e7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7be:	b0a1      	sub	sp, #132	; 0x84
 800e7c0:	9003      	str	r0, [sp, #12]
 800e7c2:	001d      	movs	r5, r3
 800e7c4:	898b      	ldrh	r3, [r1, #12]
 800e7c6:	000f      	movs	r7, r1
 800e7c8:	0016      	movs	r6, r2
 800e7ca:	061b      	lsls	r3, r3, #24
 800e7cc:	d511      	bpl.n	800e7f2 <_svfiprintf_r+0x36>
 800e7ce:	690b      	ldr	r3, [r1, #16]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d10e      	bne.n	800e7f2 <_svfiprintf_r+0x36>
 800e7d4:	2140      	movs	r1, #64	; 0x40
 800e7d6:	f7fc fbaf 	bl	800af38 <_malloc_r>
 800e7da:	6038      	str	r0, [r7, #0]
 800e7dc:	6138      	str	r0, [r7, #16]
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d105      	bne.n	800e7ee <_svfiprintf_r+0x32>
 800e7e2:	230c      	movs	r3, #12
 800e7e4:	9a03      	ldr	r2, [sp, #12]
 800e7e6:	3801      	subs	r0, #1
 800e7e8:	6013      	str	r3, [r2, #0]
 800e7ea:	b021      	add	sp, #132	; 0x84
 800e7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ee:	2340      	movs	r3, #64	; 0x40
 800e7f0:	617b      	str	r3, [r7, #20]
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	ac08      	add	r4, sp, #32
 800e7f6:	6163      	str	r3, [r4, #20]
 800e7f8:	3320      	adds	r3, #32
 800e7fa:	7663      	strb	r3, [r4, #25]
 800e7fc:	3310      	adds	r3, #16
 800e7fe:	76a3      	strb	r3, [r4, #26]
 800e800:	9507      	str	r5, [sp, #28]
 800e802:	0035      	movs	r5, r6
 800e804:	782b      	ldrb	r3, [r5, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d001      	beq.n	800e80e <_svfiprintf_r+0x52>
 800e80a:	2b25      	cmp	r3, #37	; 0x25
 800e80c:	d146      	bne.n	800e89c <_svfiprintf_r+0xe0>
 800e80e:	1bab      	subs	r3, r5, r6
 800e810:	9305      	str	r3, [sp, #20]
 800e812:	d00c      	beq.n	800e82e <_svfiprintf_r+0x72>
 800e814:	0032      	movs	r2, r6
 800e816:	0039      	movs	r1, r7
 800e818:	9803      	ldr	r0, [sp, #12]
 800e81a:	f7ff ff6d 	bl	800e6f8 <__ssputs_r>
 800e81e:	1c43      	adds	r3, r0, #1
 800e820:	d100      	bne.n	800e824 <_svfiprintf_r+0x68>
 800e822:	e0ae      	b.n	800e982 <_svfiprintf_r+0x1c6>
 800e824:	6962      	ldr	r2, [r4, #20]
 800e826:	9b05      	ldr	r3, [sp, #20]
 800e828:	4694      	mov	ip, r2
 800e82a:	4463      	add	r3, ip
 800e82c:	6163      	str	r3, [r4, #20]
 800e82e:	782b      	ldrb	r3, [r5, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d100      	bne.n	800e836 <_svfiprintf_r+0x7a>
 800e834:	e0a5      	b.n	800e982 <_svfiprintf_r+0x1c6>
 800e836:	2201      	movs	r2, #1
 800e838:	2300      	movs	r3, #0
 800e83a:	4252      	negs	r2, r2
 800e83c:	6062      	str	r2, [r4, #4]
 800e83e:	a904      	add	r1, sp, #16
 800e840:	3254      	adds	r2, #84	; 0x54
 800e842:	1852      	adds	r2, r2, r1
 800e844:	1c6e      	adds	r6, r5, #1
 800e846:	6023      	str	r3, [r4, #0]
 800e848:	60e3      	str	r3, [r4, #12]
 800e84a:	60a3      	str	r3, [r4, #8]
 800e84c:	7013      	strb	r3, [r2, #0]
 800e84e:	65a3      	str	r3, [r4, #88]	; 0x58
 800e850:	7831      	ldrb	r1, [r6, #0]
 800e852:	2205      	movs	r2, #5
 800e854:	4853      	ldr	r0, [pc, #332]	; (800e9a4 <_svfiprintf_r+0x1e8>)
 800e856:	f7ff fb3d 	bl	800ded4 <memchr>
 800e85a:	1c75      	adds	r5, r6, #1
 800e85c:	2800      	cmp	r0, #0
 800e85e:	d11f      	bne.n	800e8a0 <_svfiprintf_r+0xe4>
 800e860:	6822      	ldr	r2, [r4, #0]
 800e862:	06d3      	lsls	r3, r2, #27
 800e864:	d504      	bpl.n	800e870 <_svfiprintf_r+0xb4>
 800e866:	2353      	movs	r3, #83	; 0x53
 800e868:	a904      	add	r1, sp, #16
 800e86a:	185b      	adds	r3, r3, r1
 800e86c:	2120      	movs	r1, #32
 800e86e:	7019      	strb	r1, [r3, #0]
 800e870:	0713      	lsls	r3, r2, #28
 800e872:	d504      	bpl.n	800e87e <_svfiprintf_r+0xc2>
 800e874:	2353      	movs	r3, #83	; 0x53
 800e876:	a904      	add	r1, sp, #16
 800e878:	185b      	adds	r3, r3, r1
 800e87a:	212b      	movs	r1, #43	; 0x2b
 800e87c:	7019      	strb	r1, [r3, #0]
 800e87e:	7833      	ldrb	r3, [r6, #0]
 800e880:	2b2a      	cmp	r3, #42	; 0x2a
 800e882:	d016      	beq.n	800e8b2 <_svfiprintf_r+0xf6>
 800e884:	0035      	movs	r5, r6
 800e886:	2100      	movs	r1, #0
 800e888:	200a      	movs	r0, #10
 800e88a:	68e3      	ldr	r3, [r4, #12]
 800e88c:	782a      	ldrb	r2, [r5, #0]
 800e88e:	1c6e      	adds	r6, r5, #1
 800e890:	3a30      	subs	r2, #48	; 0x30
 800e892:	2a09      	cmp	r2, #9
 800e894:	d94e      	bls.n	800e934 <_svfiprintf_r+0x178>
 800e896:	2900      	cmp	r1, #0
 800e898:	d018      	beq.n	800e8cc <_svfiprintf_r+0x110>
 800e89a:	e010      	b.n	800e8be <_svfiprintf_r+0x102>
 800e89c:	3501      	adds	r5, #1
 800e89e:	e7b1      	b.n	800e804 <_svfiprintf_r+0x48>
 800e8a0:	4b40      	ldr	r3, [pc, #256]	; (800e9a4 <_svfiprintf_r+0x1e8>)
 800e8a2:	6822      	ldr	r2, [r4, #0]
 800e8a4:	1ac0      	subs	r0, r0, r3
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	4083      	lsls	r3, r0
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	002e      	movs	r6, r5
 800e8b0:	e7ce      	b.n	800e850 <_svfiprintf_r+0x94>
 800e8b2:	9b07      	ldr	r3, [sp, #28]
 800e8b4:	1d19      	adds	r1, r3, #4
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	9107      	str	r1, [sp, #28]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	db01      	blt.n	800e8c2 <_svfiprintf_r+0x106>
 800e8be:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8c0:	e004      	b.n	800e8cc <_svfiprintf_r+0x110>
 800e8c2:	425b      	negs	r3, r3
 800e8c4:	60e3      	str	r3, [r4, #12]
 800e8c6:	2302      	movs	r3, #2
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	6023      	str	r3, [r4, #0]
 800e8cc:	782b      	ldrb	r3, [r5, #0]
 800e8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800e8d0:	d10a      	bne.n	800e8e8 <_svfiprintf_r+0x12c>
 800e8d2:	786b      	ldrb	r3, [r5, #1]
 800e8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800e8d6:	d135      	bne.n	800e944 <_svfiprintf_r+0x188>
 800e8d8:	9b07      	ldr	r3, [sp, #28]
 800e8da:	3502      	adds	r5, #2
 800e8dc:	1d1a      	adds	r2, r3, #4
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	9207      	str	r2, [sp, #28]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	db2b      	blt.n	800e93e <_svfiprintf_r+0x182>
 800e8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8e8:	4e2f      	ldr	r6, [pc, #188]	; (800e9a8 <_svfiprintf_r+0x1ec>)
 800e8ea:	7829      	ldrb	r1, [r5, #0]
 800e8ec:	2203      	movs	r2, #3
 800e8ee:	0030      	movs	r0, r6
 800e8f0:	f7ff faf0 	bl	800ded4 <memchr>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d006      	beq.n	800e906 <_svfiprintf_r+0x14a>
 800e8f8:	2340      	movs	r3, #64	; 0x40
 800e8fa:	1b80      	subs	r0, r0, r6
 800e8fc:	4083      	lsls	r3, r0
 800e8fe:	6822      	ldr	r2, [r4, #0]
 800e900:	3501      	adds	r5, #1
 800e902:	4313      	orrs	r3, r2
 800e904:	6023      	str	r3, [r4, #0]
 800e906:	7829      	ldrb	r1, [r5, #0]
 800e908:	2206      	movs	r2, #6
 800e90a:	4828      	ldr	r0, [pc, #160]	; (800e9ac <_svfiprintf_r+0x1f0>)
 800e90c:	1c6e      	adds	r6, r5, #1
 800e90e:	7621      	strb	r1, [r4, #24]
 800e910:	f7ff fae0 	bl	800ded4 <memchr>
 800e914:	2800      	cmp	r0, #0
 800e916:	d03c      	beq.n	800e992 <_svfiprintf_r+0x1d6>
 800e918:	4b25      	ldr	r3, [pc, #148]	; (800e9b0 <_svfiprintf_r+0x1f4>)
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d125      	bne.n	800e96a <_svfiprintf_r+0x1ae>
 800e91e:	2207      	movs	r2, #7
 800e920:	9b07      	ldr	r3, [sp, #28]
 800e922:	3307      	adds	r3, #7
 800e924:	4393      	bics	r3, r2
 800e926:	3308      	adds	r3, #8
 800e928:	9307      	str	r3, [sp, #28]
 800e92a:	6963      	ldr	r3, [r4, #20]
 800e92c:	9a04      	ldr	r2, [sp, #16]
 800e92e:	189b      	adds	r3, r3, r2
 800e930:	6163      	str	r3, [r4, #20]
 800e932:	e766      	b.n	800e802 <_svfiprintf_r+0x46>
 800e934:	4343      	muls	r3, r0
 800e936:	2101      	movs	r1, #1
 800e938:	189b      	adds	r3, r3, r2
 800e93a:	0035      	movs	r5, r6
 800e93c:	e7a6      	b.n	800e88c <_svfiprintf_r+0xd0>
 800e93e:	2301      	movs	r3, #1
 800e940:	425b      	negs	r3, r3
 800e942:	e7d0      	b.n	800e8e6 <_svfiprintf_r+0x12a>
 800e944:	2300      	movs	r3, #0
 800e946:	200a      	movs	r0, #10
 800e948:	001a      	movs	r2, r3
 800e94a:	3501      	adds	r5, #1
 800e94c:	6063      	str	r3, [r4, #4]
 800e94e:	7829      	ldrb	r1, [r5, #0]
 800e950:	1c6e      	adds	r6, r5, #1
 800e952:	3930      	subs	r1, #48	; 0x30
 800e954:	2909      	cmp	r1, #9
 800e956:	d903      	bls.n	800e960 <_svfiprintf_r+0x1a4>
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d0c5      	beq.n	800e8e8 <_svfiprintf_r+0x12c>
 800e95c:	9209      	str	r2, [sp, #36]	; 0x24
 800e95e:	e7c3      	b.n	800e8e8 <_svfiprintf_r+0x12c>
 800e960:	4342      	muls	r2, r0
 800e962:	2301      	movs	r3, #1
 800e964:	1852      	adds	r2, r2, r1
 800e966:	0035      	movs	r5, r6
 800e968:	e7f1      	b.n	800e94e <_svfiprintf_r+0x192>
 800e96a:	ab07      	add	r3, sp, #28
 800e96c:	9300      	str	r3, [sp, #0]
 800e96e:	003a      	movs	r2, r7
 800e970:	4b10      	ldr	r3, [pc, #64]	; (800e9b4 <_svfiprintf_r+0x1f8>)
 800e972:	0021      	movs	r1, r4
 800e974:	9803      	ldr	r0, [sp, #12]
 800e976:	f7fc fbd9 	bl	800b12c <_printf_float>
 800e97a:	9004      	str	r0, [sp, #16]
 800e97c:	9b04      	ldr	r3, [sp, #16]
 800e97e:	3301      	adds	r3, #1
 800e980:	d1d3      	bne.n	800e92a <_svfiprintf_r+0x16e>
 800e982:	89bb      	ldrh	r3, [r7, #12]
 800e984:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e986:	065b      	lsls	r3, r3, #25
 800e988:	d400      	bmi.n	800e98c <_svfiprintf_r+0x1d0>
 800e98a:	e72e      	b.n	800e7ea <_svfiprintf_r+0x2e>
 800e98c:	2001      	movs	r0, #1
 800e98e:	4240      	negs	r0, r0
 800e990:	e72b      	b.n	800e7ea <_svfiprintf_r+0x2e>
 800e992:	ab07      	add	r3, sp, #28
 800e994:	9300      	str	r3, [sp, #0]
 800e996:	003a      	movs	r2, r7
 800e998:	4b06      	ldr	r3, [pc, #24]	; (800e9b4 <_svfiprintf_r+0x1f8>)
 800e99a:	0021      	movs	r1, r4
 800e99c:	9803      	ldr	r0, [sp, #12]
 800e99e:	f7fc fe7f 	bl	800b6a0 <_printf_i>
 800e9a2:	e7ea      	b.n	800e97a <_svfiprintf_r+0x1be>
 800e9a4:	0801010c 	.word	0x0801010c
 800e9a8:	08010112 	.word	0x08010112
 800e9ac:	08010116 	.word	0x08010116
 800e9b0:	0800b12d 	.word	0x0800b12d
 800e9b4:	0800e6f9 	.word	0x0800e6f9

0800e9b8 <strncmp>:
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	b530      	push	{r4, r5, lr}
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d00a      	beq.n	800e9d6 <strncmp+0x1e>
 800e9c0:	3a01      	subs	r2, #1
 800e9c2:	5cc4      	ldrb	r4, [r0, r3]
 800e9c4:	5ccd      	ldrb	r5, [r1, r3]
 800e9c6:	42ac      	cmp	r4, r5
 800e9c8:	d104      	bne.n	800e9d4 <strncmp+0x1c>
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d002      	beq.n	800e9d4 <strncmp+0x1c>
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	2c00      	cmp	r4, #0
 800e9d2:	d1f6      	bne.n	800e9c2 <strncmp+0xa>
 800e9d4:	1b63      	subs	r3, r4, r5
 800e9d6:	0018      	movs	r0, r3
 800e9d8:	bd30      	pop	{r4, r5, pc}

0800e9da <__ascii_wctomb>:
 800e9da:	1e0b      	subs	r3, r1, #0
 800e9dc:	d004      	beq.n	800e9e8 <__ascii_wctomb+0xe>
 800e9de:	2aff      	cmp	r2, #255	; 0xff
 800e9e0:	d904      	bls.n	800e9ec <__ascii_wctomb+0x12>
 800e9e2:	238a      	movs	r3, #138	; 0x8a
 800e9e4:	6003      	str	r3, [r0, #0]
 800e9e6:	3b8b      	subs	r3, #139	; 0x8b
 800e9e8:	0018      	movs	r0, r3
 800e9ea:	4770      	bx	lr
 800e9ec:	700a      	strb	r2, [r1, #0]
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e7fa      	b.n	800e9e8 <__ascii_wctomb+0xe>

0800e9f2 <memmove>:
 800e9f2:	b510      	push	{r4, lr}
 800e9f4:	4288      	cmp	r0, r1
 800e9f6:	d902      	bls.n	800e9fe <memmove+0xc>
 800e9f8:	188b      	adds	r3, r1, r2
 800e9fa:	4298      	cmp	r0, r3
 800e9fc:	d303      	bcc.n	800ea06 <memmove+0x14>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	e007      	b.n	800ea12 <memmove+0x20>
 800ea02:	5c8b      	ldrb	r3, [r1, r2]
 800ea04:	5483      	strb	r3, [r0, r2]
 800ea06:	3a01      	subs	r2, #1
 800ea08:	d2fb      	bcs.n	800ea02 <memmove+0x10>
 800ea0a:	bd10      	pop	{r4, pc}
 800ea0c:	5ccc      	ldrb	r4, [r1, r3]
 800ea0e:	54c4      	strb	r4, [r0, r3]
 800ea10:	3301      	adds	r3, #1
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d1fa      	bne.n	800ea0c <memmove+0x1a>
 800ea16:	e7f8      	b.n	800ea0a <memmove+0x18>

0800ea18 <_realloc_r>:
 800ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea1a:	0007      	movs	r7, r0
 800ea1c:	000d      	movs	r5, r1
 800ea1e:	0016      	movs	r6, r2
 800ea20:	2900      	cmp	r1, #0
 800ea22:	d105      	bne.n	800ea30 <_realloc_r+0x18>
 800ea24:	0011      	movs	r1, r2
 800ea26:	f7fc fa87 	bl	800af38 <_malloc_r>
 800ea2a:	0004      	movs	r4, r0
 800ea2c:	0020      	movs	r0, r4
 800ea2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea30:	2a00      	cmp	r2, #0
 800ea32:	d103      	bne.n	800ea3c <_realloc_r+0x24>
 800ea34:	f7fc fa36 	bl	800aea4 <_free_r>
 800ea38:	0034      	movs	r4, r6
 800ea3a:	e7f7      	b.n	800ea2c <_realloc_r+0x14>
 800ea3c:	f000 f812 	bl	800ea64 <_malloc_usable_size_r>
 800ea40:	002c      	movs	r4, r5
 800ea42:	42b0      	cmp	r0, r6
 800ea44:	d2f2      	bcs.n	800ea2c <_realloc_r+0x14>
 800ea46:	0031      	movs	r1, r6
 800ea48:	0038      	movs	r0, r7
 800ea4a:	f7fc fa75 	bl	800af38 <_malloc_r>
 800ea4e:	1e04      	subs	r4, r0, #0
 800ea50:	d0ec      	beq.n	800ea2c <_realloc_r+0x14>
 800ea52:	0029      	movs	r1, r5
 800ea54:	0032      	movs	r2, r6
 800ea56:	f7fc fa13 	bl	800ae80 <memcpy>
 800ea5a:	0029      	movs	r1, r5
 800ea5c:	0038      	movs	r0, r7
 800ea5e:	f7fc fa21 	bl	800aea4 <_free_r>
 800ea62:	e7e3      	b.n	800ea2c <_realloc_r+0x14>

0800ea64 <_malloc_usable_size_r>:
 800ea64:	1f0b      	subs	r3, r1, #4
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	1f18      	subs	r0, r3, #4
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	da01      	bge.n	800ea72 <_malloc_usable_size_r+0xe>
 800ea6e:	580b      	ldr	r3, [r1, r0]
 800ea70:	18c0      	adds	r0, r0, r3
 800ea72:	4770      	bx	lr

0800ea74 <_init>:
 800ea74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea76:	46c0      	nop			; (mov r8, r8)
 800ea78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea7a:	bc08      	pop	{r3}
 800ea7c:	469e      	mov	lr, r3
 800ea7e:	4770      	bx	lr

0800ea80 <_fini>:
 800ea80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea82:	46c0      	nop			; (mov r8, r8)
 800ea84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea86:	bc08      	pop	{r3}
 800ea88:	469e      	mov	lr, r3
 800ea8a:	4770      	bx	lr
