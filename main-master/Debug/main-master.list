
main-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016a0  0800de00  0800de00  0001de00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4a0  0800f4a0  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4a0  0800f4a0  0001f4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4a8  0800f4a8  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800f4a8  0800f4a8  0001f4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4b8  0800f4b8  0001f4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800f4bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c8  20000214  0800f6d0  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028dc  0800f6d0  000228dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002db3f  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ced  00000000  00000000  0004dd7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f0  00000000  00000000  00052a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  00054058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c053  00000000  00000000  00055480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019470  00000000  00000000  000714d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000947d7  00000000  00000000  0008a943  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f11a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b70  00000000  00000000  0011f198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000214 	.word	0x20000214
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dde4 	.word	0x0800dde4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000218 	.word	0x20000218
 8000104:	0800dde4 	.word	0x0800dde4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 f83b 	bl	80014a4 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ff93 	bl	8001364 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f82d 	bl	80014a4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f823 	bl	80014a4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffb5 	bl	80013dc <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffab 	bl	80013dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_uldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d111      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d10f      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 800049c:	2900      	cmp	r1, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_uldivmod+0xe>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d002      	beq.n	80004aa <__aeabi_uldivmod+0x16>
 80004a4:	2100      	movs	r1, #0
 80004a6:	43c9      	mvns	r1, r1
 80004a8:	1c08      	adds	r0, r1, #0
 80004aa:	b407      	push	{r0, r1, r2}
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <__aeabi_uldivmod+0x24>)
 80004ae:	a102      	add	r1, pc, #8	; (adr r1, 80004b8 <__aeabi_uldivmod+0x24>)
 80004b0:	1840      	adds	r0, r0, r1
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	bd03      	pop	{r0, r1, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	ffffff5d 	.word	0xffffff5d
 80004bc:	b403      	push	{r0, r1}
 80004be:	4668      	mov	r0, sp
 80004c0:	b501      	push	{r0, lr}
 80004c2:	9802      	ldr	r0, [sp, #8]
 80004c4:	f000 f84e 	bl	8000564 <__udivmoddi4>
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	469e      	mov	lr, r3
 80004cc:	b002      	add	sp, #8
 80004ce:	bc0c      	pop	{r2, r3}
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__aeabi_lmul>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	46ce      	mov	lr, r9
 80004d8:	4647      	mov	r7, r8
 80004da:	0415      	lsls	r5, r2, #16
 80004dc:	0c2d      	lsrs	r5, r5, #16
 80004de:	002e      	movs	r6, r5
 80004e0:	b580      	push	{r7, lr}
 80004e2:	0407      	lsls	r7, r0, #16
 80004e4:	0c14      	lsrs	r4, r2, #16
 80004e6:	0c3f      	lsrs	r7, r7, #16
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	437e      	muls	r6, r7
 80004ee:	435d      	muls	r5, r3
 80004f0:	4367      	muls	r7, r4
 80004f2:	4363      	muls	r3, r4
 80004f4:	197f      	adds	r7, r7, r5
 80004f6:	0c34      	lsrs	r4, r6, #16
 80004f8:	19e4      	adds	r4, r4, r7
 80004fa:	469c      	mov	ip, r3
 80004fc:	42a5      	cmp	r5, r4
 80004fe:	d903      	bls.n	8000508 <__aeabi_lmul+0x34>
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	025b      	lsls	r3, r3, #9
 8000504:	4698      	mov	r8, r3
 8000506:	44c4      	add	ip, r8
 8000508:	464b      	mov	r3, r9
 800050a:	4343      	muls	r3, r0
 800050c:	4351      	muls	r1, r2
 800050e:	0c25      	lsrs	r5, r4, #16
 8000510:	0436      	lsls	r6, r6, #16
 8000512:	4465      	add	r5, ip
 8000514:	0c36      	lsrs	r6, r6, #16
 8000516:	0424      	lsls	r4, r4, #16
 8000518:	19a4      	adds	r4, r4, r6
 800051a:	195b      	adds	r3, r3, r5
 800051c:	1859      	adds	r1, r3, r1
 800051e:	0020      	movs	r0, r4
 8000520:	bc0c      	pop	{r2, r3}
 8000522:	4690      	mov	r8, r2
 8000524:	4699      	mov	r9, r3
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffa5 	bl	8000480 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f001 fdef 	bl	8002120 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f001 fa84 	bl	8001a58 <__aeabi_dsub>
 8000550:	f001 fde6 	bl	8002120 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__udivmoddi4>:
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	464f      	mov	r7, r9
 8000568:	4646      	mov	r6, r8
 800056a:	46d6      	mov	lr, sl
 800056c:	b5c0      	push	{r6, r7, lr}
 800056e:	0004      	movs	r4, r0
 8000570:	b082      	sub	sp, #8
 8000572:	000d      	movs	r5, r1
 8000574:	4691      	mov	r9, r2
 8000576:	4698      	mov	r8, r3
 8000578:	428b      	cmp	r3, r1
 800057a:	d82f      	bhi.n	80005dc <__udivmoddi4+0x78>
 800057c:	d02c      	beq.n	80005d8 <__udivmoddi4+0x74>
 800057e:	4641      	mov	r1, r8
 8000580:	4648      	mov	r0, r9
 8000582:	f001 ff11 	bl	80023a8 <__clzdi2>
 8000586:	0029      	movs	r1, r5
 8000588:	0006      	movs	r6, r0
 800058a:	0020      	movs	r0, r4
 800058c:	f001 ff0c 	bl	80023a8 <__clzdi2>
 8000590:	1a33      	subs	r3, r6, r0
 8000592:	469c      	mov	ip, r3
 8000594:	3b20      	subs	r3, #32
 8000596:	469a      	mov	sl, r3
 8000598:	d500      	bpl.n	800059c <__udivmoddi4+0x38>
 800059a:	e076      	b.n	800068a <__udivmoddi4+0x126>
 800059c:	464b      	mov	r3, r9
 800059e:	4652      	mov	r2, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001f      	movs	r7, r3
 80005a4:	464b      	mov	r3, r9
 80005a6:	4662      	mov	r2, ip
 80005a8:	4093      	lsls	r3, r2
 80005aa:	001e      	movs	r6, r3
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d828      	bhi.n	8000602 <__udivmoddi4+0x9e>
 80005b0:	d025      	beq.n	80005fe <__udivmoddi4+0x9a>
 80005b2:	4653      	mov	r3, sl
 80005b4:	1ba4      	subs	r4, r4, r6
 80005b6:	41bd      	sbcs	r5, r7
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da00      	bge.n	80005be <__udivmoddi4+0x5a>
 80005bc:	e07b      	b.n	80006b6 <__udivmoddi4+0x152>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4652      	mov	r2, sl
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	4662      	mov	r2, ip
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	e018      	b.n	800060a <__udivmoddi4+0xa6>
 80005d8:	4282      	cmp	r2, r0
 80005da:	d9d0      	bls.n	800057e <__udivmoddi4+0x1a>
 80005dc:	2200      	movs	r2, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <__udivmoddi4+0x8a>
 80005ea:	601c      	str	r4, [r3, #0]
 80005ec:	605d      	str	r5, [r3, #4]
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	b002      	add	sp, #8
 80005f4:	bc1c      	pop	{r2, r3, r4}
 80005f6:	4690      	mov	r8, r2
 80005f8:	4699      	mov	r9, r3
 80005fa:	46a2      	mov	sl, r4
 80005fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fe:	42a3      	cmp	r3, r4
 8000600:	d9d7      	bls.n	80005b2 <__udivmoddi4+0x4e>
 8000602:	2200      	movs	r2, #0
 8000604:	2300      	movs	r3, #0
 8000606:	9200      	str	r2, [sp, #0]
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	4663      	mov	r3, ip
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0e9      	beq.n	80005e4 <__udivmoddi4+0x80>
 8000610:	07fb      	lsls	r3, r7, #31
 8000612:	4698      	mov	r8, r3
 8000614:	4641      	mov	r1, r8
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	430a      	orrs	r2, r1
 800061a:	087b      	lsrs	r3, r7, #1
 800061c:	4666      	mov	r6, ip
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xda>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xc4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xde>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0xe8>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xbc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xda>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	4653      	mov	r3, sl
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db23      	blt.n	80006a2 <__udivmoddi4+0x13e>
 800065a:	002b      	movs	r3, r5
 800065c:	4652      	mov	r2, sl
 800065e:	40d3      	lsrs	r3, r2
 8000660:	002a      	movs	r2, r5
 8000662:	4664      	mov	r4, ip
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	4653      	mov	r3, sl
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2d      	blt.n	80006cc <__udivmoddi4+0x168>
 8000670:	0026      	movs	r6, r4
 8000672:	4657      	mov	r7, sl
 8000674:	40be      	lsls	r6, r7
 8000676:	0033      	movs	r3, r6
 8000678:	0026      	movs	r6, r4
 800067a:	4667      	mov	r7, ip
 800067c:	40be      	lsls	r6, r7
 800067e:	0032      	movs	r2, r6
 8000680:	1a80      	subs	r0, r0, r2
 8000682:	4199      	sbcs	r1, r3
 8000684:	9000      	str	r0, [sp, #0]
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	e7ac      	b.n	80005e4 <__udivmoddi4+0x80>
 800068a:	4662      	mov	r2, ip
 800068c:	2320      	movs	r3, #32
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	464a      	mov	r2, r9
 8000692:	40da      	lsrs	r2, r3
 8000694:	4661      	mov	r1, ip
 8000696:	0013      	movs	r3, r2
 8000698:	4642      	mov	r2, r8
 800069a:	408a      	lsls	r2, r1
 800069c:	0017      	movs	r7, r2
 800069e:	431f      	orrs	r7, r3
 80006a0:	e780      	b.n	80005a4 <__udivmoddi4+0x40>
 80006a2:	4662      	mov	r2, ip
 80006a4:	2320      	movs	r3, #32
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	002a      	movs	r2, r5
 80006aa:	4666      	mov	r6, ip
 80006ac:	409a      	lsls	r2, r3
 80006ae:	0023      	movs	r3, r4
 80006b0:	40f3      	lsrs	r3, r6
 80006b2:	4313      	orrs	r3, r2
 80006b4:	e7d4      	b.n	8000660 <__udivmoddi4+0xfc>
 80006b6:	4662      	mov	r2, ip
 80006b8:	2320      	movs	r3, #32
 80006ba:	2100      	movs	r1, #0
 80006bc:	1a9b      	subs	r3, r3, r2
 80006be:	2200      	movs	r2, #0
 80006c0:	9100      	str	r1, [sp, #0]
 80006c2:	9201      	str	r2, [sp, #4]
 80006c4:	2201      	movs	r2, #1
 80006c6:	40da      	lsrs	r2, r3
 80006c8:	9201      	str	r2, [sp, #4]
 80006ca:	e780      	b.n	80005ce <__udivmoddi4+0x6a>
 80006cc:	2320      	movs	r3, #32
 80006ce:	4662      	mov	r2, ip
 80006d0:	0026      	movs	r6, r4
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	40de      	lsrs	r6, r3
 80006d6:	002f      	movs	r7, r5
 80006d8:	46b0      	mov	r8, r6
 80006da:	4666      	mov	r6, ip
 80006dc:	40b7      	lsls	r7, r6
 80006de:	4646      	mov	r6, r8
 80006e0:	003b      	movs	r3, r7
 80006e2:	4333      	orrs	r3, r6
 80006e4:	e7c8      	b.n	8000678 <__udivmoddi4+0x114>
 80006e6:	46c0      	nop			; (mov r8, r8)

080006e8 <__aeabi_f2iz>:
 80006e8:	0241      	lsls	r1, r0, #9
 80006ea:	0042      	lsls	r2, r0, #1
 80006ec:	0fc3      	lsrs	r3, r0, #31
 80006ee:	0a49      	lsrs	r1, r1, #9
 80006f0:	0e12      	lsrs	r2, r2, #24
 80006f2:	2000      	movs	r0, #0
 80006f4:	2a7e      	cmp	r2, #126	; 0x7e
 80006f6:	d90d      	bls.n	8000714 <__aeabi_f2iz+0x2c>
 80006f8:	2a9d      	cmp	r2, #157	; 0x9d
 80006fa:	d80c      	bhi.n	8000716 <__aeabi_f2iz+0x2e>
 80006fc:	2080      	movs	r0, #128	; 0x80
 80006fe:	0400      	lsls	r0, r0, #16
 8000700:	4301      	orrs	r1, r0
 8000702:	2a95      	cmp	r2, #149	; 0x95
 8000704:	dc0a      	bgt.n	800071c <__aeabi_f2iz+0x34>
 8000706:	2096      	movs	r0, #150	; 0x96
 8000708:	1a82      	subs	r2, r0, r2
 800070a:	40d1      	lsrs	r1, r2
 800070c:	4248      	negs	r0, r1
 800070e:	2b00      	cmp	r3, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_f2iz+0x2c>
 8000712:	0008      	movs	r0, r1
 8000714:	4770      	bx	lr
 8000716:	4a03      	ldr	r2, [pc, #12]	; (8000724 <__aeabi_f2iz+0x3c>)
 8000718:	1898      	adds	r0, r3, r2
 800071a:	e7fb      	b.n	8000714 <__aeabi_f2iz+0x2c>
 800071c:	3a96      	subs	r2, #150	; 0x96
 800071e:	4091      	lsls	r1, r2
 8000720:	e7f4      	b.n	800070c <__aeabi_f2iz+0x24>
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	7fffffff 	.word	0x7fffffff

08000728 <__aeabi_dadd>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	464f      	mov	r7, r9
 800072c:	4646      	mov	r6, r8
 800072e:	46d6      	mov	lr, sl
 8000730:	000c      	movs	r4, r1
 8000732:	0309      	lsls	r1, r1, #12
 8000734:	b5c0      	push	{r6, r7, lr}
 8000736:	0a49      	lsrs	r1, r1, #9
 8000738:	0f47      	lsrs	r7, r0, #29
 800073a:	005e      	lsls	r6, r3, #1
 800073c:	4339      	orrs	r1, r7
 800073e:	031f      	lsls	r7, r3, #12
 8000740:	0fdb      	lsrs	r3, r3, #31
 8000742:	469c      	mov	ip, r3
 8000744:	0065      	lsls	r5, r4, #1
 8000746:	0a7b      	lsrs	r3, r7, #9
 8000748:	0f57      	lsrs	r7, r2, #29
 800074a:	431f      	orrs	r7, r3
 800074c:	0d6d      	lsrs	r5, r5, #21
 800074e:	0fe4      	lsrs	r4, r4, #31
 8000750:	0d76      	lsrs	r6, r6, #21
 8000752:	46a1      	mov	r9, r4
 8000754:	00c0      	lsls	r0, r0, #3
 8000756:	46b8      	mov	r8, r7
 8000758:	00d2      	lsls	r2, r2, #3
 800075a:	1bab      	subs	r3, r5, r6
 800075c:	4564      	cmp	r4, ip
 800075e:	d07b      	beq.n	8000858 <__aeabi_dadd+0x130>
 8000760:	2b00      	cmp	r3, #0
 8000762:	dd5f      	ble.n	8000824 <__aeabi_dadd+0xfc>
 8000764:	2e00      	cmp	r6, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x42>
 8000768:	e0a4      	b.n	80008b4 <__aeabi_dadd+0x18c>
 800076a:	003e      	movs	r6, r7
 800076c:	4316      	orrs	r6, r2
 800076e:	d100      	bne.n	8000772 <__aeabi_dadd+0x4a>
 8000770:	e112      	b.n	8000998 <__aeabi_dadd+0x270>
 8000772:	1e5e      	subs	r6, r3, #1
 8000774:	2e00      	cmp	r6, #0
 8000776:	d000      	beq.n	800077a <__aeabi_dadd+0x52>
 8000778:	e19e      	b.n	8000ab8 <__aeabi_dadd+0x390>
 800077a:	1a87      	subs	r7, r0, r2
 800077c:	4643      	mov	r3, r8
 800077e:	42b8      	cmp	r0, r7
 8000780:	4180      	sbcs	r0, r0
 8000782:	2501      	movs	r5, #1
 8000784:	1ac9      	subs	r1, r1, r3
 8000786:	4240      	negs	r0, r0
 8000788:	1a09      	subs	r1, r1, r0
 800078a:	020b      	lsls	r3, r1, #8
 800078c:	d400      	bmi.n	8000790 <__aeabi_dadd+0x68>
 800078e:	e131      	b.n	80009f4 <__aeabi_dadd+0x2cc>
 8000790:	0249      	lsls	r1, r1, #9
 8000792:	0a4e      	lsrs	r6, r1, #9
 8000794:	2e00      	cmp	r6, #0
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x72>
 8000798:	e16e      	b.n	8000a78 <__aeabi_dadd+0x350>
 800079a:	0030      	movs	r0, r6
 800079c:	f001 fde6 	bl	800236c <__clzsi2>
 80007a0:	0003      	movs	r3, r0
 80007a2:	3b08      	subs	r3, #8
 80007a4:	2b1f      	cmp	r3, #31
 80007a6:	dd00      	ble.n	80007aa <__aeabi_dadd+0x82>
 80007a8:	e161      	b.n	8000a6e <__aeabi_dadd+0x346>
 80007aa:	2220      	movs	r2, #32
 80007ac:	0039      	movs	r1, r7
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	409e      	lsls	r6, r3
 80007b2:	40d1      	lsrs	r1, r2
 80007b4:	409f      	lsls	r7, r3
 80007b6:	430e      	orrs	r6, r1
 80007b8:	429d      	cmp	r5, r3
 80007ba:	dd00      	ble.n	80007be <__aeabi_dadd+0x96>
 80007bc:	e151      	b.n	8000a62 <__aeabi_dadd+0x33a>
 80007be:	1b5d      	subs	r5, r3, r5
 80007c0:	1c6b      	adds	r3, r5, #1
 80007c2:	2b1f      	cmp	r3, #31
 80007c4:	dd00      	ble.n	80007c8 <__aeabi_dadd+0xa0>
 80007c6:	e17c      	b.n	8000ac2 <__aeabi_dadd+0x39a>
 80007c8:	2120      	movs	r1, #32
 80007ca:	1ac9      	subs	r1, r1, r3
 80007cc:	003d      	movs	r5, r7
 80007ce:	0030      	movs	r0, r6
 80007d0:	408f      	lsls	r7, r1
 80007d2:	4088      	lsls	r0, r1
 80007d4:	40dd      	lsrs	r5, r3
 80007d6:	1e79      	subs	r1, r7, #1
 80007d8:	418f      	sbcs	r7, r1
 80007da:	0031      	movs	r1, r6
 80007dc:	2207      	movs	r2, #7
 80007de:	4328      	orrs	r0, r5
 80007e0:	40d9      	lsrs	r1, r3
 80007e2:	2500      	movs	r5, #0
 80007e4:	4307      	orrs	r7, r0
 80007e6:	403a      	ands	r2, r7
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	d009      	beq.n	8000800 <__aeabi_dadd+0xd8>
 80007ec:	230f      	movs	r3, #15
 80007ee:	403b      	ands	r3, r7
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d005      	beq.n	8000800 <__aeabi_dadd+0xd8>
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	42bb      	cmp	r3, r7
 80007f8:	41bf      	sbcs	r7, r7
 80007fa:	427f      	negs	r7, r7
 80007fc:	19c9      	adds	r1, r1, r7
 80007fe:	001f      	movs	r7, r3
 8000800:	020b      	lsls	r3, r1, #8
 8000802:	d400      	bmi.n	8000806 <__aeabi_dadd+0xde>
 8000804:	e226      	b.n	8000c54 <__aeabi_dadd+0x52c>
 8000806:	1c6a      	adds	r2, r5, #1
 8000808:	4bc6      	ldr	r3, [pc, #792]	; (8000b24 <__aeabi_dadd+0x3fc>)
 800080a:	0555      	lsls	r5, r2, #21
 800080c:	0d6d      	lsrs	r5, r5, #21
 800080e:	429a      	cmp	r2, r3
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0xec>
 8000812:	e106      	b.n	8000a22 <__aeabi_dadd+0x2fa>
 8000814:	4ac4      	ldr	r2, [pc, #784]	; (8000b28 <__aeabi_dadd+0x400>)
 8000816:	08ff      	lsrs	r7, r7, #3
 8000818:	400a      	ands	r2, r1
 800081a:	0753      	lsls	r3, r2, #29
 800081c:	0252      	lsls	r2, r2, #9
 800081e:	433b      	orrs	r3, r7
 8000820:	0b12      	lsrs	r2, r2, #12
 8000822:	e08e      	b.n	8000942 <__aeabi_dadd+0x21a>
 8000824:	2b00      	cmp	r3, #0
 8000826:	d000      	beq.n	800082a <__aeabi_dadd+0x102>
 8000828:	e0b8      	b.n	800099c <__aeabi_dadd+0x274>
 800082a:	1c6b      	adds	r3, r5, #1
 800082c:	055b      	lsls	r3, r3, #21
 800082e:	0d5b      	lsrs	r3, r3, #21
 8000830:	2b01      	cmp	r3, #1
 8000832:	dc00      	bgt.n	8000836 <__aeabi_dadd+0x10e>
 8000834:	e130      	b.n	8000a98 <__aeabi_dadd+0x370>
 8000836:	1a87      	subs	r7, r0, r2
 8000838:	4643      	mov	r3, r8
 800083a:	42b8      	cmp	r0, r7
 800083c:	41b6      	sbcs	r6, r6
 800083e:	1acb      	subs	r3, r1, r3
 8000840:	4276      	negs	r6, r6
 8000842:	1b9e      	subs	r6, r3, r6
 8000844:	0233      	lsls	r3, r6, #8
 8000846:	d500      	bpl.n	800084a <__aeabi_dadd+0x122>
 8000848:	e14c      	b.n	8000ae4 <__aeabi_dadd+0x3bc>
 800084a:	003b      	movs	r3, r7
 800084c:	4333      	orrs	r3, r6
 800084e:	d1a1      	bne.n	8000794 <__aeabi_dadd+0x6c>
 8000850:	2200      	movs	r2, #0
 8000852:	2400      	movs	r4, #0
 8000854:	2500      	movs	r5, #0
 8000856:	e070      	b.n	800093a <__aeabi_dadd+0x212>
 8000858:	2b00      	cmp	r3, #0
 800085a:	dc00      	bgt.n	800085e <__aeabi_dadd+0x136>
 800085c:	e0e5      	b.n	8000a2a <__aeabi_dadd+0x302>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_dadd+0x13c>
 8000862:	e083      	b.n	800096c <__aeabi_dadd+0x244>
 8000864:	4eaf      	ldr	r6, [pc, #700]	; (8000b24 <__aeabi_dadd+0x3fc>)
 8000866:	42b5      	cmp	r5, r6
 8000868:	d060      	beq.n	800092c <__aeabi_dadd+0x204>
 800086a:	2680      	movs	r6, #128	; 0x80
 800086c:	0436      	lsls	r6, r6, #16
 800086e:	4337      	orrs	r7, r6
 8000870:	46b8      	mov	r8, r7
 8000872:	2b38      	cmp	r3, #56	; 0x38
 8000874:	dc00      	bgt.n	8000878 <__aeabi_dadd+0x150>
 8000876:	e13e      	b.n	8000af6 <__aeabi_dadd+0x3ce>
 8000878:	4643      	mov	r3, r8
 800087a:	4313      	orrs	r3, r2
 800087c:	001f      	movs	r7, r3
 800087e:	1e7a      	subs	r2, r7, #1
 8000880:	4197      	sbcs	r7, r2
 8000882:	183f      	adds	r7, r7, r0
 8000884:	4287      	cmp	r7, r0
 8000886:	4180      	sbcs	r0, r0
 8000888:	4240      	negs	r0, r0
 800088a:	1809      	adds	r1, r1, r0
 800088c:	020b      	lsls	r3, r1, #8
 800088e:	d400      	bmi.n	8000892 <__aeabi_dadd+0x16a>
 8000890:	e0b0      	b.n	80009f4 <__aeabi_dadd+0x2cc>
 8000892:	4ba4      	ldr	r3, [pc, #656]	; (8000b24 <__aeabi_dadd+0x3fc>)
 8000894:	3501      	adds	r5, #1
 8000896:	429d      	cmp	r5, r3
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x174>
 800089a:	e0c3      	b.n	8000a24 <__aeabi_dadd+0x2fc>
 800089c:	4aa2      	ldr	r2, [pc, #648]	; (8000b28 <__aeabi_dadd+0x400>)
 800089e:	087b      	lsrs	r3, r7, #1
 80008a0:	400a      	ands	r2, r1
 80008a2:	2101      	movs	r1, #1
 80008a4:	400f      	ands	r7, r1
 80008a6:	431f      	orrs	r7, r3
 80008a8:	0851      	lsrs	r1, r2, #1
 80008aa:	07d3      	lsls	r3, r2, #31
 80008ac:	2207      	movs	r2, #7
 80008ae:	431f      	orrs	r7, r3
 80008b0:	403a      	ands	r2, r7
 80008b2:	e799      	b.n	80007e8 <__aeabi_dadd+0xc0>
 80008b4:	4e9b      	ldr	r6, [pc, #620]	; (8000b24 <__aeabi_dadd+0x3fc>)
 80008b6:	42b5      	cmp	r5, r6
 80008b8:	d038      	beq.n	800092c <__aeabi_dadd+0x204>
 80008ba:	2680      	movs	r6, #128	; 0x80
 80008bc:	0436      	lsls	r6, r6, #16
 80008be:	4337      	orrs	r7, r6
 80008c0:	46b8      	mov	r8, r7
 80008c2:	2b38      	cmp	r3, #56	; 0x38
 80008c4:	dd00      	ble.n	80008c8 <__aeabi_dadd+0x1a0>
 80008c6:	e0dc      	b.n	8000a82 <__aeabi_dadd+0x35a>
 80008c8:	2b1f      	cmp	r3, #31
 80008ca:	dc00      	bgt.n	80008ce <__aeabi_dadd+0x1a6>
 80008cc:	e130      	b.n	8000b30 <__aeabi_dadd+0x408>
 80008ce:	001e      	movs	r6, r3
 80008d0:	4647      	mov	r7, r8
 80008d2:	3e20      	subs	r6, #32
 80008d4:	40f7      	lsrs	r7, r6
 80008d6:	46bc      	mov	ip, r7
 80008d8:	2b20      	cmp	r3, #32
 80008da:	d004      	beq.n	80008e6 <__aeabi_dadd+0x1be>
 80008dc:	2640      	movs	r6, #64	; 0x40
 80008de:	1af3      	subs	r3, r6, r3
 80008e0:	4646      	mov	r6, r8
 80008e2:	409e      	lsls	r6, r3
 80008e4:	4332      	orrs	r2, r6
 80008e6:	0017      	movs	r7, r2
 80008e8:	4663      	mov	r3, ip
 80008ea:	1e7a      	subs	r2, r7, #1
 80008ec:	4197      	sbcs	r7, r2
 80008ee:	431f      	orrs	r7, r3
 80008f0:	e0cc      	b.n	8000a8c <__aeabi_dadd+0x364>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x1d0>
 80008f6:	e204      	b.n	8000d02 <__aeabi_dadd+0x5da>
 80008f8:	4643      	mov	r3, r8
 80008fa:	4313      	orrs	r3, r2
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x1d8>
 80008fe:	e159      	b.n	8000bb4 <__aeabi_dadd+0x48c>
 8000900:	074b      	lsls	r3, r1, #29
 8000902:	08c0      	lsrs	r0, r0, #3
 8000904:	4318      	orrs	r0, r3
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	08c9      	lsrs	r1, r1, #3
 800090a:	031b      	lsls	r3, r3, #12
 800090c:	4219      	tst	r1, r3
 800090e:	d008      	beq.n	8000922 <__aeabi_dadd+0x1fa>
 8000910:	4645      	mov	r5, r8
 8000912:	08ed      	lsrs	r5, r5, #3
 8000914:	421d      	tst	r5, r3
 8000916:	d104      	bne.n	8000922 <__aeabi_dadd+0x1fa>
 8000918:	4643      	mov	r3, r8
 800091a:	08d0      	lsrs	r0, r2, #3
 800091c:	0759      	lsls	r1, r3, #29
 800091e:	4308      	orrs	r0, r1
 8000920:	0029      	movs	r1, r5
 8000922:	0f42      	lsrs	r2, r0, #29
 8000924:	00c9      	lsls	r1, r1, #3
 8000926:	4d7f      	ldr	r5, [pc, #508]	; (8000b24 <__aeabi_dadd+0x3fc>)
 8000928:	4311      	orrs	r1, r2
 800092a:	00c0      	lsls	r0, r0, #3
 800092c:	074b      	lsls	r3, r1, #29
 800092e:	08ca      	lsrs	r2, r1, #3
 8000930:	497c      	ldr	r1, [pc, #496]	; (8000b24 <__aeabi_dadd+0x3fc>)
 8000932:	08c0      	lsrs	r0, r0, #3
 8000934:	4303      	orrs	r3, r0
 8000936:	428d      	cmp	r5, r1
 8000938:	d068      	beq.n	8000a0c <__aeabi_dadd+0x2e4>
 800093a:	0312      	lsls	r2, r2, #12
 800093c:	056d      	lsls	r5, r5, #21
 800093e:	0b12      	lsrs	r2, r2, #12
 8000940:	0d6d      	lsrs	r5, r5, #21
 8000942:	2100      	movs	r1, #0
 8000944:	0312      	lsls	r2, r2, #12
 8000946:	0018      	movs	r0, r3
 8000948:	0b13      	lsrs	r3, r2, #12
 800094a:	0d0a      	lsrs	r2, r1, #20
 800094c:	0512      	lsls	r2, r2, #20
 800094e:	431a      	orrs	r2, r3
 8000950:	4b76      	ldr	r3, [pc, #472]	; (8000b2c <__aeabi_dadd+0x404>)
 8000952:	052d      	lsls	r5, r5, #20
 8000954:	4013      	ands	r3, r2
 8000956:	432b      	orrs	r3, r5
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	07e4      	lsls	r4, r4, #31
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	4323      	orrs	r3, r4
 8000960:	0019      	movs	r1, r3
 8000962:	bc1c      	pop	{r2, r3, r4}
 8000964:	4690      	mov	r8, r2
 8000966:	4699      	mov	r9, r3
 8000968:	46a2      	mov	sl, r4
 800096a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096c:	003e      	movs	r6, r7
 800096e:	4316      	orrs	r6, r2
 8000970:	d012      	beq.n	8000998 <__aeabi_dadd+0x270>
 8000972:	1e5e      	subs	r6, r3, #1
 8000974:	2e00      	cmp	r6, #0
 8000976:	d000      	beq.n	800097a <__aeabi_dadd+0x252>
 8000978:	e100      	b.n	8000b7c <__aeabi_dadd+0x454>
 800097a:	1887      	adds	r7, r0, r2
 800097c:	4287      	cmp	r7, r0
 800097e:	4180      	sbcs	r0, r0
 8000980:	4441      	add	r1, r8
 8000982:	4240      	negs	r0, r0
 8000984:	1809      	adds	r1, r1, r0
 8000986:	2501      	movs	r5, #1
 8000988:	020b      	lsls	r3, r1, #8
 800098a:	d533      	bpl.n	80009f4 <__aeabi_dadd+0x2cc>
 800098c:	2502      	movs	r5, #2
 800098e:	e785      	b.n	800089c <__aeabi_dadd+0x174>
 8000990:	4664      	mov	r4, ip
 8000992:	0033      	movs	r3, r6
 8000994:	4641      	mov	r1, r8
 8000996:	0010      	movs	r0, r2
 8000998:	001d      	movs	r5, r3
 800099a:	e7c7      	b.n	800092c <__aeabi_dadd+0x204>
 800099c:	2d00      	cmp	r5, #0
 800099e:	d000      	beq.n	80009a2 <__aeabi_dadd+0x27a>
 80009a0:	e0da      	b.n	8000b58 <__aeabi_dadd+0x430>
 80009a2:	000c      	movs	r4, r1
 80009a4:	4304      	orrs	r4, r0
 80009a6:	d0f3      	beq.n	8000990 <__aeabi_dadd+0x268>
 80009a8:	1c5c      	adds	r4, r3, #1
 80009aa:	d100      	bne.n	80009ae <__aeabi_dadd+0x286>
 80009ac:	e19f      	b.n	8000cee <__aeabi_dadd+0x5c6>
 80009ae:	4c5d      	ldr	r4, [pc, #372]	; (8000b24 <__aeabi_dadd+0x3fc>)
 80009b0:	42a6      	cmp	r6, r4
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x28e>
 80009b4:	e12f      	b.n	8000c16 <__aeabi_dadd+0x4ee>
 80009b6:	43db      	mvns	r3, r3
 80009b8:	2b38      	cmp	r3, #56	; 0x38
 80009ba:	dd00      	ble.n	80009be <__aeabi_dadd+0x296>
 80009bc:	e166      	b.n	8000c8c <__aeabi_dadd+0x564>
 80009be:	2b1f      	cmp	r3, #31
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_dadd+0x29c>
 80009c2:	e183      	b.n	8000ccc <__aeabi_dadd+0x5a4>
 80009c4:	2420      	movs	r4, #32
 80009c6:	0005      	movs	r5, r0
 80009c8:	1ae4      	subs	r4, r4, r3
 80009ca:	000f      	movs	r7, r1
 80009cc:	40dd      	lsrs	r5, r3
 80009ce:	40d9      	lsrs	r1, r3
 80009d0:	40a0      	lsls	r0, r4
 80009d2:	4643      	mov	r3, r8
 80009d4:	40a7      	lsls	r7, r4
 80009d6:	1a5b      	subs	r3, r3, r1
 80009d8:	1e44      	subs	r4, r0, #1
 80009da:	41a0      	sbcs	r0, r4
 80009dc:	4698      	mov	r8, r3
 80009de:	432f      	orrs	r7, r5
 80009e0:	4338      	orrs	r0, r7
 80009e2:	1a17      	subs	r7, r2, r0
 80009e4:	42ba      	cmp	r2, r7
 80009e6:	4192      	sbcs	r2, r2
 80009e8:	4643      	mov	r3, r8
 80009ea:	4252      	negs	r2, r2
 80009ec:	1a99      	subs	r1, r3, r2
 80009ee:	4664      	mov	r4, ip
 80009f0:	0035      	movs	r5, r6
 80009f2:	e6ca      	b.n	800078a <__aeabi_dadd+0x62>
 80009f4:	2207      	movs	r2, #7
 80009f6:	403a      	ands	r2, r7
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	d000      	beq.n	80009fe <__aeabi_dadd+0x2d6>
 80009fc:	e6f6      	b.n	80007ec <__aeabi_dadd+0xc4>
 80009fe:	074b      	lsls	r3, r1, #29
 8000a00:	08ca      	lsrs	r2, r1, #3
 8000a02:	4948      	ldr	r1, [pc, #288]	; (8000b24 <__aeabi_dadd+0x3fc>)
 8000a04:	08ff      	lsrs	r7, r7, #3
 8000a06:	433b      	orrs	r3, r7
 8000a08:	428d      	cmp	r5, r1
 8000a0a:	d196      	bne.n	800093a <__aeabi_dadd+0x212>
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	4311      	orrs	r1, r2
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dadd+0x2ec>
 8000a12:	e19e      	b.n	8000d52 <__aeabi_dadd+0x62a>
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	0309      	lsls	r1, r1, #12
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	0312      	lsls	r2, r2, #12
 8000a1c:	0b12      	lsrs	r2, r2, #12
 8000a1e:	4d41      	ldr	r5, [pc, #260]	; (8000b24 <__aeabi_dadd+0x3fc>)
 8000a20:	e78f      	b.n	8000942 <__aeabi_dadd+0x21a>
 8000a22:	0015      	movs	r5, r2
 8000a24:	2200      	movs	r2, #0
 8000a26:	2300      	movs	r3, #0
 8000a28:	e78b      	b.n	8000942 <__aeabi_dadd+0x21a>
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_dadd+0x308>
 8000a2e:	e0c7      	b.n	8000bc0 <__aeabi_dadd+0x498>
 8000a30:	1c6b      	adds	r3, r5, #1
 8000a32:	055f      	lsls	r7, r3, #21
 8000a34:	0d7f      	lsrs	r7, r7, #21
 8000a36:	2f01      	cmp	r7, #1
 8000a38:	dc00      	bgt.n	8000a3c <__aeabi_dadd+0x314>
 8000a3a:	e0f1      	b.n	8000c20 <__aeabi_dadd+0x4f8>
 8000a3c:	4d39      	ldr	r5, [pc, #228]	; (8000b24 <__aeabi_dadd+0x3fc>)
 8000a3e:	42ab      	cmp	r3, r5
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x31c>
 8000a42:	e0b9      	b.n	8000bb8 <__aeabi_dadd+0x490>
 8000a44:	1885      	adds	r5, r0, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	4285      	cmp	r5, r0
 8000a4a:	4189      	sbcs	r1, r1
 8000a4c:	4442      	add	r2, r8
 8000a4e:	4249      	negs	r1, r1
 8000a50:	1851      	adds	r1, r2, r1
 8000a52:	2207      	movs	r2, #7
 8000a54:	07cf      	lsls	r7, r1, #31
 8000a56:	086d      	lsrs	r5, r5, #1
 8000a58:	432f      	orrs	r7, r5
 8000a5a:	0849      	lsrs	r1, r1, #1
 8000a5c:	403a      	ands	r2, r7
 8000a5e:	001d      	movs	r5, r3
 8000a60:	e6c2      	b.n	80007e8 <__aeabi_dadd+0xc0>
 8000a62:	2207      	movs	r2, #7
 8000a64:	4930      	ldr	r1, [pc, #192]	; (8000b28 <__aeabi_dadd+0x400>)
 8000a66:	1aed      	subs	r5, r5, r3
 8000a68:	4031      	ands	r1, r6
 8000a6a:	403a      	ands	r2, r7
 8000a6c:	e6bc      	b.n	80007e8 <__aeabi_dadd+0xc0>
 8000a6e:	003e      	movs	r6, r7
 8000a70:	3828      	subs	r0, #40	; 0x28
 8000a72:	4086      	lsls	r6, r0
 8000a74:	2700      	movs	r7, #0
 8000a76:	e69f      	b.n	80007b8 <__aeabi_dadd+0x90>
 8000a78:	0038      	movs	r0, r7
 8000a7a:	f001 fc77 	bl	800236c <__clzsi2>
 8000a7e:	3020      	adds	r0, #32
 8000a80:	e68e      	b.n	80007a0 <__aeabi_dadd+0x78>
 8000a82:	4643      	mov	r3, r8
 8000a84:	4313      	orrs	r3, r2
 8000a86:	001f      	movs	r7, r3
 8000a88:	1e7a      	subs	r2, r7, #1
 8000a8a:	4197      	sbcs	r7, r2
 8000a8c:	1bc7      	subs	r7, r0, r7
 8000a8e:	42b8      	cmp	r0, r7
 8000a90:	4180      	sbcs	r0, r0
 8000a92:	4240      	negs	r0, r0
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	e678      	b.n	800078a <__aeabi_dadd+0x62>
 8000a98:	000e      	movs	r6, r1
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	4306      	orrs	r6, r0
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d161      	bne.n	8000b68 <__aeabi_dadd+0x440>
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dadd+0x382>
 8000aa8:	e0f4      	b.n	8000c94 <__aeabi_dadd+0x56c>
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x388>
 8000aae:	e11b      	b.n	8000ce8 <__aeabi_dadd+0x5c0>
 8000ab0:	4664      	mov	r4, ip
 8000ab2:	0039      	movs	r1, r7
 8000ab4:	0010      	movs	r0, r2
 8000ab6:	e739      	b.n	800092c <__aeabi_dadd+0x204>
 8000ab8:	4f1a      	ldr	r7, [pc, #104]	; (8000b24 <__aeabi_dadd+0x3fc>)
 8000aba:	42bb      	cmp	r3, r7
 8000abc:	d07a      	beq.n	8000bb4 <__aeabi_dadd+0x48c>
 8000abe:	0033      	movs	r3, r6
 8000ac0:	e6ff      	b.n	80008c2 <__aeabi_dadd+0x19a>
 8000ac2:	0030      	movs	r0, r6
 8000ac4:	3d1f      	subs	r5, #31
 8000ac6:	40e8      	lsrs	r0, r5
 8000ac8:	2b20      	cmp	r3, #32
 8000aca:	d003      	beq.n	8000ad4 <__aeabi_dadd+0x3ac>
 8000acc:	2140      	movs	r1, #64	; 0x40
 8000ace:	1acb      	subs	r3, r1, r3
 8000ad0:	409e      	lsls	r6, r3
 8000ad2:	4337      	orrs	r7, r6
 8000ad4:	1e7b      	subs	r3, r7, #1
 8000ad6:	419f      	sbcs	r7, r3
 8000ad8:	2207      	movs	r2, #7
 8000ada:	4307      	orrs	r7, r0
 8000adc:	403a      	ands	r2, r7
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2500      	movs	r5, #0
 8000ae2:	e789      	b.n	80009f8 <__aeabi_dadd+0x2d0>
 8000ae4:	1a17      	subs	r7, r2, r0
 8000ae6:	4643      	mov	r3, r8
 8000ae8:	42ba      	cmp	r2, r7
 8000aea:	41b6      	sbcs	r6, r6
 8000aec:	1a59      	subs	r1, r3, r1
 8000aee:	4276      	negs	r6, r6
 8000af0:	1b8e      	subs	r6, r1, r6
 8000af2:	4664      	mov	r4, ip
 8000af4:	e64e      	b.n	8000794 <__aeabi_dadd+0x6c>
 8000af6:	2b1f      	cmp	r3, #31
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dadd+0x3d4>
 8000afa:	e0ad      	b.n	8000c58 <__aeabi_dadd+0x530>
 8000afc:	2620      	movs	r6, #32
 8000afe:	4647      	mov	r7, r8
 8000b00:	1af6      	subs	r6, r6, r3
 8000b02:	40b7      	lsls	r7, r6
 8000b04:	46b9      	mov	r9, r7
 8000b06:	0017      	movs	r7, r2
 8000b08:	46b2      	mov	sl, r6
 8000b0a:	40df      	lsrs	r7, r3
 8000b0c:	464e      	mov	r6, r9
 8000b0e:	433e      	orrs	r6, r7
 8000b10:	0037      	movs	r7, r6
 8000b12:	4656      	mov	r6, sl
 8000b14:	40b2      	lsls	r2, r6
 8000b16:	1e56      	subs	r6, r2, #1
 8000b18:	41b2      	sbcs	r2, r6
 8000b1a:	4317      	orrs	r7, r2
 8000b1c:	4642      	mov	r2, r8
 8000b1e:	40da      	lsrs	r2, r3
 8000b20:	1889      	adds	r1, r1, r2
 8000b22:	e6ae      	b.n	8000882 <__aeabi_dadd+0x15a>
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	800fffff 	.word	0x800fffff
 8000b30:	2620      	movs	r6, #32
 8000b32:	4647      	mov	r7, r8
 8000b34:	1af6      	subs	r6, r6, r3
 8000b36:	40b7      	lsls	r7, r6
 8000b38:	46b9      	mov	r9, r7
 8000b3a:	0017      	movs	r7, r2
 8000b3c:	46b2      	mov	sl, r6
 8000b3e:	40df      	lsrs	r7, r3
 8000b40:	464e      	mov	r6, r9
 8000b42:	433e      	orrs	r6, r7
 8000b44:	0037      	movs	r7, r6
 8000b46:	4656      	mov	r6, sl
 8000b48:	40b2      	lsls	r2, r6
 8000b4a:	1e56      	subs	r6, r2, #1
 8000b4c:	41b2      	sbcs	r2, r6
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	4642      	mov	r2, r8
 8000b52:	40da      	lsrs	r2, r3
 8000b54:	1a89      	subs	r1, r1, r2
 8000b56:	e799      	b.n	8000a8c <__aeabi_dadd+0x364>
 8000b58:	4c7f      	ldr	r4, [pc, #508]	; (8000d58 <__aeabi_dadd+0x630>)
 8000b5a:	42a6      	cmp	r6, r4
 8000b5c:	d05b      	beq.n	8000c16 <__aeabi_dadd+0x4ee>
 8000b5e:	2480      	movs	r4, #128	; 0x80
 8000b60:	0424      	lsls	r4, r4, #16
 8000b62:	425b      	negs	r3, r3
 8000b64:	4321      	orrs	r1, r4
 8000b66:	e727      	b.n	80009b8 <__aeabi_dadd+0x290>
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	d10c      	bne.n	8000b86 <__aeabi_dadd+0x45e>
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x44a>
 8000b70:	e0cb      	b.n	8000d0a <__aeabi_dadd+0x5e2>
 8000b72:	4664      	mov	r4, ip
 8000b74:	0039      	movs	r1, r7
 8000b76:	0010      	movs	r0, r2
 8000b78:	4d77      	ldr	r5, [pc, #476]	; (8000d58 <__aeabi_dadd+0x630>)
 8000b7a:	e6d7      	b.n	800092c <__aeabi_dadd+0x204>
 8000b7c:	4f76      	ldr	r7, [pc, #472]	; (8000d58 <__aeabi_dadd+0x630>)
 8000b7e:	42bb      	cmp	r3, r7
 8000b80:	d018      	beq.n	8000bb4 <__aeabi_dadd+0x48c>
 8000b82:	0033      	movs	r3, r6
 8000b84:	e675      	b.n	8000872 <__aeabi_dadd+0x14a>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d014      	beq.n	8000bb4 <__aeabi_dadd+0x48c>
 8000b8a:	074b      	lsls	r3, r1, #29
 8000b8c:	08c0      	lsrs	r0, r0, #3
 8000b8e:	4318      	orrs	r0, r3
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	08c9      	lsrs	r1, r1, #3
 8000b94:	031b      	lsls	r3, r3, #12
 8000b96:	4219      	tst	r1, r3
 8000b98:	d007      	beq.n	8000baa <__aeabi_dadd+0x482>
 8000b9a:	08fc      	lsrs	r4, r7, #3
 8000b9c:	421c      	tst	r4, r3
 8000b9e:	d104      	bne.n	8000baa <__aeabi_dadd+0x482>
 8000ba0:	0779      	lsls	r1, r7, #29
 8000ba2:	08d0      	lsrs	r0, r2, #3
 8000ba4:	4308      	orrs	r0, r1
 8000ba6:	46e1      	mov	r9, ip
 8000ba8:	0021      	movs	r1, r4
 8000baa:	464c      	mov	r4, r9
 8000bac:	0f42      	lsrs	r2, r0, #29
 8000bae:	00c9      	lsls	r1, r1, #3
 8000bb0:	4311      	orrs	r1, r2
 8000bb2:	00c0      	lsls	r0, r0, #3
 8000bb4:	4d68      	ldr	r5, [pc, #416]	; (8000d58 <__aeabi_dadd+0x630>)
 8000bb6:	e6b9      	b.n	800092c <__aeabi_dadd+0x204>
 8000bb8:	001d      	movs	r5, r3
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e6c0      	b.n	8000942 <__aeabi_dadd+0x21a>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d15b      	bne.n	8000c7c <__aeabi_dadd+0x554>
 8000bc4:	000d      	movs	r5, r1
 8000bc6:	4305      	orrs	r5, r0
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x4a4>
 8000bca:	e6e2      	b.n	8000992 <__aeabi_dadd+0x26a>
 8000bcc:	1c5d      	adds	r5, r3, #1
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dadd+0x4aa>
 8000bd0:	e0b0      	b.n	8000d34 <__aeabi_dadd+0x60c>
 8000bd2:	4d61      	ldr	r5, [pc, #388]	; (8000d58 <__aeabi_dadd+0x630>)
 8000bd4:	42ae      	cmp	r6, r5
 8000bd6:	d01f      	beq.n	8000c18 <__aeabi_dadd+0x4f0>
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	2b38      	cmp	r3, #56	; 0x38
 8000bdc:	dc71      	bgt.n	8000cc2 <__aeabi_dadd+0x59a>
 8000bde:	2b1f      	cmp	r3, #31
 8000be0:	dd00      	ble.n	8000be4 <__aeabi_dadd+0x4bc>
 8000be2:	e096      	b.n	8000d12 <__aeabi_dadd+0x5ea>
 8000be4:	2520      	movs	r5, #32
 8000be6:	000f      	movs	r7, r1
 8000be8:	1aed      	subs	r5, r5, r3
 8000bea:	40af      	lsls	r7, r5
 8000bec:	46b9      	mov	r9, r7
 8000bee:	0007      	movs	r7, r0
 8000bf0:	46aa      	mov	sl, r5
 8000bf2:	40df      	lsrs	r7, r3
 8000bf4:	464d      	mov	r5, r9
 8000bf6:	433d      	orrs	r5, r7
 8000bf8:	002f      	movs	r7, r5
 8000bfa:	4655      	mov	r5, sl
 8000bfc:	40a8      	lsls	r0, r5
 8000bfe:	40d9      	lsrs	r1, r3
 8000c00:	1e45      	subs	r5, r0, #1
 8000c02:	41a8      	sbcs	r0, r5
 8000c04:	4488      	add	r8, r1
 8000c06:	4307      	orrs	r7, r0
 8000c08:	18bf      	adds	r7, r7, r2
 8000c0a:	4297      	cmp	r7, r2
 8000c0c:	4192      	sbcs	r2, r2
 8000c0e:	4251      	negs	r1, r2
 8000c10:	4441      	add	r1, r8
 8000c12:	0035      	movs	r5, r6
 8000c14:	e63a      	b.n	800088c <__aeabi_dadd+0x164>
 8000c16:	4664      	mov	r4, ip
 8000c18:	0035      	movs	r5, r6
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	e685      	b.n	800092c <__aeabi_dadd+0x204>
 8000c20:	000b      	movs	r3, r1
 8000c22:	4303      	orrs	r3, r0
 8000c24:	2d00      	cmp	r5, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_dadd+0x502>
 8000c28:	e663      	b.n	80008f2 <__aeabi_dadd+0x1ca>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f5      	beq.n	8000c1a <__aeabi_dadd+0x4f2>
 8000c2e:	4643      	mov	r3, r8
 8000c30:	4313      	orrs	r3, r2
 8000c32:	d100      	bne.n	8000c36 <__aeabi_dadd+0x50e>
 8000c34:	e67a      	b.n	800092c <__aeabi_dadd+0x204>
 8000c36:	1887      	adds	r7, r0, r2
 8000c38:	4287      	cmp	r7, r0
 8000c3a:	4180      	sbcs	r0, r0
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	4441      	add	r1, r8
 8000c40:	4240      	negs	r0, r0
 8000c42:	1809      	adds	r1, r1, r0
 8000c44:	403a      	ands	r2, r7
 8000c46:	020b      	lsls	r3, r1, #8
 8000c48:	d400      	bmi.n	8000c4c <__aeabi_dadd+0x524>
 8000c4a:	e6d5      	b.n	80009f8 <__aeabi_dadd+0x2d0>
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <__aeabi_dadd+0x634>)
 8000c4e:	3501      	adds	r5, #1
 8000c50:	4019      	ands	r1, r3
 8000c52:	e5c9      	b.n	80007e8 <__aeabi_dadd+0xc0>
 8000c54:	0038      	movs	r0, r7
 8000c56:	e669      	b.n	800092c <__aeabi_dadd+0x204>
 8000c58:	001e      	movs	r6, r3
 8000c5a:	4647      	mov	r7, r8
 8000c5c:	3e20      	subs	r6, #32
 8000c5e:	40f7      	lsrs	r7, r6
 8000c60:	46bc      	mov	ip, r7
 8000c62:	2b20      	cmp	r3, #32
 8000c64:	d004      	beq.n	8000c70 <__aeabi_dadd+0x548>
 8000c66:	2640      	movs	r6, #64	; 0x40
 8000c68:	1af3      	subs	r3, r6, r3
 8000c6a:	4646      	mov	r6, r8
 8000c6c:	409e      	lsls	r6, r3
 8000c6e:	4332      	orrs	r2, r6
 8000c70:	0017      	movs	r7, r2
 8000c72:	4663      	mov	r3, ip
 8000c74:	1e7a      	subs	r2, r7, #1
 8000c76:	4197      	sbcs	r7, r2
 8000c78:	431f      	orrs	r7, r3
 8000c7a:	e602      	b.n	8000882 <__aeabi_dadd+0x15a>
 8000c7c:	4d36      	ldr	r5, [pc, #216]	; (8000d58 <__aeabi_dadd+0x630>)
 8000c7e:	42ae      	cmp	r6, r5
 8000c80:	d0ca      	beq.n	8000c18 <__aeabi_dadd+0x4f0>
 8000c82:	2580      	movs	r5, #128	; 0x80
 8000c84:	042d      	lsls	r5, r5, #16
 8000c86:	425b      	negs	r3, r3
 8000c88:	4329      	orrs	r1, r5
 8000c8a:	e7a6      	b.n	8000bda <__aeabi_dadd+0x4b2>
 8000c8c:	4308      	orrs	r0, r1
 8000c8e:	1e41      	subs	r1, r0, #1
 8000c90:	4188      	sbcs	r0, r1
 8000c92:	e6a6      	b.n	80009e2 <__aeabi_dadd+0x2ba>
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dadd+0x572>
 8000c98:	e648      	b.n	800092c <__aeabi_dadd+0x204>
 8000c9a:	1a87      	subs	r7, r0, r2
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	42b8      	cmp	r0, r7
 8000ca0:	41b6      	sbcs	r6, r6
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	4276      	negs	r6, r6
 8000ca6:	1b9e      	subs	r6, r3, r6
 8000ca8:	0233      	lsls	r3, r6, #8
 8000caa:	d54b      	bpl.n	8000d44 <__aeabi_dadd+0x61c>
 8000cac:	1a17      	subs	r7, r2, r0
 8000cae:	4643      	mov	r3, r8
 8000cb0:	42ba      	cmp	r2, r7
 8000cb2:	4192      	sbcs	r2, r2
 8000cb4:	1a59      	subs	r1, r3, r1
 8000cb6:	4252      	negs	r2, r2
 8000cb8:	1a89      	subs	r1, r1, r2
 8000cba:	2207      	movs	r2, #7
 8000cbc:	4664      	mov	r4, ip
 8000cbe:	403a      	ands	r2, r7
 8000cc0:	e592      	b.n	80007e8 <__aeabi_dadd+0xc0>
 8000cc2:	4301      	orrs	r1, r0
 8000cc4:	000f      	movs	r7, r1
 8000cc6:	1e79      	subs	r1, r7, #1
 8000cc8:	418f      	sbcs	r7, r1
 8000cca:	e79d      	b.n	8000c08 <__aeabi_dadd+0x4e0>
 8000ccc:	001c      	movs	r4, r3
 8000cce:	000f      	movs	r7, r1
 8000cd0:	3c20      	subs	r4, #32
 8000cd2:	40e7      	lsrs	r7, r4
 8000cd4:	2b20      	cmp	r3, #32
 8000cd6:	d003      	beq.n	8000ce0 <__aeabi_dadd+0x5b8>
 8000cd8:	2440      	movs	r4, #64	; 0x40
 8000cda:	1ae3      	subs	r3, r4, r3
 8000cdc:	4099      	lsls	r1, r3
 8000cde:	4308      	orrs	r0, r1
 8000ce0:	1e41      	subs	r1, r0, #1
 8000ce2:	4188      	sbcs	r0, r1
 8000ce4:	4338      	orrs	r0, r7
 8000ce6:	e67c      	b.n	80009e2 <__aeabi_dadd+0x2ba>
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2400      	movs	r4, #0
 8000cec:	e625      	b.n	800093a <__aeabi_dadd+0x212>
 8000cee:	1a17      	subs	r7, r2, r0
 8000cf0:	4643      	mov	r3, r8
 8000cf2:	42ba      	cmp	r2, r7
 8000cf4:	4192      	sbcs	r2, r2
 8000cf6:	1a59      	subs	r1, r3, r1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	1a89      	subs	r1, r1, r2
 8000cfc:	4664      	mov	r4, ip
 8000cfe:	0035      	movs	r5, r6
 8000d00:	e543      	b.n	800078a <__aeabi_dadd+0x62>
 8000d02:	4641      	mov	r1, r8
 8000d04:	0010      	movs	r0, r2
 8000d06:	4d14      	ldr	r5, [pc, #80]	; (8000d58 <__aeabi_dadd+0x630>)
 8000d08:	e610      	b.n	800092c <__aeabi_dadd+0x204>
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	0312      	lsls	r2, r2, #12
 8000d10:	e680      	b.n	8000a14 <__aeabi_dadd+0x2ec>
 8000d12:	001d      	movs	r5, r3
 8000d14:	000f      	movs	r7, r1
 8000d16:	3d20      	subs	r5, #32
 8000d18:	40ef      	lsrs	r7, r5
 8000d1a:	46bc      	mov	ip, r7
 8000d1c:	2b20      	cmp	r3, #32
 8000d1e:	d003      	beq.n	8000d28 <__aeabi_dadd+0x600>
 8000d20:	2540      	movs	r5, #64	; 0x40
 8000d22:	1aeb      	subs	r3, r5, r3
 8000d24:	4099      	lsls	r1, r3
 8000d26:	4308      	orrs	r0, r1
 8000d28:	0007      	movs	r7, r0
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	1e78      	subs	r0, r7, #1
 8000d2e:	4187      	sbcs	r7, r0
 8000d30:	431f      	orrs	r7, r3
 8000d32:	e769      	b.n	8000c08 <__aeabi_dadd+0x4e0>
 8000d34:	1887      	adds	r7, r0, r2
 8000d36:	4297      	cmp	r7, r2
 8000d38:	419b      	sbcs	r3, r3
 8000d3a:	4441      	add	r1, r8
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	18c9      	adds	r1, r1, r3
 8000d40:	0035      	movs	r5, r6
 8000d42:	e5a3      	b.n	800088c <__aeabi_dadd+0x164>
 8000d44:	003b      	movs	r3, r7
 8000d46:	4333      	orrs	r3, r6
 8000d48:	d0ce      	beq.n	8000ce8 <__aeabi_dadd+0x5c0>
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	0031      	movs	r1, r6
 8000d4e:	403a      	ands	r2, r7
 8000d50:	e652      	b.n	80009f8 <__aeabi_dadd+0x2d0>
 8000d52:	2300      	movs	r3, #0
 8000d54:	001a      	movs	r2, r3
 8000d56:	e5f4      	b.n	8000942 <__aeabi_dadd+0x21a>
 8000d58:	000007ff 	.word	0x000007ff
 8000d5c:	ff7fffff 	.word	0xff7fffff

08000d60 <__aeabi_ddiv>:
 8000d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d62:	4657      	mov	r7, sl
 8000d64:	46de      	mov	lr, fp
 8000d66:	464e      	mov	r6, r9
 8000d68:	4645      	mov	r5, r8
 8000d6a:	b5e0      	push	{r5, r6, r7, lr}
 8000d6c:	4683      	mov	fp, r0
 8000d6e:	0007      	movs	r7, r0
 8000d70:	030e      	lsls	r6, r1, #12
 8000d72:	0048      	lsls	r0, r1, #1
 8000d74:	b085      	sub	sp, #20
 8000d76:	4692      	mov	sl, r2
 8000d78:	001c      	movs	r4, r3
 8000d7a:	0b36      	lsrs	r6, r6, #12
 8000d7c:	0d40      	lsrs	r0, r0, #21
 8000d7e:	0fcd      	lsrs	r5, r1, #31
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d100      	bne.n	8000d86 <__aeabi_ddiv+0x26>
 8000d84:	e09d      	b.n	8000ec2 <__aeabi_ddiv+0x162>
 8000d86:	4b95      	ldr	r3, [pc, #596]	; (8000fdc <__aeabi_ddiv+0x27c>)
 8000d88:	4298      	cmp	r0, r3
 8000d8a:	d039      	beq.n	8000e00 <__aeabi_ddiv+0xa0>
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	00f6      	lsls	r6, r6, #3
 8000d90:	041b      	lsls	r3, r3, #16
 8000d92:	431e      	orrs	r6, r3
 8000d94:	4a92      	ldr	r2, [pc, #584]	; (8000fe0 <__aeabi_ddiv+0x280>)
 8000d96:	0f7b      	lsrs	r3, r7, #29
 8000d98:	4333      	orrs	r3, r6
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	4694      	mov	ip, r2
 8000d9e:	0003      	movs	r3, r0
 8000da0:	4463      	add	r3, ip
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2300      	movs	r3, #0
 8000da6:	2600      	movs	r6, #0
 8000da8:	00ff      	lsls	r7, r7, #3
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	0323      	lsls	r3, r4, #12
 8000dae:	0b1b      	lsrs	r3, r3, #12
 8000db0:	4698      	mov	r8, r3
 8000db2:	0063      	lsls	r3, r4, #1
 8000db4:	0fe4      	lsrs	r4, r4, #31
 8000db6:	4652      	mov	r2, sl
 8000db8:	0d5b      	lsrs	r3, r3, #21
 8000dba:	9401      	str	r4, [sp, #4]
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_ddiv+0x60>
 8000dbe:	e0b3      	b.n	8000f28 <__aeabi_ddiv+0x1c8>
 8000dc0:	4986      	ldr	r1, [pc, #536]	; (8000fdc <__aeabi_ddiv+0x27c>)
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_ddiv+0x68>
 8000dc6:	e09e      	b.n	8000f06 <__aeabi_ddiv+0x1a6>
 8000dc8:	4642      	mov	r2, r8
 8000dca:	00d1      	lsls	r1, r2, #3
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	0412      	lsls	r2, r2, #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	4651      	mov	r1, sl
 8000dd4:	0f49      	lsrs	r1, r1, #29
 8000dd6:	4311      	orrs	r1, r2
 8000dd8:	468b      	mov	fp, r1
 8000dda:	4981      	ldr	r1, [pc, #516]	; (8000fe0 <__aeabi_ddiv+0x280>)
 8000ddc:	4652      	mov	r2, sl
 8000dde:	468c      	mov	ip, r1
 8000de0:	9900      	ldr	r1, [sp, #0]
 8000de2:	4463      	add	r3, ip
 8000de4:	1acb      	subs	r3, r1, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	00d2      	lsls	r2, r2, #3
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	002b      	movs	r3, r5
 8000dee:	4063      	eors	r3, r4
 8000df0:	469a      	mov	sl, r3
 8000df2:	2e0f      	cmp	r6, #15
 8000df4:	d900      	bls.n	8000df8 <__aeabi_ddiv+0x98>
 8000df6:	e105      	b.n	8001004 <__aeabi_ddiv+0x2a4>
 8000df8:	4b7a      	ldr	r3, [pc, #488]	; (8000fe4 <__aeabi_ddiv+0x284>)
 8000dfa:	00b6      	lsls	r6, r6, #2
 8000dfc:	599b      	ldr	r3, [r3, r6]
 8000dfe:	469f      	mov	pc, r3
 8000e00:	465b      	mov	r3, fp
 8000e02:	4333      	orrs	r3, r6
 8000e04:	4699      	mov	r9, r3
 8000e06:	d000      	beq.n	8000e0a <__aeabi_ddiv+0xaa>
 8000e08:	e0b8      	b.n	8000f7c <__aeabi_ddiv+0x21c>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	2608      	movs	r6, #8
 8000e0e:	2700      	movs	r7, #0
 8000e10:	9000      	str	r0, [sp, #0]
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	e7ca      	b.n	8000dac <__aeabi_ddiv+0x4c>
 8000e16:	46cb      	mov	fp, r9
 8000e18:	003a      	movs	r2, r7
 8000e1a:	9902      	ldr	r1, [sp, #8]
 8000e1c:	9501      	str	r5, [sp, #4]
 8000e1e:	9b01      	ldr	r3, [sp, #4]
 8000e20:	469a      	mov	sl, r3
 8000e22:	2902      	cmp	r1, #2
 8000e24:	d027      	beq.n	8000e76 <__aeabi_ddiv+0x116>
 8000e26:	2903      	cmp	r1, #3
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0xcc>
 8000e2a:	e280      	b.n	800132e <__aeabi_ddiv+0x5ce>
 8000e2c:	2901      	cmp	r1, #1
 8000e2e:	d044      	beq.n	8000eba <__aeabi_ddiv+0x15a>
 8000e30:	496d      	ldr	r1, [pc, #436]	; (8000fe8 <__aeabi_ddiv+0x288>)
 8000e32:	9b00      	ldr	r3, [sp, #0]
 8000e34:	468c      	mov	ip, r1
 8000e36:	4463      	add	r3, ip
 8000e38:	001c      	movs	r4, r3
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	dd38      	ble.n	8000eb0 <__aeabi_ddiv+0x150>
 8000e3e:	0753      	lsls	r3, r2, #29
 8000e40:	d000      	beq.n	8000e44 <__aeabi_ddiv+0xe4>
 8000e42:	e213      	b.n	800126c <__aeabi_ddiv+0x50c>
 8000e44:	08d2      	lsrs	r2, r2, #3
 8000e46:	465b      	mov	r3, fp
 8000e48:	01db      	lsls	r3, r3, #7
 8000e4a:	d509      	bpl.n	8000e60 <__aeabi_ddiv+0x100>
 8000e4c:	4659      	mov	r1, fp
 8000e4e:	4b67      	ldr	r3, [pc, #412]	; (8000fec <__aeabi_ddiv+0x28c>)
 8000e50:	4019      	ands	r1, r3
 8000e52:	468b      	mov	fp, r1
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	00c9      	lsls	r1, r1, #3
 8000e58:	468c      	mov	ip, r1
 8000e5a:	9b00      	ldr	r3, [sp, #0]
 8000e5c:	4463      	add	r3, ip
 8000e5e:	001c      	movs	r4, r3
 8000e60:	4b63      	ldr	r3, [pc, #396]	; (8000ff0 <__aeabi_ddiv+0x290>)
 8000e62:	429c      	cmp	r4, r3
 8000e64:	dc07      	bgt.n	8000e76 <__aeabi_ddiv+0x116>
 8000e66:	465b      	mov	r3, fp
 8000e68:	0564      	lsls	r4, r4, #21
 8000e6a:	075f      	lsls	r7, r3, #29
 8000e6c:	025b      	lsls	r3, r3, #9
 8000e6e:	4317      	orrs	r7, r2
 8000e70:	0b1b      	lsrs	r3, r3, #12
 8000e72:	0d62      	lsrs	r2, r4, #21
 8000e74:	e002      	b.n	8000e7c <__aeabi_ddiv+0x11c>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2700      	movs	r7, #0
 8000e7a:	4a58      	ldr	r2, [pc, #352]	; (8000fdc <__aeabi_ddiv+0x27c>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	031b      	lsls	r3, r3, #12
 8000e80:	0b1c      	lsrs	r4, r3, #12
 8000e82:	0d0b      	lsrs	r3, r1, #20
 8000e84:	051b      	lsls	r3, r3, #20
 8000e86:	4323      	orrs	r3, r4
 8000e88:	0514      	lsls	r4, r2, #20
 8000e8a:	4a5a      	ldr	r2, [pc, #360]	; (8000ff4 <__aeabi_ddiv+0x294>)
 8000e8c:	0038      	movs	r0, r7
 8000e8e:	4013      	ands	r3, r2
 8000e90:	431c      	orrs	r4, r3
 8000e92:	4653      	mov	r3, sl
 8000e94:	0064      	lsls	r4, r4, #1
 8000e96:	07db      	lsls	r3, r3, #31
 8000e98:	0864      	lsrs	r4, r4, #1
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	0021      	movs	r1, r4
 8000e9e:	b005      	add	sp, #20
 8000ea0:	bc3c      	pop	{r2, r3, r4, r5}
 8000ea2:	4690      	mov	r8, r2
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	46a2      	mov	sl, r4
 8000ea8:	46ab      	mov	fp, r5
 8000eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eac:	2201      	movs	r2, #1
 8000eae:	4252      	negs	r2, r2
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	1b1b      	subs	r3, r3, r4
 8000eb4:	2b38      	cmp	r3, #56	; 0x38
 8000eb6:	dc00      	bgt.n	8000eba <__aeabi_ddiv+0x15a>
 8000eb8:	e1ad      	b.n	8001216 <__aeabi_ddiv+0x4b6>
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	2700      	movs	r7, #0
 8000ec0:	e7dc      	b.n	8000e7c <__aeabi_ddiv+0x11c>
 8000ec2:	465b      	mov	r3, fp
 8000ec4:	4333      	orrs	r3, r6
 8000ec6:	4699      	mov	r9, r3
 8000ec8:	d05e      	beq.n	8000f88 <__aeabi_ddiv+0x228>
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_ddiv+0x170>
 8000ece:	e18a      	b.n	80011e6 <__aeabi_ddiv+0x486>
 8000ed0:	0030      	movs	r0, r6
 8000ed2:	f001 fa4b 	bl	800236c <__clzsi2>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	3b0b      	subs	r3, #11
 8000eda:	2b1c      	cmp	r3, #28
 8000edc:	dd00      	ble.n	8000ee0 <__aeabi_ddiv+0x180>
 8000ede:	e17b      	b.n	80011d8 <__aeabi_ddiv+0x478>
 8000ee0:	221d      	movs	r2, #29
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	465a      	mov	r2, fp
 8000ee6:	0001      	movs	r1, r0
 8000ee8:	40da      	lsrs	r2, r3
 8000eea:	3908      	subs	r1, #8
 8000eec:	408e      	lsls	r6, r1
 8000eee:	0013      	movs	r3, r2
 8000ef0:	465f      	mov	r7, fp
 8000ef2:	4333      	orrs	r3, r6
 8000ef4:	4699      	mov	r9, r3
 8000ef6:	408f      	lsls	r7, r1
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <__aeabi_ddiv+0x298>)
 8000efa:	2600      	movs	r6, #0
 8000efc:	1a1b      	subs	r3, r3, r0
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2300      	movs	r3, #0
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	e752      	b.n	8000dac <__aeabi_ddiv+0x4c>
 8000f06:	4641      	mov	r1, r8
 8000f08:	4653      	mov	r3, sl
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	493b      	ldr	r1, [pc, #236]	; (8000ffc <__aeabi_ddiv+0x29c>)
 8000f0e:	469b      	mov	fp, r3
 8000f10:	468c      	mov	ip, r1
 8000f12:	9b00      	ldr	r3, [sp, #0]
 8000f14:	4463      	add	r3, ip
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	465b      	mov	r3, fp
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d13b      	bne.n	8000f96 <__aeabi_ddiv+0x236>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	2200      	movs	r2, #0
 8000f22:	431e      	orrs	r6, r3
 8000f24:	2102      	movs	r1, #2
 8000f26:	e761      	b.n	8000dec <__aeabi_ddiv+0x8c>
 8000f28:	4643      	mov	r3, r8
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	469b      	mov	fp, r3
 8000f2e:	d037      	beq.n	8000fa0 <__aeabi_ddiv+0x240>
 8000f30:	4643      	mov	r3, r8
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_ddiv+0x1d8>
 8000f36:	e162      	b.n	80011fe <__aeabi_ddiv+0x49e>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	f001 fa17 	bl	800236c <__clzsi2>
 8000f3e:	0003      	movs	r3, r0
 8000f40:	3b0b      	subs	r3, #11
 8000f42:	2b1c      	cmp	r3, #28
 8000f44:	dd00      	ble.n	8000f48 <__aeabi_ddiv+0x1e8>
 8000f46:	e153      	b.n	80011f0 <__aeabi_ddiv+0x490>
 8000f48:	0002      	movs	r2, r0
 8000f4a:	4641      	mov	r1, r8
 8000f4c:	3a08      	subs	r2, #8
 8000f4e:	4091      	lsls	r1, r2
 8000f50:	4688      	mov	r8, r1
 8000f52:	211d      	movs	r1, #29
 8000f54:	1acb      	subs	r3, r1, r3
 8000f56:	4651      	mov	r1, sl
 8000f58:	40d9      	lsrs	r1, r3
 8000f5a:	000b      	movs	r3, r1
 8000f5c:	4641      	mov	r1, r8
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	469b      	mov	fp, r3
 8000f62:	4653      	mov	r3, sl
 8000f64:	4093      	lsls	r3, r2
 8000f66:	001a      	movs	r2, r3
 8000f68:	9b00      	ldr	r3, [sp, #0]
 8000f6a:	4925      	ldr	r1, [pc, #148]	; (8001000 <__aeabi_ddiv+0x2a0>)
 8000f6c:	469c      	mov	ip, r3
 8000f6e:	4460      	add	r0, ip
 8000f70:	0003      	movs	r3, r0
 8000f72:	468c      	mov	ip, r1
 8000f74:	4463      	add	r3, ip
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	e737      	b.n	8000dec <__aeabi_ddiv+0x8c>
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	46b1      	mov	r9, r6
 8000f80:	9000      	str	r0, [sp, #0]
 8000f82:	260c      	movs	r6, #12
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	e711      	b.n	8000dac <__aeabi_ddiv+0x4c>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	2604      	movs	r6, #4
 8000f90:	2700      	movs	r7, #0
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	e70a      	b.n	8000dac <__aeabi_ddiv+0x4c>
 8000f96:	2303      	movs	r3, #3
 8000f98:	46c3      	mov	fp, r8
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	e725      	b.n	8000dec <__aeabi_ddiv+0x8c>
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	431e      	orrs	r6, r3
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	e720      	b.n	8000dec <__aeabi_ddiv+0x8c>
 8000faa:	2300      	movs	r3, #0
 8000fac:	469a      	mov	sl, r3
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	2700      	movs	r7, #0
 8000fb2:	031b      	lsls	r3, r3, #12
 8000fb4:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <__aeabi_ddiv+0x27c>)
 8000fb6:	e761      	b.n	8000e7c <__aeabi_ddiv+0x11c>
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	4649      	mov	r1, r9
 8000fbc:	031b      	lsls	r3, r3, #12
 8000fbe:	4219      	tst	r1, r3
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_ddiv+0x264>
 8000fc2:	e0e2      	b.n	800118a <__aeabi_ddiv+0x42a>
 8000fc4:	4659      	mov	r1, fp
 8000fc6:	4219      	tst	r1, r3
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_ddiv+0x26c>
 8000fca:	e0de      	b.n	800118a <__aeabi_ddiv+0x42a>
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	031b      	lsls	r3, r3, #12
 8000fd0:	0017      	movs	r7, r2
 8000fd2:	0b1b      	lsrs	r3, r3, #12
 8000fd4:	46a2      	mov	sl, r4
 8000fd6:	4a01      	ldr	r2, [pc, #4]	; (8000fdc <__aeabi_ddiv+0x27c>)
 8000fd8:	e750      	b.n	8000e7c <__aeabi_ddiv+0x11c>
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	000007ff 	.word	0x000007ff
 8000fe0:	fffffc01 	.word	0xfffffc01
 8000fe4:	0800ea0c 	.word	0x0800ea0c
 8000fe8:	000003ff 	.word	0x000003ff
 8000fec:	feffffff 	.word	0xfeffffff
 8000ff0:	000007fe 	.word	0x000007fe
 8000ff4:	800fffff 	.word	0x800fffff
 8000ff8:	fffffc0d 	.word	0xfffffc0d
 8000ffc:	fffff801 	.word	0xfffff801
 8001000:	000003f3 	.word	0x000003f3
 8001004:	45d9      	cmp	r9, fp
 8001006:	d900      	bls.n	800100a <__aeabi_ddiv+0x2aa>
 8001008:	e0cb      	b.n	80011a2 <__aeabi_ddiv+0x442>
 800100a:	d100      	bne.n	800100e <__aeabi_ddiv+0x2ae>
 800100c:	e0c6      	b.n	800119c <__aeabi_ddiv+0x43c>
 800100e:	003c      	movs	r4, r7
 8001010:	4648      	mov	r0, r9
 8001012:	2700      	movs	r7, #0
 8001014:	9b00      	ldr	r3, [sp, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	465b      	mov	r3, fp
 800101c:	0e16      	lsrs	r6, r2, #24
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	431e      	orrs	r6, r3
 8001022:	0213      	lsls	r3, r2, #8
 8001024:	4698      	mov	r8, r3
 8001026:	0433      	lsls	r3, r6, #16
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	4699      	mov	r9, r3
 800102c:	0c31      	lsrs	r1, r6, #16
 800102e:	9101      	str	r1, [sp, #4]
 8001030:	f7ff f902 	bl	8000238 <__aeabi_uidivmod>
 8001034:	464a      	mov	r2, r9
 8001036:	4342      	muls	r2, r0
 8001038:	040b      	lsls	r3, r1, #16
 800103a:	0c21      	lsrs	r1, r4, #16
 800103c:	0005      	movs	r5, r0
 800103e:	4319      	orrs	r1, r3
 8001040:	428a      	cmp	r2, r1
 8001042:	d907      	bls.n	8001054 <__aeabi_ddiv+0x2f4>
 8001044:	1989      	adds	r1, r1, r6
 8001046:	3d01      	subs	r5, #1
 8001048:	428e      	cmp	r6, r1
 800104a:	d803      	bhi.n	8001054 <__aeabi_ddiv+0x2f4>
 800104c:	428a      	cmp	r2, r1
 800104e:	d901      	bls.n	8001054 <__aeabi_ddiv+0x2f4>
 8001050:	1e85      	subs	r5, r0, #2
 8001052:	1989      	adds	r1, r1, r6
 8001054:	1a88      	subs	r0, r1, r2
 8001056:	9901      	ldr	r1, [sp, #4]
 8001058:	f7ff f8ee 	bl	8000238 <__aeabi_uidivmod>
 800105c:	0409      	lsls	r1, r1, #16
 800105e:	468c      	mov	ip, r1
 8001060:	464a      	mov	r2, r9
 8001062:	0421      	lsls	r1, r4, #16
 8001064:	4664      	mov	r4, ip
 8001066:	4342      	muls	r2, r0
 8001068:	0c09      	lsrs	r1, r1, #16
 800106a:	0003      	movs	r3, r0
 800106c:	4321      	orrs	r1, r4
 800106e:	428a      	cmp	r2, r1
 8001070:	d904      	bls.n	800107c <__aeabi_ddiv+0x31c>
 8001072:	1989      	adds	r1, r1, r6
 8001074:	3b01      	subs	r3, #1
 8001076:	428e      	cmp	r6, r1
 8001078:	d800      	bhi.n	800107c <__aeabi_ddiv+0x31c>
 800107a:	e0f1      	b.n	8001260 <__aeabi_ddiv+0x500>
 800107c:	042d      	lsls	r5, r5, #16
 800107e:	431d      	orrs	r5, r3
 8001080:	46ab      	mov	fp, r5
 8001082:	4643      	mov	r3, r8
 8001084:	1a89      	subs	r1, r1, r2
 8001086:	4642      	mov	r2, r8
 8001088:	0c28      	lsrs	r0, r5, #16
 800108a:	0412      	lsls	r2, r2, #16
 800108c:	0c1d      	lsrs	r5, r3, #16
 800108e:	465b      	mov	r3, fp
 8001090:	0c14      	lsrs	r4, r2, #16
 8001092:	0022      	movs	r2, r4
 8001094:	041b      	lsls	r3, r3, #16
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	435a      	muls	r2, r3
 800109a:	9403      	str	r4, [sp, #12]
 800109c:	436b      	muls	r3, r5
 800109e:	4344      	muls	r4, r0
 80010a0:	9502      	str	r5, [sp, #8]
 80010a2:	4368      	muls	r0, r5
 80010a4:	191b      	adds	r3, r3, r4
 80010a6:	0c15      	lsrs	r5, r2, #16
 80010a8:	18eb      	adds	r3, r5, r3
 80010aa:	429c      	cmp	r4, r3
 80010ac:	d903      	bls.n	80010b6 <__aeabi_ddiv+0x356>
 80010ae:	2480      	movs	r4, #128	; 0x80
 80010b0:	0264      	lsls	r4, r4, #9
 80010b2:	46a4      	mov	ip, r4
 80010b4:	4460      	add	r0, ip
 80010b6:	0c1c      	lsrs	r4, r3, #16
 80010b8:	0415      	lsls	r5, r2, #16
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	0c2d      	lsrs	r5, r5, #16
 80010be:	1820      	adds	r0, r4, r0
 80010c0:	195d      	adds	r5, r3, r5
 80010c2:	4281      	cmp	r1, r0
 80010c4:	d377      	bcc.n	80011b6 <__aeabi_ddiv+0x456>
 80010c6:	d073      	beq.n	80011b0 <__aeabi_ddiv+0x450>
 80010c8:	1a0c      	subs	r4, r1, r0
 80010ca:	4aa2      	ldr	r2, [pc, #648]	; (8001354 <__aeabi_ddiv+0x5f4>)
 80010cc:	1b7d      	subs	r5, r7, r5
 80010ce:	42af      	cmp	r7, r5
 80010d0:	41bf      	sbcs	r7, r7
 80010d2:	4694      	mov	ip, r2
 80010d4:	9b00      	ldr	r3, [sp, #0]
 80010d6:	427f      	negs	r7, r7
 80010d8:	4463      	add	r3, ip
 80010da:	1be0      	subs	r0, r4, r7
 80010dc:	001c      	movs	r4, r3
 80010de:	4286      	cmp	r6, r0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_ddiv+0x384>
 80010e2:	e0db      	b.n	800129c <__aeabi_ddiv+0x53c>
 80010e4:	9901      	ldr	r1, [sp, #4]
 80010e6:	f7ff f8a7 	bl	8000238 <__aeabi_uidivmod>
 80010ea:	464a      	mov	r2, r9
 80010ec:	4342      	muls	r2, r0
 80010ee:	040b      	lsls	r3, r1, #16
 80010f0:	0c29      	lsrs	r1, r5, #16
 80010f2:	0007      	movs	r7, r0
 80010f4:	4319      	orrs	r1, r3
 80010f6:	428a      	cmp	r2, r1
 80010f8:	d907      	bls.n	800110a <__aeabi_ddiv+0x3aa>
 80010fa:	1989      	adds	r1, r1, r6
 80010fc:	3f01      	subs	r7, #1
 80010fe:	428e      	cmp	r6, r1
 8001100:	d803      	bhi.n	800110a <__aeabi_ddiv+0x3aa>
 8001102:	428a      	cmp	r2, r1
 8001104:	d901      	bls.n	800110a <__aeabi_ddiv+0x3aa>
 8001106:	1e87      	subs	r7, r0, #2
 8001108:	1989      	adds	r1, r1, r6
 800110a:	1a88      	subs	r0, r1, r2
 800110c:	9901      	ldr	r1, [sp, #4]
 800110e:	f7ff f893 	bl	8000238 <__aeabi_uidivmod>
 8001112:	0409      	lsls	r1, r1, #16
 8001114:	464a      	mov	r2, r9
 8001116:	4689      	mov	r9, r1
 8001118:	0429      	lsls	r1, r5, #16
 800111a:	464d      	mov	r5, r9
 800111c:	4342      	muls	r2, r0
 800111e:	0c09      	lsrs	r1, r1, #16
 8001120:	0003      	movs	r3, r0
 8001122:	4329      	orrs	r1, r5
 8001124:	428a      	cmp	r2, r1
 8001126:	d907      	bls.n	8001138 <__aeabi_ddiv+0x3d8>
 8001128:	1989      	adds	r1, r1, r6
 800112a:	3b01      	subs	r3, #1
 800112c:	428e      	cmp	r6, r1
 800112e:	d803      	bhi.n	8001138 <__aeabi_ddiv+0x3d8>
 8001130:	428a      	cmp	r2, r1
 8001132:	d901      	bls.n	8001138 <__aeabi_ddiv+0x3d8>
 8001134:	1e83      	subs	r3, r0, #2
 8001136:	1989      	adds	r1, r1, r6
 8001138:	043f      	lsls	r7, r7, #16
 800113a:	1a89      	subs	r1, r1, r2
 800113c:	003a      	movs	r2, r7
 800113e:	9f03      	ldr	r7, [sp, #12]
 8001140:	431a      	orrs	r2, r3
 8001142:	0038      	movs	r0, r7
 8001144:	0413      	lsls	r3, r2, #16
 8001146:	0c1b      	lsrs	r3, r3, #16
 8001148:	4358      	muls	r0, r3
 800114a:	4681      	mov	r9, r0
 800114c:	9802      	ldr	r0, [sp, #8]
 800114e:	0c15      	lsrs	r5, r2, #16
 8001150:	436f      	muls	r7, r5
 8001152:	4343      	muls	r3, r0
 8001154:	4345      	muls	r5, r0
 8001156:	4648      	mov	r0, r9
 8001158:	0c00      	lsrs	r0, r0, #16
 800115a:	4684      	mov	ip, r0
 800115c:	19db      	adds	r3, r3, r7
 800115e:	4463      	add	r3, ip
 8001160:	429f      	cmp	r7, r3
 8001162:	d903      	bls.n	800116c <__aeabi_ddiv+0x40c>
 8001164:	2080      	movs	r0, #128	; 0x80
 8001166:	0240      	lsls	r0, r0, #9
 8001168:	4684      	mov	ip, r0
 800116a:	4465      	add	r5, ip
 800116c:	4648      	mov	r0, r9
 800116e:	0c1f      	lsrs	r7, r3, #16
 8001170:	0400      	lsls	r0, r0, #16
 8001172:	041b      	lsls	r3, r3, #16
 8001174:	0c00      	lsrs	r0, r0, #16
 8001176:	197d      	adds	r5, r7, r5
 8001178:	1818      	adds	r0, r3, r0
 800117a:	42a9      	cmp	r1, r5
 800117c:	d200      	bcs.n	8001180 <__aeabi_ddiv+0x420>
 800117e:	e084      	b.n	800128a <__aeabi_ddiv+0x52a>
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x424>
 8001182:	e07f      	b.n	8001284 <__aeabi_ddiv+0x524>
 8001184:	2301      	movs	r3, #1
 8001186:	431a      	orrs	r2, r3
 8001188:	e657      	b.n	8000e3a <__aeabi_ddiv+0xda>
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	464a      	mov	r2, r9
 800118e:	031b      	lsls	r3, r3, #12
 8001190:	4313      	orrs	r3, r2
 8001192:	031b      	lsls	r3, r3, #12
 8001194:	0b1b      	lsrs	r3, r3, #12
 8001196:	46aa      	mov	sl, r5
 8001198:	4a6f      	ldr	r2, [pc, #444]	; (8001358 <__aeabi_ddiv+0x5f8>)
 800119a:	e66f      	b.n	8000e7c <__aeabi_ddiv+0x11c>
 800119c:	42ba      	cmp	r2, r7
 800119e:	d900      	bls.n	80011a2 <__aeabi_ddiv+0x442>
 80011a0:	e735      	b.n	800100e <__aeabi_ddiv+0x2ae>
 80011a2:	464b      	mov	r3, r9
 80011a4:	07dc      	lsls	r4, r3, #31
 80011a6:	0858      	lsrs	r0, r3, #1
 80011a8:	087b      	lsrs	r3, r7, #1
 80011aa:	431c      	orrs	r4, r3
 80011ac:	07ff      	lsls	r7, r7, #31
 80011ae:	e734      	b.n	800101a <__aeabi_ddiv+0x2ba>
 80011b0:	2400      	movs	r4, #0
 80011b2:	42af      	cmp	r7, r5
 80011b4:	d289      	bcs.n	80010ca <__aeabi_ddiv+0x36a>
 80011b6:	4447      	add	r7, r8
 80011b8:	4547      	cmp	r7, r8
 80011ba:	41a4      	sbcs	r4, r4
 80011bc:	465b      	mov	r3, fp
 80011be:	4264      	negs	r4, r4
 80011c0:	19a4      	adds	r4, r4, r6
 80011c2:	1864      	adds	r4, r4, r1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	42a6      	cmp	r6, r4
 80011c8:	d21e      	bcs.n	8001208 <__aeabi_ddiv+0x4a8>
 80011ca:	42a0      	cmp	r0, r4
 80011cc:	d86d      	bhi.n	80012aa <__aeabi_ddiv+0x54a>
 80011ce:	d100      	bne.n	80011d2 <__aeabi_ddiv+0x472>
 80011d0:	e0b6      	b.n	8001340 <__aeabi_ddiv+0x5e0>
 80011d2:	1a24      	subs	r4, r4, r0
 80011d4:	469b      	mov	fp, r3
 80011d6:	e778      	b.n	80010ca <__aeabi_ddiv+0x36a>
 80011d8:	0003      	movs	r3, r0
 80011da:	465a      	mov	r2, fp
 80011dc:	3b28      	subs	r3, #40	; 0x28
 80011de:	409a      	lsls	r2, r3
 80011e0:	2700      	movs	r7, #0
 80011e2:	4691      	mov	r9, r2
 80011e4:	e688      	b.n	8000ef8 <__aeabi_ddiv+0x198>
 80011e6:	4658      	mov	r0, fp
 80011e8:	f001 f8c0 	bl	800236c <__clzsi2>
 80011ec:	3020      	adds	r0, #32
 80011ee:	e672      	b.n	8000ed6 <__aeabi_ddiv+0x176>
 80011f0:	0003      	movs	r3, r0
 80011f2:	4652      	mov	r2, sl
 80011f4:	3b28      	subs	r3, #40	; 0x28
 80011f6:	409a      	lsls	r2, r3
 80011f8:	4693      	mov	fp, r2
 80011fa:	2200      	movs	r2, #0
 80011fc:	e6b4      	b.n	8000f68 <__aeabi_ddiv+0x208>
 80011fe:	4650      	mov	r0, sl
 8001200:	f001 f8b4 	bl	800236c <__clzsi2>
 8001204:	3020      	adds	r0, #32
 8001206:	e69a      	b.n	8000f3e <__aeabi_ddiv+0x1de>
 8001208:	42a6      	cmp	r6, r4
 800120a:	d1e2      	bne.n	80011d2 <__aeabi_ddiv+0x472>
 800120c:	45b8      	cmp	r8, r7
 800120e:	d9dc      	bls.n	80011ca <__aeabi_ddiv+0x46a>
 8001210:	1a34      	subs	r4, r6, r0
 8001212:	469b      	mov	fp, r3
 8001214:	e759      	b.n	80010ca <__aeabi_ddiv+0x36a>
 8001216:	2b1f      	cmp	r3, #31
 8001218:	dc65      	bgt.n	80012e6 <__aeabi_ddiv+0x586>
 800121a:	4c50      	ldr	r4, [pc, #320]	; (800135c <__aeabi_ddiv+0x5fc>)
 800121c:	9900      	ldr	r1, [sp, #0]
 800121e:	46a4      	mov	ip, r4
 8001220:	465c      	mov	r4, fp
 8001222:	4461      	add	r1, ip
 8001224:	0008      	movs	r0, r1
 8001226:	408c      	lsls	r4, r1
 8001228:	0011      	movs	r1, r2
 800122a:	4082      	lsls	r2, r0
 800122c:	40d9      	lsrs	r1, r3
 800122e:	1e50      	subs	r0, r2, #1
 8001230:	4182      	sbcs	r2, r0
 8001232:	430c      	orrs	r4, r1
 8001234:	4314      	orrs	r4, r2
 8001236:	465a      	mov	r2, fp
 8001238:	40da      	lsrs	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	0762      	lsls	r2, r4, #29
 800123e:	d009      	beq.n	8001254 <__aeabi_ddiv+0x4f4>
 8001240:	220f      	movs	r2, #15
 8001242:	4022      	ands	r2, r4
 8001244:	2a04      	cmp	r2, #4
 8001246:	d005      	beq.n	8001254 <__aeabi_ddiv+0x4f4>
 8001248:	0022      	movs	r2, r4
 800124a:	1d14      	adds	r4, r2, #4
 800124c:	4294      	cmp	r4, r2
 800124e:	4189      	sbcs	r1, r1
 8001250:	4249      	negs	r1, r1
 8001252:	185b      	adds	r3, r3, r1
 8001254:	021a      	lsls	r2, r3, #8
 8001256:	d562      	bpl.n	800131e <__aeabi_ddiv+0x5be>
 8001258:	2201      	movs	r2, #1
 800125a:	2300      	movs	r3, #0
 800125c:	2700      	movs	r7, #0
 800125e:	e60d      	b.n	8000e7c <__aeabi_ddiv+0x11c>
 8001260:	428a      	cmp	r2, r1
 8001262:	d800      	bhi.n	8001266 <__aeabi_ddiv+0x506>
 8001264:	e70a      	b.n	800107c <__aeabi_ddiv+0x31c>
 8001266:	1e83      	subs	r3, r0, #2
 8001268:	1989      	adds	r1, r1, r6
 800126a:	e707      	b.n	800107c <__aeabi_ddiv+0x31c>
 800126c:	230f      	movs	r3, #15
 800126e:	4013      	ands	r3, r2
 8001270:	2b04      	cmp	r3, #4
 8001272:	d100      	bne.n	8001276 <__aeabi_ddiv+0x516>
 8001274:	e5e6      	b.n	8000e44 <__aeabi_ddiv+0xe4>
 8001276:	1d17      	adds	r7, r2, #4
 8001278:	4297      	cmp	r7, r2
 800127a:	4192      	sbcs	r2, r2
 800127c:	4253      	negs	r3, r2
 800127e:	449b      	add	fp, r3
 8001280:	08fa      	lsrs	r2, r7, #3
 8001282:	e5e0      	b.n	8000e46 <__aeabi_ddiv+0xe6>
 8001284:	2800      	cmp	r0, #0
 8001286:	d100      	bne.n	800128a <__aeabi_ddiv+0x52a>
 8001288:	e5d7      	b.n	8000e3a <__aeabi_ddiv+0xda>
 800128a:	1871      	adds	r1, r6, r1
 800128c:	1e53      	subs	r3, r2, #1
 800128e:	42b1      	cmp	r1, r6
 8001290:	d327      	bcc.n	80012e2 <__aeabi_ddiv+0x582>
 8001292:	42a9      	cmp	r1, r5
 8001294:	d315      	bcc.n	80012c2 <__aeabi_ddiv+0x562>
 8001296:	d058      	beq.n	800134a <__aeabi_ddiv+0x5ea>
 8001298:	001a      	movs	r2, r3
 800129a:	e773      	b.n	8001184 <__aeabi_ddiv+0x424>
 800129c:	2b00      	cmp	r3, #0
 800129e:	dc00      	bgt.n	80012a2 <__aeabi_ddiv+0x542>
 80012a0:	e604      	b.n	8000eac <__aeabi_ddiv+0x14c>
 80012a2:	2301      	movs	r3, #1
 80012a4:	2200      	movs	r2, #0
 80012a6:	449b      	add	fp, r3
 80012a8:	e5cd      	b.n	8000e46 <__aeabi_ddiv+0xe6>
 80012aa:	2302      	movs	r3, #2
 80012ac:	4447      	add	r7, r8
 80012ae:	4547      	cmp	r7, r8
 80012b0:	4189      	sbcs	r1, r1
 80012b2:	425b      	negs	r3, r3
 80012b4:	469c      	mov	ip, r3
 80012b6:	4249      	negs	r1, r1
 80012b8:	1989      	adds	r1, r1, r6
 80012ba:	190c      	adds	r4, r1, r4
 80012bc:	44e3      	add	fp, ip
 80012be:	1a24      	subs	r4, r4, r0
 80012c0:	e703      	b.n	80010ca <__aeabi_ddiv+0x36a>
 80012c2:	4643      	mov	r3, r8
 80012c4:	005f      	lsls	r7, r3, #1
 80012c6:	4547      	cmp	r7, r8
 80012c8:	419b      	sbcs	r3, r3
 80012ca:	46b8      	mov	r8, r7
 80012cc:	425b      	negs	r3, r3
 80012ce:	199e      	adds	r6, r3, r6
 80012d0:	3a02      	subs	r2, #2
 80012d2:	1989      	adds	r1, r1, r6
 80012d4:	42a9      	cmp	r1, r5
 80012d6:	d000      	beq.n	80012da <__aeabi_ddiv+0x57a>
 80012d8:	e754      	b.n	8001184 <__aeabi_ddiv+0x424>
 80012da:	4540      	cmp	r0, r8
 80012dc:	d000      	beq.n	80012e0 <__aeabi_ddiv+0x580>
 80012de:	e751      	b.n	8001184 <__aeabi_ddiv+0x424>
 80012e0:	e5ab      	b.n	8000e3a <__aeabi_ddiv+0xda>
 80012e2:	001a      	movs	r2, r3
 80012e4:	e7f6      	b.n	80012d4 <__aeabi_ddiv+0x574>
 80012e6:	211f      	movs	r1, #31
 80012e8:	465f      	mov	r7, fp
 80012ea:	4249      	negs	r1, r1
 80012ec:	1b0c      	subs	r4, r1, r4
 80012ee:	40e7      	lsrs	r7, r4
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	d007      	beq.n	8001304 <__aeabi_ddiv+0x5a4>
 80012f4:	491a      	ldr	r1, [pc, #104]	; (8001360 <__aeabi_ddiv+0x600>)
 80012f6:	9b00      	ldr	r3, [sp, #0]
 80012f8:	468c      	mov	ip, r1
 80012fa:	4463      	add	r3, ip
 80012fc:	0018      	movs	r0, r3
 80012fe:	465b      	mov	r3, fp
 8001300:	4083      	lsls	r3, r0
 8001302:	431a      	orrs	r2, r3
 8001304:	1e50      	subs	r0, r2, #1
 8001306:	4182      	sbcs	r2, r0
 8001308:	433a      	orrs	r2, r7
 800130a:	2707      	movs	r7, #7
 800130c:	2300      	movs	r3, #0
 800130e:	4017      	ands	r7, r2
 8001310:	d009      	beq.n	8001326 <__aeabi_ddiv+0x5c6>
 8001312:	210f      	movs	r1, #15
 8001314:	2300      	movs	r3, #0
 8001316:	4011      	ands	r1, r2
 8001318:	0014      	movs	r4, r2
 800131a:	2904      	cmp	r1, #4
 800131c:	d195      	bne.n	800124a <__aeabi_ddiv+0x4ea>
 800131e:	0022      	movs	r2, r4
 8001320:	075f      	lsls	r7, r3, #29
 8001322:	025b      	lsls	r3, r3, #9
 8001324:	0b1b      	lsrs	r3, r3, #12
 8001326:	08d2      	lsrs	r2, r2, #3
 8001328:	4317      	orrs	r7, r2
 800132a:	2200      	movs	r2, #0
 800132c:	e5a6      	b.n	8000e7c <__aeabi_ddiv+0x11c>
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	4659      	mov	r1, fp
 8001332:	031b      	lsls	r3, r3, #12
 8001334:	430b      	orrs	r3, r1
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	0017      	movs	r7, r2
 800133a:	0b1b      	lsrs	r3, r3, #12
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <__aeabi_ddiv+0x5f8>)
 800133e:	e59d      	b.n	8000e7c <__aeabi_ddiv+0x11c>
 8001340:	42bd      	cmp	r5, r7
 8001342:	d8b2      	bhi.n	80012aa <__aeabi_ddiv+0x54a>
 8001344:	469b      	mov	fp, r3
 8001346:	2400      	movs	r4, #0
 8001348:	e6bf      	b.n	80010ca <__aeabi_ddiv+0x36a>
 800134a:	4580      	cmp	r8, r0
 800134c:	d3b9      	bcc.n	80012c2 <__aeabi_ddiv+0x562>
 800134e:	001a      	movs	r2, r3
 8001350:	e7c3      	b.n	80012da <__aeabi_ddiv+0x57a>
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	000003ff 	.word	0x000003ff
 8001358:	000007ff 	.word	0x000007ff
 800135c:	0000041e 	.word	0x0000041e
 8001360:	0000043e 	.word	0x0000043e

08001364 <__eqdf2>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	464f      	mov	r7, r9
 8001368:	4646      	mov	r6, r8
 800136a:	46d6      	mov	lr, sl
 800136c:	4684      	mov	ip, r0
 800136e:	b5c0      	push	{r6, r7, lr}
 8001370:	4680      	mov	r8, r0
 8001372:	4e19      	ldr	r6, [pc, #100]	; (80013d8 <__eqdf2+0x74>)
 8001374:	0318      	lsls	r0, r3, #12
 8001376:	030f      	lsls	r7, r1, #12
 8001378:	004d      	lsls	r5, r1, #1
 800137a:	0b00      	lsrs	r0, r0, #12
 800137c:	005c      	lsls	r4, r3, #1
 800137e:	4682      	mov	sl, r0
 8001380:	0b3f      	lsrs	r7, r7, #12
 8001382:	0d6d      	lsrs	r5, r5, #21
 8001384:	0fc9      	lsrs	r1, r1, #31
 8001386:	4691      	mov	r9, r2
 8001388:	0d64      	lsrs	r4, r4, #21
 800138a:	0fdb      	lsrs	r3, r3, #31
 800138c:	2001      	movs	r0, #1
 800138e:	42b5      	cmp	r5, r6
 8001390:	d00a      	beq.n	80013a8 <__eqdf2+0x44>
 8001392:	42b4      	cmp	r4, r6
 8001394:	d003      	beq.n	800139e <__eqdf2+0x3a>
 8001396:	42a5      	cmp	r5, r4
 8001398:	d101      	bne.n	800139e <__eqdf2+0x3a>
 800139a:	4557      	cmp	r7, sl
 800139c:	d00c      	beq.n	80013b8 <__eqdf2+0x54>
 800139e:	bc1c      	pop	{r2, r3, r4}
 80013a0:	4690      	mov	r8, r2
 80013a2:	4699      	mov	r9, r3
 80013a4:	46a2      	mov	sl, r4
 80013a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a8:	4666      	mov	r6, ip
 80013aa:	433e      	orrs	r6, r7
 80013ac:	d1f7      	bne.n	800139e <__eqdf2+0x3a>
 80013ae:	42ac      	cmp	r4, r5
 80013b0:	d1f5      	bne.n	800139e <__eqdf2+0x3a>
 80013b2:	4654      	mov	r4, sl
 80013b4:	4314      	orrs	r4, r2
 80013b6:	d1f2      	bne.n	800139e <__eqdf2+0x3a>
 80013b8:	2001      	movs	r0, #1
 80013ba:	45c8      	cmp	r8, r9
 80013bc:	d1ef      	bne.n	800139e <__eqdf2+0x3a>
 80013be:	4299      	cmp	r1, r3
 80013c0:	d007      	beq.n	80013d2 <__eqdf2+0x6e>
 80013c2:	2d00      	cmp	r5, #0
 80013c4:	d1eb      	bne.n	800139e <__eqdf2+0x3a>
 80013c6:	4663      	mov	r3, ip
 80013c8:	431f      	orrs	r7, r3
 80013ca:	0038      	movs	r0, r7
 80013cc:	1e47      	subs	r7, r0, #1
 80013ce:	41b8      	sbcs	r0, r7
 80013d0:	e7e5      	b.n	800139e <__eqdf2+0x3a>
 80013d2:	2000      	movs	r0, #0
 80013d4:	e7e3      	b.n	800139e <__eqdf2+0x3a>
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	000007ff 	.word	0x000007ff

080013dc <__gedf2>:
 80013dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013de:	464f      	mov	r7, r9
 80013e0:	4646      	mov	r6, r8
 80013e2:	46d6      	mov	lr, sl
 80013e4:	004d      	lsls	r5, r1, #1
 80013e6:	b5c0      	push	{r6, r7, lr}
 80013e8:	030e      	lsls	r6, r1, #12
 80013ea:	0fc9      	lsrs	r1, r1, #31
 80013ec:	468a      	mov	sl, r1
 80013ee:	492c      	ldr	r1, [pc, #176]	; (80014a0 <__gedf2+0xc4>)
 80013f0:	031f      	lsls	r7, r3, #12
 80013f2:	005c      	lsls	r4, r3, #1
 80013f4:	4680      	mov	r8, r0
 80013f6:	0b36      	lsrs	r6, r6, #12
 80013f8:	0d6d      	lsrs	r5, r5, #21
 80013fa:	4691      	mov	r9, r2
 80013fc:	0b3f      	lsrs	r7, r7, #12
 80013fe:	0d64      	lsrs	r4, r4, #21
 8001400:	0fdb      	lsrs	r3, r3, #31
 8001402:	428d      	cmp	r5, r1
 8001404:	d01e      	beq.n	8001444 <__gedf2+0x68>
 8001406:	428c      	cmp	r4, r1
 8001408:	d016      	beq.n	8001438 <__gedf2+0x5c>
 800140a:	2d00      	cmp	r5, #0
 800140c:	d11e      	bne.n	800144c <__gedf2+0x70>
 800140e:	4330      	orrs	r0, r6
 8001410:	4684      	mov	ip, r0
 8001412:	2c00      	cmp	r4, #0
 8001414:	d101      	bne.n	800141a <__gedf2+0x3e>
 8001416:	433a      	orrs	r2, r7
 8001418:	d023      	beq.n	8001462 <__gedf2+0x86>
 800141a:	4662      	mov	r2, ip
 800141c:	2a00      	cmp	r2, #0
 800141e:	d01a      	beq.n	8001456 <__gedf2+0x7a>
 8001420:	459a      	cmp	sl, r3
 8001422:	d029      	beq.n	8001478 <__gedf2+0x9c>
 8001424:	4651      	mov	r1, sl
 8001426:	2002      	movs	r0, #2
 8001428:	3901      	subs	r1, #1
 800142a:	4008      	ands	r0, r1
 800142c:	3801      	subs	r0, #1
 800142e:	bc1c      	pop	{r2, r3, r4}
 8001430:	4690      	mov	r8, r2
 8001432:	4699      	mov	r9, r3
 8001434:	46a2      	mov	sl, r4
 8001436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001438:	0039      	movs	r1, r7
 800143a:	4311      	orrs	r1, r2
 800143c:	d0e5      	beq.n	800140a <__gedf2+0x2e>
 800143e:	2002      	movs	r0, #2
 8001440:	4240      	negs	r0, r0
 8001442:	e7f4      	b.n	800142e <__gedf2+0x52>
 8001444:	4330      	orrs	r0, r6
 8001446:	d1fa      	bne.n	800143e <__gedf2+0x62>
 8001448:	42ac      	cmp	r4, r5
 800144a:	d00f      	beq.n	800146c <__gedf2+0x90>
 800144c:	2c00      	cmp	r4, #0
 800144e:	d10f      	bne.n	8001470 <__gedf2+0x94>
 8001450:	433a      	orrs	r2, r7
 8001452:	d0e7      	beq.n	8001424 <__gedf2+0x48>
 8001454:	e00c      	b.n	8001470 <__gedf2+0x94>
 8001456:	2201      	movs	r2, #1
 8001458:	3b01      	subs	r3, #1
 800145a:	4393      	bics	r3, r2
 800145c:	0018      	movs	r0, r3
 800145e:	3001      	adds	r0, #1
 8001460:	e7e5      	b.n	800142e <__gedf2+0x52>
 8001462:	4663      	mov	r3, ip
 8001464:	2000      	movs	r0, #0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0e1      	beq.n	800142e <__gedf2+0x52>
 800146a:	e7db      	b.n	8001424 <__gedf2+0x48>
 800146c:	433a      	orrs	r2, r7
 800146e:	d1e6      	bne.n	800143e <__gedf2+0x62>
 8001470:	459a      	cmp	sl, r3
 8001472:	d1d7      	bne.n	8001424 <__gedf2+0x48>
 8001474:	42a5      	cmp	r5, r4
 8001476:	dcd5      	bgt.n	8001424 <__gedf2+0x48>
 8001478:	42a5      	cmp	r5, r4
 800147a:	db05      	blt.n	8001488 <__gedf2+0xac>
 800147c:	42be      	cmp	r6, r7
 800147e:	d8d1      	bhi.n	8001424 <__gedf2+0x48>
 8001480:	d008      	beq.n	8001494 <__gedf2+0xb8>
 8001482:	2000      	movs	r0, #0
 8001484:	42be      	cmp	r6, r7
 8001486:	d2d2      	bcs.n	800142e <__gedf2+0x52>
 8001488:	4650      	mov	r0, sl
 800148a:	2301      	movs	r3, #1
 800148c:	3801      	subs	r0, #1
 800148e:	4398      	bics	r0, r3
 8001490:	3001      	adds	r0, #1
 8001492:	e7cc      	b.n	800142e <__gedf2+0x52>
 8001494:	45c8      	cmp	r8, r9
 8001496:	d8c5      	bhi.n	8001424 <__gedf2+0x48>
 8001498:	2000      	movs	r0, #0
 800149a:	45c8      	cmp	r8, r9
 800149c:	d3f4      	bcc.n	8001488 <__gedf2+0xac>
 800149e:	e7c6      	b.n	800142e <__gedf2+0x52>
 80014a0:	000007ff 	.word	0x000007ff

080014a4 <__ledf2>:
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	464f      	mov	r7, r9
 80014a8:	4646      	mov	r6, r8
 80014aa:	46d6      	mov	lr, sl
 80014ac:	004d      	lsls	r5, r1, #1
 80014ae:	b5c0      	push	{r6, r7, lr}
 80014b0:	030e      	lsls	r6, r1, #12
 80014b2:	0fc9      	lsrs	r1, r1, #31
 80014b4:	468a      	mov	sl, r1
 80014b6:	492e      	ldr	r1, [pc, #184]	; (8001570 <__ledf2+0xcc>)
 80014b8:	031f      	lsls	r7, r3, #12
 80014ba:	005c      	lsls	r4, r3, #1
 80014bc:	4680      	mov	r8, r0
 80014be:	0b36      	lsrs	r6, r6, #12
 80014c0:	0d6d      	lsrs	r5, r5, #21
 80014c2:	4691      	mov	r9, r2
 80014c4:	0b3f      	lsrs	r7, r7, #12
 80014c6:	0d64      	lsrs	r4, r4, #21
 80014c8:	0fdb      	lsrs	r3, r3, #31
 80014ca:	428d      	cmp	r5, r1
 80014cc:	d018      	beq.n	8001500 <__ledf2+0x5c>
 80014ce:	428c      	cmp	r4, r1
 80014d0:	d011      	beq.n	80014f6 <__ledf2+0x52>
 80014d2:	2d00      	cmp	r5, #0
 80014d4:	d118      	bne.n	8001508 <__ledf2+0x64>
 80014d6:	4330      	orrs	r0, r6
 80014d8:	4684      	mov	ip, r0
 80014da:	2c00      	cmp	r4, #0
 80014dc:	d11e      	bne.n	800151c <__ledf2+0x78>
 80014de:	433a      	orrs	r2, r7
 80014e0:	d11c      	bne.n	800151c <__ledf2+0x78>
 80014e2:	4663      	mov	r3, ip
 80014e4:	2000      	movs	r0, #0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d030      	beq.n	800154c <__ledf2+0xa8>
 80014ea:	4651      	mov	r1, sl
 80014ec:	2002      	movs	r0, #2
 80014ee:	3901      	subs	r1, #1
 80014f0:	4008      	ands	r0, r1
 80014f2:	3801      	subs	r0, #1
 80014f4:	e02a      	b.n	800154c <__ledf2+0xa8>
 80014f6:	0039      	movs	r1, r7
 80014f8:	4311      	orrs	r1, r2
 80014fa:	d0ea      	beq.n	80014d2 <__ledf2+0x2e>
 80014fc:	2002      	movs	r0, #2
 80014fe:	e025      	b.n	800154c <__ledf2+0xa8>
 8001500:	4330      	orrs	r0, r6
 8001502:	d1fb      	bne.n	80014fc <__ledf2+0x58>
 8001504:	42ac      	cmp	r4, r5
 8001506:	d026      	beq.n	8001556 <__ledf2+0xb2>
 8001508:	2c00      	cmp	r4, #0
 800150a:	d126      	bne.n	800155a <__ledf2+0xb6>
 800150c:	433a      	orrs	r2, r7
 800150e:	d124      	bne.n	800155a <__ledf2+0xb6>
 8001510:	4651      	mov	r1, sl
 8001512:	2002      	movs	r0, #2
 8001514:	3901      	subs	r1, #1
 8001516:	4008      	ands	r0, r1
 8001518:	3801      	subs	r0, #1
 800151a:	e017      	b.n	800154c <__ledf2+0xa8>
 800151c:	4662      	mov	r2, ip
 800151e:	2a00      	cmp	r2, #0
 8001520:	d00f      	beq.n	8001542 <__ledf2+0x9e>
 8001522:	459a      	cmp	sl, r3
 8001524:	d1e1      	bne.n	80014ea <__ledf2+0x46>
 8001526:	42a5      	cmp	r5, r4
 8001528:	db05      	blt.n	8001536 <__ledf2+0x92>
 800152a:	42be      	cmp	r6, r7
 800152c:	d8dd      	bhi.n	80014ea <__ledf2+0x46>
 800152e:	d019      	beq.n	8001564 <__ledf2+0xc0>
 8001530:	2000      	movs	r0, #0
 8001532:	42be      	cmp	r6, r7
 8001534:	d20a      	bcs.n	800154c <__ledf2+0xa8>
 8001536:	4650      	mov	r0, sl
 8001538:	2301      	movs	r3, #1
 800153a:	3801      	subs	r0, #1
 800153c:	4398      	bics	r0, r3
 800153e:	3001      	adds	r0, #1
 8001540:	e004      	b.n	800154c <__ledf2+0xa8>
 8001542:	2201      	movs	r2, #1
 8001544:	3b01      	subs	r3, #1
 8001546:	4393      	bics	r3, r2
 8001548:	0018      	movs	r0, r3
 800154a:	3001      	adds	r0, #1
 800154c:	bc1c      	pop	{r2, r3, r4}
 800154e:	4690      	mov	r8, r2
 8001550:	4699      	mov	r9, r3
 8001552:	46a2      	mov	sl, r4
 8001554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001556:	433a      	orrs	r2, r7
 8001558:	d1d0      	bne.n	80014fc <__ledf2+0x58>
 800155a:	459a      	cmp	sl, r3
 800155c:	d1c5      	bne.n	80014ea <__ledf2+0x46>
 800155e:	42a5      	cmp	r5, r4
 8001560:	dcc3      	bgt.n	80014ea <__ledf2+0x46>
 8001562:	e7e0      	b.n	8001526 <__ledf2+0x82>
 8001564:	45c8      	cmp	r8, r9
 8001566:	d8c0      	bhi.n	80014ea <__ledf2+0x46>
 8001568:	2000      	movs	r0, #0
 800156a:	45c8      	cmp	r8, r9
 800156c:	d3e3      	bcc.n	8001536 <__ledf2+0x92>
 800156e:	e7ed      	b.n	800154c <__ledf2+0xa8>
 8001570:	000007ff 	.word	0x000007ff

08001574 <__aeabi_dmul>:
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001576:	4657      	mov	r7, sl
 8001578:	46de      	mov	lr, fp
 800157a:	464e      	mov	r6, r9
 800157c:	4645      	mov	r5, r8
 800157e:	b5e0      	push	{r5, r6, r7, lr}
 8001580:	4683      	mov	fp, r0
 8001582:	0006      	movs	r6, r0
 8001584:	030f      	lsls	r7, r1, #12
 8001586:	0048      	lsls	r0, r1, #1
 8001588:	b087      	sub	sp, #28
 800158a:	4692      	mov	sl, r2
 800158c:	001d      	movs	r5, r3
 800158e:	0b3f      	lsrs	r7, r7, #12
 8001590:	0d40      	lsrs	r0, r0, #21
 8001592:	0fcc      	lsrs	r4, r1, #31
 8001594:	2800      	cmp	r0, #0
 8001596:	d100      	bne.n	800159a <__aeabi_dmul+0x26>
 8001598:	e06f      	b.n	800167a <__aeabi_dmul+0x106>
 800159a:	4bde      	ldr	r3, [pc, #888]	; (8001914 <__aeabi_dmul+0x3a0>)
 800159c:	4298      	cmp	r0, r3
 800159e:	d038      	beq.n	8001612 <__aeabi_dmul+0x9e>
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	00ff      	lsls	r7, r7, #3
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	431f      	orrs	r7, r3
 80015a8:	0f73      	lsrs	r3, r6, #29
 80015aa:	433b      	orrs	r3, r7
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	4bda      	ldr	r3, [pc, #872]	; (8001918 <__aeabi_dmul+0x3a4>)
 80015b0:	2700      	movs	r7, #0
 80015b2:	4699      	mov	r9, r3
 80015b4:	2300      	movs	r3, #0
 80015b6:	469b      	mov	fp, r3
 80015b8:	00f6      	lsls	r6, r6, #3
 80015ba:	4481      	add	r9, r0
 80015bc:	032b      	lsls	r3, r5, #12
 80015be:	0069      	lsls	r1, r5, #1
 80015c0:	0b1b      	lsrs	r3, r3, #12
 80015c2:	4652      	mov	r2, sl
 80015c4:	4698      	mov	r8, r3
 80015c6:	0d49      	lsrs	r1, r1, #21
 80015c8:	0fed      	lsrs	r5, r5, #31
 80015ca:	2900      	cmp	r1, #0
 80015cc:	d100      	bne.n	80015d0 <__aeabi_dmul+0x5c>
 80015ce:	e085      	b.n	80016dc <__aeabi_dmul+0x168>
 80015d0:	4bd0      	ldr	r3, [pc, #832]	; (8001914 <__aeabi_dmul+0x3a0>)
 80015d2:	4299      	cmp	r1, r3
 80015d4:	d100      	bne.n	80015d8 <__aeabi_dmul+0x64>
 80015d6:	e073      	b.n	80016c0 <__aeabi_dmul+0x14c>
 80015d8:	4643      	mov	r3, r8
 80015da:	00da      	lsls	r2, r3, #3
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	4313      	orrs	r3, r2
 80015e2:	4652      	mov	r2, sl
 80015e4:	48cc      	ldr	r0, [pc, #816]	; (8001918 <__aeabi_dmul+0x3a4>)
 80015e6:	0f52      	lsrs	r2, r2, #29
 80015e8:	4684      	mov	ip, r0
 80015ea:	4313      	orrs	r3, r2
 80015ec:	4652      	mov	r2, sl
 80015ee:	2000      	movs	r0, #0
 80015f0:	4461      	add	r1, ip
 80015f2:	00d2      	lsls	r2, r2, #3
 80015f4:	4489      	add	r9, r1
 80015f6:	0021      	movs	r1, r4
 80015f8:	4069      	eors	r1, r5
 80015fa:	9100      	str	r1, [sp, #0]
 80015fc:	468c      	mov	ip, r1
 80015fe:	2101      	movs	r1, #1
 8001600:	4449      	add	r1, r9
 8001602:	468a      	mov	sl, r1
 8001604:	2f0f      	cmp	r7, #15
 8001606:	d900      	bls.n	800160a <__aeabi_dmul+0x96>
 8001608:	e090      	b.n	800172c <__aeabi_dmul+0x1b8>
 800160a:	49c4      	ldr	r1, [pc, #784]	; (800191c <__aeabi_dmul+0x3a8>)
 800160c:	00bf      	lsls	r7, r7, #2
 800160e:	59cf      	ldr	r7, [r1, r7]
 8001610:	46bf      	mov	pc, r7
 8001612:	465b      	mov	r3, fp
 8001614:	433b      	orrs	r3, r7
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	d000      	beq.n	800161c <__aeabi_dmul+0xa8>
 800161a:	e16a      	b.n	80018f2 <__aeabi_dmul+0x37e>
 800161c:	2302      	movs	r3, #2
 800161e:	2708      	movs	r7, #8
 8001620:	2600      	movs	r6, #0
 8001622:	4681      	mov	r9, r0
 8001624:	469b      	mov	fp, r3
 8001626:	e7c9      	b.n	80015bc <__aeabi_dmul+0x48>
 8001628:	0032      	movs	r2, r6
 800162a:	4658      	mov	r0, fp
 800162c:	9b01      	ldr	r3, [sp, #4]
 800162e:	4661      	mov	r1, ip
 8001630:	9100      	str	r1, [sp, #0]
 8001632:	2802      	cmp	r0, #2
 8001634:	d100      	bne.n	8001638 <__aeabi_dmul+0xc4>
 8001636:	e075      	b.n	8001724 <__aeabi_dmul+0x1b0>
 8001638:	2803      	cmp	r0, #3
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0xca>
 800163c:	e1fe      	b.n	8001a3c <__aeabi_dmul+0x4c8>
 800163e:	2801      	cmp	r0, #1
 8001640:	d000      	beq.n	8001644 <__aeabi_dmul+0xd0>
 8001642:	e12c      	b.n	800189e <__aeabi_dmul+0x32a>
 8001644:	2300      	movs	r3, #0
 8001646:	2700      	movs	r7, #0
 8001648:	2600      	movs	r6, #0
 800164a:	2500      	movs	r5, #0
 800164c:	033f      	lsls	r7, r7, #12
 800164e:	0d2a      	lsrs	r2, r5, #20
 8001650:	0b3f      	lsrs	r7, r7, #12
 8001652:	48b3      	ldr	r0, [pc, #716]	; (8001920 <__aeabi_dmul+0x3ac>)
 8001654:	0512      	lsls	r2, r2, #20
 8001656:	433a      	orrs	r2, r7
 8001658:	4002      	ands	r2, r0
 800165a:	051b      	lsls	r3, r3, #20
 800165c:	4313      	orrs	r3, r2
 800165e:	9a00      	ldr	r2, [sp, #0]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	07d1      	lsls	r1, r2, #31
 8001664:	085b      	lsrs	r3, r3, #1
 8001666:	430b      	orrs	r3, r1
 8001668:	0030      	movs	r0, r6
 800166a:	0019      	movs	r1, r3
 800166c:	b007      	add	sp, #28
 800166e:	bc3c      	pop	{r2, r3, r4, r5}
 8001670:	4690      	mov	r8, r2
 8001672:	4699      	mov	r9, r3
 8001674:	46a2      	mov	sl, r4
 8001676:	46ab      	mov	fp, r5
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800167a:	465b      	mov	r3, fp
 800167c:	433b      	orrs	r3, r7
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	d100      	bne.n	8001684 <__aeabi_dmul+0x110>
 8001682:	e12f      	b.n	80018e4 <__aeabi_dmul+0x370>
 8001684:	2f00      	cmp	r7, #0
 8001686:	d100      	bne.n	800168a <__aeabi_dmul+0x116>
 8001688:	e1a5      	b.n	80019d6 <__aeabi_dmul+0x462>
 800168a:	0038      	movs	r0, r7
 800168c:	f000 fe6e 	bl	800236c <__clzsi2>
 8001690:	0003      	movs	r3, r0
 8001692:	3b0b      	subs	r3, #11
 8001694:	2b1c      	cmp	r3, #28
 8001696:	dd00      	ble.n	800169a <__aeabi_dmul+0x126>
 8001698:	e196      	b.n	80019c8 <__aeabi_dmul+0x454>
 800169a:	221d      	movs	r2, #29
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	465a      	mov	r2, fp
 80016a0:	0001      	movs	r1, r0
 80016a2:	40da      	lsrs	r2, r3
 80016a4:	465e      	mov	r6, fp
 80016a6:	3908      	subs	r1, #8
 80016a8:	408f      	lsls	r7, r1
 80016aa:	0013      	movs	r3, r2
 80016ac:	408e      	lsls	r6, r1
 80016ae:	433b      	orrs	r3, r7
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	4b9c      	ldr	r3, [pc, #624]	; (8001924 <__aeabi_dmul+0x3b0>)
 80016b4:	2700      	movs	r7, #0
 80016b6:	1a1b      	subs	r3, r3, r0
 80016b8:	4699      	mov	r9, r3
 80016ba:	2300      	movs	r3, #0
 80016bc:	469b      	mov	fp, r3
 80016be:	e77d      	b.n	80015bc <__aeabi_dmul+0x48>
 80016c0:	4641      	mov	r1, r8
 80016c2:	4653      	mov	r3, sl
 80016c4:	430b      	orrs	r3, r1
 80016c6:	4993      	ldr	r1, [pc, #588]	; (8001914 <__aeabi_dmul+0x3a0>)
 80016c8:	468c      	mov	ip, r1
 80016ca:	44e1      	add	r9, ip
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d000      	beq.n	80016d2 <__aeabi_dmul+0x15e>
 80016d0:	e11a      	b.n	8001908 <__aeabi_dmul+0x394>
 80016d2:	2202      	movs	r2, #2
 80016d4:	2002      	movs	r0, #2
 80016d6:	4317      	orrs	r7, r2
 80016d8:	2200      	movs	r2, #0
 80016da:	e78c      	b.n	80015f6 <__aeabi_dmul+0x82>
 80016dc:	4313      	orrs	r3, r2
 80016de:	d100      	bne.n	80016e2 <__aeabi_dmul+0x16e>
 80016e0:	e10d      	b.n	80018fe <__aeabi_dmul+0x38a>
 80016e2:	4643      	mov	r3, r8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0x176>
 80016e8:	e181      	b.n	80019ee <__aeabi_dmul+0x47a>
 80016ea:	4640      	mov	r0, r8
 80016ec:	f000 fe3e 	bl	800236c <__clzsi2>
 80016f0:	0002      	movs	r2, r0
 80016f2:	3a0b      	subs	r2, #11
 80016f4:	2a1c      	cmp	r2, #28
 80016f6:	dd00      	ble.n	80016fa <__aeabi_dmul+0x186>
 80016f8:	e172      	b.n	80019e0 <__aeabi_dmul+0x46c>
 80016fa:	0001      	movs	r1, r0
 80016fc:	4643      	mov	r3, r8
 80016fe:	3908      	subs	r1, #8
 8001700:	408b      	lsls	r3, r1
 8001702:	4698      	mov	r8, r3
 8001704:	231d      	movs	r3, #29
 8001706:	1a9a      	subs	r2, r3, r2
 8001708:	4653      	mov	r3, sl
 800170a:	40d3      	lsrs	r3, r2
 800170c:	001a      	movs	r2, r3
 800170e:	4643      	mov	r3, r8
 8001710:	4313      	orrs	r3, r2
 8001712:	4652      	mov	r2, sl
 8001714:	408a      	lsls	r2, r1
 8001716:	4649      	mov	r1, r9
 8001718:	1a08      	subs	r0, r1, r0
 800171a:	4982      	ldr	r1, [pc, #520]	; (8001924 <__aeabi_dmul+0x3b0>)
 800171c:	4689      	mov	r9, r1
 800171e:	4481      	add	r9, r0
 8001720:	2000      	movs	r0, #0
 8001722:	e768      	b.n	80015f6 <__aeabi_dmul+0x82>
 8001724:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <__aeabi_dmul+0x3a0>)
 8001726:	2700      	movs	r7, #0
 8001728:	2600      	movs	r6, #0
 800172a:	e78e      	b.n	800164a <__aeabi_dmul+0xd6>
 800172c:	0c14      	lsrs	r4, r2, #16
 800172e:	0412      	lsls	r2, r2, #16
 8001730:	0c12      	lsrs	r2, r2, #16
 8001732:	0011      	movs	r1, r2
 8001734:	0c37      	lsrs	r7, r6, #16
 8001736:	0436      	lsls	r6, r6, #16
 8001738:	0c35      	lsrs	r5, r6, #16
 800173a:	4379      	muls	r1, r7
 800173c:	0028      	movs	r0, r5
 800173e:	468c      	mov	ip, r1
 8001740:	002e      	movs	r6, r5
 8001742:	4360      	muls	r0, r4
 8001744:	4460      	add	r0, ip
 8001746:	4683      	mov	fp, r0
 8001748:	4356      	muls	r6, r2
 800174a:	0021      	movs	r1, r4
 800174c:	0c30      	lsrs	r0, r6, #16
 800174e:	4680      	mov	r8, r0
 8001750:	4658      	mov	r0, fp
 8001752:	4379      	muls	r1, r7
 8001754:	4440      	add	r0, r8
 8001756:	9102      	str	r1, [sp, #8]
 8001758:	4584      	cmp	ip, r0
 800175a:	d906      	bls.n	800176a <__aeabi_dmul+0x1f6>
 800175c:	4688      	mov	r8, r1
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	0249      	lsls	r1, r1, #9
 8001762:	468c      	mov	ip, r1
 8001764:	44e0      	add	r8, ip
 8001766:	4641      	mov	r1, r8
 8001768:	9102      	str	r1, [sp, #8]
 800176a:	0436      	lsls	r6, r6, #16
 800176c:	0c01      	lsrs	r1, r0, #16
 800176e:	0c36      	lsrs	r6, r6, #16
 8001770:	0400      	lsls	r0, r0, #16
 8001772:	468b      	mov	fp, r1
 8001774:	1981      	adds	r1, r0, r6
 8001776:	0c1e      	lsrs	r6, r3, #16
 8001778:	041b      	lsls	r3, r3, #16
 800177a:	0c1b      	lsrs	r3, r3, #16
 800177c:	9103      	str	r1, [sp, #12]
 800177e:	0019      	movs	r1, r3
 8001780:	4379      	muls	r1, r7
 8001782:	468c      	mov	ip, r1
 8001784:	0028      	movs	r0, r5
 8001786:	4375      	muls	r5, r6
 8001788:	4465      	add	r5, ip
 800178a:	46a8      	mov	r8, r5
 800178c:	4358      	muls	r0, r3
 800178e:	0c05      	lsrs	r5, r0, #16
 8001790:	4445      	add	r5, r8
 8001792:	4377      	muls	r7, r6
 8001794:	42a9      	cmp	r1, r5
 8001796:	d903      	bls.n	80017a0 <__aeabi_dmul+0x22c>
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0249      	lsls	r1, r1, #9
 800179c:	468c      	mov	ip, r1
 800179e:	4467      	add	r7, ip
 80017a0:	0c29      	lsrs	r1, r5, #16
 80017a2:	468c      	mov	ip, r1
 80017a4:	0039      	movs	r1, r7
 80017a6:	0400      	lsls	r0, r0, #16
 80017a8:	0c00      	lsrs	r0, r0, #16
 80017aa:	042d      	lsls	r5, r5, #16
 80017ac:	182d      	adds	r5, r5, r0
 80017ae:	4461      	add	r1, ip
 80017b0:	44ab      	add	fp, r5
 80017b2:	9105      	str	r1, [sp, #20]
 80017b4:	4659      	mov	r1, fp
 80017b6:	9104      	str	r1, [sp, #16]
 80017b8:	9901      	ldr	r1, [sp, #4]
 80017ba:	040f      	lsls	r7, r1, #16
 80017bc:	0c3f      	lsrs	r7, r7, #16
 80017be:	0c08      	lsrs	r0, r1, #16
 80017c0:	0039      	movs	r1, r7
 80017c2:	4351      	muls	r1, r2
 80017c4:	4342      	muls	r2, r0
 80017c6:	4690      	mov	r8, r2
 80017c8:	0002      	movs	r2, r0
 80017ca:	468c      	mov	ip, r1
 80017cc:	0c09      	lsrs	r1, r1, #16
 80017ce:	468b      	mov	fp, r1
 80017d0:	4362      	muls	r2, r4
 80017d2:	437c      	muls	r4, r7
 80017d4:	4444      	add	r4, r8
 80017d6:	445c      	add	r4, fp
 80017d8:	45a0      	cmp	r8, r4
 80017da:	d903      	bls.n	80017e4 <__aeabi_dmul+0x270>
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	0249      	lsls	r1, r1, #9
 80017e0:	4688      	mov	r8, r1
 80017e2:	4442      	add	r2, r8
 80017e4:	0c21      	lsrs	r1, r4, #16
 80017e6:	4688      	mov	r8, r1
 80017e8:	4661      	mov	r1, ip
 80017ea:	0409      	lsls	r1, r1, #16
 80017ec:	0c09      	lsrs	r1, r1, #16
 80017ee:	468c      	mov	ip, r1
 80017f0:	0039      	movs	r1, r7
 80017f2:	4359      	muls	r1, r3
 80017f4:	4343      	muls	r3, r0
 80017f6:	4370      	muls	r0, r6
 80017f8:	437e      	muls	r6, r7
 80017fa:	0c0f      	lsrs	r7, r1, #16
 80017fc:	18f6      	adds	r6, r6, r3
 80017fe:	0424      	lsls	r4, r4, #16
 8001800:	19be      	adds	r6, r7, r6
 8001802:	4464      	add	r4, ip
 8001804:	4442      	add	r2, r8
 8001806:	468c      	mov	ip, r1
 8001808:	42b3      	cmp	r3, r6
 800180a:	d903      	bls.n	8001814 <__aeabi_dmul+0x2a0>
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	025b      	lsls	r3, r3, #9
 8001810:	4698      	mov	r8, r3
 8001812:	4440      	add	r0, r8
 8001814:	9b02      	ldr	r3, [sp, #8]
 8001816:	4661      	mov	r1, ip
 8001818:	4698      	mov	r8, r3
 800181a:	9b04      	ldr	r3, [sp, #16]
 800181c:	0437      	lsls	r7, r6, #16
 800181e:	4443      	add	r3, r8
 8001820:	469b      	mov	fp, r3
 8001822:	45ab      	cmp	fp, r5
 8001824:	41ad      	sbcs	r5, r5
 8001826:	426b      	negs	r3, r5
 8001828:	040d      	lsls	r5, r1, #16
 800182a:	9905      	ldr	r1, [sp, #20]
 800182c:	0c2d      	lsrs	r5, r5, #16
 800182e:	468c      	mov	ip, r1
 8001830:	197f      	adds	r7, r7, r5
 8001832:	4467      	add	r7, ip
 8001834:	18fd      	adds	r5, r7, r3
 8001836:	46a8      	mov	r8, r5
 8001838:	465d      	mov	r5, fp
 800183a:	192d      	adds	r5, r5, r4
 800183c:	42a5      	cmp	r5, r4
 800183e:	41a4      	sbcs	r4, r4
 8001840:	4693      	mov	fp, r2
 8001842:	4264      	negs	r4, r4
 8001844:	46a4      	mov	ip, r4
 8001846:	44c3      	add	fp, r8
 8001848:	44dc      	add	ip, fp
 800184a:	428f      	cmp	r7, r1
 800184c:	41bf      	sbcs	r7, r7
 800184e:	4598      	cmp	r8, r3
 8001850:	419b      	sbcs	r3, r3
 8001852:	4593      	cmp	fp, r2
 8001854:	4192      	sbcs	r2, r2
 8001856:	45a4      	cmp	ip, r4
 8001858:	41a4      	sbcs	r4, r4
 800185a:	425b      	negs	r3, r3
 800185c:	427f      	negs	r7, r7
 800185e:	431f      	orrs	r7, r3
 8001860:	0c36      	lsrs	r6, r6, #16
 8001862:	4252      	negs	r2, r2
 8001864:	4264      	negs	r4, r4
 8001866:	19bf      	adds	r7, r7, r6
 8001868:	4322      	orrs	r2, r4
 800186a:	18bf      	adds	r7, r7, r2
 800186c:	4662      	mov	r2, ip
 800186e:	1838      	adds	r0, r7, r0
 8001870:	0243      	lsls	r3, r0, #9
 8001872:	0dd2      	lsrs	r2, r2, #23
 8001874:	9903      	ldr	r1, [sp, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	026a      	lsls	r2, r5, #9
 800187a:	430a      	orrs	r2, r1
 800187c:	1e50      	subs	r0, r2, #1
 800187e:	4182      	sbcs	r2, r0
 8001880:	4661      	mov	r1, ip
 8001882:	0ded      	lsrs	r5, r5, #23
 8001884:	432a      	orrs	r2, r5
 8001886:	024e      	lsls	r6, r1, #9
 8001888:	4332      	orrs	r2, r6
 800188a:	01d9      	lsls	r1, r3, #7
 800188c:	d400      	bmi.n	8001890 <__aeabi_dmul+0x31c>
 800188e:	e0b3      	b.n	80019f8 <__aeabi_dmul+0x484>
 8001890:	2601      	movs	r6, #1
 8001892:	0850      	lsrs	r0, r2, #1
 8001894:	4032      	ands	r2, r6
 8001896:	4302      	orrs	r2, r0
 8001898:	07de      	lsls	r6, r3, #31
 800189a:	4332      	orrs	r2, r6
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	4c22      	ldr	r4, [pc, #136]	; (8001928 <__aeabi_dmul+0x3b4>)
 80018a0:	4454      	add	r4, sl
 80018a2:	2c00      	cmp	r4, #0
 80018a4:	dd62      	ble.n	800196c <__aeabi_dmul+0x3f8>
 80018a6:	0751      	lsls	r1, r2, #29
 80018a8:	d009      	beq.n	80018be <__aeabi_dmul+0x34a>
 80018aa:	200f      	movs	r0, #15
 80018ac:	4010      	ands	r0, r2
 80018ae:	2804      	cmp	r0, #4
 80018b0:	d005      	beq.n	80018be <__aeabi_dmul+0x34a>
 80018b2:	1d10      	adds	r0, r2, #4
 80018b4:	4290      	cmp	r0, r2
 80018b6:	4192      	sbcs	r2, r2
 80018b8:	4252      	negs	r2, r2
 80018ba:	189b      	adds	r3, r3, r2
 80018bc:	0002      	movs	r2, r0
 80018be:	01d9      	lsls	r1, r3, #7
 80018c0:	d504      	bpl.n	80018cc <__aeabi_dmul+0x358>
 80018c2:	2480      	movs	r4, #128	; 0x80
 80018c4:	4819      	ldr	r0, [pc, #100]	; (800192c <__aeabi_dmul+0x3b8>)
 80018c6:	00e4      	lsls	r4, r4, #3
 80018c8:	4003      	ands	r3, r0
 80018ca:	4454      	add	r4, sl
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <__aeabi_dmul+0x3bc>)
 80018ce:	4284      	cmp	r4, r0
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dmul+0x360>
 80018d2:	e727      	b.n	8001724 <__aeabi_dmul+0x1b0>
 80018d4:	075e      	lsls	r6, r3, #29
 80018d6:	025b      	lsls	r3, r3, #9
 80018d8:	08d2      	lsrs	r2, r2, #3
 80018da:	0b1f      	lsrs	r7, r3, #12
 80018dc:	0563      	lsls	r3, r4, #21
 80018de:	4316      	orrs	r6, r2
 80018e0:	0d5b      	lsrs	r3, r3, #21
 80018e2:	e6b2      	b.n	800164a <__aeabi_dmul+0xd6>
 80018e4:	2300      	movs	r3, #0
 80018e6:	4699      	mov	r9, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	2704      	movs	r7, #4
 80018ec:	2600      	movs	r6, #0
 80018ee:	469b      	mov	fp, r3
 80018f0:	e664      	b.n	80015bc <__aeabi_dmul+0x48>
 80018f2:	2303      	movs	r3, #3
 80018f4:	9701      	str	r7, [sp, #4]
 80018f6:	4681      	mov	r9, r0
 80018f8:	270c      	movs	r7, #12
 80018fa:	469b      	mov	fp, r3
 80018fc:	e65e      	b.n	80015bc <__aeabi_dmul+0x48>
 80018fe:	2201      	movs	r2, #1
 8001900:	2001      	movs	r0, #1
 8001902:	4317      	orrs	r7, r2
 8001904:	2200      	movs	r2, #0
 8001906:	e676      	b.n	80015f6 <__aeabi_dmul+0x82>
 8001908:	2303      	movs	r3, #3
 800190a:	2003      	movs	r0, #3
 800190c:	431f      	orrs	r7, r3
 800190e:	4643      	mov	r3, r8
 8001910:	e671      	b.n	80015f6 <__aeabi_dmul+0x82>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	000007ff 	.word	0x000007ff
 8001918:	fffffc01 	.word	0xfffffc01
 800191c:	0800ea4c 	.word	0x0800ea4c
 8001920:	800fffff 	.word	0x800fffff
 8001924:	fffffc0d 	.word	0xfffffc0d
 8001928:	000003ff 	.word	0x000003ff
 800192c:	feffffff 	.word	0xfeffffff
 8001930:	000007fe 	.word	0x000007fe
 8001934:	2300      	movs	r3, #0
 8001936:	2780      	movs	r7, #128	; 0x80
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	033f      	lsls	r7, r7, #12
 800193c:	2600      	movs	r6, #0
 800193e:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <__aeabi_dmul+0x4d8>)
 8001940:	e683      	b.n	800164a <__aeabi_dmul+0xd6>
 8001942:	9b01      	ldr	r3, [sp, #4]
 8001944:	0032      	movs	r2, r6
 8001946:	46a4      	mov	ip, r4
 8001948:	4658      	mov	r0, fp
 800194a:	e670      	b.n	800162e <__aeabi_dmul+0xba>
 800194c:	46ac      	mov	ip, r5
 800194e:	e66e      	b.n	800162e <__aeabi_dmul+0xba>
 8001950:	2780      	movs	r7, #128	; 0x80
 8001952:	9901      	ldr	r1, [sp, #4]
 8001954:	033f      	lsls	r7, r7, #12
 8001956:	4239      	tst	r1, r7
 8001958:	d02d      	beq.n	80019b6 <__aeabi_dmul+0x442>
 800195a:	423b      	tst	r3, r7
 800195c:	d12b      	bne.n	80019b6 <__aeabi_dmul+0x442>
 800195e:	431f      	orrs	r7, r3
 8001960:	033f      	lsls	r7, r7, #12
 8001962:	0b3f      	lsrs	r7, r7, #12
 8001964:	9500      	str	r5, [sp, #0]
 8001966:	0016      	movs	r6, r2
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <__aeabi_dmul+0x4d8>)
 800196a:	e66e      	b.n	800164a <__aeabi_dmul+0xd6>
 800196c:	2501      	movs	r5, #1
 800196e:	1b2d      	subs	r5, r5, r4
 8001970:	2d38      	cmp	r5, #56	; 0x38
 8001972:	dd00      	ble.n	8001976 <__aeabi_dmul+0x402>
 8001974:	e666      	b.n	8001644 <__aeabi_dmul+0xd0>
 8001976:	2d1f      	cmp	r5, #31
 8001978:	dc40      	bgt.n	80019fc <__aeabi_dmul+0x488>
 800197a:	4835      	ldr	r0, [pc, #212]	; (8001a50 <__aeabi_dmul+0x4dc>)
 800197c:	001c      	movs	r4, r3
 800197e:	4450      	add	r0, sl
 8001980:	0016      	movs	r6, r2
 8001982:	4082      	lsls	r2, r0
 8001984:	4084      	lsls	r4, r0
 8001986:	40ee      	lsrs	r6, r5
 8001988:	1e50      	subs	r0, r2, #1
 800198a:	4182      	sbcs	r2, r0
 800198c:	4334      	orrs	r4, r6
 800198e:	4314      	orrs	r4, r2
 8001990:	40eb      	lsrs	r3, r5
 8001992:	0762      	lsls	r2, r4, #29
 8001994:	d009      	beq.n	80019aa <__aeabi_dmul+0x436>
 8001996:	220f      	movs	r2, #15
 8001998:	4022      	ands	r2, r4
 800199a:	2a04      	cmp	r2, #4
 800199c:	d005      	beq.n	80019aa <__aeabi_dmul+0x436>
 800199e:	0022      	movs	r2, r4
 80019a0:	1d14      	adds	r4, r2, #4
 80019a2:	4294      	cmp	r4, r2
 80019a4:	4180      	sbcs	r0, r0
 80019a6:	4240      	negs	r0, r0
 80019a8:	181b      	adds	r3, r3, r0
 80019aa:	021a      	lsls	r2, r3, #8
 80019ac:	d53e      	bpl.n	8001a2c <__aeabi_dmul+0x4b8>
 80019ae:	2301      	movs	r3, #1
 80019b0:	2700      	movs	r7, #0
 80019b2:	2600      	movs	r6, #0
 80019b4:	e649      	b.n	800164a <__aeabi_dmul+0xd6>
 80019b6:	2780      	movs	r7, #128	; 0x80
 80019b8:	9b01      	ldr	r3, [sp, #4]
 80019ba:	033f      	lsls	r7, r7, #12
 80019bc:	431f      	orrs	r7, r3
 80019be:	033f      	lsls	r7, r7, #12
 80019c0:	0b3f      	lsrs	r7, r7, #12
 80019c2:	9400      	str	r4, [sp, #0]
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <__aeabi_dmul+0x4d8>)
 80019c6:	e640      	b.n	800164a <__aeabi_dmul+0xd6>
 80019c8:	0003      	movs	r3, r0
 80019ca:	465a      	mov	r2, fp
 80019cc:	3b28      	subs	r3, #40	; 0x28
 80019ce:	409a      	lsls	r2, r3
 80019d0:	2600      	movs	r6, #0
 80019d2:	9201      	str	r2, [sp, #4]
 80019d4:	e66d      	b.n	80016b2 <__aeabi_dmul+0x13e>
 80019d6:	4658      	mov	r0, fp
 80019d8:	f000 fcc8 	bl	800236c <__clzsi2>
 80019dc:	3020      	adds	r0, #32
 80019de:	e657      	b.n	8001690 <__aeabi_dmul+0x11c>
 80019e0:	0003      	movs	r3, r0
 80019e2:	4652      	mov	r2, sl
 80019e4:	3b28      	subs	r3, #40	; 0x28
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	2200      	movs	r2, #0
 80019ec:	e693      	b.n	8001716 <__aeabi_dmul+0x1a2>
 80019ee:	4650      	mov	r0, sl
 80019f0:	f000 fcbc 	bl	800236c <__clzsi2>
 80019f4:	3020      	adds	r0, #32
 80019f6:	e67b      	b.n	80016f0 <__aeabi_dmul+0x17c>
 80019f8:	46ca      	mov	sl, r9
 80019fa:	e750      	b.n	800189e <__aeabi_dmul+0x32a>
 80019fc:	201f      	movs	r0, #31
 80019fe:	001e      	movs	r6, r3
 8001a00:	4240      	negs	r0, r0
 8001a02:	1b04      	subs	r4, r0, r4
 8001a04:	40e6      	lsrs	r6, r4
 8001a06:	2d20      	cmp	r5, #32
 8001a08:	d003      	beq.n	8001a12 <__aeabi_dmul+0x49e>
 8001a0a:	4c12      	ldr	r4, [pc, #72]	; (8001a54 <__aeabi_dmul+0x4e0>)
 8001a0c:	4454      	add	r4, sl
 8001a0e:	40a3      	lsls	r3, r4
 8001a10:	431a      	orrs	r2, r3
 8001a12:	1e50      	subs	r0, r2, #1
 8001a14:	4182      	sbcs	r2, r0
 8001a16:	4332      	orrs	r2, r6
 8001a18:	2607      	movs	r6, #7
 8001a1a:	2700      	movs	r7, #0
 8001a1c:	4016      	ands	r6, r2
 8001a1e:	d009      	beq.n	8001a34 <__aeabi_dmul+0x4c0>
 8001a20:	200f      	movs	r0, #15
 8001a22:	2300      	movs	r3, #0
 8001a24:	4010      	ands	r0, r2
 8001a26:	0014      	movs	r4, r2
 8001a28:	2804      	cmp	r0, #4
 8001a2a:	d1b9      	bne.n	80019a0 <__aeabi_dmul+0x42c>
 8001a2c:	0022      	movs	r2, r4
 8001a2e:	075e      	lsls	r6, r3, #29
 8001a30:	025b      	lsls	r3, r3, #9
 8001a32:	0b1f      	lsrs	r7, r3, #12
 8001a34:	08d2      	lsrs	r2, r2, #3
 8001a36:	4316      	orrs	r6, r2
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e606      	b.n	800164a <__aeabi_dmul+0xd6>
 8001a3c:	2780      	movs	r7, #128	; 0x80
 8001a3e:	033f      	lsls	r7, r7, #12
 8001a40:	431f      	orrs	r7, r3
 8001a42:	033f      	lsls	r7, r7, #12
 8001a44:	0b3f      	lsrs	r7, r7, #12
 8001a46:	0016      	movs	r6, r2
 8001a48:	4b00      	ldr	r3, [pc, #0]	; (8001a4c <__aeabi_dmul+0x4d8>)
 8001a4a:	e5fe      	b.n	800164a <__aeabi_dmul+0xd6>
 8001a4c:	000007ff 	.word	0x000007ff
 8001a50:	0000041e 	.word	0x0000041e
 8001a54:	0000043e 	.word	0x0000043e

08001a58 <__aeabi_dsub>:
 8001a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5a:	4657      	mov	r7, sl
 8001a5c:	464e      	mov	r6, r9
 8001a5e:	4645      	mov	r5, r8
 8001a60:	46de      	mov	lr, fp
 8001a62:	000c      	movs	r4, r1
 8001a64:	0309      	lsls	r1, r1, #12
 8001a66:	b5e0      	push	{r5, r6, r7, lr}
 8001a68:	0a49      	lsrs	r1, r1, #9
 8001a6a:	0f46      	lsrs	r6, r0, #29
 8001a6c:	005f      	lsls	r7, r3, #1
 8001a6e:	4331      	orrs	r1, r6
 8001a70:	031e      	lsls	r6, r3, #12
 8001a72:	0fdb      	lsrs	r3, r3, #31
 8001a74:	0a76      	lsrs	r6, r6, #9
 8001a76:	469b      	mov	fp, r3
 8001a78:	0f53      	lsrs	r3, r2, #29
 8001a7a:	4333      	orrs	r3, r6
 8001a7c:	4ec8      	ldr	r6, [pc, #800]	; (8001da0 <__aeabi_dsub+0x348>)
 8001a7e:	0065      	lsls	r5, r4, #1
 8001a80:	00c0      	lsls	r0, r0, #3
 8001a82:	0fe4      	lsrs	r4, r4, #31
 8001a84:	00d2      	lsls	r2, r2, #3
 8001a86:	0d6d      	lsrs	r5, r5, #21
 8001a88:	46a2      	mov	sl, r4
 8001a8a:	4681      	mov	r9, r0
 8001a8c:	0d7f      	lsrs	r7, r7, #21
 8001a8e:	469c      	mov	ip, r3
 8001a90:	4690      	mov	r8, r2
 8001a92:	42b7      	cmp	r7, r6
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x40>
 8001a96:	e0b9      	b.n	8001c0c <__aeabi_dsub+0x1b4>
 8001a98:	465b      	mov	r3, fp
 8001a9a:	2601      	movs	r6, #1
 8001a9c:	4073      	eors	r3, r6
 8001a9e:	469b      	mov	fp, r3
 8001aa0:	1bee      	subs	r6, r5, r7
 8001aa2:	45a3      	cmp	fp, r4
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x50>
 8001aa6:	e083      	b.n	8001bb0 <__aeabi_dsub+0x158>
 8001aa8:	2e00      	cmp	r6, #0
 8001aaa:	dd63      	ble.n	8001b74 <__aeabi_dsub+0x11c>
 8001aac:	2f00      	cmp	r7, #0
 8001aae:	d000      	beq.n	8001ab2 <__aeabi_dsub+0x5a>
 8001ab0:	e0b1      	b.n	8001c16 <__aeabi_dsub+0x1be>
 8001ab2:	4663      	mov	r3, ip
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dsub+0x62>
 8001ab8:	e123      	b.n	8001d02 <__aeabi_dsub+0x2aa>
 8001aba:	1e73      	subs	r3, r6, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d000      	beq.n	8001ac2 <__aeabi_dsub+0x6a>
 8001ac0:	e1ba      	b.n	8001e38 <__aeabi_dsub+0x3e0>
 8001ac2:	1a86      	subs	r6, r0, r2
 8001ac4:	4663      	mov	r3, ip
 8001ac6:	42b0      	cmp	r0, r6
 8001ac8:	4180      	sbcs	r0, r0
 8001aca:	2501      	movs	r5, #1
 8001acc:	1ac9      	subs	r1, r1, r3
 8001ace:	4240      	negs	r0, r0
 8001ad0:	1a09      	subs	r1, r1, r0
 8001ad2:	020b      	lsls	r3, r1, #8
 8001ad4:	d400      	bmi.n	8001ad8 <__aeabi_dsub+0x80>
 8001ad6:	e147      	b.n	8001d68 <__aeabi_dsub+0x310>
 8001ad8:	0249      	lsls	r1, r1, #9
 8001ada:	0a4b      	lsrs	r3, r1, #9
 8001adc:	4698      	mov	r8, r3
 8001ade:	4643      	mov	r3, r8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x8e>
 8001ae4:	e189      	b.n	8001dfa <__aeabi_dsub+0x3a2>
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	f000 fc40 	bl	800236c <__clzsi2>
 8001aec:	0003      	movs	r3, r0
 8001aee:	3b08      	subs	r3, #8
 8001af0:	2b1f      	cmp	r3, #31
 8001af2:	dd00      	ble.n	8001af6 <__aeabi_dsub+0x9e>
 8001af4:	e17c      	b.n	8001df0 <__aeabi_dsub+0x398>
 8001af6:	2220      	movs	r2, #32
 8001af8:	0030      	movs	r0, r6
 8001afa:	1ad2      	subs	r2, r2, r3
 8001afc:	4641      	mov	r1, r8
 8001afe:	40d0      	lsrs	r0, r2
 8001b00:	4099      	lsls	r1, r3
 8001b02:	0002      	movs	r2, r0
 8001b04:	409e      	lsls	r6, r3
 8001b06:	430a      	orrs	r2, r1
 8001b08:	429d      	cmp	r5, r3
 8001b0a:	dd00      	ble.n	8001b0e <__aeabi_dsub+0xb6>
 8001b0c:	e16a      	b.n	8001de4 <__aeabi_dsub+0x38c>
 8001b0e:	1b5d      	subs	r5, r3, r5
 8001b10:	1c6b      	adds	r3, r5, #1
 8001b12:	2b1f      	cmp	r3, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0xc0>
 8001b16:	e194      	b.n	8001e42 <__aeabi_dsub+0x3ea>
 8001b18:	2120      	movs	r1, #32
 8001b1a:	0010      	movs	r0, r2
 8001b1c:	0035      	movs	r5, r6
 8001b1e:	1ac9      	subs	r1, r1, r3
 8001b20:	408e      	lsls	r6, r1
 8001b22:	40da      	lsrs	r2, r3
 8001b24:	4088      	lsls	r0, r1
 8001b26:	40dd      	lsrs	r5, r3
 8001b28:	1e71      	subs	r1, r6, #1
 8001b2a:	418e      	sbcs	r6, r1
 8001b2c:	0011      	movs	r1, r2
 8001b2e:	2207      	movs	r2, #7
 8001b30:	4328      	orrs	r0, r5
 8001b32:	2500      	movs	r5, #0
 8001b34:	4306      	orrs	r6, r0
 8001b36:	4032      	ands	r2, r6
 8001b38:	2a00      	cmp	r2, #0
 8001b3a:	d009      	beq.n	8001b50 <__aeabi_dsub+0xf8>
 8001b3c:	230f      	movs	r3, #15
 8001b3e:	4033      	ands	r3, r6
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d005      	beq.n	8001b50 <__aeabi_dsub+0xf8>
 8001b44:	1d33      	adds	r3, r6, #4
 8001b46:	42b3      	cmp	r3, r6
 8001b48:	41b6      	sbcs	r6, r6
 8001b4a:	4276      	negs	r6, r6
 8001b4c:	1989      	adds	r1, r1, r6
 8001b4e:	001e      	movs	r6, r3
 8001b50:	020b      	lsls	r3, r1, #8
 8001b52:	d400      	bmi.n	8001b56 <__aeabi_dsub+0xfe>
 8001b54:	e23d      	b.n	8001fd2 <__aeabi_dsub+0x57a>
 8001b56:	1c6a      	adds	r2, r5, #1
 8001b58:	4b91      	ldr	r3, [pc, #580]	; (8001da0 <__aeabi_dsub+0x348>)
 8001b5a:	0555      	lsls	r5, r2, #21
 8001b5c:	0d6d      	lsrs	r5, r5, #21
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x10c>
 8001b62:	e119      	b.n	8001d98 <__aeabi_dsub+0x340>
 8001b64:	4a8f      	ldr	r2, [pc, #572]	; (8001da4 <__aeabi_dsub+0x34c>)
 8001b66:	08f6      	lsrs	r6, r6, #3
 8001b68:	400a      	ands	r2, r1
 8001b6a:	0757      	lsls	r7, r2, #29
 8001b6c:	0252      	lsls	r2, r2, #9
 8001b6e:	4337      	orrs	r7, r6
 8001b70:	0b12      	lsrs	r2, r2, #12
 8001b72:	e09b      	b.n	8001cac <__aeabi_dsub+0x254>
 8001b74:	2e00      	cmp	r6, #0
 8001b76:	d000      	beq.n	8001b7a <__aeabi_dsub+0x122>
 8001b78:	e0c5      	b.n	8001d06 <__aeabi_dsub+0x2ae>
 8001b7a:	1c6e      	adds	r6, r5, #1
 8001b7c:	0576      	lsls	r6, r6, #21
 8001b7e:	0d76      	lsrs	r6, r6, #21
 8001b80:	2e01      	cmp	r6, #1
 8001b82:	dc00      	bgt.n	8001b86 <__aeabi_dsub+0x12e>
 8001b84:	e148      	b.n	8001e18 <__aeabi_dsub+0x3c0>
 8001b86:	4667      	mov	r7, ip
 8001b88:	1a86      	subs	r6, r0, r2
 8001b8a:	1bcb      	subs	r3, r1, r7
 8001b8c:	42b0      	cmp	r0, r6
 8001b8e:	41bf      	sbcs	r7, r7
 8001b90:	427f      	negs	r7, r7
 8001b92:	46b8      	mov	r8, r7
 8001b94:	001f      	movs	r7, r3
 8001b96:	4643      	mov	r3, r8
 8001b98:	1aff      	subs	r7, r7, r3
 8001b9a:	003b      	movs	r3, r7
 8001b9c:	46b8      	mov	r8, r7
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	d500      	bpl.n	8001ba4 <__aeabi_dsub+0x14c>
 8001ba2:	e15f      	b.n	8001e64 <__aeabi_dsub+0x40c>
 8001ba4:	4337      	orrs	r7, r6
 8001ba6:	d19a      	bne.n	8001ade <__aeabi_dsub+0x86>
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2400      	movs	r4, #0
 8001bac:	2500      	movs	r5, #0
 8001bae:	e079      	b.n	8001ca4 <__aeabi_dsub+0x24c>
 8001bb0:	2e00      	cmp	r6, #0
 8001bb2:	dc00      	bgt.n	8001bb6 <__aeabi_dsub+0x15e>
 8001bb4:	e0fa      	b.n	8001dac <__aeabi_dsub+0x354>
 8001bb6:	2f00      	cmp	r7, #0
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x164>
 8001bba:	e08d      	b.n	8001cd8 <__aeabi_dsub+0x280>
 8001bbc:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <__aeabi_dsub+0x348>)
 8001bbe:	429d      	cmp	r5, r3
 8001bc0:	d067      	beq.n	8001c92 <__aeabi_dsub+0x23a>
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	4667      	mov	r7, ip
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	431f      	orrs	r7, r3
 8001bca:	46bc      	mov	ip, r7
 8001bcc:	2e38      	cmp	r6, #56	; 0x38
 8001bce:	dc00      	bgt.n	8001bd2 <__aeabi_dsub+0x17a>
 8001bd0:	e152      	b.n	8001e78 <__aeabi_dsub+0x420>
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	1e5a      	subs	r2, r3, #1
 8001bd8:	4193      	sbcs	r3, r2
 8001bda:	181e      	adds	r6, r3, r0
 8001bdc:	4286      	cmp	r6, r0
 8001bde:	4180      	sbcs	r0, r0
 8001be0:	4240      	negs	r0, r0
 8001be2:	1809      	adds	r1, r1, r0
 8001be4:	020b      	lsls	r3, r1, #8
 8001be6:	d400      	bmi.n	8001bea <__aeabi_dsub+0x192>
 8001be8:	e0be      	b.n	8001d68 <__aeabi_dsub+0x310>
 8001bea:	4b6d      	ldr	r3, [pc, #436]	; (8001da0 <__aeabi_dsub+0x348>)
 8001bec:	3501      	adds	r5, #1
 8001bee:	429d      	cmp	r5, r3
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_dsub+0x19c>
 8001bf2:	e0d2      	b.n	8001d9a <__aeabi_dsub+0x342>
 8001bf4:	4a6b      	ldr	r2, [pc, #428]	; (8001da4 <__aeabi_dsub+0x34c>)
 8001bf6:	0873      	lsrs	r3, r6, #1
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	400e      	ands	r6, r1
 8001bfe:	431e      	orrs	r6, r3
 8001c00:	0851      	lsrs	r1, r2, #1
 8001c02:	07d3      	lsls	r3, r2, #31
 8001c04:	2207      	movs	r2, #7
 8001c06:	431e      	orrs	r6, r3
 8001c08:	4032      	ands	r2, r6
 8001c0a:	e795      	b.n	8001b38 <__aeabi_dsub+0xe0>
 8001c0c:	001e      	movs	r6, r3
 8001c0e:	4316      	orrs	r6, r2
 8001c10:	d000      	beq.n	8001c14 <__aeabi_dsub+0x1bc>
 8001c12:	e745      	b.n	8001aa0 <__aeabi_dsub+0x48>
 8001c14:	e740      	b.n	8001a98 <__aeabi_dsub+0x40>
 8001c16:	4b62      	ldr	r3, [pc, #392]	; (8001da0 <__aeabi_dsub+0x348>)
 8001c18:	429d      	cmp	r5, r3
 8001c1a:	d03a      	beq.n	8001c92 <__aeabi_dsub+0x23a>
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	4667      	mov	r7, ip
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	431f      	orrs	r7, r3
 8001c24:	46bc      	mov	ip, r7
 8001c26:	2e38      	cmp	r6, #56	; 0x38
 8001c28:	dd00      	ble.n	8001c2c <__aeabi_dsub+0x1d4>
 8001c2a:	e0eb      	b.n	8001e04 <__aeabi_dsub+0x3ac>
 8001c2c:	2e1f      	cmp	r6, #31
 8001c2e:	dc00      	bgt.n	8001c32 <__aeabi_dsub+0x1da>
 8001c30:	e13a      	b.n	8001ea8 <__aeabi_dsub+0x450>
 8001c32:	0033      	movs	r3, r6
 8001c34:	4667      	mov	r7, ip
 8001c36:	3b20      	subs	r3, #32
 8001c38:	40df      	lsrs	r7, r3
 8001c3a:	003b      	movs	r3, r7
 8001c3c:	2e20      	cmp	r6, #32
 8001c3e:	d005      	beq.n	8001c4c <__aeabi_dsub+0x1f4>
 8001c40:	2740      	movs	r7, #64	; 0x40
 8001c42:	1bbf      	subs	r7, r7, r6
 8001c44:	4666      	mov	r6, ip
 8001c46:	40be      	lsls	r6, r7
 8001c48:	4332      	orrs	r2, r6
 8001c4a:	4690      	mov	r8, r2
 8001c4c:	4646      	mov	r6, r8
 8001c4e:	1e72      	subs	r2, r6, #1
 8001c50:	4196      	sbcs	r6, r2
 8001c52:	4333      	orrs	r3, r6
 8001c54:	e0da      	b.n	8001e0c <__aeabi_dsub+0x3b4>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x204>
 8001c5a:	e214      	b.n	8002086 <__aeabi_dsub+0x62e>
 8001c5c:	4663      	mov	r3, ip
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x20c>
 8001c62:	e168      	b.n	8001f36 <__aeabi_dsub+0x4de>
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	074e      	lsls	r6, r1, #29
 8001c68:	08c0      	lsrs	r0, r0, #3
 8001c6a:	08c9      	lsrs	r1, r1, #3
 8001c6c:	031b      	lsls	r3, r3, #12
 8001c6e:	4306      	orrs	r6, r0
 8001c70:	4219      	tst	r1, r3
 8001c72:	d008      	beq.n	8001c86 <__aeabi_dsub+0x22e>
 8001c74:	4660      	mov	r0, ip
 8001c76:	08c0      	lsrs	r0, r0, #3
 8001c78:	4218      	tst	r0, r3
 8001c7a:	d104      	bne.n	8001c86 <__aeabi_dsub+0x22e>
 8001c7c:	4663      	mov	r3, ip
 8001c7e:	0001      	movs	r1, r0
 8001c80:	08d2      	lsrs	r2, r2, #3
 8001c82:	075e      	lsls	r6, r3, #29
 8001c84:	4316      	orrs	r6, r2
 8001c86:	00f3      	lsls	r3, r6, #3
 8001c88:	4699      	mov	r9, r3
 8001c8a:	00c9      	lsls	r1, r1, #3
 8001c8c:	0f72      	lsrs	r2, r6, #29
 8001c8e:	4d44      	ldr	r5, [pc, #272]	; (8001da0 <__aeabi_dsub+0x348>)
 8001c90:	4311      	orrs	r1, r2
 8001c92:	464b      	mov	r3, r9
 8001c94:	08de      	lsrs	r6, r3, #3
 8001c96:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <__aeabi_dsub+0x348>)
 8001c98:	074f      	lsls	r7, r1, #29
 8001c9a:	4337      	orrs	r7, r6
 8001c9c:	08ca      	lsrs	r2, r1, #3
 8001c9e:	429d      	cmp	r5, r3
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x24c>
 8001ca2:	e06e      	b.n	8001d82 <__aeabi_dsub+0x32a>
 8001ca4:	0312      	lsls	r2, r2, #12
 8001ca6:	056d      	lsls	r5, r5, #21
 8001ca8:	0b12      	lsrs	r2, r2, #12
 8001caa:	0d6d      	lsrs	r5, r5, #21
 8001cac:	2100      	movs	r1, #0
 8001cae:	0312      	lsls	r2, r2, #12
 8001cb0:	0b13      	lsrs	r3, r2, #12
 8001cb2:	0d0a      	lsrs	r2, r1, #20
 8001cb4:	0512      	lsls	r2, r2, #20
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <__aeabi_dsub+0x350>)
 8001cba:	052d      	lsls	r5, r5, #20
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	432b      	orrs	r3, r5
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	07e4      	lsls	r4, r4, #31
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	4323      	orrs	r3, r4
 8001cc8:	0038      	movs	r0, r7
 8001cca:	0019      	movs	r1, r3
 8001ccc:	bc3c      	pop	{r2, r3, r4, r5}
 8001cce:	4690      	mov	r8, r2
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	46a2      	mov	sl, r4
 8001cd4:	46ab      	mov	fp, r5
 8001cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cd8:	4663      	mov	r3, ip
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	d011      	beq.n	8001d02 <__aeabi_dsub+0x2aa>
 8001cde:	1e73      	subs	r3, r6, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d000      	beq.n	8001ce6 <__aeabi_dsub+0x28e>
 8001ce4:	e107      	b.n	8001ef6 <__aeabi_dsub+0x49e>
 8001ce6:	1886      	adds	r6, r0, r2
 8001ce8:	4286      	cmp	r6, r0
 8001cea:	4180      	sbcs	r0, r0
 8001cec:	4461      	add	r1, ip
 8001cee:	4240      	negs	r0, r0
 8001cf0:	1809      	adds	r1, r1, r0
 8001cf2:	2501      	movs	r5, #1
 8001cf4:	020b      	lsls	r3, r1, #8
 8001cf6:	d537      	bpl.n	8001d68 <__aeabi_dsub+0x310>
 8001cf8:	2502      	movs	r5, #2
 8001cfa:	e77b      	b.n	8001bf4 <__aeabi_dsub+0x19c>
 8001cfc:	003e      	movs	r6, r7
 8001cfe:	4661      	mov	r1, ip
 8001d00:	4691      	mov	r9, r2
 8001d02:	0035      	movs	r5, r6
 8001d04:	e7c5      	b.n	8001c92 <__aeabi_dsub+0x23a>
 8001d06:	465c      	mov	r4, fp
 8001d08:	2d00      	cmp	r5, #0
 8001d0a:	d000      	beq.n	8001d0e <__aeabi_dsub+0x2b6>
 8001d0c:	e0e1      	b.n	8001ed2 <__aeabi_dsub+0x47a>
 8001d0e:	000b      	movs	r3, r1
 8001d10:	4303      	orrs	r3, r0
 8001d12:	d0f3      	beq.n	8001cfc <__aeabi_dsub+0x2a4>
 8001d14:	1c73      	adds	r3, r6, #1
 8001d16:	d100      	bne.n	8001d1a <__aeabi_dsub+0x2c2>
 8001d18:	e1ac      	b.n	8002074 <__aeabi_dsub+0x61c>
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <__aeabi_dsub+0x348>)
 8001d1c:	429f      	cmp	r7, r3
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x2ca>
 8001d20:	e13a      	b.n	8001f98 <__aeabi_dsub+0x540>
 8001d22:	43f3      	mvns	r3, r6
 8001d24:	2b38      	cmp	r3, #56	; 0x38
 8001d26:	dd00      	ble.n	8001d2a <__aeabi_dsub+0x2d2>
 8001d28:	e16f      	b.n	800200a <__aeabi_dsub+0x5b2>
 8001d2a:	2b1f      	cmp	r3, #31
 8001d2c:	dd00      	ble.n	8001d30 <__aeabi_dsub+0x2d8>
 8001d2e:	e18c      	b.n	800204a <__aeabi_dsub+0x5f2>
 8001d30:	2520      	movs	r5, #32
 8001d32:	000e      	movs	r6, r1
 8001d34:	1aed      	subs	r5, r5, r3
 8001d36:	40ae      	lsls	r6, r5
 8001d38:	46b0      	mov	r8, r6
 8001d3a:	0006      	movs	r6, r0
 8001d3c:	46aa      	mov	sl, r5
 8001d3e:	40de      	lsrs	r6, r3
 8001d40:	4645      	mov	r5, r8
 8001d42:	4335      	orrs	r5, r6
 8001d44:	002e      	movs	r6, r5
 8001d46:	4655      	mov	r5, sl
 8001d48:	40d9      	lsrs	r1, r3
 8001d4a:	40a8      	lsls	r0, r5
 8001d4c:	4663      	mov	r3, ip
 8001d4e:	1e45      	subs	r5, r0, #1
 8001d50:	41a8      	sbcs	r0, r5
 8001d52:	1a5b      	subs	r3, r3, r1
 8001d54:	469c      	mov	ip, r3
 8001d56:	4330      	orrs	r0, r6
 8001d58:	1a16      	subs	r6, r2, r0
 8001d5a:	42b2      	cmp	r2, r6
 8001d5c:	4192      	sbcs	r2, r2
 8001d5e:	4663      	mov	r3, ip
 8001d60:	4252      	negs	r2, r2
 8001d62:	1a99      	subs	r1, r3, r2
 8001d64:	003d      	movs	r5, r7
 8001d66:	e6b4      	b.n	8001ad2 <__aeabi_dsub+0x7a>
 8001d68:	2207      	movs	r2, #7
 8001d6a:	4032      	ands	r2, r6
 8001d6c:	2a00      	cmp	r2, #0
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dsub+0x31a>
 8001d70:	e6e4      	b.n	8001b3c <__aeabi_dsub+0xe4>
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <__aeabi_dsub+0x348>)
 8001d74:	08f6      	lsrs	r6, r6, #3
 8001d76:	074f      	lsls	r7, r1, #29
 8001d78:	4337      	orrs	r7, r6
 8001d7a:	08ca      	lsrs	r2, r1, #3
 8001d7c:	429d      	cmp	r5, r3
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dsub+0x32a>
 8001d80:	e790      	b.n	8001ca4 <__aeabi_dsub+0x24c>
 8001d82:	003b      	movs	r3, r7
 8001d84:	4313      	orrs	r3, r2
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x332>
 8001d88:	e1a6      	b.n	80020d8 <__aeabi_dsub+0x680>
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	031b      	lsls	r3, r3, #12
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	0312      	lsls	r2, r2, #12
 8001d92:	0b12      	lsrs	r2, r2, #12
 8001d94:	4d02      	ldr	r5, [pc, #8]	; (8001da0 <__aeabi_dsub+0x348>)
 8001d96:	e789      	b.n	8001cac <__aeabi_dsub+0x254>
 8001d98:	0015      	movs	r5, r2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2700      	movs	r7, #0
 8001d9e:	e785      	b.n	8001cac <__aeabi_dsub+0x254>
 8001da0:	000007ff 	.word	0x000007ff
 8001da4:	ff7fffff 	.word	0xff7fffff
 8001da8:	800fffff 	.word	0x800fffff
 8001dac:	2e00      	cmp	r6, #0
 8001dae:	d000      	beq.n	8001db2 <__aeabi_dsub+0x35a>
 8001db0:	e0c7      	b.n	8001f42 <__aeabi_dsub+0x4ea>
 8001db2:	1c6b      	adds	r3, r5, #1
 8001db4:	055e      	lsls	r6, r3, #21
 8001db6:	0d76      	lsrs	r6, r6, #21
 8001db8:	2e01      	cmp	r6, #1
 8001dba:	dc00      	bgt.n	8001dbe <__aeabi_dsub+0x366>
 8001dbc:	e0f0      	b.n	8001fa0 <__aeabi_dsub+0x548>
 8001dbe:	4dc8      	ldr	r5, [pc, #800]	; (80020e0 <__aeabi_dsub+0x688>)
 8001dc0:	42ab      	cmp	r3, r5
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_dsub+0x36e>
 8001dc4:	e0b9      	b.n	8001f3a <__aeabi_dsub+0x4e2>
 8001dc6:	1885      	adds	r5, r0, r2
 8001dc8:	000a      	movs	r2, r1
 8001dca:	4285      	cmp	r5, r0
 8001dcc:	4189      	sbcs	r1, r1
 8001dce:	4462      	add	r2, ip
 8001dd0:	4249      	negs	r1, r1
 8001dd2:	1851      	adds	r1, r2, r1
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	07ce      	lsls	r6, r1, #31
 8001dd8:	086d      	lsrs	r5, r5, #1
 8001dda:	432e      	orrs	r6, r5
 8001ddc:	0849      	lsrs	r1, r1, #1
 8001dde:	4032      	ands	r2, r6
 8001de0:	001d      	movs	r5, r3
 8001de2:	e6a9      	b.n	8001b38 <__aeabi_dsub+0xe0>
 8001de4:	49bf      	ldr	r1, [pc, #764]	; (80020e4 <__aeabi_dsub+0x68c>)
 8001de6:	1aed      	subs	r5, r5, r3
 8001de8:	4011      	ands	r1, r2
 8001dea:	2207      	movs	r2, #7
 8001dec:	4032      	ands	r2, r6
 8001dee:	e6a3      	b.n	8001b38 <__aeabi_dsub+0xe0>
 8001df0:	0032      	movs	r2, r6
 8001df2:	3828      	subs	r0, #40	; 0x28
 8001df4:	4082      	lsls	r2, r0
 8001df6:	2600      	movs	r6, #0
 8001df8:	e686      	b.n	8001b08 <__aeabi_dsub+0xb0>
 8001dfa:	0030      	movs	r0, r6
 8001dfc:	f000 fab6 	bl	800236c <__clzsi2>
 8001e00:	3020      	adds	r0, #32
 8001e02:	e673      	b.n	8001aec <__aeabi_dsub+0x94>
 8001e04:	4663      	mov	r3, ip
 8001e06:	4313      	orrs	r3, r2
 8001e08:	1e5a      	subs	r2, r3, #1
 8001e0a:	4193      	sbcs	r3, r2
 8001e0c:	1ac6      	subs	r6, r0, r3
 8001e0e:	42b0      	cmp	r0, r6
 8001e10:	4180      	sbcs	r0, r0
 8001e12:	4240      	negs	r0, r0
 8001e14:	1a09      	subs	r1, r1, r0
 8001e16:	e65c      	b.n	8001ad2 <__aeabi_dsub+0x7a>
 8001e18:	000e      	movs	r6, r1
 8001e1a:	4667      	mov	r7, ip
 8001e1c:	4306      	orrs	r6, r0
 8001e1e:	4317      	orrs	r7, r2
 8001e20:	2d00      	cmp	r5, #0
 8001e22:	d15e      	bne.n	8001ee2 <__aeabi_dsub+0x48a>
 8001e24:	2e00      	cmp	r6, #0
 8001e26:	d000      	beq.n	8001e2a <__aeabi_dsub+0x3d2>
 8001e28:	e0f3      	b.n	8002012 <__aeabi_dsub+0x5ba>
 8001e2a:	2f00      	cmp	r7, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x3d8>
 8001e2e:	e11e      	b.n	800206e <__aeabi_dsub+0x616>
 8001e30:	465c      	mov	r4, fp
 8001e32:	4661      	mov	r1, ip
 8001e34:	4691      	mov	r9, r2
 8001e36:	e72c      	b.n	8001c92 <__aeabi_dsub+0x23a>
 8001e38:	4fa9      	ldr	r7, [pc, #676]	; (80020e0 <__aeabi_dsub+0x688>)
 8001e3a:	42be      	cmp	r6, r7
 8001e3c:	d07b      	beq.n	8001f36 <__aeabi_dsub+0x4de>
 8001e3e:	001e      	movs	r6, r3
 8001e40:	e6f1      	b.n	8001c26 <__aeabi_dsub+0x1ce>
 8001e42:	0010      	movs	r0, r2
 8001e44:	3d1f      	subs	r5, #31
 8001e46:	40e8      	lsrs	r0, r5
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d003      	beq.n	8001e54 <__aeabi_dsub+0x3fc>
 8001e4c:	2140      	movs	r1, #64	; 0x40
 8001e4e:	1acb      	subs	r3, r1, r3
 8001e50:	409a      	lsls	r2, r3
 8001e52:	4316      	orrs	r6, r2
 8001e54:	1e73      	subs	r3, r6, #1
 8001e56:	419e      	sbcs	r6, r3
 8001e58:	2207      	movs	r2, #7
 8001e5a:	4306      	orrs	r6, r0
 8001e5c:	4032      	ands	r2, r6
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2500      	movs	r5, #0
 8001e62:	e783      	b.n	8001d6c <__aeabi_dsub+0x314>
 8001e64:	1a16      	subs	r6, r2, r0
 8001e66:	4663      	mov	r3, ip
 8001e68:	42b2      	cmp	r2, r6
 8001e6a:	4180      	sbcs	r0, r0
 8001e6c:	1a59      	subs	r1, r3, r1
 8001e6e:	4240      	negs	r0, r0
 8001e70:	1a0b      	subs	r3, r1, r0
 8001e72:	4698      	mov	r8, r3
 8001e74:	465c      	mov	r4, fp
 8001e76:	e632      	b.n	8001ade <__aeabi_dsub+0x86>
 8001e78:	2e1f      	cmp	r6, #31
 8001e7a:	dd00      	ble.n	8001e7e <__aeabi_dsub+0x426>
 8001e7c:	e0ab      	b.n	8001fd6 <__aeabi_dsub+0x57e>
 8001e7e:	2720      	movs	r7, #32
 8001e80:	1bbb      	subs	r3, r7, r6
 8001e82:	469a      	mov	sl, r3
 8001e84:	4663      	mov	r3, ip
 8001e86:	4657      	mov	r7, sl
 8001e88:	40bb      	lsls	r3, r7
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	464f      	mov	r7, r9
 8001e90:	40f3      	lsrs	r3, r6
 8001e92:	431f      	orrs	r7, r3
 8001e94:	003b      	movs	r3, r7
 8001e96:	4657      	mov	r7, sl
 8001e98:	40ba      	lsls	r2, r7
 8001e9a:	1e57      	subs	r7, r2, #1
 8001e9c:	41ba      	sbcs	r2, r7
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	4662      	mov	r2, ip
 8001ea2:	40f2      	lsrs	r2, r6
 8001ea4:	1889      	adds	r1, r1, r2
 8001ea6:	e698      	b.n	8001bda <__aeabi_dsub+0x182>
 8001ea8:	2720      	movs	r7, #32
 8001eaa:	1bbb      	subs	r3, r7, r6
 8001eac:	469a      	mov	sl, r3
 8001eae:	4663      	mov	r3, ip
 8001eb0:	4657      	mov	r7, sl
 8001eb2:	40bb      	lsls	r3, r7
 8001eb4:	4699      	mov	r9, r3
 8001eb6:	0013      	movs	r3, r2
 8001eb8:	464f      	mov	r7, r9
 8001eba:	40f3      	lsrs	r3, r6
 8001ebc:	431f      	orrs	r7, r3
 8001ebe:	003b      	movs	r3, r7
 8001ec0:	4657      	mov	r7, sl
 8001ec2:	40ba      	lsls	r2, r7
 8001ec4:	1e57      	subs	r7, r2, #1
 8001ec6:	41ba      	sbcs	r2, r7
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	4662      	mov	r2, ip
 8001ecc:	40f2      	lsrs	r2, r6
 8001ece:	1a89      	subs	r1, r1, r2
 8001ed0:	e79c      	b.n	8001e0c <__aeabi_dsub+0x3b4>
 8001ed2:	4b83      	ldr	r3, [pc, #524]	; (80020e0 <__aeabi_dsub+0x688>)
 8001ed4:	429f      	cmp	r7, r3
 8001ed6:	d05f      	beq.n	8001f98 <__aeabi_dsub+0x540>
 8001ed8:	2580      	movs	r5, #128	; 0x80
 8001eda:	042d      	lsls	r5, r5, #16
 8001edc:	4273      	negs	r3, r6
 8001ede:	4329      	orrs	r1, r5
 8001ee0:	e720      	b.n	8001d24 <__aeabi_dsub+0x2cc>
 8001ee2:	2e00      	cmp	r6, #0
 8001ee4:	d10c      	bne.n	8001f00 <__aeabi_dsub+0x4a8>
 8001ee6:	2f00      	cmp	r7, #0
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x494>
 8001eea:	e0d0      	b.n	800208e <__aeabi_dsub+0x636>
 8001eec:	465c      	mov	r4, fp
 8001eee:	4661      	mov	r1, ip
 8001ef0:	4691      	mov	r9, r2
 8001ef2:	4d7b      	ldr	r5, [pc, #492]	; (80020e0 <__aeabi_dsub+0x688>)
 8001ef4:	e6cd      	b.n	8001c92 <__aeabi_dsub+0x23a>
 8001ef6:	4f7a      	ldr	r7, [pc, #488]	; (80020e0 <__aeabi_dsub+0x688>)
 8001ef8:	42be      	cmp	r6, r7
 8001efa:	d01c      	beq.n	8001f36 <__aeabi_dsub+0x4de>
 8001efc:	001e      	movs	r6, r3
 8001efe:	e665      	b.n	8001bcc <__aeabi_dsub+0x174>
 8001f00:	2f00      	cmp	r7, #0
 8001f02:	d018      	beq.n	8001f36 <__aeabi_dsub+0x4de>
 8001f04:	08c0      	lsrs	r0, r0, #3
 8001f06:	074e      	lsls	r6, r1, #29
 8001f08:	4306      	orrs	r6, r0
 8001f0a:	2080      	movs	r0, #128	; 0x80
 8001f0c:	08c9      	lsrs	r1, r1, #3
 8001f0e:	0300      	lsls	r0, r0, #12
 8001f10:	4201      	tst	r1, r0
 8001f12:	d008      	beq.n	8001f26 <__aeabi_dsub+0x4ce>
 8001f14:	4663      	mov	r3, ip
 8001f16:	08dc      	lsrs	r4, r3, #3
 8001f18:	4204      	tst	r4, r0
 8001f1a:	d104      	bne.n	8001f26 <__aeabi_dsub+0x4ce>
 8001f1c:	0021      	movs	r1, r4
 8001f1e:	46da      	mov	sl, fp
 8001f20:	08d2      	lsrs	r2, r2, #3
 8001f22:	075e      	lsls	r6, r3, #29
 8001f24:	4316      	orrs	r6, r2
 8001f26:	00f3      	lsls	r3, r6, #3
 8001f28:	4699      	mov	r9, r3
 8001f2a:	2401      	movs	r4, #1
 8001f2c:	4653      	mov	r3, sl
 8001f2e:	00c9      	lsls	r1, r1, #3
 8001f30:	0f72      	lsrs	r2, r6, #29
 8001f32:	4311      	orrs	r1, r2
 8001f34:	401c      	ands	r4, r3
 8001f36:	4d6a      	ldr	r5, [pc, #424]	; (80020e0 <__aeabi_dsub+0x688>)
 8001f38:	e6ab      	b.n	8001c92 <__aeabi_dsub+0x23a>
 8001f3a:	001d      	movs	r5, r3
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2700      	movs	r7, #0
 8001f40:	e6b4      	b.n	8001cac <__aeabi_dsub+0x254>
 8001f42:	2d00      	cmp	r5, #0
 8001f44:	d159      	bne.n	8001ffa <__aeabi_dsub+0x5a2>
 8001f46:	000b      	movs	r3, r1
 8001f48:	4303      	orrs	r3, r0
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_dsub+0x4f6>
 8001f4c:	e6d6      	b.n	8001cfc <__aeabi_dsub+0x2a4>
 8001f4e:	1c73      	adds	r3, r6, #1
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dsub+0x4fc>
 8001f52:	e0b2      	b.n	80020ba <__aeabi_dsub+0x662>
 8001f54:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <__aeabi_dsub+0x688>)
 8001f56:	429f      	cmp	r7, r3
 8001f58:	d01e      	beq.n	8001f98 <__aeabi_dsub+0x540>
 8001f5a:	43f3      	mvns	r3, r6
 8001f5c:	2b38      	cmp	r3, #56	; 0x38
 8001f5e:	dc6f      	bgt.n	8002040 <__aeabi_dsub+0x5e8>
 8001f60:	2b1f      	cmp	r3, #31
 8001f62:	dd00      	ble.n	8001f66 <__aeabi_dsub+0x50e>
 8001f64:	e097      	b.n	8002096 <__aeabi_dsub+0x63e>
 8001f66:	2520      	movs	r5, #32
 8001f68:	000e      	movs	r6, r1
 8001f6a:	1aed      	subs	r5, r5, r3
 8001f6c:	40ae      	lsls	r6, r5
 8001f6e:	46b0      	mov	r8, r6
 8001f70:	0006      	movs	r6, r0
 8001f72:	46aa      	mov	sl, r5
 8001f74:	40de      	lsrs	r6, r3
 8001f76:	4645      	mov	r5, r8
 8001f78:	4335      	orrs	r5, r6
 8001f7a:	002e      	movs	r6, r5
 8001f7c:	4655      	mov	r5, sl
 8001f7e:	40a8      	lsls	r0, r5
 8001f80:	40d9      	lsrs	r1, r3
 8001f82:	1e45      	subs	r5, r0, #1
 8001f84:	41a8      	sbcs	r0, r5
 8001f86:	448c      	add	ip, r1
 8001f88:	4306      	orrs	r6, r0
 8001f8a:	18b6      	adds	r6, r6, r2
 8001f8c:	4296      	cmp	r6, r2
 8001f8e:	4192      	sbcs	r2, r2
 8001f90:	4251      	negs	r1, r2
 8001f92:	4461      	add	r1, ip
 8001f94:	003d      	movs	r5, r7
 8001f96:	e625      	b.n	8001be4 <__aeabi_dsub+0x18c>
 8001f98:	003d      	movs	r5, r7
 8001f9a:	4661      	mov	r1, ip
 8001f9c:	4691      	mov	r9, r2
 8001f9e:	e678      	b.n	8001c92 <__aeabi_dsub+0x23a>
 8001fa0:	000b      	movs	r3, r1
 8001fa2:	4303      	orrs	r3, r0
 8001fa4:	2d00      	cmp	r5, #0
 8001fa6:	d000      	beq.n	8001faa <__aeabi_dsub+0x552>
 8001fa8:	e655      	b.n	8001c56 <__aeabi_dsub+0x1fe>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f5      	beq.n	8001f9a <__aeabi_dsub+0x542>
 8001fae:	4663      	mov	r3, ip
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x55e>
 8001fb4:	e66d      	b.n	8001c92 <__aeabi_dsub+0x23a>
 8001fb6:	1886      	adds	r6, r0, r2
 8001fb8:	4286      	cmp	r6, r0
 8001fba:	4180      	sbcs	r0, r0
 8001fbc:	4461      	add	r1, ip
 8001fbe:	4240      	negs	r0, r0
 8001fc0:	1809      	adds	r1, r1, r0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	020b      	lsls	r3, r1, #8
 8001fc6:	d400      	bmi.n	8001fca <__aeabi_dsub+0x572>
 8001fc8:	e6d0      	b.n	8001d6c <__aeabi_dsub+0x314>
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <__aeabi_dsub+0x68c>)
 8001fcc:	3501      	adds	r5, #1
 8001fce:	4019      	ands	r1, r3
 8001fd0:	e5b2      	b.n	8001b38 <__aeabi_dsub+0xe0>
 8001fd2:	46b1      	mov	r9, r6
 8001fd4:	e65d      	b.n	8001c92 <__aeabi_dsub+0x23a>
 8001fd6:	0033      	movs	r3, r6
 8001fd8:	4667      	mov	r7, ip
 8001fda:	3b20      	subs	r3, #32
 8001fdc:	40df      	lsrs	r7, r3
 8001fde:	003b      	movs	r3, r7
 8001fe0:	2e20      	cmp	r6, #32
 8001fe2:	d005      	beq.n	8001ff0 <__aeabi_dsub+0x598>
 8001fe4:	2740      	movs	r7, #64	; 0x40
 8001fe6:	1bbf      	subs	r7, r7, r6
 8001fe8:	4666      	mov	r6, ip
 8001fea:	40be      	lsls	r6, r7
 8001fec:	4332      	orrs	r2, r6
 8001fee:	4690      	mov	r8, r2
 8001ff0:	4646      	mov	r6, r8
 8001ff2:	1e72      	subs	r2, r6, #1
 8001ff4:	4196      	sbcs	r6, r2
 8001ff6:	4333      	orrs	r3, r6
 8001ff8:	e5ef      	b.n	8001bda <__aeabi_dsub+0x182>
 8001ffa:	4b39      	ldr	r3, [pc, #228]	; (80020e0 <__aeabi_dsub+0x688>)
 8001ffc:	429f      	cmp	r7, r3
 8001ffe:	d0cb      	beq.n	8001f98 <__aeabi_dsub+0x540>
 8002000:	2580      	movs	r5, #128	; 0x80
 8002002:	042d      	lsls	r5, r5, #16
 8002004:	4273      	negs	r3, r6
 8002006:	4329      	orrs	r1, r5
 8002008:	e7a8      	b.n	8001f5c <__aeabi_dsub+0x504>
 800200a:	4308      	orrs	r0, r1
 800200c:	1e41      	subs	r1, r0, #1
 800200e:	4188      	sbcs	r0, r1
 8002010:	e6a2      	b.n	8001d58 <__aeabi_dsub+0x300>
 8002012:	2f00      	cmp	r7, #0
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x5c0>
 8002016:	e63c      	b.n	8001c92 <__aeabi_dsub+0x23a>
 8002018:	4663      	mov	r3, ip
 800201a:	1a86      	subs	r6, r0, r2
 800201c:	1acf      	subs	r7, r1, r3
 800201e:	42b0      	cmp	r0, r6
 8002020:	419b      	sbcs	r3, r3
 8002022:	425b      	negs	r3, r3
 8002024:	1afb      	subs	r3, r7, r3
 8002026:	4698      	mov	r8, r3
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	d54e      	bpl.n	80020ca <__aeabi_dsub+0x672>
 800202c:	1a16      	subs	r6, r2, r0
 800202e:	4663      	mov	r3, ip
 8002030:	42b2      	cmp	r2, r6
 8002032:	4192      	sbcs	r2, r2
 8002034:	1a59      	subs	r1, r3, r1
 8002036:	4252      	negs	r2, r2
 8002038:	1a89      	subs	r1, r1, r2
 800203a:	465c      	mov	r4, fp
 800203c:	2200      	movs	r2, #0
 800203e:	e57b      	b.n	8001b38 <__aeabi_dsub+0xe0>
 8002040:	4301      	orrs	r1, r0
 8002042:	000e      	movs	r6, r1
 8002044:	1e71      	subs	r1, r6, #1
 8002046:	418e      	sbcs	r6, r1
 8002048:	e79f      	b.n	8001f8a <__aeabi_dsub+0x532>
 800204a:	001d      	movs	r5, r3
 800204c:	000e      	movs	r6, r1
 800204e:	3d20      	subs	r5, #32
 8002050:	40ee      	lsrs	r6, r5
 8002052:	46b0      	mov	r8, r6
 8002054:	2b20      	cmp	r3, #32
 8002056:	d004      	beq.n	8002062 <__aeabi_dsub+0x60a>
 8002058:	2540      	movs	r5, #64	; 0x40
 800205a:	1aeb      	subs	r3, r5, r3
 800205c:	4099      	lsls	r1, r3
 800205e:	4308      	orrs	r0, r1
 8002060:	4681      	mov	r9, r0
 8002062:	4648      	mov	r0, r9
 8002064:	4643      	mov	r3, r8
 8002066:	1e41      	subs	r1, r0, #1
 8002068:	4188      	sbcs	r0, r1
 800206a:	4318      	orrs	r0, r3
 800206c:	e674      	b.n	8001d58 <__aeabi_dsub+0x300>
 800206e:	2200      	movs	r2, #0
 8002070:	2400      	movs	r4, #0
 8002072:	e617      	b.n	8001ca4 <__aeabi_dsub+0x24c>
 8002074:	1a16      	subs	r6, r2, r0
 8002076:	4663      	mov	r3, ip
 8002078:	42b2      	cmp	r2, r6
 800207a:	4192      	sbcs	r2, r2
 800207c:	1a59      	subs	r1, r3, r1
 800207e:	4252      	negs	r2, r2
 8002080:	1a89      	subs	r1, r1, r2
 8002082:	003d      	movs	r5, r7
 8002084:	e525      	b.n	8001ad2 <__aeabi_dsub+0x7a>
 8002086:	4661      	mov	r1, ip
 8002088:	4691      	mov	r9, r2
 800208a:	4d15      	ldr	r5, [pc, #84]	; (80020e0 <__aeabi_dsub+0x688>)
 800208c:	e601      	b.n	8001c92 <__aeabi_dsub+0x23a>
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	2400      	movs	r4, #0
 8002092:	0312      	lsls	r2, r2, #12
 8002094:	e679      	b.n	8001d8a <__aeabi_dsub+0x332>
 8002096:	001d      	movs	r5, r3
 8002098:	000e      	movs	r6, r1
 800209a:	3d20      	subs	r5, #32
 800209c:	40ee      	lsrs	r6, r5
 800209e:	46b0      	mov	r8, r6
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d004      	beq.n	80020ae <__aeabi_dsub+0x656>
 80020a4:	2540      	movs	r5, #64	; 0x40
 80020a6:	1aeb      	subs	r3, r5, r3
 80020a8:	4099      	lsls	r1, r3
 80020aa:	4308      	orrs	r0, r1
 80020ac:	4681      	mov	r9, r0
 80020ae:	464e      	mov	r6, r9
 80020b0:	4643      	mov	r3, r8
 80020b2:	1e71      	subs	r1, r6, #1
 80020b4:	418e      	sbcs	r6, r1
 80020b6:	431e      	orrs	r6, r3
 80020b8:	e767      	b.n	8001f8a <__aeabi_dsub+0x532>
 80020ba:	1886      	adds	r6, r0, r2
 80020bc:	4296      	cmp	r6, r2
 80020be:	419b      	sbcs	r3, r3
 80020c0:	4461      	add	r1, ip
 80020c2:	425b      	negs	r3, r3
 80020c4:	18c9      	adds	r1, r1, r3
 80020c6:	003d      	movs	r5, r7
 80020c8:	e58c      	b.n	8001be4 <__aeabi_dsub+0x18c>
 80020ca:	4647      	mov	r7, r8
 80020cc:	4337      	orrs	r7, r6
 80020ce:	d0ce      	beq.n	800206e <__aeabi_dsub+0x616>
 80020d0:	2207      	movs	r2, #7
 80020d2:	4641      	mov	r1, r8
 80020d4:	4032      	ands	r2, r6
 80020d6:	e649      	b.n	8001d6c <__aeabi_dsub+0x314>
 80020d8:	2700      	movs	r7, #0
 80020da:	003a      	movs	r2, r7
 80020dc:	e5e6      	b.n	8001cac <__aeabi_dsub+0x254>
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	000007ff 	.word	0x000007ff
 80020e4:	ff7fffff 	.word	0xff7fffff

080020e8 <__aeabi_dcmpun>:
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	4e0c      	ldr	r6, [pc, #48]	; (800211c <__aeabi_dcmpun+0x34>)
 80020ec:	030d      	lsls	r5, r1, #12
 80020ee:	031c      	lsls	r4, r3, #12
 80020f0:	0049      	lsls	r1, r1, #1
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	0b2d      	lsrs	r5, r5, #12
 80020f6:	0d49      	lsrs	r1, r1, #21
 80020f8:	0b24      	lsrs	r4, r4, #12
 80020fa:	0d5b      	lsrs	r3, r3, #21
 80020fc:	42b1      	cmp	r1, r6
 80020fe:	d008      	beq.n	8002112 <__aeabi_dcmpun+0x2a>
 8002100:	4906      	ldr	r1, [pc, #24]	; (800211c <__aeabi_dcmpun+0x34>)
 8002102:	2000      	movs	r0, #0
 8002104:	428b      	cmp	r3, r1
 8002106:	d103      	bne.n	8002110 <__aeabi_dcmpun+0x28>
 8002108:	4314      	orrs	r4, r2
 800210a:	0020      	movs	r0, r4
 800210c:	1e44      	subs	r4, r0, #1
 800210e:	41a0      	sbcs	r0, r4
 8002110:	bd70      	pop	{r4, r5, r6, pc}
 8002112:	4305      	orrs	r5, r0
 8002114:	2001      	movs	r0, #1
 8002116:	2d00      	cmp	r5, #0
 8002118:	d1fa      	bne.n	8002110 <__aeabi_dcmpun+0x28>
 800211a:	e7f1      	b.n	8002100 <__aeabi_dcmpun+0x18>
 800211c:	000007ff 	.word	0x000007ff

08002120 <__aeabi_d2iz>:
 8002120:	b530      	push	{r4, r5, lr}
 8002122:	4d14      	ldr	r5, [pc, #80]	; (8002174 <__aeabi_d2iz+0x54>)
 8002124:	030a      	lsls	r2, r1, #12
 8002126:	004b      	lsls	r3, r1, #1
 8002128:	0b12      	lsrs	r2, r2, #12
 800212a:	0d5b      	lsrs	r3, r3, #21
 800212c:	0fc9      	lsrs	r1, r1, #31
 800212e:	2400      	movs	r4, #0
 8002130:	42ab      	cmp	r3, r5
 8002132:	dd11      	ble.n	8002158 <__aeabi_d2iz+0x38>
 8002134:	4c10      	ldr	r4, [pc, #64]	; (8002178 <__aeabi_d2iz+0x58>)
 8002136:	42a3      	cmp	r3, r4
 8002138:	dc10      	bgt.n	800215c <__aeabi_d2iz+0x3c>
 800213a:	2480      	movs	r4, #128	; 0x80
 800213c:	0364      	lsls	r4, r4, #13
 800213e:	4322      	orrs	r2, r4
 8002140:	4c0e      	ldr	r4, [pc, #56]	; (800217c <__aeabi_d2iz+0x5c>)
 8002142:	1ae4      	subs	r4, r4, r3
 8002144:	2c1f      	cmp	r4, #31
 8002146:	dd0c      	ble.n	8002162 <__aeabi_d2iz+0x42>
 8002148:	480d      	ldr	r0, [pc, #52]	; (8002180 <__aeabi_d2iz+0x60>)
 800214a:	1ac3      	subs	r3, r0, r3
 800214c:	40da      	lsrs	r2, r3
 800214e:	0013      	movs	r3, r2
 8002150:	425c      	negs	r4, r3
 8002152:	2900      	cmp	r1, #0
 8002154:	d100      	bne.n	8002158 <__aeabi_d2iz+0x38>
 8002156:	001c      	movs	r4, r3
 8002158:	0020      	movs	r0, r4
 800215a:	bd30      	pop	{r4, r5, pc}
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <__aeabi_d2iz+0x64>)
 800215e:	18cc      	adds	r4, r1, r3
 8002160:	e7fa      	b.n	8002158 <__aeabi_d2iz+0x38>
 8002162:	4d09      	ldr	r5, [pc, #36]	; (8002188 <__aeabi_d2iz+0x68>)
 8002164:	40e0      	lsrs	r0, r4
 8002166:	46ac      	mov	ip, r5
 8002168:	4463      	add	r3, ip
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	4303      	orrs	r3, r0
 8002170:	e7ee      	b.n	8002150 <__aeabi_d2iz+0x30>
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	000003fe 	.word	0x000003fe
 8002178:	0000041d 	.word	0x0000041d
 800217c:	00000433 	.word	0x00000433
 8002180:	00000413 	.word	0x00000413
 8002184:	7fffffff 	.word	0x7fffffff
 8002188:	fffffbed 	.word	0xfffffbed

0800218c <__aeabi_i2d>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	2800      	cmp	r0, #0
 8002190:	d02d      	beq.n	80021ee <__aeabi_i2d+0x62>
 8002192:	17c3      	asrs	r3, r0, #31
 8002194:	18c5      	adds	r5, r0, r3
 8002196:	405d      	eors	r5, r3
 8002198:	0fc4      	lsrs	r4, r0, #31
 800219a:	0028      	movs	r0, r5
 800219c:	f000 f8e6 	bl	800236c <__clzsi2>
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <__aeabi_i2d+0x6c>)
 80021a2:	1a1b      	subs	r3, r3, r0
 80021a4:	055b      	lsls	r3, r3, #21
 80021a6:	0d5b      	lsrs	r3, r3, #21
 80021a8:	280a      	cmp	r0, #10
 80021aa:	dd15      	ble.n	80021d8 <__aeabi_i2d+0x4c>
 80021ac:	380b      	subs	r0, #11
 80021ae:	4085      	lsls	r5, r0
 80021b0:	2200      	movs	r2, #0
 80021b2:	032d      	lsls	r5, r5, #12
 80021b4:	0b2d      	lsrs	r5, r5, #12
 80021b6:	2100      	movs	r1, #0
 80021b8:	0010      	movs	r0, r2
 80021ba:	032d      	lsls	r5, r5, #12
 80021bc:	0d0a      	lsrs	r2, r1, #20
 80021be:	0b2d      	lsrs	r5, r5, #12
 80021c0:	0512      	lsls	r2, r2, #20
 80021c2:	432a      	orrs	r2, r5
 80021c4:	4d0d      	ldr	r5, [pc, #52]	; (80021fc <__aeabi_i2d+0x70>)
 80021c6:	051b      	lsls	r3, r3, #20
 80021c8:	402a      	ands	r2, r5
 80021ca:	4313      	orrs	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	07e4      	lsls	r4, r4, #31
 80021d0:	085b      	lsrs	r3, r3, #1
 80021d2:	4323      	orrs	r3, r4
 80021d4:	0019      	movs	r1, r3
 80021d6:	bd70      	pop	{r4, r5, r6, pc}
 80021d8:	0002      	movs	r2, r0
 80021da:	0029      	movs	r1, r5
 80021dc:	3215      	adds	r2, #21
 80021de:	4091      	lsls	r1, r2
 80021e0:	000a      	movs	r2, r1
 80021e2:	210b      	movs	r1, #11
 80021e4:	1a08      	subs	r0, r1, r0
 80021e6:	40c5      	lsrs	r5, r0
 80021e8:	032d      	lsls	r5, r5, #12
 80021ea:	0b2d      	lsrs	r5, r5, #12
 80021ec:	e7e3      	b.n	80021b6 <__aeabi_i2d+0x2a>
 80021ee:	2400      	movs	r4, #0
 80021f0:	2300      	movs	r3, #0
 80021f2:	2500      	movs	r5, #0
 80021f4:	2200      	movs	r2, #0
 80021f6:	e7de      	b.n	80021b6 <__aeabi_i2d+0x2a>
 80021f8:	0000041e 	.word	0x0000041e
 80021fc:	800fffff 	.word	0x800fffff

08002200 <__aeabi_ui2d>:
 8002200:	b510      	push	{r4, lr}
 8002202:	1e04      	subs	r4, r0, #0
 8002204:	d025      	beq.n	8002252 <__aeabi_ui2d+0x52>
 8002206:	f000 f8b1 	bl	800236c <__clzsi2>
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <__aeabi_ui2d+0x5c>)
 800220c:	1a1b      	subs	r3, r3, r0
 800220e:	055b      	lsls	r3, r3, #21
 8002210:	0d5b      	lsrs	r3, r3, #21
 8002212:	280a      	cmp	r0, #10
 8002214:	dd12      	ble.n	800223c <__aeabi_ui2d+0x3c>
 8002216:	380b      	subs	r0, #11
 8002218:	4084      	lsls	r4, r0
 800221a:	2200      	movs	r2, #0
 800221c:	0324      	lsls	r4, r4, #12
 800221e:	0b24      	lsrs	r4, r4, #12
 8002220:	2100      	movs	r1, #0
 8002222:	0010      	movs	r0, r2
 8002224:	0324      	lsls	r4, r4, #12
 8002226:	0d0a      	lsrs	r2, r1, #20
 8002228:	0b24      	lsrs	r4, r4, #12
 800222a:	0512      	lsls	r2, r2, #20
 800222c:	4322      	orrs	r2, r4
 800222e:	4c0c      	ldr	r4, [pc, #48]	; (8002260 <__aeabi_ui2d+0x60>)
 8002230:	051b      	lsls	r3, r3, #20
 8002232:	4022      	ands	r2, r4
 8002234:	4313      	orrs	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	0859      	lsrs	r1, r3, #1
 800223a:	bd10      	pop	{r4, pc}
 800223c:	0002      	movs	r2, r0
 800223e:	0021      	movs	r1, r4
 8002240:	3215      	adds	r2, #21
 8002242:	4091      	lsls	r1, r2
 8002244:	000a      	movs	r2, r1
 8002246:	210b      	movs	r1, #11
 8002248:	1a08      	subs	r0, r1, r0
 800224a:	40c4      	lsrs	r4, r0
 800224c:	0324      	lsls	r4, r4, #12
 800224e:	0b24      	lsrs	r4, r4, #12
 8002250:	e7e6      	b.n	8002220 <__aeabi_ui2d+0x20>
 8002252:	2300      	movs	r3, #0
 8002254:	2400      	movs	r4, #0
 8002256:	2200      	movs	r2, #0
 8002258:	e7e2      	b.n	8002220 <__aeabi_ui2d+0x20>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	0000041e 	.word	0x0000041e
 8002260:	800fffff 	.word	0x800fffff

08002264 <__aeabi_d2f>:
 8002264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002266:	004c      	lsls	r4, r1, #1
 8002268:	0d64      	lsrs	r4, r4, #21
 800226a:	030b      	lsls	r3, r1, #12
 800226c:	1c62      	adds	r2, r4, #1
 800226e:	0a5b      	lsrs	r3, r3, #9
 8002270:	0f46      	lsrs	r6, r0, #29
 8002272:	0552      	lsls	r2, r2, #21
 8002274:	0fc9      	lsrs	r1, r1, #31
 8002276:	431e      	orrs	r6, r3
 8002278:	00c5      	lsls	r5, r0, #3
 800227a:	0d52      	lsrs	r2, r2, #21
 800227c:	2a01      	cmp	r2, #1
 800227e:	dd29      	ble.n	80022d4 <__aeabi_d2f+0x70>
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <__aeabi_d2f+0xfc>)
 8002282:	18e7      	adds	r7, r4, r3
 8002284:	2ffe      	cmp	r7, #254	; 0xfe
 8002286:	dc1c      	bgt.n	80022c2 <__aeabi_d2f+0x5e>
 8002288:	2f00      	cmp	r7, #0
 800228a:	dd3b      	ble.n	8002304 <__aeabi_d2f+0xa0>
 800228c:	0180      	lsls	r0, r0, #6
 800228e:	1e43      	subs	r3, r0, #1
 8002290:	4198      	sbcs	r0, r3
 8002292:	2207      	movs	r2, #7
 8002294:	00f3      	lsls	r3, r6, #3
 8002296:	0f6d      	lsrs	r5, r5, #29
 8002298:	4303      	orrs	r3, r0
 800229a:	432b      	orrs	r3, r5
 800229c:	401a      	ands	r2, r3
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d004      	beq.n	80022ac <__aeabi_d2f+0x48>
 80022a2:	220f      	movs	r2, #15
 80022a4:	401a      	ands	r2, r3
 80022a6:	2a04      	cmp	r2, #4
 80022a8:	d000      	beq.n	80022ac <__aeabi_d2f+0x48>
 80022aa:	3304      	adds	r3, #4
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	04d2      	lsls	r2, r2, #19
 80022b0:	401a      	ands	r2, r3
 80022b2:	d024      	beq.n	80022fe <__aeabi_d2f+0x9a>
 80022b4:	3701      	adds	r7, #1
 80022b6:	b2fa      	uxtb	r2, r7
 80022b8:	2fff      	cmp	r7, #255	; 0xff
 80022ba:	d002      	beq.n	80022c2 <__aeabi_d2f+0x5e>
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	0a58      	lsrs	r0, r3, #9
 80022c0:	e001      	b.n	80022c6 <__aeabi_d2f+0x62>
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	2000      	movs	r0, #0
 80022c6:	0240      	lsls	r0, r0, #9
 80022c8:	05d2      	lsls	r2, r2, #23
 80022ca:	0a40      	lsrs	r0, r0, #9
 80022cc:	07c9      	lsls	r1, r1, #31
 80022ce:	4310      	orrs	r0, r2
 80022d0:	4308      	orrs	r0, r1
 80022d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d4:	4335      	orrs	r5, r6
 80022d6:	2c00      	cmp	r4, #0
 80022d8:	d104      	bne.n	80022e4 <__aeabi_d2f+0x80>
 80022da:	2d00      	cmp	r5, #0
 80022dc:	d10a      	bne.n	80022f4 <__aeabi_d2f+0x90>
 80022de:	2200      	movs	r2, #0
 80022e0:	2000      	movs	r0, #0
 80022e2:	e7f0      	b.n	80022c6 <__aeabi_d2f+0x62>
 80022e4:	2d00      	cmp	r5, #0
 80022e6:	d0ec      	beq.n	80022c2 <__aeabi_d2f+0x5e>
 80022e8:	2080      	movs	r0, #128	; 0x80
 80022ea:	03c0      	lsls	r0, r0, #15
 80022ec:	4330      	orrs	r0, r6
 80022ee:	22ff      	movs	r2, #255	; 0xff
 80022f0:	e7e9      	b.n	80022c6 <__aeabi_d2f+0x62>
 80022f2:	2400      	movs	r4, #0
 80022f4:	2300      	movs	r3, #0
 80022f6:	025b      	lsls	r3, r3, #9
 80022f8:	0a58      	lsrs	r0, r3, #9
 80022fa:	b2e2      	uxtb	r2, r4
 80022fc:	e7e3      	b.n	80022c6 <__aeabi_d2f+0x62>
 80022fe:	08db      	lsrs	r3, r3, #3
 8002300:	003c      	movs	r4, r7
 8002302:	e7f8      	b.n	80022f6 <__aeabi_d2f+0x92>
 8002304:	003b      	movs	r3, r7
 8002306:	3317      	adds	r3, #23
 8002308:	dbf3      	blt.n	80022f2 <__aeabi_d2f+0x8e>
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	4333      	orrs	r3, r6
 8002310:	261e      	movs	r6, #30
 8002312:	1bf6      	subs	r6, r6, r7
 8002314:	2e1f      	cmp	r6, #31
 8002316:	dd14      	ble.n	8002342 <__aeabi_d2f+0xde>
 8002318:	2202      	movs	r2, #2
 800231a:	4252      	negs	r2, r2
 800231c:	1bd7      	subs	r7, r2, r7
 800231e:	001a      	movs	r2, r3
 8002320:	40fa      	lsrs	r2, r7
 8002322:	0017      	movs	r7, r2
 8002324:	2e20      	cmp	r6, #32
 8002326:	d004      	beq.n	8002332 <__aeabi_d2f+0xce>
 8002328:	4a0e      	ldr	r2, [pc, #56]	; (8002364 <__aeabi_d2f+0x100>)
 800232a:	4694      	mov	ip, r2
 800232c:	4464      	add	r4, ip
 800232e:	40a3      	lsls	r3, r4
 8002330:	431d      	orrs	r5, r3
 8002332:	002b      	movs	r3, r5
 8002334:	1e5d      	subs	r5, r3, #1
 8002336:	41ab      	sbcs	r3, r5
 8002338:	2207      	movs	r2, #7
 800233a:	433b      	orrs	r3, r7
 800233c:	401a      	ands	r2, r3
 800233e:	2700      	movs	r7, #0
 8002340:	e7ad      	b.n	800229e <__aeabi_d2f+0x3a>
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <__aeabi_d2f+0x104>)
 8002344:	0028      	movs	r0, r5
 8002346:	18a2      	adds	r2, r4, r2
 8002348:	4095      	lsls	r5, r2
 800234a:	4093      	lsls	r3, r2
 800234c:	1e6c      	subs	r4, r5, #1
 800234e:	41a5      	sbcs	r5, r4
 8002350:	40f0      	lsrs	r0, r6
 8002352:	2207      	movs	r2, #7
 8002354:	432b      	orrs	r3, r5
 8002356:	4303      	orrs	r3, r0
 8002358:	401a      	ands	r2, r3
 800235a:	2700      	movs	r7, #0
 800235c:	e79f      	b.n	800229e <__aeabi_d2f+0x3a>
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	fffffc80 	.word	0xfffffc80
 8002364:	fffffca2 	.word	0xfffffca2
 8002368:	fffffc82 	.word	0xfffffc82

0800236c <__clzsi2>:
 800236c:	211c      	movs	r1, #28
 800236e:	2301      	movs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	4298      	cmp	r0, r3
 8002374:	d301      	bcc.n	800237a <__clzsi2+0xe>
 8002376:	0c00      	lsrs	r0, r0, #16
 8002378:	3910      	subs	r1, #16
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	4298      	cmp	r0, r3
 800237e:	d301      	bcc.n	8002384 <__clzsi2+0x18>
 8002380:	0a00      	lsrs	r0, r0, #8
 8002382:	3908      	subs	r1, #8
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	4298      	cmp	r0, r3
 8002388:	d301      	bcc.n	800238e <__clzsi2+0x22>
 800238a:	0900      	lsrs	r0, r0, #4
 800238c:	3904      	subs	r1, #4
 800238e:	a202      	add	r2, pc, #8	; (adr r2, 8002398 <__clzsi2+0x2c>)
 8002390:	5c10      	ldrb	r0, [r2, r0]
 8002392:	1840      	adds	r0, r0, r1
 8002394:	4770      	bx	lr
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	02020304 	.word	0x02020304
 800239c:	01010101 	.word	0x01010101
	...

080023a8 <__clzdi2>:
 80023a8:	b510      	push	{r4, lr}
 80023aa:	2900      	cmp	r1, #0
 80023ac:	d103      	bne.n	80023b6 <__clzdi2+0xe>
 80023ae:	f7ff ffdd 	bl	800236c <__clzsi2>
 80023b2:	3020      	adds	r0, #32
 80023b4:	e002      	b.n	80023bc <__clzdi2+0x14>
 80023b6:	1c08      	adds	r0, r1, #0
 80023b8:	f7ff ffd8 	bl	800236c <__clzsi2>
 80023bc:	bd10      	pop	{r4, pc}
 80023be:	46c0      	nop			; (mov r8, r8)

080023c0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80023c6:	003b      	movs	r3, r7
 80023c8:	0018      	movs	r0, r3
 80023ca:	2308      	movs	r3, #8
 80023cc:	001a      	movs	r2, r3
 80023ce:	2100      	movs	r1, #0
 80023d0:	f007 ff17 	bl	800a202 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80023d4:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <MX_ADC_Init+0xd0>)
 80023d6:	4a2f      	ldr	r2, [pc, #188]	; (8002494 <MX_ADC_Init+0xd4>)
 80023d8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <MX_ADC_Init+0xd0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <MX_ADC_Init+0xd0>)
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	05d2      	lsls	r2, r2, #23
 80023e6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80023e8:	4b29      	ldr	r3, [pc, #164]	; (8002490 <MX_ADC_Init+0xd0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5 ;
 80023ee:	4b28      	ldr	r3, [pc, #160]	; (8002490 <MX_ADC_Init+0xd0>)
 80023f0:	2202      	movs	r2, #2
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <MX_ADC_Init+0xd0>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <MX_ADC_Init+0xd0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <MX_ADC_Init+0xd0>)
 8002402:	2220      	movs	r2, #32
 8002404:	2101      	movs	r1, #1
 8002406:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <MX_ADC_Init+0xd0>)
 800240a:	2221      	movs	r2, #33	; 0x21
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <MX_ADC_Init+0xd0>)
 8002412:	2200      	movs	r2, #0
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002416:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <MX_ADC_Init+0xd0>)
 8002418:	22c2      	movs	r2, #194	; 0xc2
 800241a:	32ff      	adds	r2, #255	; 0xff
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <MX_ADC_Init+0xd0>)
 8002420:	222c      	movs	r2, #44	; 0x2c
 8002422:	2100      	movs	r1, #0
 8002424:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <MX_ADC_Init+0xd0>)
 8002428:	2204      	movs	r2, #4
 800242a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <MX_ADC_Init+0xd0>)
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <MX_ADC_Init+0xd0>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <MX_ADC_Init+0xd0>)
 800243a:	2200      	movs	r2, #0
 800243c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <MX_ADC_Init+0xd0>)
 8002440:	2200      	movs	r2, #0
 8002442:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <MX_ADC_Init+0xd0>)
 8002446:	0018      	movs	r0, r3
 8002448:	f001 fd20 	bl	8003e8c <HAL_ADC_Init>
 800244c:	0003      	movs	r3, r0
 800244e:	1e5a      	subs	r2, r3, #1
 8002450:	4193      	sbcs	r3, r2
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_ADC_Init+0x9c>
  {
    Error_Handler();
 8002458:	f001 f900 	bl	800365c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800245c:	003b      	movs	r3, r7
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <MX_ADC_Init+0xd8>)
 8002460:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002462:	003b      	movs	r3, r7
 8002464:	2280      	movs	r2, #128	; 0x80
 8002466:	0152      	lsls	r2, r2, #5
 8002468:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800246a:	003a      	movs	r2, r7
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <MX_ADC_Init+0xd0>)
 800246e:	0011      	movs	r1, r2
 8002470:	0018      	movs	r0, r3
 8002472:	f001 fedf 	bl	8004234 <HAL_ADC_ConfigChannel>
 8002476:	0003      	movs	r3, r0
 8002478:	1e5a      	subs	r2, r3, #1
 800247a:	4193      	sbcs	r3, r2
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_ADC_Init+0xc6>
  {
    Error_Handler();
 8002482:	f001 f8eb 	bl	800365c <Error_Handler>
  }

}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b002      	add	sp, #8
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	20000230 	.word	0x20000230
 8002494:	40012400 	.word	0x40012400
 8002498:	08000004 	.word	0x08000004

0800249c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	230c      	movs	r3, #12
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	0018      	movs	r0, r3
 80024aa:	2314      	movs	r3, #20
 80024ac:	001a      	movs	r2, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	f007 fea7 	bl	800a202 <memset>
  if(adcHandle->Instance==ADC1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a15      	ldr	r2, [pc, #84]	; (8002510 <HAL_ADC_MspInit+0x74>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d123      	bne.n	8002506 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_ADC_MspInit+0x78>)
 80024c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_ADC_MspInit+0x78>)
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	0089      	lsls	r1, r1, #2
 80024c8:	430a      	orrs	r2, r1
 80024ca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_ADC_MspInit+0x78>)
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_ADC_MspInit+0x78>)
 80024d2:	2101      	movs	r1, #1
 80024d4:	430a      	orrs	r2, r1
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_ADC_MspInit+0x78>)
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = BAT_Pin;
 80024e4:	210c      	movs	r1, #12
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2204      	movs	r2, #4
 80024ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	2203      	movs	r2, #3
 80024f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_GPIO_Port, &GPIO_InitStruct);
 80024f8:	187a      	adds	r2, r7, r1
 80024fa:	23a0      	movs	r3, #160	; 0xa0
 80024fc:	05db      	lsls	r3, r3, #23
 80024fe:	0011      	movs	r1, r2
 8002500:	0018      	movs	r0, r3
 8002502:	f002 f91b 	bl	800473c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b008      	add	sp, #32
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	40012400 	.word	0x40012400
 8002514:	40021000 	.word	0x40021000

08002518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b08b      	sub	sp, #44	; 0x2c
 800251c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251e:	2414      	movs	r4, #20
 8002520:	193b      	adds	r3, r7, r4
 8002522:	0018      	movs	r0, r3
 8002524:	2314      	movs	r3, #20
 8002526:	001a      	movs	r2, r3
 8002528:	2100      	movs	r1, #0
 800252a:	f007 fe6a 	bl	800a202 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <MX_GPIO_Init+0x1a4>)
 8002530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002532:	4b62      	ldr	r3, [pc, #392]	; (80026bc <MX_GPIO_Init+0x1a4>)
 8002534:	2104      	movs	r1, #4
 8002536:	430a      	orrs	r2, r1
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c
 800253a:	4b60      	ldr	r3, [pc, #384]	; (80026bc <MX_GPIO_Init+0x1a4>)
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	2204      	movs	r2, #4
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <MX_GPIO_Init+0x1a4>)
 8002548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254a:	4b5c      	ldr	r3, [pc, #368]	; (80026bc <MX_GPIO_Init+0x1a4>)
 800254c:	2101      	movs	r1, #1
 800254e:	430a      	orrs	r2, r1
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
 8002552:	4b5a      	ldr	r3, [pc, #360]	; (80026bc <MX_GPIO_Init+0x1a4>)
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	2201      	movs	r2, #1
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	4b57      	ldr	r3, [pc, #348]	; (80026bc <MX_GPIO_Init+0x1a4>)
 8002560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002562:	4b56      	ldr	r3, [pc, #344]	; (80026bc <MX_GPIO_Init+0x1a4>)
 8002564:	2102      	movs	r1, #2
 8002566:	430a      	orrs	r2, r1
 8002568:	62da      	str	r2, [r3, #44]	; 0x2c
 800256a:	4b54      	ldr	r3, [pc, #336]	; (80026bc <MX_GPIO_Init+0x1a4>)
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	2202      	movs	r2, #2
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002576:	4b51      	ldr	r3, [pc, #324]	; (80026bc <MX_GPIO_Init+0x1a4>)
 8002578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257a:	4b50      	ldr	r3, [pc, #320]	; (80026bc <MX_GPIO_Init+0x1a4>)
 800257c:	2108      	movs	r1, #8
 800257e:	430a      	orrs	r2, r1
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
 8002582:	4b4e      	ldr	r3, [pc, #312]	; (80026bc <MX_GPIO_Init+0x1a4>)
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	2208      	movs	r2, #8
 8002588:	4013      	ands	r3, r2
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|BUZZER_Pin|GPIO_PIN_8
 800258e:	494c      	ldr	r1, [pc, #304]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 8002590:	23a0      	movs	r3, #160	; 0xa0
 8002592:	05db      	lsls	r3, r3, #23
 8002594:	2200      	movs	r2, #0
 8002596:	0018      	movs	r0, r3
 8002598:	f002 fa6b 	bl	8004a72 <HAL_GPIO_WritePin>
                          |LED_SIM7600_Comm_Pin|LRWAN_RESRT_Pin|LED_LowVol_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIM7600_PWRKEY_Pin|SIM7600_FLIGHTMODE_Pin|SIM7600_RESET_Pin|SIM7600_ONOFF_Pin
 800259c:	4949      	ldr	r1, [pc, #292]	; (80026c4 <MX_GPIO_Init+0x1ac>)
 800259e:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <MX_GPIO_Init+0x1b0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	0018      	movs	r0, r3
 80025a4:	f002 fa65 	bl	8004a72 <HAL_GPIO_WritePin>
                          |LRWAN_ONOFF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, GPIO_PIN_RESET);
 80025a8:	4b48      	ldr	r3, [pc, #288]	; (80026cc <MX_GPIO_Init+0x1b4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	2140      	movs	r1, #64	; 0x40
 80025ae:	0018      	movs	r0, r3
 80025b0:	f002 fa5f 	bl	8004a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	0192      	lsls	r2, r2, #6
 80025ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025bc:	193b      	adds	r3, r7, r4
 80025be:	4a44      	ldr	r2, [pc, #272]	; (80026d0 <MX_GPIO_Init+0x1b8>)
 80025c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	2201      	movs	r2, #1
 80025c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	4a40      	ldr	r2, [pc, #256]	; (80026cc <MX_GPIO_Init+0x1b4>)
 80025cc:	0019      	movs	r1, r3
 80025ce:	0010      	movs	r0, r2
 80025d0:	f002 f8b4 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_BUTTON_Pin|STOP_BUTTON_Pin;
 80025d4:	193b      	adds	r3, r7, r4
 80025d6:	2203      	movs	r2, #3
 80025d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025da:	193b      	adds	r3, r7, r4
 80025dc:	4a3c      	ldr	r2, [pc, #240]	; (80026d0 <MX_GPIO_Init+0x1b8>)
 80025de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e0:	193b      	adds	r3, r7, r4
 80025e2:	2201      	movs	r2, #1
 80025e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	193a      	adds	r2, r7, r4
 80025e8:	23a0      	movs	r3, #160	; 0xa0
 80025ea:	05db      	lsls	r3, r3, #23
 80025ec:	0011      	movs	r1, r2
 80025ee:	0018      	movs	r0, r3
 80025f0:	f002 f8a4 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|BUZZER_Pin|LED_SIM7600_Comm_Pin
 80025f4:	193b      	adds	r3, r7, r4
 80025f6:	4a37      	ldr	r2, [pc, #220]	; (80026d4 <MX_GPIO_Init+0x1bc>)
 80025f8:	601a      	str	r2, [r3, #0]
                          |LRWAN_RESRT_Pin|LED_LowVol_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	2201      	movs	r2, #1
 80025fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	193b      	adds	r3, r7, r4
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	193b      	adds	r3, r7, r4
 8002608:	2203      	movs	r2, #3
 800260a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	193a      	adds	r2, r7, r4
 800260e:	23a0      	movs	r3, #160	; 0xa0
 8002610:	05db      	lsls	r3, r3, #23
 8002612:	0011      	movs	r1, r2
 8002614:	0018      	movs	r0, r3
 8002616:	f002 f891 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SIM7600_PWRKEY_Pin|SIM7600_FLIGHTMODE_Pin|SIM7600_RESET_Pin|SIM7600_ONOFF_Pin
 800261a:	0021      	movs	r1, r4
 800261c:	187b      	adds	r3, r7, r1
 800261e:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <MX_GPIO_Init+0x1ac>)
 8002620:	601a      	str	r2, [r3, #0]
                          |LRWAN_ONOFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002622:	187b      	adds	r3, r7, r1
 8002624:	2201      	movs	r2, #1
 8002626:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	187b      	adds	r3, r7, r1
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	187b      	adds	r3, r7, r1
 8002630:	2203      	movs	r2, #3
 8002632:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	000c      	movs	r4, r1
 8002636:	187b      	adds	r3, r7, r1
 8002638:	4a23      	ldr	r2, [pc, #140]	; (80026c8 <MX_GPIO_Init+0x1b0>)
 800263a:	0019      	movs	r1, r3
 800263c:	0010      	movs	r0, r2
 800263e:	f002 f87d 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Working_Status_Pin;
 8002642:	0021      	movs	r1, r4
 8002644:	187b      	adds	r3, r7, r1
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264a:	187b      	adds	r3, r7, r1
 800264c:	2201      	movs	r2, #1
 800264e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	187b      	adds	r3, r7, r1
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	187b      	adds	r3, r7, r1
 8002658:	2203      	movs	r2, #3
 800265a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_Working_Status_GPIO_Port, &GPIO_InitStruct);
 800265c:	000c      	movs	r4, r1
 800265e:	187b      	adds	r3, r7, r1
 8002660:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <MX_GPIO_Init+0x1b4>)
 8002662:	0019      	movs	r1, r3
 8002664:	0010      	movs	r0, r2
 8002666:	f002 f869 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800266a:	0021      	movs	r1, r4
 800266c:	187b      	adds	r3, r7, r1
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	0052      	lsls	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002674:	187b      	adds	r3, r7, r1
 8002676:	2201      	movs	r2, #1
 8002678:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2201      	movs	r2, #1
 800267e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	187b      	adds	r3, r7, r1
 8002682:	2203      	movs	r2, #3
 8002684:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	187a      	adds	r2, r7, r1
 8002688:	23a0      	movs	r3, #160	; 0xa0
 800268a:	05db      	lsls	r3, r3, #23
 800268c:	0011      	movs	r1, r2
 800268e:	0018      	movs	r0, r3
 8002690:	f002 f854 	bl	800473c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	2005      	movs	r0, #5
 800269a:	f001 ff95 	bl	80045c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800269e:	2005      	movs	r0, #5
 80026a0:	f001 ffa7 	bl	80045f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	2007      	movs	r0, #7
 80026aa:	f001 ff8d 	bl	80045c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80026ae:	2007      	movs	r0, #7
 80026b0:	f001 ff9f 	bl	80045f2 <HAL_NVIC_EnableIRQ>

}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b00b      	add	sp, #44	; 0x2c
 80026ba:	bd90      	pop	{r4, r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	00000f38 	.word	0x00000f38
 80026c4:	0000c007 	.word	0x0000c007
 80026c8:	50000400 	.word	0x50000400
 80026cc:	50000800 	.word	0x50000800
 80026d0:	10210000 	.word	0x10210000
 80026d4:	00000e38 	.word	0x00000e38

080026d8 <MX_I2C2_Init>:
  }

}
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80026dc:	4b21      	ldr	r3, [pc, #132]	; (8002764 <MX_I2C2_Init+0x8c>)
 80026de:	4a22      	ldr	r2, [pc, #136]	; (8002768 <MX_I2C2_Init+0x90>)
 80026e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F38;
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <MX_I2C2_Init+0x8c>)
 80026e4:	4a21      	ldr	r2, [pc, #132]	; (800276c <MX_I2C2_Init+0x94>)
 80026e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <MX_I2C2_Init+0x8c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <MX_I2C2_Init+0x8c>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <MX_I2C2_Init+0x8c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <MX_I2C2_Init+0x8c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <MX_I2C2_Init+0x8c>)
 8002702:	2200      	movs	r2, #0
 8002704:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002706:	4b17      	ldr	r3, [pc, #92]	; (8002764 <MX_I2C2_Init+0x8c>)
 8002708:	2200      	movs	r2, #0
 800270a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <MX_I2C2_Init+0x8c>)
 800270e:	2200      	movs	r2, #0
 8002710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <MX_I2C2_Init+0x8c>)
 8002714:	0018      	movs	r0, r3
 8002716:	f002 fa01 	bl	8004b1c <HAL_I2C_Init>
 800271a:	0003      	movs	r3, r0
 800271c:	1e5a      	subs	r2, r3, #1
 800271e:	4193      	sbcs	r3, r2
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_I2C2_Init+0x52>
  {
    Error_Handler();
 8002726:	f000 ff99 	bl	800365c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <MX_I2C2_Init+0x8c>)
 800272c:	2100      	movs	r1, #0
 800272e:	0018      	movs	r0, r3
 8002730:	f002 fe24 	bl	800537c <HAL_I2CEx_ConfigAnalogFilter>
 8002734:	0003      	movs	r3, r0
 8002736:	1e5a      	subs	r2, r3, #1
 8002738:	4193      	sbcs	r3, r2
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_I2C2_Init+0x6c>
  {
    Error_Handler();
 8002740:	f000 ff8c 	bl	800365c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <MX_I2C2_Init+0x8c>)
 8002746:	2100      	movs	r1, #0
 8002748:	0018      	movs	r0, r3
 800274a:	f002 fe63 	bl	8005414 <HAL_I2CEx_ConfigDigitalFilter>
 800274e:	0003      	movs	r3, r0
 8002750:	1e5a      	subs	r2, r3, #1
 8002752:	4193      	sbcs	r3, r2
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_I2C2_Init+0x86>
  {
    Error_Handler();
 800275a:	f000 ff7f 	bl	800365c <Error_Handler>
  }

}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	2000028c 	.word	0x2000028c
 8002768:	40005800 	.word	0x40005800
 800276c:	00300f38 	.word	0x00300f38

08002770 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	2314      	movs	r3, #20
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	0018      	movs	r0, r3
 800277e:	2314      	movs	r3, #20
 8002780:	001a      	movs	r2, r3
 8002782:	2100      	movs	r1, #0
 8002784:	f007 fd3d 	bl	800a202 <memset>
  if(i2cHandle->Instance==I2C1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a30      	ldr	r2, [pc, #192]	; (8002850 <HAL_I2C_MspInit+0xe0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12a      	bne.n	80027e8 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_I2C_MspInit+0xe4>)
 8002794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_I2C_MspInit+0xe4>)
 8002798:	2102      	movs	r1, #2
 800279a:	430a      	orrs	r2, r1
 800279c:	62da      	str	r2, [r3, #44]	; 0x2c
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_I2C_MspInit+0xe4>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	2202      	movs	r2, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027aa:	2114      	movs	r1, #20
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	22c0      	movs	r2, #192	; 0xc0
 80027b0:	0092      	lsls	r2, r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	2212      	movs	r2, #18
 80027b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	2201      	movs	r2, #1
 80027be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	2203      	movs	r2, #3
 80027c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	2204      	movs	r2, #4
 80027ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	4a22      	ldr	r2, [pc, #136]	; (8002858 <HAL_I2C_MspInit+0xe8>)
 80027d0:	0019      	movs	r1, r3
 80027d2:	0010      	movs	r0, r2
 80027d4:	f001 ffb2 	bl	800473c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d8:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_I2C_MspInit+0xe4>)
 80027da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_I2C_MspInit+0xe4>)
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	0389      	lsls	r1, r1, #14
 80027e2:	430a      	orrs	r2, r1
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80027e6:	e02e      	b.n	8002846 <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_I2C_MspInit+0xec>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d129      	bne.n	8002846 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_I2C_MspInit+0xe4>)
 80027f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_I2C_MspInit+0xe4>)
 80027f8:	2102      	movs	r1, #2
 80027fa:	430a      	orrs	r2, r1
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_I2C_MspInit+0xe4>)
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	2202      	movs	r2, #2
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800280a:	2114      	movs	r1, #20
 800280c:	187b      	adds	r3, r7, r1
 800280e:	22c0      	movs	r2, #192	; 0xc0
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002814:	187b      	adds	r3, r7, r1
 8002816:	2212      	movs	r2, #18
 8002818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281a:	187b      	adds	r3, r7, r1
 800281c:	2201      	movs	r2, #1
 800281e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	187b      	adds	r3, r7, r1
 8002822:	2203      	movs	r2, #3
 8002824:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002826:	187b      	adds	r3, r7, r1
 8002828:	2206      	movs	r2, #6
 800282a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	187b      	adds	r3, r7, r1
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_I2C_MspInit+0xe8>)
 8002830:	0019      	movs	r1, r3
 8002832:	0010      	movs	r0, r2
 8002834:	f001 ff82 	bl	800473c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_I2C_MspInit+0xe4>)
 800283a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_I2C_MspInit+0xe4>)
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	03c9      	lsls	r1, r1, #15
 8002842:	430a      	orrs	r2, r1
 8002844:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	b00a      	add	sp, #40	; 0x28
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	40005400 	.word	0x40005400
 8002854:	40021000 	.word	0x40021000
 8002858:	50000400 	.word	0x50000400
 800285c:	40005800 	.word	0x40005800

08002860 <HAL_UART_RxCpltCallback>:
int warningEvent = IDLE_M ;
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/*____________________________________Xử lí ngắt UART______________________________________________*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	if ( huart -> Instance == USART1 ) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_UART_RxCpltCallback+0x34>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d103      	bne.n	800287a <HAL_UART_RxCpltCallback+0x1a>
		SIM7600E.IRQhandler() ;
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_UART_RxCpltCallback+0x38>)
 8002874:	0018      	movs	r0, r3
 8002876:	f005 ffb9 	bl	80087ec <_ZN7sim7x0010IRQhandlerEv>
	}
	if(huart->Instance == USART4){
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a07      	ldr	r2, [pc, #28]	; (800289c <HAL_UART_RxCpltCallback+0x3c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d103      	bne.n	800288c <HAL_UART_RxCpltCallback+0x2c>
		LRWAN.IRQhandler() ;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_UART_RxCpltCallback+0x40>)
 8002886:	0018      	movs	r0, r3
 8002888:	f005 fcb6 	bl	80081f8 <_ZN5lrwan10IRQhandlerEv>
	}
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40013800 	.word	0x40013800
 8002898:	200002d8 	.word	0x200002d8
 800289c:	40004c00 	.word	0x40004c00
 80028a0:	200012a8 	.word	0x200012a8

080028a4 <HAL_GPIO_EXTI_Callback>:


/*____________________________________Xử lí ngắt của các nút nhấn______________________________________________*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	0002      	movs	r2, r0
 80028ac:	1dbb      	adds	r3, r7, #6
 80028ae:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin==WARNING_BUTTON_Pin){
 80028b0:	1dbb      	adds	r3, r7, #6
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d150      	bne.n	800295a <HAL_GPIO_EXTI_Callback+0xb6>
		// Vì vi điều khiển mới thức dậy và systick đã dừng trước lúc ngủ nên phải config lại systick
		SystemClock_Config ();
 80028b8:	f000 fe4a 	bl	8003550 <_Z18SystemClock_Configv>
		HAL_ResumeTick();
 80028bc:	f001 fad8 	bl	8003e70 <HAL_ResumeTick>

		if((stopProcess == 0 && initFlag == true)){
 80028c0:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x168>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <HAL_GPIO_EXTI_Callback+0x3a>
 80028c8:	4b51      	ldr	r3, [pc, #324]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x16c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_EXTI_Callback+0x3a>
			waitFlag = false;
 80028d0:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x170>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
			warningProcess=BTN_START_WARNING_PRESSED;
 80028d6:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x174>)
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e008      	b.n	80028f0 <HAL_GPIO_EXTI_Callback+0x4c>
//			SSD1306_Putstring(4, 5, (char*)"SAP TOI : CANH BAO", &Font_5x7, SSD1306_COLOR_WHITE);
		}else {
			SSD1306_Putstring(4, 5, (char*)"KHONG AN CANH BAO", &Font_5x7, SSD1306_COLOR_WHITE);
 80028de:	494f      	ldr	r1, [pc, #316]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x178>)
 80028e0:	4a4f      	ldr	r2, [pc, #316]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x17c>)
 80028e2:	2301      	movs	r3, #1
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	000b      	movs	r3, r1
 80028e8:	2105      	movs	r1, #5
 80028ea:	2004      	movs	r0, #4
 80028ec:	f007 f8d2 	bl	8009a94 <SSD1306_Putstring>
		}


		for(uint16_t i=0;i<10000;i++);
 80028f0:	230e      	movs	r3, #14
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2200      	movs	r2, #0
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	230e      	movs	r3, #14
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	4a49      	ldr	r2, [pc, #292]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x180>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d806      	bhi.n	8002912 <HAL_GPIO_EXTI_Callback+0x6e>
 8002904:	210e      	movs	r1, #14
 8002906:	187b      	adds	r3, r7, r1
 8002908:	881a      	ldrh	r2, [r3, #0]
 800290a:	187b      	adds	r3, r7, r1
 800290c:	3201      	adds	r2, #1
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	e7f2      	b.n	80028f8 <HAL_GPIO_EXTI_Callback+0x54>
		while(HAL_GPIO_ReadPin(WARNING_BUTTON_GPIO_Port, WARNING_BUTTON_Pin)==0);
 8002912:	23a0      	movs	r3, #160	; 0xa0
 8002914:	05db      	lsls	r3, r3, #23
 8002916:	2101      	movs	r1, #1
 8002918:	0018      	movs	r0, r3
 800291a:	f002 f88d 	bl	8004a38 <HAL_GPIO_ReadPin>
 800291e:	0003      	movs	r3, r0
 8002920:	425a      	negs	r2, r3
 8002922:	4153      	adcs	r3, r2
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d000      	beq.n	800292c <HAL_GPIO_EXTI_Callback+0x88>
 800292a:	e7f2      	b.n	8002912 <HAL_GPIO_EXTI_Callback+0x6e>
		for(uint16_t i=0;i<10000;i++);
 800292c:	230c      	movs	r3, #12
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	2200      	movs	r2, #0
 8002932:	801a      	strh	r2, [r3, #0]
 8002934:	230c      	movs	r3, #12
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	4a3a      	ldr	r2, [pc, #232]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x180>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d806      	bhi.n	800294e <HAL_GPIO_EXTI_Callback+0xaa>
 8002940:	210c      	movs	r1, #12
 8002942:	187b      	adds	r3, r7, r1
 8002944:	881a      	ldrh	r2, [r3, #0]
 8002946:	187b      	adds	r3, r7, r1
 8002948:	3201      	adds	r2, #1
 800294a:	801a      	strh	r2, [r3, #0]
 800294c:	e7f2      	b.n	8002934 <HAL_GPIO_EXTI_Callback+0x90>
		EXTI->PR |= WARNING_BUTTON_Pin;
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x184>)
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x184>)
 8002954:	2101      	movs	r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	615a      	str	r2, [r3, #20]
	}
	if(GPIO_Pin==STOP_BUTTON_Pin){
 800295a:	1dbb      	adds	r3, r7, #6
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d150      	bne.n	8002a04 <HAL_GPIO_EXTI_Callback+0x160>
		// Vì vi điều khiển mới thức dậy và systick đã dừng trước lúc ngủ nên phải config lại systick
		SystemClock_Config ();
 8002962:	f000 fdf5 	bl	8003550 <_Z18SystemClock_Configv>
		HAL_ResumeTick();
 8002966:	f001 fa83 	bl	8003e70 <HAL_ResumeTick>

		if((warningProcess==0 && initFlag == true)){
 800296a:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x174>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10a      	bne.n	8002988 <HAL_GPIO_EXTI_Callback+0xe4>
 8002972:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <HAL_GPIO_EXTI_Callback+0xe4>
			waitFlag = false;
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x170>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
			stopProcess =BTN_STOP_WARNING_PRESSED;
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x168>)
 8002982:	2202      	movs	r2, #2
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e008      	b.n	800299a <HAL_GPIO_EXTI_Callback+0xf6>
//			SSD1306_Putstring(4, 5, (char*)"SAP TOI : DUNG ", &Font_5x7, SSD1306_COLOR_WHITE);
		}else {
			SSD1306_Putstring(4, 5, (char*)"KHONG DUNG CANH BAO", &Font_5x7, SSD1306_COLOR_WHITE);
 8002988:	4924      	ldr	r1, [pc, #144]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x178>)
 800298a:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x188>)
 800298c:	2301      	movs	r3, #1
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	000b      	movs	r3, r1
 8002992:	2105      	movs	r1, #5
 8002994:	2004      	movs	r0, #4
 8002996:	f007 f87d 	bl	8009a94 <SSD1306_Putstring>
		}

		for(uint16_t i=0;i<10000;i++);
 800299a:	230a      	movs	r3, #10
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	2200      	movs	r2, #0
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	230a      	movs	r3, #10
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x180>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d806      	bhi.n	80029bc <HAL_GPIO_EXTI_Callback+0x118>
 80029ae:	210a      	movs	r1, #10
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	881a      	ldrh	r2, [r3, #0]
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	3201      	adds	r2, #1
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	e7f2      	b.n	80029a2 <HAL_GPIO_EXTI_Callback+0xfe>
		while(HAL_GPIO_ReadPin(STOP_BUTTON_GPIO_Port, STOP_BUTTON_Pin)==0);
 80029bc:	23a0      	movs	r3, #160	; 0xa0
 80029be:	05db      	lsls	r3, r3, #23
 80029c0:	2102      	movs	r1, #2
 80029c2:	0018      	movs	r0, r3
 80029c4:	f002 f838 	bl	8004a38 <HAL_GPIO_ReadPin>
 80029c8:	0003      	movs	r3, r0
 80029ca:	425a      	negs	r2, r3
 80029cc:	4153      	adcs	r3, r2
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d000      	beq.n	80029d6 <HAL_GPIO_EXTI_Callback+0x132>
 80029d4:	e7f2      	b.n	80029bc <HAL_GPIO_EXTI_Callback+0x118>
		for(uint16_t i=0;i<10000;i++);
 80029d6:	2308      	movs	r3, #8
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	2200      	movs	r2, #0
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	2308      	movs	r3, #8
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x180>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d806      	bhi.n	80029f8 <HAL_GPIO_EXTI_Callback+0x154>
 80029ea:	2108      	movs	r1, #8
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	881a      	ldrh	r2, [r3, #0]
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	3201      	adds	r2, #1
 80029f4:	801a      	strh	r2, [r3, #0]
 80029f6:	e7f2      	b.n	80029de <HAL_GPIO_EXTI_Callback+0x13a>
		EXTI->PR |= STOP_BUTTON_Pin;
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x184>)
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x184>)
 80029fe:	2102      	movs	r1, #2
 8002a00:	430a      	orrs	r2, r1
 8002a02:	615a      	str	r2, [r3, #20]
	}
}
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b004      	add	sp, #16
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20001aa5 	.word	0x20001aa5
 8002a10:	20001aa7 	.word	0x20001aa7
 8002a14:	20001aa8 	.word	0x20001aa8
 8002a18:	20001aa4 	.word	0x20001aa4
 8002a1c:	2000003c 	.word	0x2000003c
 8002a20:	0800de00 	.word	0x0800de00
 8002a24:	0000270f 	.word	0x0000270f
 8002a28:	40010400 	.word	0x40010400
 8002a2c:	0800de14 	.word	0x0800de14

08002a30 <_Z7readPinv>:
/* USER CODE BEGIN 0 */


/*____________________________________Đọc dữ liệu Pin____________________________________________*/

char* readPin() {
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0

	 static char bat[3];
	 uint16_t adc;
	 float battery;
	 HAL_ADC_Start(&hadc);
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <_Z7readPinv+0x6c>)
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f001 fb9b 	bl	8004174 <HAL_ADC_Start>
	 adc=HAL_ADC_GetValue(&hadc);
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <_Z7readPinv+0x6c>)
 8002a40:	0018      	movs	r0, r3
 8002a42:	f001 fbeb 	bl	800421c <HAL_ADC_GetValue>
 8002a46:	0002      	movs	r2, r0
 8002a48:	1dbb      	adds	r3, r7, #6
 8002a4a:	801a      	strh	r2, [r3, #0]
	 battery=((adc/4095.0)*100);
 8002a4c:	1dbb      	adds	r3, r7, #6
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7ff fb9b 	bl	800218c <__aeabi_i2d>
 8002a56:	2200      	movs	r2, #0
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <_Z7readPinv+0x70>)
 8002a5a:	f7fe f981 	bl	8000d60 <__aeabi_ddiv>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	000c      	movs	r4, r1
 8002a62:	0018      	movs	r0, r3
 8002a64:	0021      	movs	r1, r4
 8002a66:	2200      	movs	r2, #0
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <_Z7readPinv+0x74>)
 8002a6a:	f7fe fd83 	bl	8001574 <__aeabi_dmul>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	000c      	movs	r4, r1
 8002a72:	0018      	movs	r0, r3
 8002a74:	0021      	movs	r1, r4
 8002a76:	f7ff fbf5 	bl	8002264 <__aeabi_d2f>
 8002a7a:	1c03      	adds	r3, r0, #0
 8002a7c:	603b      	str	r3, [r7, #0]
	 sprintf(bat,"%d",(int)battery);
 8002a7e:	6838      	ldr	r0, [r7, #0]
 8002a80:	f7fd fe32 	bl	80006e8 <__aeabi_f2iz>
 8002a84:	0002      	movs	r2, r0
 8002a86:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <_Z7readPinv+0x78>)
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <_Z7readPinv+0x7c>)
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f008 fadc 	bl	800b048 <siprintf>
	 return bat;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <_Z7readPinv+0x7c>)
}
 8002a92:	0018      	movs	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b003      	add	sp, #12
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	20000230 	.word	0x20000230
 8002aa0:	40affe00 	.word	0x40affe00
 8002aa4:	40590000 	.word	0x40590000
 8002aa8:	0800de28 	.word	0x0800de28
 8002aac:	20001abc 	.word	0x20001abc

08002ab0 <_Z9preHeaderv>:


/*_______________________Hiển thị cột sóng viễn thông, biểu tượng lrwan, thời lượng pin ______________________*/
void preHeader(){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b090      	sub	sp, #64	; 0x40
 8002ab4:	af02      	add	r7, sp, #8
	SSD1306_Clear_Header();
 8002ab6:	f007 fa50 	bl	8009f5a <SSD1306_Clear_Header>
	SSD1306_DrawBitmap(0, 0, simSignal, 15, 15, SSD1306_COLOR_WHITE );
 8002aba:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <_Z9preHeaderv+0xc8>)
 8002abc:	2301      	movs	r3, #1
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	230f      	movs	r3, #15
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f006 fc65 	bl	8009398 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8002ace:	f006 fdcf 	bl	8009670 <SSD1306_UpdateScreen>
	// Hiển thị Pin
	char bat[50]="";
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	222e      	movs	r2, #46	; 0x2e
 8002adc:	2100      	movs	r1, #0
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f007 fb8f 	bl	800a202 <memset>
	strcat( bat, readPin());
 8002ae4:	f7ff ffa4 	bl	8002a30 <_Z7readPinv>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	0011      	movs	r1, r2
 8002aee:	0018      	movs	r0, r3
 8002af0:	f008 faca 	bl	800b088 <strcat>

	if (atoi( bat )>20){
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	0018      	movs	r0, r3
 8002af8:	f007 fb40 	bl	800a17c <atoi>
 8002afc:	0003      	movs	r3, r0
 8002afe:	2201      	movs	r2, #1
 8002b00:	2b14      	cmp	r3, #20
 8002b02:	dc01      	bgt.n	8002b08 <_Z9preHeaderv+0x58>
 8002b04:	2300      	movs	r3, #0
 8002b06:	1c1a      	adds	r2, r3, #0
 8002b08:	b2d3      	uxtb	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <_Z9preHeaderv+0x74>
	SSD1306_DrawBitmap( 90, 1, fullBat, 14, 15, SSD1306_COLOR_WHITE );
 8002b0e:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <_Z9preHeaderv+0xcc>)
 8002b10:	2301      	movs	r3, #1
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	230f      	movs	r3, #15
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	230e      	movs	r3, #14
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	205a      	movs	r0, #90	; 0x5a
 8002b1e:	f006 fc3b 	bl	8009398 <SSD1306_DrawBitmap>
 8002b22:	e009      	b.n	8002b38 <_Z9preHeaderv+0x88>
	}else {
	SSD1306_DrawBitmap( 90, 1, lowBat, 9, 15, SSD1306_COLOR_WHITE );
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <_Z9preHeaderv+0xd0>)
 8002b26:	2301      	movs	r3, #1
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	230f      	movs	r3, #15
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2309      	movs	r3, #9
 8002b30:	2101      	movs	r1, #1
 8002b32:	205a      	movs	r0, #90	; 0x5a
 8002b34:	f006 fc30 	bl	8009398 <SSD1306_DrawBitmap>
	}

	strcat(bat,"%");
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7fd fae4 	bl	8000108 <strlen>
 8002b40:	0003      	movs	r3, r0
 8002b42:	001a      	movs	r2, r3
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	189a      	adds	r2, r3, r2
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <_Z9preHeaderv+0xd4>)
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	2302      	movs	r3, #2
 8002b50:	001a      	movs	r2, r3
 8002b52:	f007 fb4d 	bl	800a1f0 <memcpy>
	SSD1306_GotoXY ( 103, 5);
 8002b56:	2105      	movs	r1, #5
 8002b58:	2067      	movs	r0, #103	; 0x67
 8002b5a:	f006 fe45 	bl	80097e8 <SSD1306_GotoXY>
	SSD1306_Puts ( (char*)bat, &Font_5x7, SSD1306_COLOR_WHITE );
 8002b5e:	490a      	ldr	r1, [pc, #40]	; (8002b88 <_Z9preHeaderv+0xd8>)
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2201      	movs	r2, #1
 8002b64:	0018      	movs	r0, r3
 8002b66:	f006 ff6b 	bl	8009a40 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002b6a:	f006 fd81 	bl	8009670 <SSD1306_UpdateScreen>

	// Hiển thị cây cột sóng

//	SSD1306_DrawBitmap( 40, 1, signal, 23, 15, SSD1306_COLOR_WHITE );
//	SSD1306_UpdateScreen();
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b00e      	add	sp, #56	; 0x38
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	0800eacc 	.word	0x0800eacc
 8002b7c:	0800ea8c 	.word	0x0800ea8c
 8002b80:	0800eaac 	.word	0x0800eaac
 8002b84:	0800de2c 	.word	0x0800de2c
 8002b88:	2000003c 	.word	0x2000003c

08002b8c <_Z13displayHeaderv>:

/*_______________________ Hiển thị sóng viễn thông, tình trạng kết nối lrwan, thời lượng pin __________________________*/
void displayHeader(){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b090      	sub	sp, #64	; 0x40
 8002b90:	af02      	add	r7, sp, #8
	SSD1306_Clear_Header();
 8002b92:	f007 f9e2 	bl	8009f5a <SSD1306_Clear_Header>
	// Hiển thị cột sóng

	SSD1306_DrawBitmap(0, 0, simSignal, 15, 15, SSD1306_COLOR_WHITE );
 8002b96:	4a59      	ldr	r2, [pc, #356]	; (8002cfc <_Z13displayHeaderv+0x170>)
 8002b98:	2301      	movs	r3, #1
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	230f      	movs	r3, #15
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f006 fbf7 	bl	8009398 <SSD1306_DrawBitmap>
	if ( SIM7600E.getIntCSQ() > 6 ){
 8002baa:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <_Z13displayHeaderv+0x174>)
 8002bac:	0018      	movs	r0, r3
 8002bae:	f006 fa49 	bl	8009044 <_ZN7sim7x009getIntCSQEv>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	dc01      	bgt.n	8002bbe <_Z13displayHeaderv+0x32>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	1c1a      	adds	r2, r3, #0
 8002bbe:	b2d3      	uxtb	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <_Z13displayHeaderv+0x48>
		SSD1306_DrawFilledRectangle(13, 10, 2, 5, SSD1306_COLOR_WHITE );
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2305      	movs	r3, #5
 8002bca:	2202      	movs	r2, #2
 8002bcc:	210a      	movs	r1, #10
 8002bce:	200d      	movs	r0, #13
 8002bd0:	f007 f93e 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	}
	if ( SIM7600E.getIntCSQ() > 12 ){
 8002bd4:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <_Z13displayHeaderv+0x174>)
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f006 fa34 	bl	8009044 <_ZN7sim7x009getIntCSQEv>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	2201      	movs	r2, #1
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	dc01      	bgt.n	8002be8 <_Z13displayHeaderv+0x5c>
 8002be4:	2300      	movs	r3, #0
 8002be6:	1c1a      	adds	r2, r3, #0
 8002be8:	b2d3      	uxtb	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <_Z13displayHeaderv+0x72>
		SSD1306_DrawFilledRectangle(17, 7, 2, 8, SSD1306_COLOR_WHITE );
 8002bee:	2301      	movs	r3, #1
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	2107      	movs	r1, #7
 8002bf8:	2011      	movs	r0, #17
 8002bfa:	f007 f929 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	}
	if ( SIM7600E.getIntCSQ() > 18){
 8002bfe:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <_Z13displayHeaderv+0x174>)
 8002c00:	0018      	movs	r0, r3
 8002c02:	f006 fa1f 	bl	8009044 <_ZN7sim7x009getIntCSQEv>
 8002c06:	0003      	movs	r3, r0
 8002c08:	2201      	movs	r2, #1
 8002c0a:	2b12      	cmp	r3, #18
 8002c0c:	dc01      	bgt.n	8002c12 <_Z13displayHeaderv+0x86>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	1c1a      	adds	r2, r3, #0
 8002c12:	b2d3      	uxtb	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <_Z13displayHeaderv+0x9c>
		SSD1306_DrawFilledRectangle(21, 4, 2, 11, SSD1306_COLOR_WHITE );
 8002c18:	2301      	movs	r3, #1
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	230b      	movs	r3, #11
 8002c1e:	2202      	movs	r2, #2
 8002c20:	2104      	movs	r1, #4
 8002c22:	2015      	movs	r0, #21
 8002c24:	f007 f914 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	}
	if ( SIM7600E.getIntCSQ() > 24){
 8002c28:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <_Z13displayHeaderv+0x174>)
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f006 fa0a 	bl	8009044 <_ZN7sim7x009getIntCSQEv>
 8002c30:	0003      	movs	r3, r0
 8002c32:	2201      	movs	r2, #1
 8002c34:	2b18      	cmp	r3, #24
 8002c36:	dc01      	bgt.n	8002c3c <_Z13displayHeaderv+0xb0>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	1c1a      	adds	r2, r3, #0
 8002c3c:	b2d3      	uxtb	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <_Z13displayHeaderv+0xc6>
		SSD1306_DrawFilledRectangle(25, 1, 2, 14, SSD1306_COLOR_WHITE );
 8002c42:	2301      	movs	r3, #1
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	230e      	movs	r3, #14
 8002c48:	2202      	movs	r2, #2
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	2019      	movs	r0, #25
 8002c4e:	f007 f8ff 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	}
	SSD1306_UpdateScreen();
 8002c52:	f006 fd0d 	bl	8009670 <SSD1306_UpdateScreen>
	// Hiển thị Pin
	char bat[50]="";
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	222e      	movs	r2, #46	; 0x2e
 8002c60:	2100      	movs	r1, #0
 8002c62:	0018      	movs	r0, r3
 8002c64:	f007 facd 	bl	800a202 <memset>
	strcat( bat, readPin());
 8002c68:	f7ff fee2 	bl	8002a30 <_Z7readPinv>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	0011      	movs	r1, r2
 8002c72:	0018      	movs	r0, r3
 8002c74:	f008 fa08 	bl	800b088 <strcat>

	if (atoi( bat )>20){
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f007 fa7e 	bl	800a17c <atoi>
 8002c80:	0003      	movs	r3, r0
 8002c82:	2201      	movs	r2, #1
 8002c84:	2b14      	cmp	r3, #20
 8002c86:	dc01      	bgt.n	8002c8c <_Z13displayHeaderv+0x100>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	1c1a      	adds	r2, r3, #0
 8002c8c:	b2d3      	uxtb	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <_Z13displayHeaderv+0x11c>
	SSD1306_DrawBitmap( 90, 1, fullBat, 14, 15, SSD1306_COLOR_WHITE );
 8002c92:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <_Z13displayHeaderv+0x178>)
 8002c94:	2301      	movs	r3, #1
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	230f      	movs	r3, #15
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	230e      	movs	r3, #14
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	205a      	movs	r0, #90	; 0x5a
 8002ca2:	f006 fb79 	bl	8009398 <SSD1306_DrawBitmap>
 8002ca6:	e009      	b.n	8002cbc <_Z13displayHeaderv+0x130>
	}else {
	SSD1306_DrawBitmap( 90, 1, lowBat, 9, 15, SSD1306_COLOR_WHITE );
 8002ca8:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <_Z13displayHeaderv+0x17c>)
 8002caa:	2301      	movs	r3, #1
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	230f      	movs	r3, #15
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	2309      	movs	r3, #9
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	205a      	movs	r0, #90	; 0x5a
 8002cb8:	f006 fb6e 	bl	8009398 <SSD1306_DrawBitmap>
//	SIM7600E.sendSMS(LOW_BAT_PHONE_NUMBER_1, LOW_BAT_MSG);
	}

	strcat(bat,"%");
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f7fd fa22 	bl	8000108 <strlen>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	189a      	adds	r2, r3, r2
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <_Z13displayHeaderv+0x180>)
 8002cce:	0010      	movs	r0, r2
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	f007 fa8b 	bl	800a1f0 <memcpy>
	SSD1306_GotoXY ( 103, 5);
 8002cda:	2105      	movs	r1, #5
 8002cdc:	2067      	movs	r0, #103	; 0x67
 8002cde:	f006 fd83 	bl	80097e8 <SSD1306_GotoXY>
	SSD1306_Puts ( (char*)bat, &Font_5x7, SSD1306_COLOR_WHITE );
 8002ce2:	490b      	ldr	r1, [pc, #44]	; (8002d10 <_Z13displayHeaderv+0x184>)
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f006 fea9 	bl	8009a40 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002cee:	f006 fcbf 	bl	8009670 <SSD1306_UpdateScreen>

	// Hiển thị cây cột sóng

//	SSD1306_DrawBitmap( 40, 1, signal, 23, 15, SSD1306_COLOR_WHITE );
//	SSD1306_UpdateScreen();
}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b00e      	add	sp, #56	; 0x38
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	0800eacc 	.word	0x0800eacc
 8002d00:	200002d8 	.word	0x200002d8
 8002d04:	0800ea8c 	.word	0x0800ea8c
 8002d08:	0800eaac 	.word	0x0800eaac
 8002d0c:	0800de2c 	.word	0x0800de2c
 8002d10:	2000003c 	.word	0x2000003c

08002d14 <_Z18simCheckingRespondPKc>:


/*____________________Kiểm tra sim đã hoàn thành cảnh báo chưa, nếu chưa thì cảnh báo bằng lrwan_______________________*/

bool simCheckingRespond(const char* resMsg){
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

	if ( SIM7600E.checkingRespond( resMsg, 20000) == 1 ){
 8002d1c:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <_Z18simCheckingRespondPKc+0x54>)
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <_Z18simCheckingRespondPKc+0x58>)
 8002d22:	0018      	movs	r0, r3
 8002d24:	f006 f804 	bl	8008d30 <_ZN7sim7x0015checkingRespondEPKcm>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	425a      	negs	r2, r3
 8002d2e:	4153      	adcs	r3, r2
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <_Z18simCheckingRespondPKc+0x32>
	   SYSTEM.println( "OK" );
 8002d36:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <_Z18simCheckingRespondPKc+0x5c>)
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <_Z18simCheckingRespondPKc+0x60>)
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f005 fa17 	bl	8008170 <_ZN5debug7printlnEPKc>
	   return 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00b      	b.n	8002d5e <_Z18simCheckingRespondPKc+0x4a>
	}else {

		SYSTEM.println("Button was not responded by SIM");
 8002d46:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <_Z18simCheckingRespondPKc+0x64>)
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <_Z18simCheckingRespondPKc+0x60>)
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f005 fa0f 	bl	8008170 <_ZN5debug7printlnEPKc>
		HAL_Delay(1000);
 8002d52:	23fa      	movs	r3, #250	; 0xfa
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	0018      	movs	r0, r3
 8002d58:	f001 f868 	bl	8003e2c <HAL_Delay>
		return 0;
 8002d5c:	2300      	movs	r3, #0
	}
	return 0 ;
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	00004e20 	.word	0x00004e20
 8002d6c:	200002d8 	.word	0x200002d8
 8002d70:	0800de30 	.word	0x0800de30
 8002d74:	200012a4 	.word	0x200012a4
 8002d78:	0800de34 	.word	0x0800de34

08002d7c <_Z27lrwanSendAndCheckingRespondPKcS0_>:


/*______________________Kiểm tra lrwan đã hoàn thành cảnh báo chưa__________________________*/
//
int lrwanSendAndCheckingRespond(const char* sms, const char* expectAnswer ){
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b093      	sub	sp, #76	; 0x4c
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]

	char payload[50]={0};
 8002d86:	240c      	movs	r4, #12
 8002d88:	193b      	adds	r3, r7, r4
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	2332      	movs	r3, #50	; 0x32
 8002d8e:	001a      	movs	r2, r3
 8002d90:	2100      	movs	r1, #0
 8002d92:	f007 fa36 	bl	800a202 <memset>
	strcat(payload,sms);
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	193b      	adds	r3, r7, r4
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f008 f973 	bl	800b088 <strcat>
	strcat(payload,"\r");
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	0018      	movs	r0, r3
 8002da6:	f7fd f9af 	bl	8000108 <strlen>
 8002daa:	0003      	movs	r3, r0
 8002dac:	001a      	movs	r2, r3
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	189a      	adds	r2, r3, r2
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <_Z27lrwanSendAndCheckingRespondPKcS0_+0x80>)
 8002db4:	0010      	movs	r0, r2
 8002db6:	0019      	movs	r1, r3
 8002db8:	2302      	movs	r3, #2
 8002dba:	001a      	movs	r2, r3
 8002dbc:	f007 fa18 	bl	800a1f0 <memcpy>
	// setup payload dữ liệu gửi lora
	if(LRWAN.sendData(sms,expectAnswer,15000,3)!=0){
 8002dc0:	4c0f      	ldr	r4, [pc, #60]	; (8002e00 <_Z27lrwanSendAndCheckingRespondPKcS0_+0x84>)
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	480f      	ldr	r0, [pc, #60]	; (8002e04 <_Z27lrwanSendAndCheckingRespondPKcS0_+0x88>)
 8002dc8:	2303      	movs	r3, #3
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	0023      	movs	r3, r4
 8002dce:	f005 fc6f 	bl	80086b0 <_ZN5lrwan8sendDataEPKcS1_ii>
 8002dd2:	1e03      	subs	r3, r0, #0
 8002dd4:	d001      	beq.n	8002dda <_Z27lrwanSendAndCheckingRespondPKcS0_+0x5e>
		return 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00b      	b.n	8002df2 <_Z27lrwanSendAndCheckingRespondPKcS0_+0x76>
	}else{
		HAL_Delay(2000);
 8002dda:	23fa      	movs	r3, #250	; 0xfa
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	0018      	movs	r0, r3
 8002de0:	f001 f824 	bl	8003e2c <HAL_Delay>
		SYSTEM.println("!!!!Failed to send by LORA!!!\n");
 8002de4:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <_Z27lrwanSendAndCheckingRespondPKcS0_+0x8c>)
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <_Z27lrwanSendAndCheckingRespondPKcS0_+0x90>)
 8002de8:	0011      	movs	r1, r2
 8002dea:	0018      	movs	r0, r3
 8002dec:	f005 f9c0 	bl	8008170 <_ZN5debug7printlnEPKc>
		return 0;
 8002df0:	2300      	movs	r3, #0
	}
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b011      	add	sp, #68	; 0x44
 8002df8:	bd90      	pop	{r4, r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	0800de54 	.word	0x0800de54
 8002e00:	00003a98 	.word	0x00003a98
 8002e04:	200012a8 	.word	0x200012a8
 8002e08:	0800de58 	.word	0x0800de58
 8002e0c:	200012a4 	.word	0x200012a4

08002e10 <_Z17prepareForProcessv>:

}


/*_______________________________Ngắt nguồn SIM, AT MEGA____________________________________*/
void prepareForProcess(){
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LRWAN_ONOFF_GPIO_Port, LRWAN_ONOFF_Pin, GPIO_PIN_SET);
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	480b      	ldr	r0, [pc, #44]	; (8002e48 <_Z17prepareForProcessv+0x38>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	f001 fe28 	bl	8004a72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SIM7600_ONOFF_GPIO_Port, SIM7600_ONOFF_Pin, GPIO_PIN_SET);
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	01db      	lsls	r3, r3, #7
 8002e26:	4808      	ldr	r0, [pc, #32]	; (8002e48 <_Z17prepareForProcessv+0x38>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	f001 fe21 	bl	8004a72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LRWAN_RESRT_GPIO_Port,LRWAN_RESRT_Pin, GPIO_PIN_SET);
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	00d9      	lsls	r1, r3, #3
 8002e34:	23a0      	movs	r3, #160	; 0xa0
 8002e36:	05db      	lsls	r3, r3, #23
 8002e38:	2201      	movs	r2, #1
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f001 fe19 	bl	8004a72 <HAL_GPIO_WritePin>

}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	50000400 	.word	0x50000400

08002e4c <_Z18displayDoneWarningb>:

/*____________________________________Khởi tạo các thông số, Sim, lrwan, oled_____________________________________*/


void displayDoneWarning(bool doneWarningFlag){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	0002      	movs	r2, r0
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	701a      	strb	r2, [r3, #0]
	SSD1306_Clear();
 8002e58:	f007 f865 	bl	8009f26 <SSD1306_Clear>
	SSD1306_DrawBitmap(2, 16, logo, 128, 35, SSD1306_COLOR_WHITE);
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <_Z18displayDoneWarningb+0x84>)
 8002e5e:	2301      	movs	r3, #1
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	2323      	movs	r3, #35	; 0x23
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	2110      	movs	r1, #16
 8002e6a:	2002      	movs	r0, #2
 8002e6c:	f006 fa94 	bl	8009398 <SSD1306_DrawBitmap>
	displayHeader();
 8002e70:	f7ff fe8c 	bl	8002b8c <_Z13displayHeaderv>
	while(waitFlag == true){
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <_Z18displayDoneWarningb+0x88>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d023      	beq.n	8002ec4 <_Z18displayDoneWarningb+0x78>
		HAL_Delay(1000);
 8002e7c:	23fa      	movs	r3, #250	; 0xfa
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 ffd3 	bl	8003e2c <HAL_Delay>
		if(doneWarningFlag == true){
 8002e86:	1dfb      	adds	r3, r7, #7
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <_Z18displayDoneWarningb+0x56>
			SSD1306_Putstring(4,10, (char*)"HOAN THANH CANH BAO", &Font_5x7, SSD1306_COLOR_WHITE);
 8002e8e:	4912      	ldr	r1, [pc, #72]	; (8002ed8 <_Z18displayDoneWarningb+0x8c>)
 8002e90:	4a12      	ldr	r2, [pc, #72]	; (8002edc <_Z18displayDoneWarningb+0x90>)
 8002e92:	2301      	movs	r3, #1
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	000b      	movs	r3, r1
 8002e98:	210a      	movs	r1, #10
 8002e9a:	2004      	movs	r0, #4
 8002e9c:	f006 fdfa 	bl	8009a94 <SSD1306_Putstring>
 8002ea0:	e008      	b.n	8002eb4 <_Z18displayDoneWarningb+0x68>
		}else{
			SSD1306_Putstring(4,8, (char*)"XIN VUI LONG THU LAI", &Font_5x7, SSD1306_COLOR_WHITE);
 8002ea2:	490d      	ldr	r1, [pc, #52]	; (8002ed8 <_Z18displayDoneWarningb+0x8c>)
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <_Z18displayDoneWarningb+0x94>)
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	000b      	movs	r3, r1
 8002eac:	2108      	movs	r1, #8
 8002eae:	2004      	movs	r0, #4
 8002eb0:	f006 fdf0 	bl	8009a94 <SSD1306_Putstring>
		}

		HAL_Delay(2000);
 8002eb4:	23fa      	movs	r3, #250	; 0xfa
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 ffb7 	bl	8003e2c <HAL_Delay>
		SSD1306_Clear_Bottom();
 8002ebe:	f007 f864 	bl	8009f8a <SSD1306_Clear_Bottom>
	while(waitFlag == true){
 8002ec2:	e7d7      	b.n	8002e74 <_Z18displayDoneWarningb+0x28>
	}
	SSD1306_Clear_Data();
 8002ec4:	f007 f839 	bl	8009f3a <SSD1306_Clear_Data>
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	0800eaec 	.word	0x0800eaec
 8002ed4:	20001aa8 	.word	0x20001aa8
 8002ed8:	2000003c 	.word	0x2000003c
 8002edc:	0800de78 	.word	0x0800de78
 8002ee0:	0800de8c 	.word	0x0800de8c

08002ee4 <_Z4initv>:

void init(){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af02      	add	r7, sp, #8

	initFlag = false;
 8002eea:	4b2a      	ldr	r3, [pc, #168]	; (8002f94 <_Z4initv+0xb0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
	SSD1306_Init();
 8002ef0:	f006 faf0 	bl	80094d4 <SSD1306_Init>
	SSD1306_Clear();
 8002ef4:	f007 f817 	bl	8009f26 <SSD1306_Clear>
	SSD1306_DrawBitmap(2, 16, logo, 128, 35, SSD1306_COLOR_WHITE);
 8002ef8:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <_Z4initv+0xb4>)
 8002efa:	2301      	movs	r3, #1
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	2323      	movs	r3, #35	; 0x23
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	2110      	movs	r1, #16
 8002f06:	2002      	movs	r0, #2
 8002f08:	f006 fa46 	bl	8009398 <SSD1306_DrawBitmap>
	SSD1306_Putstring(4,15, (char*)"DANG KHOI DONG...", &Font_5x7, SSD1306_COLOR_WHITE);
 8002f0c:	4923      	ldr	r1, [pc, #140]	; (8002f9c <_Z4initv+0xb8>)
 8002f0e:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <_Z4initv+0xbc>)
 8002f10:	2301      	movs	r3, #1
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	000b      	movs	r3, r1
 8002f16:	210f      	movs	r1, #15
 8002f18:	2004      	movs	r0, #4
 8002f1a:	f006 fdbb 	bl	8009a94 <SSD1306_Putstring>
	SSD1306_UpdateScreen();
 8002f1e:	f006 fba7 	bl	8009670 <SSD1306_UpdateScreen>

	// Hiển thị logo
	prepareForProcess();
 8002f22:	f7ff ff75 	bl	8002e10 <_Z17prepareForProcessv>
	preHeader();
 8002f26:	f7ff fdc3 	bl	8002ab0 <_Z9preHeaderv>
	LRWAN.init() ;
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <_Z4initv+0xc0>)
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f005 fbab 	bl	8008688 <_ZN5lrwan4initEv>

	if(SIM7600E.init(30000)==1){
 8002f32:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <_Z4initv+0xc4>)
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <_Z4initv+0xc8>)
 8002f36:	0011      	movs	r1, r2
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f005 fd39 	bl	80089b0 <_ZN7sim7x004initEi>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d009      	beq.n	8002f56 <_Z4initv+0x72>
		SSD1306_Putstring(4,30, (char*)"HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 8002f42:	4916      	ldr	r1, [pc, #88]	; (8002f9c <_Z4initv+0xb8>)
 8002f44:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <_Z4initv+0xcc>)
 8002f46:	2301      	movs	r3, #1
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	000b      	movs	r3, r1
 8002f4c:	211e      	movs	r1, #30
 8002f4e:	2004      	movs	r0, #4
 8002f50:	f006 fda0 	bl	8009a94 <SSD1306_Putstring>
 8002f54:	e008      	b.n	8002f68 <_Z4initv+0x84>
	}else{
		SSD1306_Putstring(4,30, (char*)"SIM BI LOI!", &Font_5x7, SSD1306_COLOR_WHITE);
 8002f56:	4911      	ldr	r1, [pc, #68]	; (8002f9c <_Z4initv+0xb8>)
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <_Z4initv+0xd0>)
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	000b      	movs	r3, r1
 8002f60:	211e      	movs	r1, #30
 8002f62:	2004      	movs	r0, #4
 8002f64:	f006 fd96 	bl	8009a94 <SSD1306_Putstring>
	}

	// hiển thị header sau khi khởi động xong
	displayHeader();
 8002f68:	f7ff fe10 	bl	8002b8c <_Z13displayHeaderv>
	SYSTEM.println("DONE INIT");
 8002f6c:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <_Z4initv+0xd4>)
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <_Z4initv+0xd8>)
 8002f70:	0011      	movs	r1, r2
 8002f72:	0018      	movs	r0, r3
 8002f74:	f005 f8fc 	bl	8008170 <_ZN5debug7printlnEPKc>
	HAL_Delay(TIME_MSG_DISPLAY);
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <_Z4initv+0xdc>)
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 ff56 	bl	8003e2c <HAL_Delay>
	initFlag = true;
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <_Z4initv+0xb0>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
	waitFlag = true;
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <_Z4initv+0xe0>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	20001aa7 	.word	0x20001aa7
 8002f98:	0800eaec 	.word	0x0800eaec
 8002f9c:	2000003c 	.word	0x2000003c
 8002fa0:	0800dea4 	.word	0x0800dea4
 8002fa4:	200012a8 	.word	0x200012a8
 8002fa8:	00007530 	.word	0x00007530
 8002fac:	200002d8 	.word	0x200002d8
 8002fb0:	0800deb8 	.word	0x0800deb8
 8002fb4:	0800dec4 	.word	0x0800dec4
 8002fb8:	0800ded0 	.word	0x0800ded0
 8002fbc:	200012a4 	.word	0x200012a4
 8002fc0:	00001388 	.word	0x00001388
 8002fc4:	20001aa8 	.word	0x20001aa8

08002fc8 <_Z7OS_loopv>:
}


/*______________________________________Hàm chính chạy chương trình_______________________________________*/

void OS_loop(){
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af02      	add	r7, sp, #8
	if (  SIM7600E.rxDone_FLAG == true  ){
 8002fce:	4bde      	ldr	r3, [pc, #888]	; (8003348 <_Z7OS_loopv+0x380>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d014      	beq.n	8003000 <_Z7OS_loopv+0x38>
		SYSTEM.println("\n==================================================") ;
 8002fd6:	4add      	ldr	r2, [pc, #884]	; (800334c <_Z7OS_loopv+0x384>)
 8002fd8:	4bdd      	ldr	r3, [pc, #884]	; (8003350 <_Z7OS_loopv+0x388>)
 8002fda:	0011      	movs	r1, r2
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f005 f8c7 	bl	8008170 <_ZN5debug7printlnEPKc>
		sim7600Event = SIM7600E.identifyEvent() ;
 8002fe2:	4cdc      	ldr	r4, [pc, #880]	; (8003354 <_Z7OS_loopv+0x38c>)
 8002fe4:	003b      	movs	r3, r7
 8002fe6:	4ad8      	ldr	r2, [pc, #864]	; (8003348 <_Z7OS_loopv+0x380>)
 8002fe8:	0011      	movs	r1, r2
 8002fea:	0018      	movs	r0, r3
 8002fec:	f005 fdc4 	bl	8008b78 <_ZN7sim7x0013identifyEventEv>
 8002ff0:	003a      	movs	r2, r7
 8002ff2:	0023      	movs	r3, r4
 8002ff4:	ca03      	ldmia	r2!, {r0, r1}
 8002ff6:	c303      	stmia	r3!, {r0, r1}
		SIM7600E.memreset() ;
 8002ff8:	4bd3      	ldr	r3, [pc, #844]	; (8003348 <_Z7OS_loopv+0x380>)
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f005 fda2 	bl	8008b44 <_ZN7sim7x008memresetEv>
	}

	if (  LRWAN.rxDone_FLAG == true  ){
 8003000:	4bd5      	ldr	r3, [pc, #852]	; (8003358 <_Z7OS_loopv+0x390>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d014      	beq.n	8003032 <_Z7OS_loopv+0x6a>
		SYSTEM.println("\n==================================================") ;
 8003008:	4ad0      	ldr	r2, [pc, #832]	; (800334c <_Z7OS_loopv+0x384>)
 800300a:	4bd1      	ldr	r3, [pc, #836]	; (8003350 <_Z7OS_loopv+0x388>)
 800300c:	0011      	movs	r1, r2
 800300e:	0018      	movs	r0, r3
 8003010:	f005 f8ae 	bl	8008170 <_ZN5debug7printlnEPKc>
		lrwanEvent = LRWAN.identifyEvent() ;
 8003014:	4cd1      	ldr	r4, [pc, #836]	; (800335c <_Z7OS_loopv+0x394>)
 8003016:	003b      	movs	r3, r7
 8003018:	4acf      	ldr	r2, [pc, #828]	; (8003358 <_Z7OS_loopv+0x390>)
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f005 fa47 	bl	80084b0 <_ZN5lrwan13identifyEventEv>
 8003022:	003a      	movs	r2, r7
 8003024:	0023      	movs	r3, r4
 8003026:	ca03      	ldmia	r2!, {r0, r1}
 8003028:	c303      	stmia	r3!, {r0, r1}
		LRWAN.memreset() ;
 800302a:	4bcb      	ldr	r3, [pc, #812]	; (8003358 <_Z7OS_loopv+0x390>)
 800302c:	0018      	movs	r0, r3
 800302e:	f005 f967 	bl	8008300 <_ZN5lrwan8memresetEv>
	}
	init();
 8003032:	f7ff ff57 	bl	8002ee4 <_Z4initv>
	while(waitFlag == true){
 8003036:	4bca      	ldr	r3, [pc, #808]	; (8003360 <_Z7OS_loopv+0x398>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d015      	beq.n	800306a <_Z7OS_loopv+0xa2>
			HAL_Delay(1000);
 800303e:	23fa      	movs	r3, #250	; 0xfa
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fef2 	bl	8003e2c <HAL_Delay>
			SSD1306_Putstring(4,12, (char*)"SAN SANG KICH HOAT", &Font_5x7, SSD1306_COLOR_WHITE);
 8003048:	49c6      	ldr	r1, [pc, #792]	; (8003364 <_Z7OS_loopv+0x39c>)
 800304a:	4ac7      	ldr	r2, [pc, #796]	; (8003368 <_Z7OS_loopv+0x3a0>)
 800304c:	2301      	movs	r3, #1
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	000b      	movs	r3, r1
 8003052:	210c      	movs	r1, #12
 8003054:	2004      	movs	r0, #4
 8003056:	f006 fd1d 	bl	8009a94 <SSD1306_Putstring>
			HAL_Delay(1000);
 800305a:	23fa      	movs	r3, #250	; 0xfa
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	0018      	movs	r0, r3
 8003060:	f000 fee4 	bl	8003e2c <HAL_Delay>
			SSD1306_Clear_Bottom();
 8003064:	f006 ff91 	bl	8009f8a <SSD1306_Clear_Bottom>
	while(waitFlag == true){
 8003068:	e7e5      	b.n	8003036 <_Z7OS_loopv+0x6e>
	}
	SSD1306_Clear_Data();
 800306a:	f006 ff66 	bl	8009f3a <SSD1306_Clear_Data>

	// kiển tra trạng thái nếu không làm công việc gì thì sẽ ngủ
	while(warningProcess!=0||stopProcess!=0){
 800306e:	4bbf      	ldr	r3, [pc, #764]	; (800336c <_Z7OS_loopv+0x3a4>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <_Z7OS_loopv+0xb8>
 8003076:	4bbe      	ldr	r3, [pc, #760]	; (8003370 <_Z7OS_loopv+0x3a8>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d100      	bne.n	8003080 <_Z7OS_loopv+0xb8>
 800307e:	e213      	b.n	80034a8 <_Z7OS_loopv+0x4e0>
		// kiểm tra trạng thái nút cảnh báo
		switch(warningProcess){
 8003080:	4bba      	ldr	r3, [pc, #744]	; (800336c <_Z7OS_loopv+0x3a4>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b07      	cmp	r3, #7
 8003086:	d900      	bls.n	800308a <_Z7OS_loopv+0xc2>
 8003088:	e0d3      	b.n	8003232 <_Z7OS_loopv+0x26a>
 800308a:	009a      	lsls	r2, r3, #2
 800308c:	4bb9      	ldr	r3, [pc, #740]	; (8003374 <_Z7OS_loopv+0x3ac>)
 800308e:	18d3      	adds	r3, r2, r3
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	469f      	mov	pc, r3
			case BTN_START_WARNING_PRESSED:
				warningProcess = SEND_CMD_BY_SIM;
 8003094:	4bb5      	ldr	r3, [pc, #724]	; (800336c <_Z7OS_loopv+0x3a4>)
 8003096:	2203      	movs	r2, #3
 8003098:	701a      	strb	r2, [r3, #0]
				SYSTEM.println("ENTER START WARNING PROCESS");
 800309a:	4ab7      	ldr	r2, [pc, #732]	; (8003378 <_Z7OS_loopv+0x3b0>)
 800309c:	4bac      	ldr	r3, [pc, #688]	; (8003350 <_Z7OS_loopv+0x388>)
 800309e:	0011      	movs	r1, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f005 f865 	bl	8008170 <_ZN5debug7printlnEPKc>
				break;
 80030a6:	e0c4      	b.n	8003232 <_Z7OS_loopv+0x26a>

			// Đầu tiên, gửi cảnh báo qua SMS trước
			case SEND_CMD_BY_SIM:
				SSD1306_Clear_Data();
 80030a8:	f006 ff47 	bl	8009f3a <SSD1306_Clear_Data>
				SSD1306_Putstring(2, 5, (char*)"______CANH BAO______", &Font_5x7, SSD1306_COLOR_WHITE);
 80030ac:	49ad      	ldr	r1, [pc, #692]	; (8003364 <_Z7OS_loopv+0x39c>)
 80030ae:	4ab3      	ldr	r2, [pc, #716]	; (800337c <_Z7OS_loopv+0x3b4>)
 80030b0:	2301      	movs	r3, #1
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	000b      	movs	r3, r1
 80030b6:	2105      	movs	r1, #5
 80030b8:	2002      	movs	r0, #2
 80030ba:	f006 fceb 	bl	8009a94 <SSD1306_Putstring>
				HAL_Delay(TIME_MSG_DISPLAY);
 80030be:	4bb0      	ldr	r3, [pc, #704]	; (8003380 <_Z7OS_loopv+0x3b8>)
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 feb3 	bl	8003e2c <HAL_Delay>
				SSD1306_Putstring(3, 5, (char*)"Dang gui SMS... ", &Font_5x7, SSD1306_COLOR_WHITE);
 80030c6:	49a7      	ldr	r1, [pc, #668]	; (8003364 <_Z7OS_loopv+0x39c>)
 80030c8:	4aae      	ldr	r2, [pc, #696]	; (8003384 <_Z7OS_loopv+0x3bc>)
 80030ca:	2301      	movs	r3, #1
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	000b      	movs	r3, r1
 80030d0:	2105      	movs	r1, #5
 80030d2:	2003      	movs	r0, #3
 80030d4:	f006 fcde 	bl	8009a94 <SSD1306_Putstring>
				SYSTEM.println("Send SMS ...");
 80030d8:	4aab      	ldr	r2, [pc, #684]	; (8003388 <_Z7OS_loopv+0x3c0>)
 80030da:	4b9d      	ldr	r3, [pc, #628]	; (8003350 <_Z7OS_loopv+0x388>)
 80030dc:	0011      	movs	r1, r2
 80030de:	0018      	movs	r0, r3
 80030e0:	f005 f846 	bl	8008170 <_ZN5debug7printlnEPKc>
				SIM7600E.sendSMS(DATALOGGER_NUMBER, SIM_WARNING_MSG);
 80030e4:	4aa9      	ldr	r2, [pc, #676]	; (800338c <_Z7OS_loopv+0x3c4>)
 80030e6:	49aa      	ldr	r1, [pc, #680]	; (8003390 <_Z7OS_loopv+0x3c8>)
 80030e8:	4b97      	ldr	r3, [pc, #604]	; (8003348 <_Z7OS_loopv+0x380>)
 80030ea:	0018      	movs	r0, r3
 80030ec:	f006 f822 	bl	8009134 <_ZN7sim7x007sendSMSEPKcS1_>
				warningProcess=SIM_CHECKING_RESPOND;
 80030f0:	4b9e      	ldr	r3, [pc, #632]	; (800336c <_Z7OS_loopv+0x3a4>)
 80030f2:	2204      	movs	r2, #4
 80030f4:	701a      	strb	r2, [r3, #0]
				break;
 80030f6:	e09c      	b.n	8003232 <_Z7OS_loopv+0x26a>
			// Sau đó, chờ Datalogger phản hồi qua SMS
			case SIM_CHECKING_RESPOND:
				//nếu gửi thành công thì startProcess = SEND_CMD_COMPLETED, thất bại thì tiếp tục gửi bằng lora
				if(simCheckingRespond("OK")){
 80030f8:	4ba6      	ldr	r3, [pc, #664]	; (8003394 <_Z7OS_loopv+0x3cc>)
 80030fa:	0018      	movs	r0, r3
 80030fc:	f7ff fe0a 	bl	8002d14 <_Z18simCheckingRespondPKc>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d012      	beq.n	800312a <_Z7OS_loopv+0x162>
					SSD1306_Putstring(4, 5, (char*)"-> HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 8003104:	4997      	ldr	r1, [pc, #604]	; (8003364 <_Z7OS_loopv+0x39c>)
 8003106:	4aa4      	ldr	r2, [pc, #656]	; (8003398 <_Z7OS_loopv+0x3d0>)
 8003108:	2301      	movs	r3, #1
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	000b      	movs	r3, r1
 800310e:	2105      	movs	r1, #5
 8003110:	2004      	movs	r0, #4
 8003112:	f006 fcbf 	bl	8009a94 <SSD1306_Putstring>
					SYSTEM.println("SMS SENT SUCCESS");
 8003116:	4aa1      	ldr	r2, [pc, #644]	; (800339c <_Z7OS_loopv+0x3d4>)
 8003118:	4b8d      	ldr	r3, [pc, #564]	; (8003350 <_Z7OS_loopv+0x388>)
 800311a:	0011      	movs	r1, r2
 800311c:	0018      	movs	r0, r3
 800311e:	f005 f827 	bl	8008170 <_ZN5debug7printlnEPKc>
					warningProcess = SEND_CMD_COMPLETED;
 8003122:	4b92      	ldr	r3, [pc, #584]	; (800336c <_Z7OS_loopv+0x3a4>)
 8003124:	2207      	movs	r2, #7
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e011      	b.n	800314e <_Z7OS_loopv+0x186>
				}else{
					SSD1306_Putstring(4, 5, (char*)"-> THAT BAI!", &Font_5x7, SSD1306_COLOR_WHITE);
 800312a:	498e      	ldr	r1, [pc, #568]	; (8003364 <_Z7OS_loopv+0x39c>)
 800312c:	4a9c      	ldr	r2, [pc, #624]	; (80033a0 <_Z7OS_loopv+0x3d8>)
 800312e:	2301      	movs	r3, #1
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	000b      	movs	r3, r1
 8003134:	2105      	movs	r1, #5
 8003136:	2004      	movs	r0, #4
 8003138:	f006 fcac 	bl	8009a94 <SSD1306_Putstring>
					SYSTEM.println("SMS SENT FAILED");
 800313c:	4a99      	ldr	r2, [pc, #612]	; (80033a4 <_Z7OS_loopv+0x3dc>)
 800313e:	4b84      	ldr	r3, [pc, #528]	; (8003350 <_Z7OS_loopv+0x388>)
 8003140:	0011      	movs	r1, r2
 8003142:	0018      	movs	r0, r3
 8003144:	f005 f814 	bl	8008170 <_ZN5debug7printlnEPKc>
					warningProcess = SEND_CMD_BY_LRWAN;
 8003148:	4b88      	ldr	r3, [pc, #544]	; (800336c <_Z7OS_loopv+0x3a4>)
 800314a:	2205      	movs	r2, #5
 800314c:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(TIME_MSG_DISPLAY);
 800314e:	4b8c      	ldr	r3, [pc, #560]	; (8003380 <_Z7OS_loopv+0x3b8>)
 8003150:	0018      	movs	r0, r3
 8003152:	f000 fe6b 	bl	8003e2c <HAL_Delay>
				break;
 8003156:	e06c      	b.n	8003232 <_Z7OS_loopv+0x26a>

			case SEND_CMD_BY_LRWAN:
				SSD1306_Putstring(2, 5, (char*)"______CANH BAO______", &Font_5x7, SSD1306_COLOR_WHITE);
 8003158:	4982      	ldr	r1, [pc, #520]	; (8003364 <_Z7OS_loopv+0x39c>)
 800315a:	4a88      	ldr	r2, [pc, #544]	; (800337c <_Z7OS_loopv+0x3b4>)
 800315c:	2301      	movs	r3, #1
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	000b      	movs	r3, r1
 8003162:	2105      	movs	r1, #5
 8003164:	2002      	movs	r0, #2
 8003166:	f006 fc95 	bl	8009a94 <SSD1306_Putstring>
				SSD1306_Putstring(3, 5, (char*)"Dang gui LoRa... ", &Font_5x7, SSD1306_COLOR_WHITE);
 800316a:	497e      	ldr	r1, [pc, #504]	; (8003364 <_Z7OS_loopv+0x39c>)
 800316c:	4a8e      	ldr	r2, [pc, #568]	; (80033a8 <_Z7OS_loopv+0x3e0>)
 800316e:	2301      	movs	r3, #1
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	000b      	movs	r3, r1
 8003174:	2105      	movs	r1, #5
 8003176:	2003      	movs	r0, #3
 8003178:	f006 fc8c 	bl	8009a94 <SSD1306_Putstring>
				SYSTEM.println("SEND BY LORA");
 800317c:	4a8b      	ldr	r2, [pc, #556]	; (80033ac <_Z7OS_loopv+0x3e4>)
 800317e:	4b74      	ldr	r3, [pc, #464]	; (8003350 <_Z7OS_loopv+0x388>)
 8003180:	0011      	movs	r1, r2
 8003182:	0018      	movs	r0, r3
 8003184:	f004 fff4 	bl	8008170 <_ZN5debug7printlnEPKc>
				SSD1306_Clear_Bottom();
 8003188:	f006 feff 	bl	8009f8a <SSD1306_Clear_Bottom>
				warningProcess = LRWAN_CHECKING_RESPOND;
 800318c:	4b77      	ldr	r3, [pc, #476]	; (800336c <_Z7OS_loopv+0x3a4>)
 800318e:	2206      	movs	r2, #6
 8003190:	701a      	strb	r2, [r3, #0]
				break;
 8003192:	e04e      	b.n	8003232 <_Z7OS_loopv+0x26a>

			case LRWAN_CHECKING_RESPOND:
				//nếu gửi thành công thì startProcess = SEND_CMD_COMPLETED, thất bại thì startProcess = IDLE
				if(lrwanSendAndCheckingRespond(LRWAN_WARNING_MSG,LRWAN_WARNING_RES_MSG)){
 8003194:	4a7f      	ldr	r2, [pc, #508]	; (8003394 <_Z7OS_loopv+0x3cc>)
 8003196:	4b86      	ldr	r3, [pc, #536]	; (80033b0 <_Z7OS_loopv+0x3e8>)
 8003198:	0011      	movs	r1, r2
 800319a:	0018      	movs	r0, r3
 800319c:	f7ff fdee 	bl	8002d7c <_Z27lrwanSendAndCheckingRespondPKcS0_>
 80031a0:	0003      	movs	r3, r0
 80031a2:	1e5a      	subs	r2, r3, #1
 80031a4:	4193      	sbcs	r3, r2
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <_Z7OS_loopv+0x20a>
					SSD1306_Putstring(4, 5, (char*)"-> HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 80031ac:	496d      	ldr	r1, [pc, #436]	; (8003364 <_Z7OS_loopv+0x39c>)
 80031ae:	4a7a      	ldr	r2, [pc, #488]	; (8003398 <_Z7OS_loopv+0x3d0>)
 80031b0:	2301      	movs	r3, #1
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	000b      	movs	r3, r1
 80031b6:	2105      	movs	r1, #5
 80031b8:	2004      	movs	r0, #4
 80031ba:	f006 fc6b 	bl	8009a94 <SSD1306_Putstring>
					SYSTEM.println("SEND BY LORA SUCCESS");
 80031be:	4a7d      	ldr	r2, [pc, #500]	; (80033b4 <_Z7OS_loopv+0x3ec>)
 80031c0:	4b63      	ldr	r3, [pc, #396]	; (8003350 <_Z7OS_loopv+0x388>)
 80031c2:	0011      	movs	r1, r2
 80031c4:	0018      	movs	r0, r3
 80031c6:	f004 ffd3 	bl	8008170 <_ZN5debug7printlnEPKc>
					warningProcess = SEND_CMD_COMPLETED;
 80031ca:	4b68      	ldr	r3, [pc, #416]	; (800336c <_Z7OS_loopv+0x3a4>)
 80031cc:	2207      	movs	r2, #7
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e017      	b.n	8003202 <_Z7OS_loopv+0x23a>
				}else{
					SSD1306_Putstring(4, 5, (char*)"-> THAT BAI!", &Font_5x7, SSD1306_COLOR_WHITE);
 80031d2:	4964      	ldr	r1, [pc, #400]	; (8003364 <_Z7OS_loopv+0x39c>)
 80031d4:	4a72      	ldr	r2, [pc, #456]	; (80033a0 <_Z7OS_loopv+0x3d8>)
 80031d6:	2301      	movs	r3, #1
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	000b      	movs	r3, r1
 80031dc:	2105      	movs	r1, #5
 80031de:	2004      	movs	r0, #4
 80031e0:	f006 fc58 	bl	8009a94 <SSD1306_Putstring>
					SYSTEM.println("SEND BY LORA FAILED");
 80031e4:	4a74      	ldr	r2, [pc, #464]	; (80033b8 <_Z7OS_loopv+0x3f0>)
 80031e6:	4b5a      	ldr	r3, [pc, #360]	; (8003350 <_Z7OS_loopv+0x388>)
 80031e8:	0011      	movs	r1, r2
 80031ea:	0018      	movs	r0, r3
 80031ec:	f004 ffc0 	bl	8008170 <_ZN5debug7printlnEPKc>
					SYSTEM.println("WARNING FAILED");
 80031f0:	4a72      	ldr	r2, [pc, #456]	; (80033bc <_Z7OS_loopv+0x3f4>)
 80031f2:	4b57      	ldr	r3, [pc, #348]	; (8003350 <_Z7OS_loopv+0x388>)
 80031f4:	0011      	movs	r1, r2
 80031f6:	0018      	movs	r0, r3
 80031f8:	f004 ffba 	bl	8008170 <_ZN5debug7printlnEPKc>
					warningProcess = IDLE;
 80031fc:	4b5b      	ldr	r3, [pc, #364]	; (800336c <_Z7OS_loopv+0x3a4>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(TIME_MSG_DISPLAY);
 8003202:	4b5f      	ldr	r3, [pc, #380]	; (8003380 <_Z7OS_loopv+0x3b8>)
 8003204:	0018      	movs	r0, r3
 8003206:	f000 fe11 	bl	8003e2c <HAL_Delay>
				break;
 800320a:	e012      	b.n	8003232 <_Z7OS_loopv+0x26a>
			case SEND_CMD_COMPLETED:
				HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, GPIO_PIN_SET);
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <_Z7OS_loopv+0x3f8>)
 800320e:	2201      	movs	r2, #1
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	0018      	movs	r0, r3
 8003214:	f001 fc2d 	bl	8004a72 <HAL_GPIO_WritePin>
				SYSTEM.println("DONE WARNING PROCESS");
 8003218:	4a6a      	ldr	r2, [pc, #424]	; (80033c4 <_Z7OS_loopv+0x3fc>)
 800321a:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <_Z7OS_loopv+0x388>)
 800321c:	0011      	movs	r1, r2
 800321e:	0018      	movs	r0, r3
 8003220:	f004 ffa6 	bl	8008170 <_ZN5debug7printlnEPKc>
				warningProcess=IDLE;
 8003224:	4b51      	ldr	r3, [pc, #324]	; (800336c <_Z7OS_loopv+0x3a4>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
				doneWarningFlag = true;
 800322a:	4b67      	ldr	r3, [pc, #412]	; (80033c8 <_Z7OS_loopv+0x400>)
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
				break;
 8003230:	46c0      	nop			; (mov r8, r8)
		}
		// kiểm tra trạng thái nút dừng cảnh báo
		switch(stopProcess){
 8003232:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <_Z7OS_loopv+0x3a8>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b07      	cmp	r3, #7
 8003238:	d900      	bls.n	800323c <_Z7OS_loopv+0x274>
 800323a:	e11e      	b.n	800347a <_Z7OS_loopv+0x4b2>
 800323c:	009a      	lsls	r2, r3, #2
 800323e:	4b63      	ldr	r3, [pc, #396]	; (80033cc <_Z7OS_loopv+0x404>)
 8003240:	18d3      	adds	r3, r2, r3
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	469f      	mov	pc, r3
			case BTN_STOP_WARNING_PRESSED:
				stopProcess = SEND_CMD_BY_SIM;
 8003246:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <_Z7OS_loopv+0x3a8>)
 8003248:	2203      	movs	r2, #3
 800324a:	701a      	strb	r2, [r3, #0]
				SYSTEM.println("ENTER STOP WARNING PROCESS");
 800324c:	4a60      	ldr	r2, [pc, #384]	; (80033d0 <_Z7OS_loopv+0x408>)
 800324e:	4b40      	ldr	r3, [pc, #256]	; (8003350 <_Z7OS_loopv+0x388>)
 8003250:	0011      	movs	r1, r2
 8003252:	0018      	movs	r0, r3
 8003254:	f004 ff8c 	bl	8008170 <_ZN5debug7printlnEPKc>
				break;
 8003258:	e10f      	b.n	800347a <_Z7OS_loopv+0x4b2>

			case SEND_CMD_BY_SIM:
				SSD1306_Clear_Data();
 800325a:	f006 fe6e 	bl	8009f3a <SSD1306_Clear_Data>
				SSD1306_Putstring(2, 5, (char*)"____DUNG CANH BAO____", &Font_5x7, SSD1306_COLOR_WHITE);
 800325e:	4941      	ldr	r1, [pc, #260]	; (8003364 <_Z7OS_loopv+0x39c>)
 8003260:	4a5c      	ldr	r2, [pc, #368]	; (80033d4 <_Z7OS_loopv+0x40c>)
 8003262:	2301      	movs	r3, #1
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	000b      	movs	r3, r1
 8003268:	2105      	movs	r1, #5
 800326a:	2002      	movs	r0, #2
 800326c:	f006 fc12 	bl	8009a94 <SSD1306_Putstring>
				HAL_Delay(TIME_MSG_DISPLAY);
 8003270:	4b43      	ldr	r3, [pc, #268]	; (8003380 <_Z7OS_loopv+0x3b8>)
 8003272:	0018      	movs	r0, r3
 8003274:	f000 fdda 	bl	8003e2c <HAL_Delay>
				SSD1306_Putstring(3, 5, (char*)"Dang gui SMS... ", &Font_5x7, SSD1306_COLOR_WHITE);
 8003278:	493a      	ldr	r1, [pc, #232]	; (8003364 <_Z7OS_loopv+0x39c>)
 800327a:	4a42      	ldr	r2, [pc, #264]	; (8003384 <_Z7OS_loopv+0x3bc>)
 800327c:	2301      	movs	r3, #1
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	000b      	movs	r3, r1
 8003282:	2105      	movs	r1, #5
 8003284:	2003      	movs	r0, #3
 8003286:	f006 fc05 	bl	8009a94 <SSD1306_Putstring>
				SYSTEM.println("Send SMS ...");
 800328a:	4a3f      	ldr	r2, [pc, #252]	; (8003388 <_Z7OS_loopv+0x3c0>)
 800328c:	4b30      	ldr	r3, [pc, #192]	; (8003350 <_Z7OS_loopv+0x388>)
 800328e:	0011      	movs	r1, r2
 8003290:	0018      	movs	r0, r3
 8003292:	f004 ff6d 	bl	8008170 <_ZN5debug7printlnEPKc>
				SIM7600E.sendSMS(DATALOGGER_NUMBER, SIM_STOP_MSG);
 8003296:	4a50      	ldr	r2, [pc, #320]	; (80033d8 <_Z7OS_loopv+0x410>)
 8003298:	493d      	ldr	r1, [pc, #244]	; (8003390 <_Z7OS_loopv+0x3c8>)
 800329a:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <_Z7OS_loopv+0x380>)
 800329c:	0018      	movs	r0, r3
 800329e:	f005 ff49 	bl	8009134 <_ZN7sim7x007sendSMSEPKcS1_>
				stopProcess=SIM_CHECKING_RESPOND;
 80032a2:	4b33      	ldr	r3, [pc, #204]	; (8003370 <_Z7OS_loopv+0x3a8>)
 80032a4:	2204      	movs	r2, #4
 80032a6:	701a      	strb	r2, [r3, #0]
				break;
 80032a8:	e0e7      	b.n	800347a <_Z7OS_loopv+0x4b2>
			case SIM_CHECKING_RESPOND:
				//nếu gửi thành công thì startProcess = SEND_CMD_COMPLETED, thất bại thì tiếp tục gửi bằng lora
				if(simCheckingRespond("OK")){
 80032aa:	4b3a      	ldr	r3, [pc, #232]	; (8003394 <_Z7OS_loopv+0x3cc>)
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7ff fd31 	bl	8002d14 <_Z18simCheckingRespondPKc>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d012      	beq.n	80032dc <_Z7OS_loopv+0x314>
					SSD1306_Putstring(4, 5, (char*)"-> HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 80032b6:	492b      	ldr	r1, [pc, #172]	; (8003364 <_Z7OS_loopv+0x39c>)
 80032b8:	4a37      	ldr	r2, [pc, #220]	; (8003398 <_Z7OS_loopv+0x3d0>)
 80032ba:	2301      	movs	r3, #1
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	000b      	movs	r3, r1
 80032c0:	2105      	movs	r1, #5
 80032c2:	2004      	movs	r0, #4
 80032c4:	f006 fbe6 	bl	8009a94 <SSD1306_Putstring>
					SYSTEM.println("SMS SENT SUCCESS");
 80032c8:	4a34      	ldr	r2, [pc, #208]	; (800339c <_Z7OS_loopv+0x3d4>)
 80032ca:	4b21      	ldr	r3, [pc, #132]	; (8003350 <_Z7OS_loopv+0x388>)
 80032cc:	0011      	movs	r1, r2
 80032ce:	0018      	movs	r0, r3
 80032d0:	f004 ff4e 	bl	8008170 <_ZN5debug7printlnEPKc>
					stopProcess = SEND_CMD_COMPLETED;
 80032d4:	4b26      	ldr	r3, [pc, #152]	; (8003370 <_Z7OS_loopv+0x3a8>)
 80032d6:	2207      	movs	r2, #7
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e011      	b.n	8003300 <_Z7OS_loopv+0x338>
				}else{
					SSD1306_Putstring(4, 5, (char*)"-> THAT BAI!", &Font_5x7, SSD1306_COLOR_WHITE);
 80032dc:	4921      	ldr	r1, [pc, #132]	; (8003364 <_Z7OS_loopv+0x39c>)
 80032de:	4a30      	ldr	r2, [pc, #192]	; (80033a0 <_Z7OS_loopv+0x3d8>)
 80032e0:	2301      	movs	r3, #1
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	000b      	movs	r3, r1
 80032e6:	2105      	movs	r1, #5
 80032e8:	2004      	movs	r0, #4
 80032ea:	f006 fbd3 	bl	8009a94 <SSD1306_Putstring>
					SYSTEM.println("SMS SENT FAILED");
 80032ee:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <_Z7OS_loopv+0x3dc>)
 80032f0:	4b17      	ldr	r3, [pc, #92]	; (8003350 <_Z7OS_loopv+0x388>)
 80032f2:	0011      	movs	r1, r2
 80032f4:	0018      	movs	r0, r3
 80032f6:	f004 ff3b 	bl	8008170 <_ZN5debug7printlnEPKc>
					stopProcess = SEND_CMD_BY_LRWAN;
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <_Z7OS_loopv+0x3a8>)
 80032fc:	2205      	movs	r2, #5
 80032fe:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(TIME_MSG_DISPLAY);
 8003300:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <_Z7OS_loopv+0x3b8>)
 8003302:	0018      	movs	r0, r3
 8003304:	f000 fd92 	bl	8003e2c <HAL_Delay>
				break;
 8003308:	e0b7      	b.n	800347a <_Z7OS_loopv+0x4b2>
			case SEND_CMD_BY_LRWAN:
				SSD1306_Putstring(2, 5, (char*)"____DUNG CANH BAO____", &Font_5x7, SSD1306_COLOR_WHITE);
 800330a:	4916      	ldr	r1, [pc, #88]	; (8003364 <_Z7OS_loopv+0x39c>)
 800330c:	4a31      	ldr	r2, [pc, #196]	; (80033d4 <_Z7OS_loopv+0x40c>)
 800330e:	2301      	movs	r3, #1
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	000b      	movs	r3, r1
 8003314:	2105      	movs	r1, #5
 8003316:	2002      	movs	r0, #2
 8003318:	f006 fbbc 	bl	8009a94 <SSD1306_Putstring>
				SSD1306_Putstring(3, 5, (char*)"Dang gui LoRa... ", &Font_5x7, SSD1306_COLOR_WHITE);
 800331c:	4911      	ldr	r1, [pc, #68]	; (8003364 <_Z7OS_loopv+0x39c>)
 800331e:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <_Z7OS_loopv+0x3e0>)
 8003320:	2301      	movs	r3, #1
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	000b      	movs	r3, r1
 8003326:	2105      	movs	r1, #5
 8003328:	2003      	movs	r0, #3
 800332a:	f006 fbb3 	bl	8009a94 <SSD1306_Putstring>
				SYSTEM.println("SEND BY LORA");
 800332e:	4a1f      	ldr	r2, [pc, #124]	; (80033ac <_Z7OS_loopv+0x3e4>)
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <_Z7OS_loopv+0x388>)
 8003332:	0011      	movs	r1, r2
 8003334:	0018      	movs	r0, r3
 8003336:	f004 ff1b 	bl	8008170 <_ZN5debug7printlnEPKc>
				SSD1306_Clear_Bottom();
 800333a:	f006 fe26 	bl	8009f8a <SSD1306_Clear_Bottom>
				stopProcess = LRWAN_CHECKING_RESPOND;
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <_Z7OS_loopv+0x3a8>)
 8003340:	2206      	movs	r2, #6
 8003342:	701a      	strb	r2, [r3, #0]
				break;
 8003344:	e099      	b.n	800347a <_Z7OS_loopv+0x4b2>
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	200002d8 	.word	0x200002d8
 800334c:	0800e054 	.word	0x0800e054
 8003350:	200012a4 	.word	0x200012a4
 8003354:	20001aac 	.word	0x20001aac
 8003358:	200012a8 	.word	0x200012a8
 800335c:	20001ab4 	.word	0x20001ab4
 8003360:	20001aa8 	.word	0x20001aa8
 8003364:	2000003c 	.word	0x2000003c
 8003368:	0800e088 	.word	0x0800e088
 800336c:	20001aa4 	.word	0x20001aa4
 8003370:	20001aa5 	.word	0x20001aa5
 8003374:	0800ed1c 	.word	0x0800ed1c
 8003378:	0800e09c 	.word	0x0800e09c
 800337c:	0800e0b8 	.word	0x0800e0b8
 8003380:	00001388 	.word	0x00001388
 8003384:	0800e0d0 	.word	0x0800e0d0
 8003388:	0800e0e4 	.word	0x0800e0e4
 800338c:	0800e0f4 	.word	0x0800e0f4
 8003390:	0800e100 	.word	0x0800e100
 8003394:	0800de30 	.word	0x0800de30
 8003398:	0800df58 	.word	0x0800df58
 800339c:	0800e10c 	.word	0x0800e10c
 80033a0:	0800df68 	.word	0x0800df68
 80033a4:	0800e120 	.word	0x0800e120
 80033a8:	0800e130 	.word	0x0800e130
 80033ac:	0800e144 	.word	0x0800e144
 80033b0:	0800e154 	.word	0x0800e154
 80033b4:	0800e170 	.word	0x0800e170
 80033b8:	0800e188 	.word	0x0800e188
 80033bc:	0800e19c 	.word	0x0800e19c
 80033c0:	50000800 	.word	0x50000800
 80033c4:	0800e1ac 	.word	0x0800e1ac
 80033c8:	20001aa9 	.word	0x20001aa9
 80033cc:	0800ed3c 	.word	0x0800ed3c
 80033d0:	0800e1c4 	.word	0x0800e1c4
 80033d4:	0800e1e0 	.word	0x0800e1e0
 80033d8:	0800e1f8 	.word	0x0800e1f8
			case LRWAN_CHECKING_RESPOND:
				//nếu gửi thành công thì stopProcess = SEND_CMD_COMPLETED, thất bại thì stopProcess = IDLE
				if(lrwanSendAndCheckingRespond(LRWAN_STOP_MSG,LRWAN_STOP_RES_MSG)){
 80033dc:	4a34      	ldr	r2, [pc, #208]	; (80034b0 <_Z7OS_loopv+0x4e8>)
 80033de:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <_Z7OS_loopv+0x4ec>)
 80033e0:	0011      	movs	r1, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff fcca 	bl	8002d7c <_Z27lrwanSendAndCheckingRespondPKcS0_>
 80033e8:	0003      	movs	r3, r0
 80033ea:	1e5a      	subs	r2, r3, #1
 80033ec:	4193      	sbcs	r3, r2
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d012      	beq.n	800341a <_Z7OS_loopv+0x452>
					SSD1306_Putstring(4, 5, (char*)"-> HOAN THANH!", &Font_5x7, SSD1306_COLOR_WHITE);
 80033f4:	4930      	ldr	r1, [pc, #192]	; (80034b8 <_Z7OS_loopv+0x4f0>)
 80033f6:	4a31      	ldr	r2, [pc, #196]	; (80034bc <_Z7OS_loopv+0x4f4>)
 80033f8:	2301      	movs	r3, #1
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	000b      	movs	r3, r1
 80033fe:	2105      	movs	r1, #5
 8003400:	2004      	movs	r0, #4
 8003402:	f006 fb47 	bl	8009a94 <SSD1306_Putstring>
					SYSTEM.println("SENT BY LORA SUCCESS");
 8003406:	4a2e      	ldr	r2, [pc, #184]	; (80034c0 <_Z7OS_loopv+0x4f8>)
 8003408:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <_Z7OS_loopv+0x4fc>)
 800340a:	0011      	movs	r1, r2
 800340c:	0018      	movs	r0, r3
 800340e:	f004 feaf 	bl	8008170 <_ZN5debug7printlnEPKc>
					stopProcess = SEND_CMD_COMPLETED;
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <_Z7OS_loopv+0x500>)
 8003414:	2207      	movs	r2, #7
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	e017      	b.n	800344a <_Z7OS_loopv+0x482>
				}else{
					SSD1306_Putstring(4, 5, (char*)"-> THAT BAI!", &Font_5x7, SSD1306_COLOR_WHITE);
 800341a:	4927      	ldr	r1, [pc, #156]	; (80034b8 <_Z7OS_loopv+0x4f0>)
 800341c:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <_Z7OS_loopv+0x504>)
 800341e:	2301      	movs	r3, #1
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	000b      	movs	r3, r1
 8003424:	2105      	movs	r1, #5
 8003426:	2004      	movs	r0, #4
 8003428:	f006 fb34 	bl	8009a94 <SSD1306_Putstring>
					SYSTEM.println("SENT BY LORA FAILED");
 800342c:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <_Z7OS_loopv+0x508>)
 800342e:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <_Z7OS_loopv+0x4fc>)
 8003430:	0011      	movs	r1, r2
 8003432:	0018      	movs	r0, r3
 8003434:	f004 fe9c 	bl	8008170 <_ZN5debug7printlnEPKc>
					SYSTEM.println("STOP WARNING FAILED");
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <_Z7OS_loopv+0x50c>)
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <_Z7OS_loopv+0x4fc>)
 800343c:	0011      	movs	r1, r2
 800343e:	0018      	movs	r0, r3
 8003440:	f004 fe96 	bl	8008170 <_ZN5debug7printlnEPKc>
					stopProcess = IDLE;
 8003444:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <_Z7OS_loopv+0x500>)
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(TIME_MSG_DISPLAY);
 800344a:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <_Z7OS_loopv+0x510>)
 800344c:	0018      	movs	r0, r3
 800344e:	f000 fced 	bl	8003e2c <HAL_Delay>
				break;
 8003452:	e012      	b.n	800347a <_Z7OS_loopv+0x4b2>
			case SEND_CMD_COMPLETED:
				HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, GPIO_PIN_SET);
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <_Z7OS_loopv+0x514>)
 8003456:	2201      	movs	r2, #1
 8003458:	2140      	movs	r1, #64	; 0x40
 800345a:	0018      	movs	r0, r3
 800345c:	f001 fb09 	bl	8004a72 <HAL_GPIO_WritePin>
				SYSTEM.println("DONE STOP WARNING PROCESS");
 8003460:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <_Z7OS_loopv+0x518>)
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <_Z7OS_loopv+0x4fc>)
 8003464:	0011      	movs	r1, r2
 8003466:	0018      	movs	r0, r3
 8003468:	f004 fe82 	bl	8008170 <_ZN5debug7printlnEPKc>
				doneWarningFlag = true;
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <_Z7OS_loopv+0x51c>)
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
				stopProcess=IDLE;
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <_Z7OS_loopv+0x500>)
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
				break;
 8003478:	46c0      	nop			; (mov r8, r8)
		}
		if(stopProcess == 0 && warningProcess == 0){
 800347a:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <_Z7OS_loopv+0x500>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d000      	beq.n	8003484 <_Z7OS_loopv+0x4bc>
 8003482:	e5f4      	b.n	800306e <_Z7OS_loopv+0xa6>
 8003484:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <_Z7OS_loopv+0x520>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d000      	beq.n	800348e <_Z7OS_loopv+0x4c6>
 800348c:	e5ef      	b.n	800306e <_Z7OS_loopv+0xa6>
			HAL_Delay(TIME_MSG_DISPLAY);
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <_Z7OS_loopv+0x510>)
 8003490:	0018      	movs	r0, r3
 8003492:	f000 fccb 	bl	8003e2c <HAL_Delay>
			waitFlag = true;
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <_Z7OS_loopv+0x524>)
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]

		//	// khi đã kiểm tra và hoàn tất các công việc thì bước vào trạng thái ngủ
			displayDoneWarning(doneWarningFlag);
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <_Z7OS_loopv+0x51c>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff fcd3 	bl	8002e4c <_Z18displayDoneWarningb>
	while(warningProcess!=0||stopProcess!=0){
 80034a6:	e5e2      	b.n	800306e <_Z7OS_loopv+0xa6>
		}
	}

}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b003      	add	sp, #12
 80034ae:	bd90      	pop	{r4, r7, pc}
 80034b0:	0800de30 	.word	0x0800de30
 80034b4:	0800e200 	.word	0x0800e200
 80034b8:	2000003c 	.word	0x2000003c
 80034bc:	0800df58 	.word	0x0800df58
 80034c0:	0800e21c 	.word	0x0800e21c
 80034c4:	200012a4 	.word	0x200012a4
 80034c8:	20001aa5 	.word	0x20001aa5
 80034cc:	0800df68 	.word	0x0800df68
 80034d0:	0800e234 	.word	0x0800e234
 80034d4:	0800e248 	.word	0x0800e248
 80034d8:	00001388 	.word	0x00001388
 80034dc:	50000800 	.word	0x50000800
 80034e0:	0800e25c 	.word	0x0800e25c
 80034e4:	20001aa9 	.word	0x20001aa9
 80034e8:	20001aa4 	.word	0x20001aa4
 80034ec:	20001aa8 	.word	0x20001aa8

080034f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034f4:	f000 fc2a 	bl	8003d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034f8:	f000 f82a 	bl	8003550 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034fc:	f7ff f80c 	bl	8002518 <MX_GPIO_Init>
  MX_ADC_Init();
 8003500:	f7fe ff5e 	bl	80023c0 <MX_ADC_Init>
  MX_TIM2_Init();
 8003504:	f000 f9ec 	bl	80038e0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003508:	f000 fa72 	bl	80039f0 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 800350c:	f000 faa4 	bl	8003a58 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8003510:	f000 fad6 	bl	8003ac0 <MX_USART5_UART_Init>
  MX_RTC_Init();
 8003514:	f000 f8e2 	bl	80036dc <MX_RTC_Init>
  MX_I2C2_Init();
 8003518:	f7ff f8de 	bl	80026d8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  updateProcess=MQTT_PUBLIC_DATA;
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <main+0x58>)
 800351e:	2208      	movs	r2, #8
 8003520:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */
  /* Cấu hình thời gian cho RTC với chu kì ngắt 120s */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003522:	2396      	movs	r3, #150	; 0x96
 8003524:	0099      	lsls	r1, r3, #2
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <main+0x5c>)
 8003528:	2204      	movs	r2, #4
 800352a:	0018      	movs	r0, r3
 800352c:	f003 f818 	bl	8006560 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003530:	0003      	movs	r3, r0
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4193      	sbcs	r3, r2
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <main+0x50>
    {
      Error_Handler();
 800353c:	f000 f88e 	bl	800365c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  OS_loop();
 8003540:	f7ff fd42 	bl	8002fc8 <_Z7OS_loopv>
 8003544:	e7fc      	b.n	8003540 <main+0x50>
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	20001aa6 	.word	0x20001aa6
 800354c:	20001ac0 	.word	0x20001ac0

08003550 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b09f      	sub	sp, #124	; 0x7c
 8003554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003556:	2440      	movs	r4, #64	; 0x40
 8003558:	193b      	adds	r3, r7, r4
 800355a:	0018      	movs	r0, r3
 800355c:	2338      	movs	r3, #56	; 0x38
 800355e:	001a      	movs	r2, r3
 8003560:	2100      	movs	r1, #0
 8003562:	f006 fe4e 	bl	800a202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003566:	232c      	movs	r3, #44	; 0x2c
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	0018      	movs	r0, r3
 800356c:	2314      	movs	r3, #20
 800356e:	001a      	movs	r2, r3
 8003570:	2100      	movs	r1, #0
 8003572:	f006 fe46 	bl	800a202 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	0018      	movs	r0, r3
 800357a:	2328      	movs	r3, #40	; 0x28
 800357c:	001a      	movs	r2, r3
 800357e:	2100      	movs	r1, #0
 8003580:	f006 fe3f 	bl	800a202 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <_Z18SystemClock_Configv+0x104>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a33      	ldr	r2, [pc, #204]	; (8003658 <_Z18SystemClock_Configv+0x108>)
 800358a:	401a      	ands	r2, r3
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <_Z18SystemClock_Configv+0x104>)
 800358e:	2180      	movs	r1, #128	; 0x80
 8003590:	0109      	lsls	r1, r1, #4
 8003592:	430a      	orrs	r2, r1
 8003594:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003596:	0021      	movs	r1, r4
 8003598:	187b      	adds	r3, r7, r1
 800359a:	220a      	movs	r2, #10
 800359c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	2201      	movs	r2, #1
 80035a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	2210      	movs	r2, #16
 80035a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	2201      	movs	r2, #1
 80035ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	2202      	movs	r2, #2
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	2200      	movs	r2, #0
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	02d2      	lsls	r2, r2, #11
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80035c4:	187b      	adds	r3, r7, r1
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	03d2      	lsls	r2, r2, #15
 80035ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	0018      	movs	r0, r3
 80035d0:	f001 ff6c 	bl	80054ac <HAL_RCC_OscConfig>
 80035d4:	0003      	movs	r3, r0
 80035d6:	1e5a      	subs	r2, r3, #1
 80035d8:	4193      	sbcs	r3, r2
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 80035e0:	f000 f83c 	bl	800365c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	220f      	movs	r2, #15
 80035ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	2203      	movs	r2, #3
 80035f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035f2:	187b      	adds	r3, r7, r1
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	2200      	movs	r2, #0
 8003602:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2101      	movs	r1, #1
 8003608:	0018      	movs	r0, r3
 800360a:	f002 fb25 	bl	8005c58 <HAL_RCC_ClockConfig>
 800360e:	0003      	movs	r3, r0
 8003610:	1e5a      	subs	r2, r3, #1
 8003612:	4193      	sbcs	r3, r2
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800361a:	f000 f81f 	bl	800365c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	2221      	movs	r2, #33	; 0x21
 8003622:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003624:	1d3b      	adds	r3, r7, #4
 8003626:	2200      	movs	r2, #0
 8003628:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	0292      	lsls	r2, r2, #10
 8003630:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	0018      	movs	r0, r3
 8003636:	f002 fd2f 	bl	8006098 <HAL_RCCEx_PeriphCLKConfig>
 800363a:	0003      	movs	r3, r0
 800363c:	1e5a      	subs	r2, r3, #1
 800363e:	4193      	sbcs	r3, r2
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <_Z18SystemClock_Configv+0xfa>
  {
    Error_Handler();
 8003646:	f000 f809 	bl	800365c <Error_Handler>
  }
}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	b01f      	add	sp, #124	; 0x7c
 8003650:	bd90      	pop	{r4, r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	40007000 	.word	0x40007000
 8003658:	ffffe7ff 	.word	0xffffe7ff

0800365c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003660:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003662:	e7fe      	b.n	8003662 <Error_Handler+0x6>

08003664 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d115      	bne.n	80036a0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d111      	bne.n	80036a0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
sim7x00 SIM7600E(&huart1) ;
 800367c:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003680:	0011      	movs	r1, r2
 8003682:	0018      	movs	r0, r3
 8003684:	f005 f898 	bl	80087b8 <_ZN7sim7x00C1EP20__UART_HandleTypeDef>
debug SYSTEM(&huart5) ;
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800368c:	0011      	movs	r1, r2
 800368e:	0018      	movs	r0, r3
 8003690:	f004 fd4a 	bl	8008128 <_ZN5debugC1EP20__UART_HandleTypeDef>
lrwan LRWAN(&huart4) ;
 8003694:	4a09      	ldr	r2, [pc, #36]	; (80036bc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003696:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003698:	0011      	movs	r1, r2
 800369a:	0018      	movs	r0, r3
 800369c:	f004 fd94 	bl	80081c8 <_ZN5lrwanC1EP20__UART_HandleTypeDef>
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	0000ffff 	.word	0x0000ffff
 80036ac:	20001b28 	.word	0x20001b28
 80036b0:	200002d8 	.word	0x200002d8
 80036b4:	20001c30 	.word	0x20001c30
 80036b8:	200012a4 	.word	0x200012a4
 80036bc:	20001bac 	.word	0x20001bac
 80036c0:	200012a8 	.word	0x200012a8

080036c4 <_GLOBAL__sub_I_SIM7600E>:
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <_GLOBAL__sub_I_SIM7600E+0x14>)
 80036ca:	0019      	movs	r1, r3
 80036cc:	2001      	movs	r0, #1
 80036ce:	f7ff ffc9 	bl	8003664 <_Z41__static_initialization_and_destruction_0ii>
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	0000ffff 	.word	0x0000ffff

080036dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <MX_RTC_Init+0x54>)
 80036e2:	4a14      	ldr	r2, [pc, #80]	; (8003734 <MX_RTC_Init+0x58>)
 80036e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <MX_RTC_Init+0x54>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <MX_RTC_Init+0x54>)
 80036ee:	227f      	movs	r2, #127	; 0x7f
 80036f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <MX_RTC_Init+0x54>)
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <MX_RTC_Init+0x54>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <MX_RTC_Init+0x54>)
 8003700:	2200      	movs	r2, #0
 8003702:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <MX_RTC_Init+0x54>)
 8003706:	2200      	movs	r2, #0
 8003708:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <MX_RTC_Init+0x54>)
 800370c:	2200      	movs	r2, #0
 800370e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <MX_RTC_Init+0x54>)
 8003712:	0018      	movs	r0, r3
 8003714:	f002 fe34 	bl	8006380 <HAL_RTC_Init>
 8003718:	0003      	movs	r3, r0
 800371a:	1e5a      	subs	r2, r3, #1
 800371c:	4193      	sbcs	r3, r2
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8003724:	f7ff ff9a 	bl	800365c <Error_Handler>
//  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
//  {
//    Error_Handler();
//  }

}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	20001ac0 	.word	0x20001ac0
 8003734:	40002800 	.word	0x40002800

08003738 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_RTC_MspInit+0x38>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10e      	bne.n	8003768 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_RTC_MspInit+0x3c>)
 800374c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RTC_MspInit+0x3c>)
 8003750:	2180      	movs	r1, #128	; 0x80
 8003752:	02c9      	lsls	r1, r1, #11
 8003754:	430a      	orrs	r2, r1
 8003756:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 3, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	2103      	movs	r1, #3
 800375c:	2002      	movs	r0, #2
 800375e:	f000 ff33 	bl	80045c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003762:	2002      	movs	r0, #2
 8003764:	f000 ff45 	bl	80045f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40002800 	.word	0x40002800
 8003774:	40021000 	.word	0x40021000

08003778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377c:	4b07      	ldr	r3, [pc, #28]	; (800379c <HAL_MspInit+0x24>)
 800377e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_MspInit+0x24>)
 8003782:	2101      	movs	r1, #1
 8003784:	430a      	orrs	r2, r1
 8003786:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_MspInit+0x24>)
 800378a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_MspInit+0x24>)
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	0549      	lsls	r1, r1, #21
 8003792:	430a      	orrs	r2, r1
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000

080037a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <NMI_Handler+0x4>

080037a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037aa:	e7fe      	b.n	80037aa <HardFault_Handler+0x4>

080037ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037c4:	f000 fb16 	bl	8003df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80037d4:	4b03      	ldr	r3, [pc, #12]	; (80037e4 <RTC_IRQHandler+0x14>)
 80037d6:	0018      	movs	r0, r3
 80037d8:	f002 ff88 	bl	80066ec <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	20001ac0 	.word	0x20001ac0

080037e8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80037ec:	2001      	movs	r0, #1
 80037ee:	f001 f979 	bl	8004ae4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80037f2:	2002      	movs	r0, #2
 80037f4:	f001 f976 	bl	8004ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	019b      	lsls	r3, r3, #6
 8003806:	0018      	movs	r0, r3
 8003808:	f001 f96c 	bl	8004ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <USART4_5_IRQHandler+0x1c>)
 800381a:	0018      	movs	r0, r3
 800381c:	f003 fc42 	bl	80070a4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <USART4_5_IRQHandler+0x20>)
 8003822:	0018      	movs	r0, r3
 8003824:	f003 fc3e 	bl	80070a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	20001bac 	.word	0x20001bac
 8003834:	20001c30 	.word	0x20001c30

08003838 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <TIM2_IRQHandler+0x14>)
 800383e:	0018      	movs	r0, r3
 8003840:	f002 ffc6 	bl	80067d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	20001ae8 	.word	0x20001ae8

08003850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <USART1_IRQHandler+0x14>)
 8003856:	0018      	movs	r0, r3
 8003858:	f003 fc24 	bl	80070a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	20001b28 	.word	0x20001b28

08003868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003870:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <_sbrk+0x5c>)
 8003872:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <_sbrk+0x60>)
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <_sbrk+0x64>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <_sbrk+0x64>)
 8003886:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <_sbrk+0x68>)
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <_sbrk+0x64>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	429a      	cmp	r2, r3
 8003896:	d207      	bcs.n	80038a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003898:	f006 fc76 	bl	800a188 <__errno>
 800389c:	0003      	movs	r3, r0
 800389e:	220c      	movs	r2, #12
 80038a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	425b      	negs	r3, r3
 80038a6:	e009      	b.n	80038bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <_sbrk+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <_sbrk+0x64>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	18d2      	adds	r2, r2, r3
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <_sbrk+0x64>)
 80038b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80038ba:	68fb      	ldr	r3, [r7, #12]
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b006      	add	sp, #24
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20005000 	.word	0x20005000
 80038c8:	00000400 	.word	0x00000400
 80038cc:	20001ae4 	.word	0x20001ae4
 80038d0:	200028e0 	.word	0x200028e0

080038d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e6:	2310      	movs	r3, #16
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	0018      	movs	r0, r3
 80038ec:	2308      	movs	r3, #8
 80038ee:	001a      	movs	r2, r3
 80038f0:	2100      	movs	r1, #0
 80038f2:	f006 fc86 	bl	800a202 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038f6:	003b      	movs	r3, r7
 80038f8:	0018      	movs	r0, r3
 80038fa:	2310      	movs	r3, #16
 80038fc:	001a      	movs	r2, r3
 80038fe:	2100      	movs	r1, #0
 8003900:	f006 fc7f 	bl	800a202 <memset>

  htim2.Instance = TIM2;
 8003904:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <MX_TIM2_Init+0xc8>)
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	05d2      	lsls	r2, r2, #23
 800390a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 800390c:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <MX_TIM2_Init+0xc8>)
 800390e:	4a27      	ldr	r2, [pc, #156]	; (80039ac <MX_TIM2_Init+0xcc>)
 8003910:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003912:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <MX_TIM2_Init+0xc8>)
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <MX_TIM2_Init+0xc8>)
 800391a:	4a25      	ldr	r2, [pc, #148]	; (80039b0 <MX_TIM2_Init+0xd0>)
 800391c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <MX_TIM2_Init+0xc8>)
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003924:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <MX_TIM2_Init+0xc8>)
 8003926:	2280      	movs	r2, #128	; 0x80
 8003928:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800392a:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <MX_TIM2_Init+0xc8>)
 800392c:	0018      	movs	r0, r3
 800392e:	f002 ff0f 	bl	8006750 <HAL_TIM_OC_Init>
 8003932:	0003      	movs	r3, r0
 8003934:	1e5a      	subs	r2, r3, #1
 8003936:	4193      	sbcs	r3, r2
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800393e:	f7ff fe8d 	bl	800365c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003942:	2110      	movs	r1, #16
 8003944:	187b      	adds	r3, r7, r1
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800394a:	187b      	adds	r3, r7, r1
 800394c:	2200      	movs	r2, #0
 800394e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003950:	187a      	adds	r2, r7, r1
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <MX_TIM2_Init+0xc8>)
 8003954:	0011      	movs	r1, r2
 8003956:	0018      	movs	r0, r3
 8003958:	f003 f9f2 	bl	8006d40 <HAL_TIMEx_MasterConfigSynchronization>
 800395c:	0003      	movs	r3, r0
 800395e:	1e5a      	subs	r2, r3, #1
 8003960:	4193      	sbcs	r3, r2
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003968:	f7ff fe78 	bl	800365c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800396c:	003b      	movs	r3, r7
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003972:	003b      	movs	r3, r7
 8003974:	2200      	movs	r2, #0
 8003976:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003978:	003b      	movs	r3, r7
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800397e:	003b      	movs	r3, r7
 8003980:	2200      	movs	r2, #0
 8003982:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003984:	0039      	movs	r1, r7
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <MX_TIM2_Init+0xc8>)
 8003988:	2200      	movs	r2, #0
 800398a:	0018      	movs	r0, r3
 800398c:	f003 f808 	bl	80069a0 <HAL_TIM_OC_ConfigChannel>
 8003990:	0003      	movs	r3, r0
 8003992:	1e5a      	subs	r2, r3, #1
 8003994:	4193      	sbcs	r3, r2
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 800399c:	f7ff fe5e 	bl	800365c <Error_Handler>
  }

}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b006      	add	sp, #24
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20001ae8 	.word	0x20001ae8
 80039ac:	00007cff 	.word	0x00007cff
 80039b0:	000003e7 	.word	0x000003e7

080039b4 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	05db      	lsls	r3, r3, #23
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d10d      	bne.n	80039e4 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039c8:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_TIM_OC_MspInit+0x38>)
 80039ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039cc:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_TIM_OC_MspInit+0x38>)
 80039ce:	2101      	movs	r1, #1
 80039d0:	430a      	orrs	r2, r1
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2103      	movs	r1, #3
 80039d8:	200f      	movs	r0, #15
 80039da:	f000 fdf5 	bl	80045c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039de:	200f      	movs	r0, #15
 80039e0:	f000 fe07 	bl	80045f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000

080039f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart5;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80039f4:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 80039f6:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <MX_USART1_UART_Init+0x64>)
 80039f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 80039fc:	22e1      	movs	r2, #225	; 0xe1
 80039fe:	0252      	lsls	r2, r2, #9
 8003a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a14:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 8003a16:	220c      	movs	r2, #12
 8003a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <MX_USART1_UART_Init+0x60>)
 8003a34:	0018      	movs	r0, r3
 8003a36:	f003 f9e1 	bl	8006dfc <HAL_UART_Init>
 8003a3a:	0003      	movs	r3, r0
 8003a3c:	1e5a      	subs	r2, r3, #1
 8003a3e:	4193      	sbcs	r3, r2
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003a46:	f7ff fe09 	bl	800365c <Error_Handler>
  }

}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20001b28 	.word	0x20001b28
 8003a54:	40013800 	.word	0x40013800

08003a58 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0

  huart4.Instance = USART4;
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a5e:	4a17      	ldr	r2, [pc, #92]	; (8003abc <MX_USART4_UART_Init+0x64>)
 8003a60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003a62:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a64:	2296      	movs	r2, #150	; 0x96
 8003a66:	0192      	lsls	r2, r2, #6
 8003a68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a7e:	220c      	movs	r2, #12
 8003a80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <MX_USART4_UART_Init+0x60>)
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f003 f9ad 	bl	8006dfc <HAL_UART_Init>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	1e5a      	subs	r2, r3, #1
 8003aa6:	4193      	sbcs	r3, r2
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_USART4_UART_Init+0x5a>
  {
    Error_Handler();
 8003aae:	f7ff fdd5 	bl	800365c <Error_Handler>
  }

}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20001bac 	.word	0x20001bac
 8003abc:	40004c00 	.word	0x40004c00

08003ac0 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0

  huart5.Instance = USART5;
 8003ac4:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003ac6:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <MX_USART5_UART_Init+0x64>)
 8003ac8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003acc:	22e1      	movs	r2, #225	; 0xe1
 8003ace:	0252      	lsls	r2, r2, #9
 8003ad0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003b02:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <MX_USART5_UART_Init+0x60>)
 8003b04:	0018      	movs	r0, r3
 8003b06:	f003 f979 	bl	8006dfc <HAL_UART_Init>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	1e5a      	subs	r2, r3, #1
 8003b0e:	4193      	sbcs	r3, r2
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_USART5_UART_Init+0x5a>
  {
    Error_Handler();
 8003b16:	f7ff fda1 	bl	800365c <Error_Handler>
  }

}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20001c30 	.word	0x20001c30
 8003b24:	40005000 	.word	0x40005000

08003b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b08d      	sub	sp, #52	; 0x34
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	231c      	movs	r3, #28
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	0018      	movs	r0, r3
 8003b36:	2314      	movs	r3, #20
 8003b38:	001a      	movs	r2, r3
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	f006 fb61 	bl	800a202 <memset>
  if(uartHandle->Instance==USART1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a65      	ldr	r2, [pc, #404]	; (8003cdc <HAL_UART_MspInit+0x1b4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d131      	bne.n	8003bae <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b4a:	4b65      	ldr	r3, [pc, #404]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4e:	4b64      	ldr	r3, [pc, #400]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	01c9      	lsls	r1, r1, #7
 8003b54:	430a      	orrs	r2, r1
 8003b56:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b58:	4b61      	ldr	r3, [pc, #388]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	4b60      	ldr	r3, [pc, #384]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003b5e:	2102      	movs	r1, #2
 8003b60:	430a      	orrs	r2, r1
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b64:	4b5e      	ldr	r3, [pc, #376]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM7600_TX_Pin|SIM7600_RX_Pin;
 8003b70:	211c      	movs	r1, #28
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	22c0      	movs	r2, #192	; 0xc0
 8003b76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	2200      	movs	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	2203      	movs	r2, #3
 8003b88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003b8a:	187b      	adds	r3, r7, r1
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	4a54      	ldr	r2, [pc, #336]	; (8003ce4 <HAL_UART_MspInit+0x1bc>)
 8003b94:	0019      	movs	r1, r3
 8003b96:	0010      	movs	r0, r2
 8003b98:	f000 fdd0 	bl	800473c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	201b      	movs	r0, #27
 8003ba2:	f000 fd11 	bl	80045c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ba6:	201b      	movs	r0, #27
 8003ba8:	f000 fd23 	bl	80045f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 8003bac:	e091      	b.n	8003cd2 <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART4)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a4d      	ldr	r2, [pc, #308]	; (8003ce8 <HAL_UART_MspInit+0x1c0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d132      	bne.n	8003c1e <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART4_CLK_ENABLE();
 8003bb8:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbc:	4b48      	ldr	r3, [pc, #288]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	0309      	lsls	r1, r1, #12
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc6:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bca:	4b45      	ldr	r3, [pc, #276]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003bcc:	2104      	movs	r1, #4
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bd2:	4b43      	ldr	r3, [pc, #268]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	4013      	ands	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LRWAN_TX_Pin|LRWAN_RX_Pin;
 8003bde:	211c      	movs	r1, #28
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	22c0      	movs	r2, #192	; 0xc0
 8003be4:	0112      	lsls	r2, r2, #4
 8003be6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	2202      	movs	r2, #2
 8003bec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8003bfa:	187b      	adds	r3, r7, r1
 8003bfc:	2206      	movs	r2, #6
 8003bfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	4a3a      	ldr	r2, [pc, #232]	; (8003cec <HAL_UART_MspInit+0x1c4>)
 8003c04:	0019      	movs	r1, r3
 8003c06:	0010      	movs	r0, r2
 8003c08:	f000 fd98 	bl	800473c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 2, 0);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2102      	movs	r1, #2
 8003c10:	200e      	movs	r0, #14
 8003c12:	f000 fcd9 	bl	80045c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8003c16:	200e      	movs	r0, #14
 8003c18:	f000 fceb 	bl	80045f2 <HAL_NVIC_EnableIRQ>
}
 8003c1c:	e059      	b.n	8003cd2 <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART5)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a33      	ldr	r2, [pc, #204]	; (8003cf0 <HAL_UART_MspInit+0x1c8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d154      	bne.n	8003cd2 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003c28:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003c2e:	2180      	movs	r1, #128	; 0x80
 8003c30:	0349      	lsls	r1, r1, #13
 8003c32:	430a      	orrs	r2, r1
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c36:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003c3c:	2104      	movs	r1, #4
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c42:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	2204      	movs	r2, #4
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c52:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003c54:	2108      	movs	r1, #8
 8003c56:	430a      	orrs	r2, r1
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c5a:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <HAL_UART_MspInit+0x1b8>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	2208      	movs	r2, #8
 8003c60:	4013      	ands	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8003c66:	211c      	movs	r1, #28
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	0152      	lsls	r2, r2, #5
 8003c6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	187b      	adds	r3, r7, r1
 8003c72:	2202      	movs	r2, #2
 8003c74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	187b      	adds	r3, r7, r1
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	2202      	movs	r2, #2
 8003c86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8003c88:	000c      	movs	r4, r1
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	4a17      	ldr	r2, [pc, #92]	; (8003cec <HAL_UART_MspInit+0x1c4>)
 8003c8e:	0019      	movs	r1, r3
 8003c90:	0010      	movs	r0, r2
 8003c92:	f000 fd53 	bl	800473c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8003c96:	0021      	movs	r1, r4
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9e:	187b      	adds	r3, r7, r1
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003caa:	187b      	adds	r3, r7, r1
 8003cac:	2203      	movs	r2, #3
 8003cae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	2206      	movs	r2, #6
 8003cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <HAL_UART_MspInit+0x1cc>)
 8003cba:	0019      	movs	r1, r3
 8003cbc:	0010      	movs	r0, r2
 8003cbe:	f000 fd3d 	bl	800473c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 2, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	200e      	movs	r0, #14
 8003cc8:	f000 fc7e 	bl	80045c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8003ccc:	200e      	movs	r0, #14
 8003cce:	f000 fc90 	bl	80045f2 <HAL_NVIC_EnableIRQ>
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b00d      	add	sp, #52	; 0x34
 8003cd8:	bd90      	pop	{r4, r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	50000400 	.word	0x50000400
 8003ce8:	40004c00 	.word	0x40004c00
 8003cec:	50000800 	.word	0x50000800
 8003cf0:	40005000 	.word	0x40005000
 8003cf4:	50000c00 	.word	0x50000c00

08003cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003cf8:	480d      	ldr	r0, [pc, #52]	; (8003d30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003cfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cfc:	480d      	ldr	r0, [pc, #52]	; (8003d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cfe:	490e      	ldr	r1, [pc, #56]	; (8003d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d00:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <LoopForever+0xe>)
  movs r3, #0
 8003d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d04:	e002      	b.n	8003d0c <LoopCopyDataInit>

08003d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d0a:	3304      	adds	r3, #4

08003d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d10:	d3f9      	bcc.n	8003d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d14:	4c0b      	ldr	r4, [pc, #44]	; (8003d44 <LoopForever+0x16>)
  movs r3, #0
 8003d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d18:	e001      	b.n	8003d1e <LoopFillZerobss>

08003d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d1c:	3204      	adds	r2, #4

08003d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d20:	d3fb      	bcc.n	8003d1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d22:	f7ff fdd7 	bl	80038d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d26:	f006 fa35 	bl	800a194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d2a:	f7ff fbe1 	bl	80034f0 <main>

08003d2e <LoopForever>:

LoopForever:
    b LoopForever
 8003d2e:	e7fe      	b.n	8003d2e <LoopForever>
   ldr   r0, =_estack
 8003d30:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d38:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003d3c:	0800f4bc 	.word	0x0800f4bc
  ldr r2, =_sbss
 8003d40:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8003d44:	200028dc 	.word	0x200028dc

08003d48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d48:	e7fe      	b.n	8003d48 <ADC1_COMP_IRQHandler>
	...

08003d4c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d52:	1dfb      	adds	r3, r7, #7
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_Init+0x3c>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <HAL_Init+0x3c>)
 8003d5e:	2140      	movs	r1, #64	; 0x40
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d64:	2000      	movs	r0, #0
 8003d66:	f000 f811 	bl	8003d8c <HAL_InitTick>
 8003d6a:	1e03      	subs	r3, r0, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e001      	b.n	8003d7a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d76:	f7ff fcff 	bl	8003778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d7a:	1dfb      	adds	r3, r7, #7
 8003d7c:	781b      	ldrb	r3, [r3, #0]
}
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b002      	add	sp, #8
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	40022000 	.word	0x40022000

08003d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_InitTick+0x5c>)
 8003d96:	681c      	ldr	r4, [r3, #0]
 8003d98:	4b14      	ldr	r3, [pc, #80]	; (8003dec <HAL_InitTick+0x60>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	23fa      	movs	r3, #250	; 0xfa
 8003da0:	0098      	lsls	r0, r3, #2
 8003da2:	f7fc f9c3 	bl	800012c <__udivsi3>
 8003da6:	0003      	movs	r3, r0
 8003da8:	0019      	movs	r1, r3
 8003daa:	0020      	movs	r0, r4
 8003dac:	f7fc f9be 	bl	800012c <__udivsi3>
 8003db0:	0003      	movs	r3, r0
 8003db2:	0018      	movs	r0, r3
 8003db4:	f000 fc2d 	bl	8004612 <HAL_SYSTICK_Config>
 8003db8:	1e03      	subs	r3, r0, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e00f      	b.n	8003de0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d80b      	bhi.n	8003dde <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	2301      	movs	r3, #1
 8003dca:	425b      	negs	r3, r3
 8003dcc:	2200      	movs	r2, #0
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f000 fbfa 	bl	80045c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_InitTick+0x64>)
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b003      	add	sp, #12
 8003de6:	bd90      	pop	{r4, r7, pc}
 8003de8:	20000000 	.word	0x20000000
 8003dec:	20000008 	.word	0x20000008
 8003df0:	20000004 	.word	0x20000004

08003df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_IncTick+0x1c>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	001a      	movs	r2, r3
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_IncTick+0x20>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	18d2      	adds	r2, r2, r3
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <HAL_IncTick+0x20>)
 8003e06:	601a      	str	r2, [r3, #0]
}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	20000008 	.word	0x20000008
 8003e14:	200028d4 	.word	0x200028d4

08003e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e1c:	4b02      	ldr	r3, [pc, #8]	; (8003e28 <HAL_GetTick+0x10>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	200028d4 	.word	0x200028d4

08003e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e34:	f7ff fff0 	bl	8003e18 <HAL_GetTick>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3301      	adds	r3, #1
 8003e44:	d005      	beq.n	8003e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_Delay+0x40>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	001a      	movs	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	f7ff ffe0 	bl	8003e18 <HAL_GetTick>
 8003e58:	0002      	movs	r2, r0
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d8f7      	bhi.n	8003e54 <HAL_Delay+0x28>
  {
  }
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b004      	add	sp, #16
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000008 	.word	0x20000008

08003e70 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <HAL_ResumeTick+0x18>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <HAL_ResumeTick+0x18>)
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	e000e010 	.word	0xe000e010

08003e8c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e159      	b.n	8004152 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2250      	movs	r2, #80	; 0x50
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7fe faf0 	bl	800249c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d005      	beq.n	8003ed4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003ed2:	d00b      	beq.n	8003eec <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	2210      	movs	r2, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2250      	movs	r2, #80	; 0x50
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e132      	b.n	8004152 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	4a9a      	ldr	r2, [pc, #616]	; (800415c <HAL_ADC_Init+0x2d0>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2203      	movs	r2, #3
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d108      	bne.n	8003f1c <HAL_ADC_Init+0x90>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2201      	movs	r2, #1
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_Init+0x90>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_ADC_Init+0x92>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d149      	bne.n	8003fb6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	23c0      	movs	r3, #192	; 0xc0
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d00b      	beq.n	8003f46 <HAL_ADC_Init+0xba>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	05db      	lsls	r3, r3, #23
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d005      	beq.n	8003f46 <HAL_ADC_Init+0xba>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d111      	bne.n	8003f6a <HAL_ADC_Init+0xde>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	0092      	lsls	r2, r2, #2
 8003f52:	0892      	lsrs	r2, r2, #2
 8003f54:	611a      	str	r2, [r3, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6919      	ldr	r1, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	611a      	str	r2, [r3, #16]
 8003f68:	e014      	b.n	8003f94 <HAL_ADC_Init+0x108>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	0892      	lsrs	r2, r2, #2
 8003f78:	611a      	str	r2, [r3, #16]
 8003f7a:	4b79      	ldr	r3, [pc, #484]	; (8004160 <HAL_ADC_Init+0x2d4>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b78      	ldr	r3, [pc, #480]	; (8004160 <HAL_ADC_Init+0x2d4>)
 8003f80:	4978      	ldr	r1, [pc, #480]	; (8004164 <HAL_ADC_Init+0x2d8>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	4b76      	ldr	r3, [pc, #472]	; (8004160 <HAL_ADC_Init+0x2d4>)
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	4b74      	ldr	r3, [pc, #464]	; (8004160 <HAL_ADC_Init+0x2d4>)
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2118      	movs	r1, #24
 8003fa0:	438a      	bics	r2, r1
 8003fa2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68d9      	ldr	r1, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	; (8004160 <HAL_ADC_Init+0x2d4>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b69      	ldr	r3, [pc, #420]	; (8004160 <HAL_ADC_Init+0x2d4>)
 8003fbc:	496a      	ldr	r1, [pc, #424]	; (8004168 <HAL_ADC_Init+0x2dc>)
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003fc2:	4b67      	ldr	r3, [pc, #412]	; (8004160 <HAL_ADC_Init+0x2d4>)
 8003fc4:	6819      	ldr	r1, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	065a      	lsls	r2, r3, #25
 8003fcc:	4b64      	ldr	r3, [pc, #400]	; (8004160 <HAL_ADC_Init+0x2d4>)
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	055b      	lsls	r3, r3, #21
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	0549      	lsls	r1, r1, #21
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	495b      	ldr	r1, [pc, #364]	; (800416c <HAL_ADC_Init+0x2e0>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68d9      	ldr	r1, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d101      	bne.n	8004018 <HAL_ADC_Init+0x18c>
 8004014:	2304      	movs	r3, #4
 8004016:	e000      	b.n	800401a <HAL_ADC_Init+0x18e>
 8004018:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800401a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2020      	movs	r0, #32
 8004020:	5c1b      	ldrb	r3, [r3, r0]
 8004022:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004024:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	202c      	movs	r0, #44	; 0x2c
 800402a:	5c1b      	ldrb	r3, [r3, r0]
 800402c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800402e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004034:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800403c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004044:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004052:	23c2      	movs	r3, #194	; 0xc2
 8004054:	33ff      	adds	r3, #255	; 0xff
 8004056:	429a      	cmp	r2, r3
 8004058:	d00b      	beq.n	8004072 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68d9      	ldr	r1, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2221      	movs	r2, #33	; 0x21
 8004076:	5c9b      	ldrb	r3, [r3, r2]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d11a      	bne.n	80040b2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	5c9b      	ldrb	r3, [r3, r2]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	0249      	lsls	r1, r1, #9
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e00b      	b.n	80040b2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	2220      	movs	r2, #32
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	2201      	movs	r2, #1
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d11f      	bne.n	80040fa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	492a      	ldr	r1, [pc, #168]	; (8004170 <HAL_ADC_Init+0x2e4>)
 80040c6:	400a      	ands	r2, r1
 80040c8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6919      	ldr	r1, [r3, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80040d8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80040de:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2101      	movs	r1, #1
 80040f4:	430a      	orrs	r2, r1
 80040f6:	611a      	str	r2, [r3, #16]
 80040f8:	e00e      	b.n	8004118 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	2201      	movs	r2, #1
 8004102:	4013      	ands	r3, r2
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2101      	movs	r1, #1
 8004114:	438a      	bics	r2, r1
 8004116:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2107      	movs	r1, #7
 8004124:	438a      	bics	r2, r1
 8004126:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6959      	ldr	r1, [r3, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	2203      	movs	r2, #3
 8004146:	4393      	bics	r3, r2
 8004148:	2201      	movs	r2, #1
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b002      	add	sp, #8
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	fffffefd 	.word	0xfffffefd
 8004160:	40012708 	.word	0x40012708
 8004164:	ffc3ffff 	.word	0xffc3ffff
 8004168:	fdffffff 	.word	0xfdffffff
 800416c:	fffe0219 	.word	0xfffe0219
 8004170:	fffffc03 	.word	0xfffffc03

08004174 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800417c:	230f      	movs	r3, #15
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2204      	movs	r2, #4
 800418c:	4013      	ands	r3, r2
 800418e:	d138      	bne.n	8004202 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2250      	movs	r2, #80	; 0x50
 8004194:	5c9b      	ldrb	r3, [r3, r2]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_ADC_Start+0x2a>
 800419a:	2302      	movs	r3, #2
 800419c:	e038      	b.n	8004210 <HAL_ADC_Start+0x9c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2250      	movs	r2, #80	; 0x50
 80041a2:	2101      	movs	r1, #1
 80041a4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d007      	beq.n	80041be <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80041ae:	230f      	movs	r3, #15
 80041b0:	18fc      	adds	r4, r7, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 f8dd 	bl	8004374 <ADC_Enable>
 80041ba:	0003      	movs	r3, r0
 80041bc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041be:	230f      	movs	r3, #15
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d120      	bne.n	800420a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	4a12      	ldr	r2, [pc, #72]	; (8004218 <HAL_ADC_Start+0xa4>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	2280      	movs	r2, #128	; 0x80
 80041d2:	0052      	lsls	r2, r2, #1
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2250      	movs	r2, #80	; 0x50
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	221c      	movs	r2, #28
 80041ee:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2104      	movs	r1, #4
 80041fc:	430a      	orrs	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	e003      	b.n	800420a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004202:	230f      	movs	r3, #15
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	2202      	movs	r2, #2
 8004208:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800420a:	230f      	movs	r3, #15
 800420c:	18fb      	adds	r3, r7, r3
 800420e:	781b      	ldrb	r3, [r3, #0]
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b005      	add	sp, #20
 8004216:	bd90      	pop	{r4, r7, pc}
 8004218:	fffff0fe 	.word	0xfffff0fe

0800421c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b002      	add	sp, #8
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2250      	movs	r2, #80	; 0x50
 8004242:	5c9b      	ldrb	r3, [r3, r2]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_ADC_ConfigChannel+0x18>
 8004248:	2302      	movs	r3, #2
 800424a:	e085      	b.n	8004358 <HAL_ADC_ConfigChannel+0x124>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2250      	movs	r2, #80	; 0x50
 8004250:	2101      	movs	r1, #1
 8004252:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2204      	movs	r2, #4
 800425c:	4013      	ands	r3, r2
 800425e:	d00b      	beq.n	8004278 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	2220      	movs	r2, #32
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2250      	movs	r2, #80	; 0x50
 8004270:	2100      	movs	r1, #0
 8004272:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e06f      	b.n	8004358 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4a38      	ldr	r2, [pc, #224]	; (8004360 <HAL_ADC_ConfigChannel+0x12c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d035      	beq.n	80042ee <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	035b      	lsls	r3, r3, #13
 800428e:	0b5a      	lsrs	r2, r3, #13
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	02db      	lsls	r3, r3, #11
 80042a0:	4013      	ands	r3, r2
 80042a2:	d009      	beq.n	80042b8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80042a4:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 80042aa:	2180      	movs	r1, #128	; 0x80
 80042ac:	0409      	lsls	r1, r1, #16
 80042ae:	430a      	orrs	r2, r1
 80042b0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80042b2:	200a      	movs	r0, #10
 80042b4:	f000 f8be 	bl	8004434 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	029b      	lsls	r3, r3, #10
 80042c0:	4013      	ands	r3, r2
 80042c2:	d006      	beq.n	80042d2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80042c4:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b26      	ldr	r3, [pc, #152]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 80042ca:	2180      	movs	r1, #128	; 0x80
 80042cc:	03c9      	lsls	r1, r1, #15
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	025b      	lsls	r3, r3, #9
 80042da:	4013      	ands	r3, r2
 80042dc:	d037      	beq.n	800434e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80042de:	4b21      	ldr	r3, [pc, #132]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	0449      	lsls	r1, r1, #17
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	e02f      	b.n	800434e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	035b      	lsls	r3, r3, #13
 80042fa:	0b5b      	lsrs	r3, r3, #13
 80042fc:	43d9      	mvns	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	400a      	ands	r2, r1
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	02db      	lsls	r3, r3, #11
 800430e:	4013      	ands	r3, r2
 8004310:	d005      	beq.n	800431e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4b13      	ldr	r3, [pc, #76]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 8004318:	4913      	ldr	r1, [pc, #76]	; (8004368 <HAL_ADC_ConfigChannel+0x134>)
 800431a:	400a      	ands	r2, r1
 800431c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	029b      	lsls	r3, r3, #10
 8004326:	4013      	ands	r3, r2
 8004328:	d005      	beq.n	8004336 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800432a:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 8004330:	490e      	ldr	r1, [pc, #56]	; (800436c <HAL_ADC_ConfigChannel+0x138>)
 8004332:	400a      	ands	r2, r1
 8004334:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	025b      	lsls	r3, r3, #9
 800433e:	4013      	ands	r3, r2
 8004340:	d005      	beq.n	800434e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <HAL_ADC_ConfigChannel+0x130>)
 8004348:	4909      	ldr	r1, [pc, #36]	; (8004370 <HAL_ADC_ConfigChannel+0x13c>)
 800434a:	400a      	ands	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2250      	movs	r2, #80	; 0x50
 8004352:	2100      	movs	r1, #0
 8004354:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	b002      	add	sp, #8
 800435e:	bd80      	pop	{r7, pc}
 8004360:	00001001 	.word	0x00001001
 8004364:	40012708 	.word	0x40012708
 8004368:	ff7fffff 	.word	0xff7fffff
 800436c:	ffbfffff 	.word	0xffbfffff
 8004370:	feffffff 	.word	0xfeffffff

08004374 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2203      	movs	r2, #3
 8004388:	4013      	ands	r3, r2
 800438a:	2b01      	cmp	r3, #1
 800438c:	d108      	bne.n	80043a0 <ADC_Enable+0x2c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	4013      	ands	r3, r2
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <ADC_Enable+0x2c>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <ADC_Enable+0x2e>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d13f      	bne.n	8004426 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a20      	ldr	r2, [pc, #128]	; (8004430 <ADC_Enable+0xbc>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	d00d      	beq.n	80043ce <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	2210      	movs	r2, #16
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	2201      	movs	r2, #1
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e02c      	b.n	8004428 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2101      	movs	r1, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80043de:	2001      	movs	r0, #1
 80043e0:	f000 f828 	bl	8004434 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80043e4:	f7ff fd18 	bl	8003e18 <HAL_GetTick>
 80043e8:	0003      	movs	r3, r0
 80043ea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80043ec:	e014      	b.n	8004418 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043ee:	f7ff fd13 	bl	8003e18 <HAL_GetTick>
 80043f2:	0002      	movs	r2, r0
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b0a      	cmp	r3, #10
 80043fa:	d90d      	bls.n	8004418 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	2210      	movs	r2, #16
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	2201      	movs	r2, #1
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e007      	b.n	8004428 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2201      	movs	r2, #1
 8004420:	4013      	ands	r3, r2
 8004422:	2b01      	cmp	r3, #1
 8004424:	d1e3      	bne.n	80043ee <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b004      	add	sp, #16
 800442e:	bd80      	pop	{r7, pc}
 8004430:	80000017 	.word	0x80000017

08004434 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <ADC_DelayMicroSecond+0x34>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	490a      	ldr	r1, [pc, #40]	; (800446c <ADC_DelayMicroSecond+0x38>)
 8004442:	0018      	movs	r0, r3
 8004444:	f7fb fe72 	bl	800012c <__udivsi3>
 8004448:	0003      	movs	r3, r0
 800444a:	001a      	movs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4353      	muls	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004452:	e002      	b.n	800445a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b01      	subs	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f9      	bne.n	8004454 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b004      	add	sp, #16
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000000 	.word	0x20000000
 800446c:	000f4240 	.word	0x000f4240

08004470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	0002      	movs	r2, r0
 8004478:	1dfb      	adds	r3, r7, #7
 800447a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800447c:	1dfb      	adds	r3, r7, #7
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b7f      	cmp	r3, #127	; 0x7f
 8004482:	d809      	bhi.n	8004498 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004484:	1dfb      	adds	r3, r7, #7
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	001a      	movs	r2, r3
 800448a:	231f      	movs	r3, #31
 800448c:	401a      	ands	r2, r3
 800448e:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <__NVIC_EnableIRQ+0x30>)
 8004490:	2101      	movs	r1, #1
 8004492:	4091      	lsls	r1, r2
 8004494:	000a      	movs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]
  }
}
 8004498:	46c0      	nop			; (mov r8, r8)
 800449a:	46bd      	mov	sp, r7
 800449c:	b002      	add	sp, #8
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	e000e100 	.word	0xe000e100

080044a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	0002      	movs	r2, r0
 80044ac:	6039      	str	r1, [r7, #0]
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044b2:	1dfb      	adds	r3, r7, #7
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b7f      	cmp	r3, #127	; 0x7f
 80044b8:	d828      	bhi.n	800450c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044ba:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <__NVIC_SetPriority+0xd4>)
 80044bc:	1dfb      	adds	r3, r7, #7
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b25b      	sxtb	r3, r3
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	33c0      	adds	r3, #192	; 0xc0
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	589b      	ldr	r3, [r3, r2]
 80044ca:	1dfa      	adds	r2, r7, #7
 80044cc:	7812      	ldrb	r2, [r2, #0]
 80044ce:	0011      	movs	r1, r2
 80044d0:	2203      	movs	r2, #3
 80044d2:	400a      	ands	r2, r1
 80044d4:	00d2      	lsls	r2, r2, #3
 80044d6:	21ff      	movs	r1, #255	; 0xff
 80044d8:	4091      	lsls	r1, r2
 80044da:	000a      	movs	r2, r1
 80044dc:	43d2      	mvns	r2, r2
 80044de:	401a      	ands	r2, r3
 80044e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	019b      	lsls	r3, r3, #6
 80044e6:	22ff      	movs	r2, #255	; 0xff
 80044e8:	401a      	ands	r2, r3
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	0018      	movs	r0, r3
 80044f0:	2303      	movs	r3, #3
 80044f2:	4003      	ands	r3, r0
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044f8:	481f      	ldr	r0, [pc, #124]	; (8004578 <__NVIC_SetPriority+0xd4>)
 80044fa:	1dfb      	adds	r3, r7, #7
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b25b      	sxtb	r3, r3
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	430a      	orrs	r2, r1
 8004504:	33c0      	adds	r3, #192	; 0xc0
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800450a:	e031      	b.n	8004570 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800450c:	4a1b      	ldr	r2, [pc, #108]	; (800457c <__NVIC_SetPriority+0xd8>)
 800450e:	1dfb      	adds	r3, r7, #7
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	0019      	movs	r1, r3
 8004514:	230f      	movs	r3, #15
 8004516:	400b      	ands	r3, r1
 8004518:	3b08      	subs	r3, #8
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3306      	adds	r3, #6
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	18d3      	adds	r3, r2, r3
 8004522:	3304      	adds	r3, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	1dfa      	adds	r2, r7, #7
 8004528:	7812      	ldrb	r2, [r2, #0]
 800452a:	0011      	movs	r1, r2
 800452c:	2203      	movs	r2, #3
 800452e:	400a      	ands	r2, r1
 8004530:	00d2      	lsls	r2, r2, #3
 8004532:	21ff      	movs	r1, #255	; 0xff
 8004534:	4091      	lsls	r1, r2
 8004536:	000a      	movs	r2, r1
 8004538:	43d2      	mvns	r2, r2
 800453a:	401a      	ands	r2, r3
 800453c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	019b      	lsls	r3, r3, #6
 8004542:	22ff      	movs	r2, #255	; 0xff
 8004544:	401a      	ands	r2, r3
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	0018      	movs	r0, r3
 800454c:	2303      	movs	r3, #3
 800454e:	4003      	ands	r3, r0
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004554:	4809      	ldr	r0, [pc, #36]	; (800457c <__NVIC_SetPriority+0xd8>)
 8004556:	1dfb      	adds	r3, r7, #7
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	001c      	movs	r4, r3
 800455c:	230f      	movs	r3, #15
 800455e:	4023      	ands	r3, r4
 8004560:	3b08      	subs	r3, #8
 8004562:	089b      	lsrs	r3, r3, #2
 8004564:	430a      	orrs	r2, r1
 8004566:	3306      	adds	r3, #6
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	18c3      	adds	r3, r0, r3
 800456c:	3304      	adds	r3, #4
 800456e:	601a      	str	r2, [r3, #0]
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b003      	add	sp, #12
 8004576:	bd90      	pop	{r4, r7, pc}
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	4a0c      	ldr	r2, [pc, #48]	; (80045c0 <SysTick_Config+0x40>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004592:	2301      	movs	r3, #1
 8004594:	e010      	b.n	80045b8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <SysTick_Config+0x44>)
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	3a01      	subs	r2, #1
 800459c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800459e:	2301      	movs	r3, #1
 80045a0:	425b      	negs	r3, r3
 80045a2:	2103      	movs	r1, #3
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7ff ff7d 	bl	80044a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <SysTick_Config+0x44>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <SysTick_Config+0x44>)
 80045b2:	2207      	movs	r2, #7
 80045b4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b002      	add	sp, #8
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	00ffffff 	.word	0x00ffffff
 80045c4:	e000e010 	.word	0xe000e010

080045c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	210f      	movs	r1, #15
 80045d4:	187b      	adds	r3, r7, r1
 80045d6:	1c02      	adds	r2, r0, #0
 80045d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	b25b      	sxtb	r3, r3
 80045e2:	0011      	movs	r1, r2
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7ff ff5d 	bl	80044a4 <__NVIC_SetPriority>
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b004      	add	sp, #16
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	0002      	movs	r2, r0
 80045fa:	1dfb      	adds	r3, r7, #7
 80045fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045fe:	1dfb      	adds	r3, r7, #7
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b25b      	sxtb	r3, r3
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff ff33 	bl	8004470 <__NVIC_EnableIRQ>
}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	b002      	add	sp, #8
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	0018      	movs	r0, r3
 800461e:	f7ff ffaf 	bl	8004580 <SysTick_Config>
 8004622:	0003      	movs	r3, r0
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b002      	add	sp, #8
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004634:	230f      	movs	r3, #15
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2225      	movs	r2, #37	; 0x25
 8004640:	5c9b      	ldrb	r3, [r3, r2]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d008      	beq.n	800465a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2204      	movs	r2, #4
 800464c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2224      	movs	r2, #36	; 0x24
 8004652:	2100      	movs	r1, #0
 8004654:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e024      	b.n	80046a4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	210e      	movs	r1, #14
 8004666:	438a      	bics	r2, r1
 8004668:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2101      	movs	r1, #1
 8004676:	438a      	bics	r2, r1
 8004678:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	221c      	movs	r2, #28
 8004680:	401a      	ands	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	2101      	movs	r1, #1
 8004688:	4091      	lsls	r1, r2
 800468a:	000a      	movs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2225      	movs	r2, #37	; 0x25
 8004692:	2101      	movs	r1, #1
 8004694:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2224      	movs	r2, #36	; 0x24
 800469a:	2100      	movs	r1, #0
 800469c:	5499      	strb	r1, [r3, r2]

    return status;
 800469e:	230f      	movs	r3, #15
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b004      	add	sp, #16
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b4:	230f      	movs	r3, #15
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2225      	movs	r2, #37	; 0x25
 80046c0:	5c9b      	ldrb	r3, [r3, r2]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d007      	beq.n	80046d8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2204      	movs	r2, #4
 80046cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80046ce:	230f      	movs	r3, #15
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	2201      	movs	r2, #1
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e02a      	b.n	800472e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	210e      	movs	r1, #14
 80046e4:	438a      	bics	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2101      	movs	r1, #1
 80046f4:	438a      	bics	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fc:	221c      	movs	r2, #28
 80046fe:	401a      	ands	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	2101      	movs	r1, #1
 8004706:	4091      	lsls	r1, r2
 8004708:	000a      	movs	r2, r1
 800470a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2225      	movs	r2, #37	; 0x25
 8004710:	2101      	movs	r1, #1
 8004712:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	2100      	movs	r1, #0
 800471a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	0010      	movs	r0, r2
 800472c:	4798      	blx	r3
    }
  }
  return status;
 800472e:	230f      	movs	r3, #15
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	781b      	ldrb	r3, [r3, #0]
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b004      	add	sp, #16
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004752:	e155      	b.n	8004a00 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2101      	movs	r1, #1
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4091      	lsls	r1, r2
 800475e:	000a      	movs	r2, r1
 8004760:	4013      	ands	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d100      	bne.n	800476c <HAL_GPIO_Init+0x30>
 800476a:	e146      	b.n	80049fa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d00b      	beq.n	800478c <HAL_GPIO_Init+0x50>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d007      	beq.n	800478c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004780:	2b11      	cmp	r3, #17
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b12      	cmp	r3, #18
 800478a:	d130      	bne.n	80047ee <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	2203      	movs	r2, #3
 8004798:	409a      	lsls	r2, r3
 800479a:	0013      	movs	r3, r2
 800479c:	43da      	mvns	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	409a      	lsls	r2, r3
 80047ae:	0013      	movs	r3, r2
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047c2:	2201      	movs	r2, #1
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	409a      	lsls	r2, r3
 80047c8:	0013      	movs	r3, r2
 80047ca:	43da      	mvns	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4013      	ands	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	091b      	lsrs	r3, r3, #4
 80047d8:	2201      	movs	r2, #1
 80047da:	401a      	ands	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	409a      	lsls	r2, r3
 80047e0:	0013      	movs	r3, r2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	2203      	movs	r2, #3
 80047fa:	409a      	lsls	r2, r3
 80047fc:	0013      	movs	r3, r2
 80047fe:	43da      	mvns	r2, r3
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4013      	ands	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	0013      	movs	r3, r2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0xf2>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b12      	cmp	r3, #18
 800482c:	d123      	bne.n	8004876 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	08da      	lsrs	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3208      	adds	r2, #8
 8004836:	0092      	lsls	r2, r2, #2
 8004838:	58d3      	ldr	r3, [r2, r3]
 800483a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2207      	movs	r2, #7
 8004840:	4013      	ands	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	220f      	movs	r2, #15
 8004846:	409a      	lsls	r2, r3
 8004848:	0013      	movs	r3, r2
 800484a:	43da      	mvns	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2107      	movs	r1, #7
 800485a:	400b      	ands	r3, r1
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	409a      	lsls	r2, r3
 8004860:	0013      	movs	r3, r2
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	08da      	lsrs	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3208      	adds	r2, #8
 8004870:	0092      	lsls	r2, r2, #2
 8004872:	6939      	ldr	r1, [r7, #16]
 8004874:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	2203      	movs	r2, #3
 8004882:	409a      	lsls	r2, r3
 8004884:	0013      	movs	r3, r2
 8004886:	43da      	mvns	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2203      	movs	r2, #3
 8004894:	401a      	ands	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	409a      	lsls	r2, r3
 800489c:	0013      	movs	r3, r2
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	055b      	lsls	r3, r3, #21
 80048b2:	4013      	ands	r3, r2
 80048b4:	d100      	bne.n	80048b8 <HAL_GPIO_Init+0x17c>
 80048b6:	e0a0      	b.n	80049fa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b8:	4b57      	ldr	r3, [pc, #348]	; (8004a18 <HAL_GPIO_Init+0x2dc>)
 80048ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048bc:	4b56      	ldr	r3, [pc, #344]	; (8004a18 <HAL_GPIO_Init+0x2dc>)
 80048be:	2101      	movs	r1, #1
 80048c0:	430a      	orrs	r2, r1
 80048c2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80048c4:	4a55      	ldr	r2, [pc, #340]	; (8004a1c <HAL_GPIO_Init+0x2e0>)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	3302      	adds	r3, #2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	589b      	ldr	r3, [r3, r2]
 80048d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2203      	movs	r2, #3
 80048d6:	4013      	ands	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	220f      	movs	r2, #15
 80048dc:	409a      	lsls	r2, r3
 80048de:	0013      	movs	r3, r2
 80048e0:	43da      	mvns	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4013      	ands	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	23a0      	movs	r3, #160	; 0xa0
 80048ec:	05db      	lsls	r3, r3, #23
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d01f      	beq.n	8004932 <HAL_GPIO_Init+0x1f6>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a4a      	ldr	r2, [pc, #296]	; (8004a20 <HAL_GPIO_Init+0x2e4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d019      	beq.n	800492e <HAL_GPIO_Init+0x1f2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a49      	ldr	r2, [pc, #292]	; (8004a24 <HAL_GPIO_Init+0x2e8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <HAL_GPIO_Init+0x1ee>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a48      	ldr	r2, [pc, #288]	; (8004a28 <HAL_GPIO_Init+0x2ec>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00d      	beq.n	8004926 <HAL_GPIO_Init+0x1ea>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a47      	ldr	r2, [pc, #284]	; (8004a2c <HAL_GPIO_Init+0x2f0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d007      	beq.n	8004922 <HAL_GPIO_Init+0x1e6>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a46      	ldr	r2, [pc, #280]	; (8004a30 <HAL_GPIO_Init+0x2f4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d101      	bne.n	800491e <HAL_GPIO_Init+0x1e2>
 800491a:	2305      	movs	r3, #5
 800491c:	e00a      	b.n	8004934 <HAL_GPIO_Init+0x1f8>
 800491e:	2306      	movs	r3, #6
 8004920:	e008      	b.n	8004934 <HAL_GPIO_Init+0x1f8>
 8004922:	2304      	movs	r3, #4
 8004924:	e006      	b.n	8004934 <HAL_GPIO_Init+0x1f8>
 8004926:	2303      	movs	r3, #3
 8004928:	e004      	b.n	8004934 <HAL_GPIO_Init+0x1f8>
 800492a:	2302      	movs	r3, #2
 800492c:	e002      	b.n	8004934 <HAL_GPIO_Init+0x1f8>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <HAL_GPIO_Init+0x1f8>
 8004932:	2300      	movs	r3, #0
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	2103      	movs	r1, #3
 8004938:	400a      	ands	r2, r1
 800493a:	0092      	lsls	r2, r2, #2
 800493c:	4093      	lsls	r3, r2
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004944:	4935      	ldr	r1, [pc, #212]	; (8004a1c <HAL_GPIO_Init+0x2e0>)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	089b      	lsrs	r3, r3, #2
 800494a:	3302      	adds	r3, #2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004952:	4b38      	ldr	r3, [pc, #224]	; (8004a34 <HAL_GPIO_Init+0x2f8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	43da      	mvns	r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4013      	ands	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	2380      	movs	r3, #128	; 0x80
 8004968:	025b      	lsls	r3, r3, #9
 800496a:	4013      	ands	r3, r2
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004976:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <HAL_GPIO_Init+0x2f8>)
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800497c:	4b2d      	ldr	r3, [pc, #180]	; (8004a34 <HAL_GPIO_Init+0x2f8>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	43da      	mvns	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4013      	ands	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	029b      	lsls	r3, r3, #10
 8004994:	4013      	ands	r3, r2
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_GPIO_Init+0x2f8>)
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <HAL_GPIO_Init+0x2f8>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	43da      	mvns	r2, r3
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4013      	ands	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	035b      	lsls	r3, r3, #13
 80049be:	4013      	ands	r3, r2
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80049ca:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <HAL_GPIO_Init+0x2f8>)
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80049d0:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_GPIO_Init+0x2f8>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	43da      	mvns	r2, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4013      	ands	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	039b      	lsls	r3, r3, #14
 80049e8:	4013      	ands	r3, r2
 80049ea:	d003      	beq.n	80049f4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <HAL_GPIO_Init+0x2f8>)
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	3301      	adds	r3, #1
 80049fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	40da      	lsrs	r2, r3
 8004a08:	1e13      	subs	r3, r2, #0
 8004a0a:	d000      	beq.n	8004a0e <HAL_GPIO_Init+0x2d2>
 8004a0c:	e6a2      	b.n	8004754 <HAL_GPIO_Init+0x18>
  }
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b006      	add	sp, #24
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	50000400 	.word	0x50000400
 8004a24:	50000800 	.word	0x50000800
 8004a28:	50000c00 	.word	0x50000c00
 8004a2c:	50001000 	.word	0x50001000
 8004a30:	50001c00 	.word	0x50001c00
 8004a34:	40010400 	.word	0x40010400

08004a38 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	000a      	movs	r2, r1
 8004a42:	1cbb      	adds	r3, r7, #2
 8004a44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	1cba      	adds	r2, r7, #2
 8004a4c:	8812      	ldrh	r2, [r2, #0]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004a52:	230f      	movs	r3, #15
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	2201      	movs	r2, #1
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e003      	b.n	8004a64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a5c:	230f      	movs	r3, #15
 8004a5e:	18fb      	adds	r3, r7, r3
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004a64:	230f      	movs	r3, #15
 8004a66:	18fb      	adds	r3, r7, r3
 8004a68:	781b      	ldrb	r3, [r3, #0]
}
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b004      	add	sp, #16
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	0008      	movs	r0, r1
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	1cbb      	adds	r3, r7, #2
 8004a80:	1c02      	adds	r2, r0, #0
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	1c7b      	adds	r3, r7, #1
 8004a86:	1c0a      	adds	r2, r1, #0
 8004a88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a8a:	1c7b      	adds	r3, r7, #1
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a92:	1cbb      	adds	r3, r7, #2
 8004a94:	881a      	ldrh	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004a9a:	e003      	b.n	8004aa4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004a9c:	1cbb      	adds	r3, r7, #2
 8004a9e:	881a      	ldrh	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	000a      	movs	r2, r1
 8004ab6:	1cbb      	adds	r3, r7, #2
 8004ab8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ac0:	1cbb      	adds	r3, r7, #2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	041a      	lsls	r2, r3, #16
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	43db      	mvns	r3, r3
 8004ace:	1cb9      	adds	r1, r7, #2
 8004ad0:	8809      	ldrh	r1, [r1, #0]
 8004ad2:	400b      	ands	r3, r1
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	619a      	str	r2, [r3, #24]
}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b004      	add	sp, #16
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	0002      	movs	r2, r0
 8004aec:	1dbb      	adds	r3, r7, #6
 8004aee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	1dba      	adds	r2, r7, #6
 8004af6:	8812      	ldrh	r2, [r2, #0]
 8004af8:	4013      	ands	r3, r2
 8004afa:	d008      	beq.n	8004b0e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004afe:	1dba      	adds	r2, r7, #6
 8004b00:	8812      	ldrh	r2, [r2, #0]
 8004b02:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b04:	1dbb      	adds	r3, r7, #6
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fd fecb 	bl	80028a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b002      	add	sp, #8
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	40010400 	.word	0x40010400

08004b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e082      	b.n	8004c34 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2241      	movs	r2, #65	; 0x41
 8004b32:	5c9b      	ldrb	r3, [r3, r2]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2240      	movs	r2, #64	; 0x40
 8004b3e:	2100      	movs	r1, #0
 8004b40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7fd fe13 	bl	8002770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2241      	movs	r2, #65	; 0x41
 8004b4e:	2124      	movs	r1, #36	; 0x24
 8004b50:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	438a      	bics	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4934      	ldr	r1, [pc, #208]	; (8004c3c <HAL_I2C_Init+0x120>)
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4931      	ldr	r1, [pc, #196]	; (8004c40 <HAL_I2C_Init+0x124>)
 8004b7c:	400a      	ands	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d108      	bne.n	8004b9a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	0209      	lsls	r1, r1, #8
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	e007      	b.n	8004baa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2184      	movs	r1, #132	; 0x84
 8004ba4:	0209      	lsls	r1, r1, #8
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d104      	bne.n	8004bbc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2280      	movs	r2, #128	; 0x80
 8004bb8:	0112      	lsls	r2, r2, #4
 8004bba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	491f      	ldr	r1, [pc, #124]	; (8004c44 <HAL_I2C_Init+0x128>)
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	491a      	ldr	r1, [pc, #104]	; (8004c40 <HAL_I2C_Init+0x124>)
 8004bd8:	400a      	ands	r2, r1
 8004bda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	0011      	movs	r1, r2
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	021a      	lsls	r2, r3, #8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69d9      	ldr	r1, [r3, #28]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1a      	ldr	r2, [r3, #32]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2101      	movs	r1, #1
 8004c12:	430a      	orrs	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2241      	movs	r2, #65	; 0x41
 8004c20:	2120      	movs	r1, #32
 8004c22:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2242      	movs	r2, #66	; 0x42
 8004c2e:	2100      	movs	r1, #0
 8004c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	f0ffffff 	.word	0xf0ffffff
 8004c40:	ffff7fff 	.word	0xffff7fff
 8004c44:	02008000 	.word	0x02008000

08004c48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b089      	sub	sp, #36	; 0x24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	0008      	movs	r0, r1
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	0019      	movs	r1, r3
 8004c56:	230a      	movs	r3, #10
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	1c02      	adds	r2, r0, #0
 8004c5c:	801a      	strh	r2, [r3, #0]
 8004c5e:	2308      	movs	r3, #8
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	1c0a      	adds	r2, r1, #0
 8004c64:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2241      	movs	r2, #65	; 0x41
 8004c6a:	5c9b      	ldrb	r3, [r3, r2]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d000      	beq.n	8004c74 <HAL_I2C_Master_Transmit+0x2c>
 8004c72:	e0e7      	b.n	8004e44 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2240      	movs	r2, #64	; 0x40
 8004c78:	5c9b      	ldrb	r3, [r3, r2]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_I2C_Master_Transmit+0x3a>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e0e1      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1fe>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2240      	movs	r2, #64	; 0x40
 8004c86:	2101      	movs	r1, #1
 8004c88:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c8a:	f7ff f8c5 	bl	8003e18 <HAL_GetTick>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c92:	2380      	movs	r3, #128	; 0x80
 8004c94:	0219      	lsls	r1, r3, #8
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	2319      	movs	r3, #25
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f000 fa16 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8004ca4:	1e03      	subs	r3, r0, #0
 8004ca6:	d001      	beq.n	8004cac <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0cc      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2241      	movs	r2, #65	; 0x41
 8004cb0:	2121      	movs	r1, #33	; 0x21
 8004cb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2242      	movs	r2, #66	; 0x42
 8004cb8:	2110      	movs	r1, #16
 8004cba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2208      	movs	r2, #8
 8004ccc:	18ba      	adds	r2, r7, r2
 8004cce:	8812      	ldrh	r2, [r2, #0]
 8004cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2bff      	cmp	r3, #255	; 0xff
 8004ce0:	d911      	bls.n	8004d06 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	22ff      	movs	r2, #255	; 0xff
 8004ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	045c      	lsls	r4, r3, #17
 8004cf2:	230a      	movs	r3, #10
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	8819      	ldrh	r1, [r3, #0]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	4b55      	ldr	r3, [pc, #340]	; (8004e50 <HAL_I2C_Master_Transmit+0x208>)
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	0023      	movs	r3, r4
 8004d00:	f000 fb06 	bl	8005310 <I2C_TransferConfig>
 8004d04:	e075      	b.n	8004df2 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	049c      	lsls	r4, r3, #18
 8004d1a:	230a      	movs	r3, #10
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	8819      	ldrh	r1, [r3, #0]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	4b4b      	ldr	r3, [pc, #300]	; (8004e50 <HAL_I2C_Master_Transmit+0x208>)
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	0023      	movs	r3, r4
 8004d28:	f000 faf2 	bl	8005310 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004d2c:	e061      	b.n	8004df2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	0018      	movs	r0, r3
 8004d36:	f000 fa0a 	bl	800514e <I2C_WaitOnTXISFlagUntilTimeout>
 8004d3a:	1e03      	subs	r3, r0, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e081      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	781a      	ldrb	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d03a      	beq.n	8004df2 <HAL_I2C_Master_Transmit+0x1aa>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d136      	bne.n	8004df2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	0013      	movs	r3, r2
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2180      	movs	r1, #128	; 0x80
 8004d92:	f000 f99d 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8004d96:	1e03      	subs	r3, r0, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e053      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2bff      	cmp	r3, #255	; 0xff
 8004da6:	d911      	bls.n	8004dcc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	22ff      	movs	r2, #255	; 0xff
 8004dac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	045c      	lsls	r4, r3, #17
 8004db8:	230a      	movs	r3, #10
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	8819      	ldrh	r1, [r3, #0]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	0023      	movs	r3, r4
 8004dc6:	f000 faa3 	bl	8005310 <I2C_TransferConfig>
 8004dca:	e012      	b.n	8004df2 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	049c      	lsls	r4, r3, #18
 8004de0:	230a      	movs	r3, #10
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	8819      	ldrh	r1, [r3, #0]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	2300      	movs	r3, #0
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	0023      	movs	r3, r4
 8004dee:	f000 fa8f 	bl	8005310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d198      	bne.n	8004d2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	0018      	movs	r0, r3
 8004e04:	f000 f9e2 	bl	80051cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e08:	1e03      	subs	r3, r0, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e01a      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2220      	movs	r2, #32
 8004e16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	490c      	ldr	r1, [pc, #48]	; (8004e54 <HAL_I2C_Master_Transmit+0x20c>)
 8004e24:	400a      	ands	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2241      	movs	r2, #65	; 0x41
 8004e2c:	2120      	movs	r1, #32
 8004e2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2242      	movs	r2, #66	; 0x42
 8004e34:	2100      	movs	r1, #0
 8004e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2240      	movs	r2, #64	; 0x40
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b007      	add	sp, #28
 8004e4c:	bd90      	pop	{r4, r7, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	80002000 	.word	0x80002000
 8004e54:	fe00e800 	.word	0xfe00e800

08004e58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	230a      	movs	r3, #10
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	1c0a      	adds	r2, r1, #0
 8004e6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2241      	movs	r2, #65	; 0x41
 8004e74:	5c9b      	ldrb	r3, [r3, r2]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d000      	beq.n	8004e7e <HAL_I2C_IsDeviceReady+0x26>
 8004e7c:	e0fe      	b.n	800507c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	401a      	ands	r2, r3
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d101      	bne.n	8004e96 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0f3      	b.n	800507e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2240      	movs	r2, #64	; 0x40
 8004e9a:	5c9b      	ldrb	r3, [r3, r2]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_I2C_IsDeviceReady+0x4c>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e0ec      	b.n	800507e <HAL_I2C_IsDeviceReady+0x226>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2240      	movs	r2, #64	; 0x40
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2241      	movs	r2, #65	; 0x41
 8004eb0:	2124      	movs	r1, #36	; 0x24
 8004eb2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_I2C_IsDeviceReady+0x7a>
 8004ec2:	230a      	movs	r3, #10
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	059b      	lsls	r3, r3, #22
 8004eca:	0d9b      	lsrs	r3, r3, #22
 8004ecc:	4a6e      	ldr	r2, [pc, #440]	; (8005088 <HAL_I2C_IsDeviceReady+0x230>)
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	e007      	b.n	8004ee2 <HAL_I2C_IsDeviceReady+0x8a>
 8004ed2:	230a      	movs	r3, #10
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	059b      	lsls	r3, r3, #22
 8004eda:	0d9b      	lsrs	r3, r3, #22
 8004edc:	22a0      	movs	r2, #160	; 0xa0
 8004ede:	0192      	lsls	r2, r2, #6
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fe ff96 	bl	8003e18 <HAL_GetTick>
 8004eec:	0003      	movs	r3, r0
 8004eee:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	4013      	ands	r3, r2
 8004efa:	3b20      	subs	r3, #32
 8004efc:	425a      	negs	r2, r3
 8004efe:	4153      	adcs	r3, r2
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	231f      	movs	r3, #31
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	2210      	movs	r2, #16
 8004f10:	4013      	ands	r3, r2
 8004f12:	3b10      	subs	r3, #16
 8004f14:	425a      	negs	r2, r3
 8004f16:	4153      	adcs	r3, r2
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	231e      	movs	r3, #30
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004f20:	e035      	b.n	8004f8e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	3301      	adds	r3, #1
 8004f26:	d01a      	beq.n	8004f5e <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f28:	f7fe ff76 	bl	8003e18 <HAL_GetTick>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d302      	bcc.n	8004f3e <HAL_I2C_IsDeviceReady+0xe6>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10f      	bne.n	8004f5e <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2241      	movs	r2, #65	; 0x41
 8004f42:	2120      	movs	r1, #32
 8004f44:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2240      	movs	r2, #64	; 0x40
 8004f56:	2100      	movs	r1, #0
 8004f58:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e08f      	b.n	800507e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2220      	movs	r2, #32
 8004f66:	4013      	ands	r3, r2
 8004f68:	3b20      	subs	r3, #32
 8004f6a:	425a      	negs	r2, r3
 8004f6c:	4153      	adcs	r3, r2
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	231f      	movs	r3, #31
 8004f72:	18fb      	adds	r3, r7, r3
 8004f74:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	4013      	ands	r3, r2
 8004f80:	3b10      	subs	r3, #16
 8004f82:	425a      	negs	r2, r3
 8004f84:	4153      	adcs	r3, r2
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	231e      	movs	r3, #30
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004f8e:	231f      	movs	r3, #31
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <HAL_I2C_IsDeviceReady+0x14a>
 8004f98:	231e      	movs	r3, #30
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0bf      	beq.n	8004f22 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	2210      	movs	r2, #16
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d01a      	beq.n	8004fe6 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	0013      	movs	r3, r2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2120      	movs	r1, #32
 8004fbe:	f000 f887 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	1e03      	subs	r3, r0, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e059      	b.n	800507e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2241      	movs	r2, #65	; 0x41
 8004fd6:	2120      	movs	r1, #32
 8004fd8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2240      	movs	r2, #64	; 0x40
 8004fde:	2100      	movs	r1, #0
 8004fe0:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e04b      	b.n	800507e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	0013      	movs	r3, r2
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2120      	movs	r1, #32
 8004ff4:	f000 f86c 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 8004ff8:	1e03      	subs	r3, r0, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e03e      	b.n	800507e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2210      	movs	r2, #16
 8005006:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2220      	movs	r2, #32
 800500e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d119      	bne.n	800504c <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2180      	movs	r1, #128	; 0x80
 8005024:	01c9      	lsls	r1, r1, #7
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	0013      	movs	r3, r2
 8005034:	2200      	movs	r2, #0
 8005036:	2120      	movs	r1, #32
 8005038:	f000 f84a 	bl	80050d0 <I2C_WaitOnFlagUntilTimeout>
 800503c:	1e03      	subs	r3, r0, #0
 800503e:	d001      	beq.n	8005044 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e01c      	b.n	800507e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2220      	movs	r2, #32
 800504a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3301      	adds	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	d900      	bls.n	800505c <HAL_I2C_IsDeviceReady+0x204>
 800505a:	e72e      	b.n	8004eba <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2241      	movs	r2, #65	; 0x41
 8005060:	2120      	movs	r1, #32
 8005062:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005068:	2220      	movs	r2, #32
 800506a:	431a      	orrs	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2240      	movs	r2, #64	; 0x40
 8005074:	2100      	movs	r1, #0
 8005076:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	0018      	movs	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	b008      	add	sp, #32
 8005084:	bd80      	pop	{r7, pc}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	02002000 	.word	0x02002000

0800508c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2202      	movs	r2, #2
 800509c:	4013      	ands	r3, r2
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d103      	bne.n	80050aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	2201      	movs	r2, #1
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d007      	beq.n	80050c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2101      	movs	r1, #1
 80050c4:	430a      	orrs	r2, r1
 80050c6:	619a      	str	r2, [r3, #24]
  }
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b002      	add	sp, #8
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	1dfb      	adds	r3, r7, #7
 80050de:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050e0:	e021      	b.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	d01e      	beq.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e8:	f7fe fe96 	bl	8003e18 <HAL_GetTick>
 80050ec:	0002      	movs	r2, r0
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d302      	bcc.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x2e>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d113      	bne.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	2220      	movs	r2, #32
 8005104:	431a      	orrs	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2241      	movs	r2, #65	; 0x41
 800510e:	2120      	movs	r1, #32
 8005110:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2242      	movs	r2, #66	; 0x42
 8005116:	2100      	movs	r1, #0
 8005118:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2240      	movs	r2, #64	; 0x40
 800511e:	2100      	movs	r1, #0
 8005120:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e00f      	b.n	8005146 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	4013      	ands	r3, r2
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	425a      	negs	r2, r3
 8005136:	4153      	adcs	r3, r2
 8005138:	b2db      	uxtb	r3, r3
 800513a:	001a      	movs	r2, r3
 800513c:	1dfb      	adds	r3, r7, #7
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d0ce      	beq.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b004      	add	sp, #16
 800514c:	bd80      	pop	{r7, pc}

0800514e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800515a:	e02b      	b.n	80051b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	0018      	movs	r0, r3
 8005164:	f000 f86e 	bl	8005244 <I2C_IsAcknowledgeFailed>
 8005168:	1e03      	subs	r3, r0, #0
 800516a:	d001      	beq.n	8005170 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e029      	b.n	80051c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	3301      	adds	r3, #1
 8005174:	d01e      	beq.n	80051b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005176:	f7fe fe4f 	bl	8003e18 <HAL_GetTick>
 800517a:	0002      	movs	r2, r0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	429a      	cmp	r2, r3
 8005184:	d302      	bcc.n	800518c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d113      	bne.n	80051b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	2220      	movs	r2, #32
 8005192:	431a      	orrs	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2241      	movs	r2, #65	; 0x41
 800519c:	2120      	movs	r1, #32
 800519e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2242      	movs	r2, #66	; 0x42
 80051a4:	2100      	movs	r1, #0
 80051a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2240      	movs	r2, #64	; 0x40
 80051ac:	2100      	movs	r1, #0
 80051ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e007      	b.n	80051c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2202      	movs	r2, #2
 80051bc:	4013      	ands	r3, r2
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d1cc      	bne.n	800515c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	0018      	movs	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b004      	add	sp, #16
 80051ca:	bd80      	pop	{r7, pc}

080051cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051d8:	e028      	b.n	800522c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	0018      	movs	r0, r3
 80051e2:	f000 f82f 	bl	8005244 <I2C_IsAcknowledgeFailed>
 80051e6:	1e03      	subs	r3, r0, #0
 80051e8:	d001      	beq.n	80051ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e026      	b.n	800523c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fe fe13 	bl	8003e18 <HAL_GetTick>
 80051f2:	0002      	movs	r2, r0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d113      	bne.n	800522c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005208:	2220      	movs	r2, #32
 800520a:	431a      	orrs	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2241      	movs	r2, #65	; 0x41
 8005214:	2120      	movs	r1, #32
 8005216:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2242      	movs	r2, #66	; 0x42
 800521c:	2100      	movs	r1, #0
 800521e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2240      	movs	r2, #64	; 0x40
 8005224:	2100      	movs	r1, #0
 8005226:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e007      	b.n	800523c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2220      	movs	r2, #32
 8005234:	4013      	ands	r3, r2
 8005236:	2b20      	cmp	r3, #32
 8005238:	d1cf      	bne.n	80051da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	0018      	movs	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	b004      	add	sp, #16
 8005242:	bd80      	pop	{r7, pc}

08005244 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2210      	movs	r2, #16
 8005258:	4013      	ands	r3, r2
 800525a:	2b10      	cmp	r3, #16
 800525c:	d151      	bne.n	8005302 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800525e:	e021      	b.n	80052a4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	3301      	adds	r3, #1
 8005264:	d01e      	beq.n	80052a4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005266:	f7fe fdd7 	bl	8003e18 <HAL_GetTick>
 800526a:	0002      	movs	r2, r0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	429a      	cmp	r2, r3
 8005274:	d302      	bcc.n	800527c <I2C_IsAcknowledgeFailed+0x38>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d113      	bne.n	80052a4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	2220      	movs	r2, #32
 8005282:	431a      	orrs	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2241      	movs	r2, #65	; 0x41
 800528c:	2120      	movs	r1, #32
 800528e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2242      	movs	r2, #66	; 0x42
 8005294:	2100      	movs	r1, #0
 8005296:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2240      	movs	r2, #64	; 0x40
 800529c:	2100      	movs	r1, #0
 800529e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e02f      	b.n	8005304 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2220      	movs	r2, #32
 80052ac:	4013      	ands	r3, r2
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d1d6      	bne.n	8005260 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2210      	movs	r2, #16
 80052b8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2220      	movs	r2, #32
 80052c0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7ff fee1 	bl	800508c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	490d      	ldr	r1, [pc, #52]	; (800530c <I2C_IsAcknowledgeFailed+0xc8>)
 80052d6:	400a      	ands	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	2204      	movs	r2, #4
 80052e0:	431a      	orrs	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2241      	movs	r2, #65	; 0x41
 80052ea:	2120      	movs	r1, #32
 80052ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2242      	movs	r2, #66	; 0x42
 80052f2:	2100      	movs	r1, #0
 80052f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2240      	movs	r2, #64	; 0x40
 80052fa:	2100      	movs	r1, #0
 80052fc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	0018      	movs	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	b004      	add	sp, #16
 800530a:	bd80      	pop	{r7, pc}
 800530c:	fe00e800 	.word	0xfe00e800

08005310 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	0008      	movs	r0, r1
 800531a:	0011      	movs	r1, r2
 800531c:	607b      	str	r3, [r7, #4]
 800531e:	240a      	movs	r4, #10
 8005320:	193b      	adds	r3, r7, r4
 8005322:	1c02      	adds	r2, r0, #0
 8005324:	801a      	strh	r2, [r3, #0]
 8005326:	2009      	movs	r0, #9
 8005328:	183b      	adds	r3, r7, r0
 800532a:	1c0a      	adds	r2, r1, #0
 800532c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	0d51      	lsrs	r1, r2, #21
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	00d2      	lsls	r2, r2, #3
 800533c:	400a      	ands	r2, r1
 800533e:	490e      	ldr	r1, [pc, #56]	; (8005378 <I2C_TransferConfig+0x68>)
 8005340:	430a      	orrs	r2, r1
 8005342:	43d2      	mvns	r2, r2
 8005344:	401a      	ands	r2, r3
 8005346:	0011      	movs	r1, r2
 8005348:	193b      	adds	r3, r7, r4
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	059b      	lsls	r3, r3, #22
 800534e:	0d9a      	lsrs	r2, r3, #22
 8005350:	183b      	adds	r3, r7, r0
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	0418      	lsls	r0, r3, #16
 8005356:	23ff      	movs	r3, #255	; 0xff
 8005358:	041b      	lsls	r3, r3, #16
 800535a:	4003      	ands	r3, r0
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	431a      	orrs	r2, r3
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b005      	add	sp, #20
 8005374:	bd90      	pop	{r4, r7, pc}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	03ff63ff 	.word	0x03ff63ff

0800537c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2241      	movs	r2, #65	; 0x41
 800538a:	5c9b      	ldrb	r3, [r3, r2]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b20      	cmp	r3, #32
 8005390:	d138      	bne.n	8005404 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2240      	movs	r2, #64	; 0x40
 8005396:	5c9b      	ldrb	r3, [r3, r2]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800539c:	2302      	movs	r3, #2
 800539e:	e032      	b.n	8005406 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2240      	movs	r2, #64	; 0x40
 80053a4:	2101      	movs	r1, #1
 80053a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2241      	movs	r2, #65	; 0x41
 80053ac:	2124      	movs	r1, #36	; 0x24
 80053ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2101      	movs	r1, #1
 80053bc:	438a      	bics	r2, r1
 80053be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4911      	ldr	r1, [pc, #68]	; (8005410 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80053cc:	400a      	ands	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6819      	ldr	r1, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2101      	movs	r1, #1
 80053ec:	430a      	orrs	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2241      	movs	r2, #65	; 0x41
 80053f4:	2120      	movs	r1, #32
 80053f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2240      	movs	r2, #64	; 0x40
 80053fc:	2100      	movs	r1, #0
 80053fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	e000      	b.n	8005406 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005404:	2302      	movs	r3, #2
  }
}
 8005406:	0018      	movs	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	b002      	add	sp, #8
 800540c:	bd80      	pop	{r7, pc}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	ffffefff 	.word	0xffffefff

08005414 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2241      	movs	r2, #65	; 0x41
 8005422:	5c9b      	ldrb	r3, [r3, r2]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b20      	cmp	r3, #32
 8005428:	d139      	bne.n	800549e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2240      	movs	r2, #64	; 0x40
 800542e:	5c9b      	ldrb	r3, [r3, r2]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005434:	2302      	movs	r3, #2
 8005436:	e033      	b.n	80054a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2240      	movs	r2, #64	; 0x40
 800543c:	2101      	movs	r1, #1
 800543e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2241      	movs	r2, #65	; 0x41
 8005444:	2124      	movs	r1, #36	; 0x24
 8005446:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2101      	movs	r1, #1
 8005454:	438a      	bics	r2, r1
 8005456:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a11      	ldr	r2, [pc, #68]	; (80054a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005464:	4013      	ands	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2101      	movs	r1, #1
 8005486:	430a      	orrs	r2, r1
 8005488:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2241      	movs	r2, #65	; 0x41
 800548e:	2120      	movs	r1, #32
 8005490:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2240      	movs	r2, #64	; 0x40
 8005496:	2100      	movs	r1, #0
 8005498:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e000      	b.n	80054a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800549e:	2302      	movs	r3, #2
  }
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b004      	add	sp, #16
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	fffff0ff 	.word	0xfffff0ff

080054ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054ac:	b5b0      	push	{r4, r5, r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f000 fbc2 	bl	8005c44 <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054c0:	4bca      	ldr	r3, [pc, #808]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	220c      	movs	r2, #12
 80054c6:	4013      	ands	r3, r2
 80054c8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ca:	4bc8      	ldr	r3, [pc, #800]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	025b      	lsls	r3, r3, #9
 80054d2:	4013      	ands	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2201      	movs	r2, #1
 80054dc:	4013      	ands	r3, r2
 80054de:	d100      	bne.n	80054e2 <HAL_RCC_OscConfig+0x36>
 80054e0:	e07e      	b.n	80055e0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d007      	beq.n	80054f8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2b0c      	cmp	r3, #12
 80054ec:	d112      	bne.n	8005514 <HAL_RCC_OscConfig+0x68>
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	025b      	lsls	r3, r3, #9
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d10d      	bne.n	8005514 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	4bbc      	ldr	r3, [pc, #752]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	029b      	lsls	r3, r3, #10
 8005500:	4013      	ands	r3, r2
 8005502:	d100      	bne.n	8005506 <HAL_RCC_OscConfig+0x5a>
 8005504:	e06b      	b.n	80055de <HAL_RCC_OscConfig+0x132>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d167      	bne.n	80055de <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f000 fb98 	bl	8005c44 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	025b      	lsls	r3, r3, #9
 800551c:	429a      	cmp	r2, r3
 800551e:	d107      	bne.n	8005530 <HAL_RCC_OscConfig+0x84>
 8005520:	4bb2      	ldr	r3, [pc, #712]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	4bb1      	ldr	r3, [pc, #708]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005526:	2180      	movs	r1, #128	; 0x80
 8005528:	0249      	lsls	r1, r1, #9
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e027      	b.n	8005580 <HAL_RCC_OscConfig+0xd4>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	23a0      	movs	r3, #160	; 0xa0
 8005536:	02db      	lsls	r3, r3, #11
 8005538:	429a      	cmp	r2, r3
 800553a:	d10e      	bne.n	800555a <HAL_RCC_OscConfig+0xae>
 800553c:	4bab      	ldr	r3, [pc, #684]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4baa      	ldr	r3, [pc, #680]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005542:	2180      	movs	r1, #128	; 0x80
 8005544:	02c9      	lsls	r1, r1, #11
 8005546:	430a      	orrs	r2, r1
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	4ba8      	ldr	r3, [pc, #672]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4ba7      	ldr	r3, [pc, #668]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005550:	2180      	movs	r1, #128	; 0x80
 8005552:	0249      	lsls	r1, r1, #9
 8005554:	430a      	orrs	r2, r1
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e012      	b.n	8005580 <HAL_RCC_OscConfig+0xd4>
 800555a:	4ba4      	ldr	r3, [pc, #656]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4ba3      	ldr	r3, [pc, #652]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005560:	49a3      	ldr	r1, [pc, #652]	; (80057f0 <HAL_RCC_OscConfig+0x344>)
 8005562:	400a      	ands	r2, r1
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	4ba1      	ldr	r3, [pc, #644]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	025b      	lsls	r3, r3, #9
 800556e:	4013      	ands	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4b9d      	ldr	r3, [pc, #628]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b9c      	ldr	r3, [pc, #624]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 800557a:	499e      	ldr	r1, [pc, #632]	; (80057f4 <HAL_RCC_OscConfig+0x348>)
 800557c:	400a      	ands	r2, r1
 800557e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005588:	f7fe fc46 	bl	8003e18 <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005590:	e009      	b.n	80055a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005592:	f7fe fc41 	bl	8003e18 <HAL_GetTick>
 8005596:	0002      	movs	r2, r0
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b64      	cmp	r3, #100	; 0x64
 800559e:	d902      	bls.n	80055a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	f000 fb4f 	bl	8005c44 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055a6:	4b91      	ldr	r3, [pc, #580]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	029b      	lsls	r3, r3, #10
 80055ae:	4013      	ands	r3, r2
 80055b0:	d0ef      	beq.n	8005592 <HAL_RCC_OscConfig+0xe6>
 80055b2:	e015      	b.n	80055e0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b4:	f7fe fc30 	bl	8003e18 <HAL_GetTick>
 80055b8:	0003      	movs	r3, r0
 80055ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055be:	f7fe fc2b 	bl	8003e18 <HAL_GetTick>
 80055c2:	0002      	movs	r2, r0
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b64      	cmp	r3, #100	; 0x64
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e339      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055d0:	4b86      	ldr	r3, [pc, #536]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	2380      	movs	r3, #128	; 0x80
 80055d6:	029b      	lsls	r3, r3, #10
 80055d8:	4013      	ands	r3, r2
 80055da:	d1f0      	bne.n	80055be <HAL_RCC_OscConfig+0x112>
 80055dc:	e000      	b.n	80055e0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2202      	movs	r2, #2
 80055e6:	4013      	ands	r3, r2
 80055e8:	d100      	bne.n	80055ec <HAL_RCC_OscConfig+0x140>
 80055ea:	e09a      	b.n	8005722 <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	2220      	movs	r2, #32
 80055f6:	4013      	ands	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80055fa:	4b7c      	ldr	r3, [pc, #496]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b7b      	ldr	r3, [pc, #492]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005600:	2120      	movs	r1, #32
 8005602:	430a      	orrs	r2, r1
 8005604:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	2220      	movs	r2, #32
 800560a:	4393      	bics	r3, r2
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d005      	beq.n	8005620 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b0c      	cmp	r3, #12
 8005618:	d13f      	bne.n	800569a <HAL_RCC_OscConfig+0x1ee>
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d13c      	bne.n	800569a <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005620:	4b72      	ldr	r3, [pc, #456]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2204      	movs	r2, #4
 8005626:	4013      	ands	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_RCC_OscConfig+0x188>
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e307      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005634:	4b6d      	ldr	r3, [pc, #436]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4a6f      	ldr	r2, [pc, #444]	; (80057f8 <HAL_RCC_OscConfig+0x34c>)
 800563a:	4013      	ands	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	021a      	lsls	r2, r3, #8
 8005644:	4b69      	ldr	r3, [pc, #420]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800564a:	4b68      	ldr	r3, [pc, #416]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2209      	movs	r2, #9
 8005650:	4393      	bics	r3, r2
 8005652:	0019      	movs	r1, r3
 8005654:	4b65      	ldr	r3, [pc, #404]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005658:	430a      	orrs	r2, r1
 800565a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800565c:	f000 fc44 	bl	8005ee8 <HAL_RCC_GetSysClockFreq>
 8005660:	0001      	movs	r1, r0
 8005662:	4b62      	ldr	r3, [pc, #392]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	220f      	movs	r2, #15
 800566a:	4013      	ands	r3, r2
 800566c:	4a63      	ldr	r2, [pc, #396]	; (80057fc <HAL_RCC_OscConfig+0x350>)
 800566e:	5cd3      	ldrb	r3, [r2, r3]
 8005670:	000a      	movs	r2, r1
 8005672:	40da      	lsrs	r2, r3
 8005674:	4b62      	ldr	r3, [pc, #392]	; (8005800 <HAL_RCC_OscConfig+0x354>)
 8005676:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005678:	4b62      	ldr	r3, [pc, #392]	; (8005804 <HAL_RCC_OscConfig+0x358>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2513      	movs	r5, #19
 800567e:	197c      	adds	r4, r7, r5
 8005680:	0018      	movs	r0, r3
 8005682:	f7fe fb83 	bl	8003d8c <HAL_InitTick>
 8005686:	0003      	movs	r3, r0
 8005688:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800568a:	197b      	adds	r3, r7, r5
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d047      	beq.n	8005722 <HAL_RCC_OscConfig+0x276>
      {
        return status;
 8005692:	2313      	movs	r3, #19
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	e2d4      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d027      	beq.n	80056f0 <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80056a0:	4b52      	ldr	r3, [pc, #328]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2209      	movs	r2, #9
 80056a6:	4393      	bics	r3, r2
 80056a8:	0019      	movs	r1, r3
 80056aa:	4b50      	ldr	r3, [pc, #320]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80056ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b2:	f7fe fbb1 	bl	8003e18 <HAL_GetTick>
 80056b6:	0003      	movs	r3, r0
 80056b8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056bc:	f7fe fbac 	bl	8003e18 <HAL_GetTick>
 80056c0:	0002      	movs	r2, r0
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e2ba      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ce:	4b47      	ldr	r3, [pc, #284]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2204      	movs	r2, #4
 80056d4:	4013      	ands	r3, r2
 80056d6:	d0f1      	beq.n	80056bc <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d8:	4b44      	ldr	r3, [pc, #272]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a46      	ldr	r2, [pc, #280]	; (80057f8 <HAL_RCC_OscConfig+0x34c>)
 80056de:	4013      	ands	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	4b40      	ldr	r3, [pc, #256]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	e018      	b.n	8005722 <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056f0:	4b3e      	ldr	r3, [pc, #248]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b3d      	ldr	r3, [pc, #244]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80056f6:	2101      	movs	r1, #1
 80056f8:	438a      	bics	r2, r1
 80056fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fc:	f7fe fb8c 	bl	8003e18 <HAL_GetTick>
 8005700:	0003      	movs	r3, r0
 8005702:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005706:	f7fe fb87 	bl	8003e18 <HAL_GetTick>
 800570a:	0002      	movs	r2, r0
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e295      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005718:	4b34      	ldr	r3, [pc, #208]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2204      	movs	r2, #4
 800571e:	4013      	ands	r3, r2
 8005720:	d1f1      	bne.n	8005706 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2210      	movs	r2, #16
 8005728:	4013      	ands	r3, r2
 800572a:	d100      	bne.n	800572e <HAL_RCC_OscConfig+0x282>
 800572c:	e0a3      	b.n	8005876 <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d141      	bne.n	80057b8 <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005734:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4013      	ands	r3, r2
 800573e:	d005      	beq.n	800574c <HAL_RCC_OscConfig+0x2a0>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e27b      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800574c:	4b27      	ldr	r3, [pc, #156]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4a2d      	ldr	r2, [pc, #180]	; (8005808 <HAL_RCC_OscConfig+0x35c>)
 8005752:	4013      	ands	r3, r2
 8005754:	0019      	movs	r1, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575a:	4b24      	ldr	r3, [pc, #144]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005760:	4b22      	ldr	r3, [pc, #136]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	0a19      	lsrs	r1, r3, #8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	061a      	lsls	r2, r3, #24
 800576e:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	0b5b      	lsrs	r3, r3, #13
 800577a:	3301      	adds	r3, #1
 800577c:	2280      	movs	r2, #128	; 0x80
 800577e:	0212      	lsls	r2, r2, #8
 8005780:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005782:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	210f      	movs	r1, #15
 800578a:	400b      	ands	r3, r1
 800578c:	491b      	ldr	r1, [pc, #108]	; (80057fc <HAL_RCC_OscConfig+0x350>)
 800578e:	5ccb      	ldrb	r3, [r1, r3]
 8005790:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005792:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <HAL_RCC_OscConfig+0x354>)
 8005794:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005796:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <HAL_RCC_OscConfig+0x358>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2513      	movs	r5, #19
 800579c:	197c      	adds	r4, r7, r5
 800579e:	0018      	movs	r0, r3
 80057a0:	f7fe faf4 	bl	8003d8c <HAL_InitTick>
 80057a4:	0003      	movs	r3, r0
 80057a6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80057a8:	197b      	adds	r3, r7, r5
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d062      	beq.n	8005876 <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 80057b0:	2313      	movs	r3, #19
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	e245      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d040      	beq.n	8005842 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057c0:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	4b09      	ldr	r3, [pc, #36]	; (80057ec <HAL_RCC_OscConfig+0x340>)
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	0049      	lsls	r1, r1, #1
 80057ca:	430a      	orrs	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fe fb23 	bl	8003e18 <HAL_GetTick>
 80057d2:	0003      	movs	r3, r0
 80057d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80057d6:	e019      	b.n	800580c <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057d8:	f7fe fb1e 	bl	8003e18 <HAL_GetTick>
 80057dc:	0002      	movs	r2, r0
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d912      	bls.n	800580c <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e22c      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	40021000 	.word	0x40021000
 80057f0:	fffeffff 	.word	0xfffeffff
 80057f4:	fffbffff 	.word	0xfffbffff
 80057f8:	ffffe0ff 	.word	0xffffe0ff
 80057fc:	0800ed5c 	.word	0x0800ed5c
 8005800:	20000000 	.word	0x20000000
 8005804:	20000004 	.word	0x20000004
 8005808:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800580c:	4bc6      	ldr	r3, [pc, #792]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4013      	ands	r3, r2
 8005816:	d0df      	beq.n	80057d8 <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005818:	4bc3      	ldr	r3, [pc, #780]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4ac3      	ldr	r2, [pc, #780]	; (8005b2c <HAL_RCC_OscConfig+0x680>)
 800581e:	4013      	ands	r3, r2
 8005820:	0019      	movs	r1, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005826:	4bc0      	ldr	r3, [pc, #768]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800582c:	4bbe      	ldr	r3, [pc, #760]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	0a19      	lsrs	r1, r3, #8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	061a      	lsls	r2, r3, #24
 800583a:	4bbb      	ldr	r3, [pc, #748]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	e019      	b.n	8005876 <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005842:	4bb9      	ldr	r3, [pc, #740]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4bb8      	ldr	r3, [pc, #736]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005848:	49b9      	ldr	r1, [pc, #740]	; (8005b30 <HAL_RCC_OscConfig+0x684>)
 800584a:	400a      	ands	r2, r1
 800584c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584e:	f7fe fae3 	bl	8003e18 <HAL_GetTick>
 8005852:	0003      	movs	r3, r0
 8005854:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005858:	f7fe fade 	bl	8003e18 <HAL_GetTick>
 800585c:	0002      	movs	r2, r0
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e1ec      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800586a:	4baf      	ldr	r3, [pc, #700]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4013      	ands	r3, r2
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2208      	movs	r2, #8
 800587c:	4013      	ands	r3, r2
 800587e:	d036      	beq.n	80058ee <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d019      	beq.n	80058bc <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005888:	4ba7      	ldr	r3, [pc, #668]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 800588a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800588c:	4ba6      	ldr	r3, [pc, #664]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 800588e:	2101      	movs	r1, #1
 8005890:	430a      	orrs	r2, r1
 8005892:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005894:	f7fe fac0 	bl	8003e18 <HAL_GetTick>
 8005898:	0003      	movs	r3, r0
 800589a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800589e:	f7fe fabb 	bl	8003e18 <HAL_GetTick>
 80058a2:	0002      	movs	r2, r0
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e1c9      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058b0:	4b9d      	ldr	r3, [pc, #628]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80058b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b4:	2202      	movs	r2, #2
 80058b6:	4013      	ands	r3, r2
 80058b8:	d0f1      	beq.n	800589e <HAL_RCC_OscConfig+0x3f2>
 80058ba:	e018      	b.n	80058ee <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058bc:	4b9a      	ldr	r3, [pc, #616]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80058be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058c0:	4b99      	ldr	r3, [pc, #612]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80058c2:	2101      	movs	r1, #1
 80058c4:	438a      	bics	r2, r1
 80058c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c8:	f7fe faa6 	bl	8003e18 <HAL_GetTick>
 80058cc:	0003      	movs	r3, r0
 80058ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d2:	f7fe faa1 	bl	8003e18 <HAL_GetTick>
 80058d6:	0002      	movs	r2, r0
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e1af      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058e4:	4b90      	ldr	r3, [pc, #576]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80058e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e8:	2202      	movs	r2, #2
 80058ea:	4013      	ands	r3, r2
 80058ec:	d1f1      	bne.n	80058d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2204      	movs	r2, #4
 80058f4:	4013      	ands	r3, r2
 80058f6:	d100      	bne.n	80058fa <HAL_RCC_OscConfig+0x44e>
 80058f8:	e0af      	b.n	8005a5a <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058fa:	2323      	movs	r3, #35	; 0x23
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005902:	4b89      	ldr	r3, [pc, #548]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005906:	2380      	movs	r3, #128	; 0x80
 8005908:	055b      	lsls	r3, r3, #21
 800590a:	4013      	ands	r3, r2
 800590c:	d10a      	bne.n	8005924 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800590e:	4b86      	ldr	r3, [pc, #536]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005912:	4b85      	ldr	r3, [pc, #532]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005914:	2180      	movs	r1, #128	; 0x80
 8005916:	0549      	lsls	r1, r1, #21
 8005918:	430a      	orrs	r2, r1
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800591c:	2323      	movs	r3, #35	; 0x23
 800591e:	18fb      	adds	r3, r7, r3
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005924:	4b83      	ldr	r3, [pc, #524]	; (8005b34 <HAL_RCC_OscConfig+0x688>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4013      	ands	r3, r2
 800592e:	d11a      	bne.n	8005966 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005930:	4b80      	ldr	r3, [pc, #512]	; (8005b34 <HAL_RCC_OscConfig+0x688>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b7f      	ldr	r3, [pc, #508]	; (8005b34 <HAL_RCC_OscConfig+0x688>)
 8005936:	2180      	movs	r1, #128	; 0x80
 8005938:	0049      	lsls	r1, r1, #1
 800593a:	430a      	orrs	r2, r1
 800593c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800593e:	f7fe fa6b 	bl	8003e18 <HAL_GetTick>
 8005942:	0003      	movs	r3, r0
 8005944:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005948:	f7fe fa66 	bl	8003e18 <HAL_GetTick>
 800594c:	0002      	movs	r2, r0
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b64      	cmp	r3, #100	; 0x64
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e174      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595a:	4b76      	ldr	r3, [pc, #472]	; (8005b34 <HAL_RCC_OscConfig+0x688>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	2380      	movs	r3, #128	; 0x80
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	4013      	ands	r3, r2
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	2380      	movs	r3, #128	; 0x80
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	429a      	cmp	r2, r3
 8005970:	d107      	bne.n	8005982 <HAL_RCC_OscConfig+0x4d6>
 8005972:	4b6d      	ldr	r3, [pc, #436]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005974:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005976:	4b6c      	ldr	r3, [pc, #432]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005978:	2180      	movs	r1, #128	; 0x80
 800597a:	0049      	lsls	r1, r1, #1
 800597c:	430a      	orrs	r2, r1
 800597e:	651a      	str	r2, [r3, #80]	; 0x50
 8005980:	e031      	b.n	80059e6 <HAL_RCC_OscConfig+0x53a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10c      	bne.n	80059a4 <HAL_RCC_OscConfig+0x4f8>
 800598a:	4b67      	ldr	r3, [pc, #412]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 800598c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800598e:	4b66      	ldr	r3, [pc, #408]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005990:	4967      	ldr	r1, [pc, #412]	; (8005b30 <HAL_RCC_OscConfig+0x684>)
 8005992:	400a      	ands	r2, r1
 8005994:	651a      	str	r2, [r3, #80]	; 0x50
 8005996:	4b64      	ldr	r3, [pc, #400]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800599a:	4b63      	ldr	r3, [pc, #396]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 800599c:	4966      	ldr	r1, [pc, #408]	; (8005b38 <HAL_RCC_OscConfig+0x68c>)
 800599e:	400a      	ands	r2, r1
 80059a0:	651a      	str	r2, [r3, #80]	; 0x50
 80059a2:	e020      	b.n	80059e6 <HAL_RCC_OscConfig+0x53a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	23a0      	movs	r3, #160	; 0xa0
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d10e      	bne.n	80059ce <HAL_RCC_OscConfig+0x522>
 80059b0:	4b5d      	ldr	r3, [pc, #372]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80059b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059b4:	4b5c      	ldr	r3, [pc, #368]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80059b6:	2180      	movs	r1, #128	; 0x80
 80059b8:	00c9      	lsls	r1, r1, #3
 80059ba:	430a      	orrs	r2, r1
 80059bc:	651a      	str	r2, [r3, #80]	; 0x50
 80059be:	4b5a      	ldr	r3, [pc, #360]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80059c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059c2:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80059c4:	2180      	movs	r1, #128	; 0x80
 80059c6:	0049      	lsls	r1, r1, #1
 80059c8:	430a      	orrs	r2, r1
 80059ca:	651a      	str	r2, [r3, #80]	; 0x50
 80059cc:	e00b      	b.n	80059e6 <HAL_RCC_OscConfig+0x53a>
 80059ce:	4b56      	ldr	r3, [pc, #344]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80059d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059d2:	4b55      	ldr	r3, [pc, #340]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80059d4:	4956      	ldr	r1, [pc, #344]	; (8005b30 <HAL_RCC_OscConfig+0x684>)
 80059d6:	400a      	ands	r2, r1
 80059d8:	651a      	str	r2, [r3, #80]	; 0x50
 80059da:	4b53      	ldr	r3, [pc, #332]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80059dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059de:	4b52      	ldr	r3, [pc, #328]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 80059e0:	4955      	ldr	r1, [pc, #340]	; (8005b38 <HAL_RCC_OscConfig+0x68c>)
 80059e2:	400a      	ands	r2, r1
 80059e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d015      	beq.n	8005a1a <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ee:	f7fe fa13 	bl	8003e18 <HAL_GetTick>
 80059f2:	0003      	movs	r3, r0
 80059f4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059f6:	e009      	b.n	8005a0c <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f8:	f7fe fa0e 	bl	8003e18 <HAL_GetTick>
 80059fc:	0002      	movs	r2, r0
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	4a4e      	ldr	r2, [pc, #312]	; (8005b3c <HAL_RCC_OscConfig+0x690>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e11b      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a0c:	4b46      	ldr	r3, [pc, #280]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005a0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4013      	ands	r3, r2
 8005a16:	d0ef      	beq.n	80059f8 <HAL_RCC_OscConfig+0x54c>
 8005a18:	e014      	b.n	8005a44 <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a1a:	f7fe f9fd 	bl	8003e18 <HAL_GetTick>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a22:	e009      	b.n	8005a38 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a24:	f7fe f9f8 	bl	8003e18 <HAL_GetTick>
 8005a28:	0002      	movs	r2, r0
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	4a43      	ldr	r2, [pc, #268]	; (8005b3c <HAL_RCC_OscConfig+0x690>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e105      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a38:	4b3b      	ldr	r3, [pc, #236]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005a3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a3c:	2380      	movs	r3, #128	; 0x80
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4013      	ands	r3, r2
 8005a42:	d1ef      	bne.n	8005a24 <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a44:	2323      	movs	r3, #35	; 0x23
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d105      	bne.n	8005a5a <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a4e:	4b36      	ldr	r3, [pc, #216]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a52:	4b35      	ldr	r3, [pc, #212]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005a54:	493a      	ldr	r1, [pc, #232]	; (8005b40 <HAL_RCC_OscConfig+0x694>)
 8005a56:	400a      	ands	r2, r1
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	4013      	ands	r3, r2
 8005a62:	d049      	beq.n	8005af8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d026      	beq.n	8005aba <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005a6c:	4b2e      	ldr	r3, [pc, #184]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	4b2d      	ldr	r3, [pc, #180]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005a72:	2101      	movs	r1, #1
 8005a74:	430a      	orrs	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a7c:	4b2a      	ldr	r3, [pc, #168]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005a7e:	2101      	movs	r1, #1
 8005a80:	430a      	orrs	r2, r1
 8005a82:	635a      	str	r2, [r3, #52]	; 0x34
 8005a84:	4b2f      	ldr	r3, [pc, #188]	; (8005b44 <HAL_RCC_OscConfig+0x698>)
 8005a86:	6a1a      	ldr	r2, [r3, #32]
 8005a88:	4b2e      	ldr	r3, [pc, #184]	; (8005b44 <HAL_RCC_OscConfig+0x698>)
 8005a8a:	2180      	movs	r1, #128	; 0x80
 8005a8c:	0189      	lsls	r1, r1, #6
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a92:	f7fe f9c1 	bl	8003e18 <HAL_GetTick>
 8005a96:	0003      	movs	r3, r0
 8005a98:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a9c:	f7fe f9bc 	bl	8003e18 <HAL_GetTick>
 8005aa0:	0002      	movs	r2, r0
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e0ca      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005aae:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d0f1      	beq.n	8005a9c <HAL_RCC_OscConfig+0x5f0>
 8005ab8:	e01e      	b.n	8005af8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005aba:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	438a      	bics	r2, r1
 8005ac4:	609a      	str	r2, [r3, #8]
 8005ac6:	4b1f      	ldr	r3, [pc, #124]	; (8005b44 <HAL_RCC_OscConfig+0x698>)
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
 8005aca:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <HAL_RCC_OscConfig+0x698>)
 8005acc:	491e      	ldr	r1, [pc, #120]	; (8005b48 <HAL_RCC_OscConfig+0x69c>)
 8005ace:	400a      	ands	r2, r1
 8005ad0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad2:	f7fe f9a1 	bl	8003e18 <HAL_GetTick>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005adc:	f7fe f99c 	bl	8003e18 <HAL_GetTick>
 8005ae0:	0002      	movs	r2, r0
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e0aa      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005aee:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2202      	movs	r2, #2
 8005af4:	4013      	ands	r3, r2
 8005af6:	d1f1      	bne.n	8005adc <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d100      	bne.n	8005b02 <HAL_RCC_OscConfig+0x656>
 8005b00:	e09f      	b.n	8005c42 <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	d100      	bne.n	8005b0a <HAL_RCC_OscConfig+0x65e>
 8005b08:	e078      	b.n	8005bfc <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d159      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <HAL_RCC_OscConfig+0x67c>)
 8005b18:	490c      	ldr	r1, [pc, #48]	; (8005b4c <HAL_RCC_OscConfig+0x6a0>)
 8005b1a:	400a      	ands	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fe f97b 	bl	8003e18 <HAL_GetTick>
 8005b22:	0003      	movs	r3, r0
 8005b24:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b26:	e01c      	b.n	8005b62 <HAL_RCC_OscConfig+0x6b6>
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	ffff1fff 	.word	0xffff1fff
 8005b30:	fffffeff 	.word	0xfffffeff
 8005b34:	40007000 	.word	0x40007000
 8005b38:	fffffbff 	.word	0xfffffbff
 8005b3c:	00001388 	.word	0x00001388
 8005b40:	efffffff 	.word	0xefffffff
 8005b44:	40010000 	.word	0x40010000
 8005b48:	ffffdfff 	.word	0xffffdfff
 8005b4c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b50:	f7fe f962 	bl	8003e18 <HAL_GetTick>
 8005b54:	0002      	movs	r2, r0
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e070      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b62:	4b3a      	ldr	r3, [pc, #232]	; (8005c4c <HAL_RCC_OscConfig+0x7a0>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	049b      	lsls	r3, r3, #18
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b6e:	4b37      	ldr	r3, [pc, #220]	; (8005c4c <HAL_RCC_OscConfig+0x7a0>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	4a37      	ldr	r2, [pc, #220]	; (8005c50 <HAL_RCC_OscConfig+0x7a4>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	0019      	movs	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b86:	431a      	orrs	r2, r3
 8005b88:	4b30      	ldr	r3, [pc, #192]	; (8005c4c <HAL_RCC_OscConfig+0x7a0>)
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b8e:	4b2f      	ldr	r3, [pc, #188]	; (8005c4c <HAL_RCC_OscConfig+0x7a0>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b2e      	ldr	r3, [pc, #184]	; (8005c4c <HAL_RCC_OscConfig+0x7a0>)
 8005b94:	2180      	movs	r1, #128	; 0x80
 8005b96:	0449      	lsls	r1, r1, #17
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9c:	f7fe f93c 	bl	8003e18 <HAL_GetTick>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba6:	f7fe f937 	bl	8003e18 <HAL_GetTick>
 8005baa:	0002      	movs	r2, r0
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e045      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005bb8:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <HAL_RCC_OscConfig+0x7a0>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	049b      	lsls	r3, r3, #18
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d0f0      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x6fa>
 8005bc4:	e03d      	b.n	8005c42 <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc6:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <HAL_RCC_OscConfig+0x7a0>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b20      	ldr	r3, [pc, #128]	; (8005c4c <HAL_RCC_OscConfig+0x7a0>)
 8005bcc:	4921      	ldr	r1, [pc, #132]	; (8005c54 <HAL_RCC_OscConfig+0x7a8>)
 8005bce:	400a      	ands	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd2:	f7fe f921 	bl	8003e18 <HAL_GetTick>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bdc:	f7fe f91c 	bl	8003e18 <HAL_GetTick>
 8005be0:	0002      	movs	r2, r0
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e02a      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005bee:	4b17      	ldr	r3, [pc, #92]	; (8005c4c <HAL_RCC_OscConfig+0x7a0>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	2380      	movs	r3, #128	; 0x80
 8005bf4:	049b      	lsls	r3, r3, #18
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d1f0      	bne.n	8005bdc <HAL_RCC_OscConfig+0x730>
 8005bfa:	e022      	b.n	8005c42 <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e01d      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c08:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <HAL_RCC_OscConfig+0x7a0>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	025b      	lsls	r3, r3, #9
 8005c14:	401a      	ands	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d10f      	bne.n	8005c3e <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	23f0      	movs	r3, #240	; 0xf0
 8005c22:	039b      	lsls	r3, r3, #14
 8005c24:	401a      	ands	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d107      	bne.n	8005c3e <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	23c0      	movs	r3, #192	; 0xc0
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	401a      	ands	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d001      	beq.n	8005c42 <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	0018      	movs	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b00a      	add	sp, #40	; 0x28
 8005c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	ff02ffff 	.word	0xff02ffff
 8005c54:	feffffff 	.word	0xfeffffff

08005c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c58:	b5b0      	push	{r4, r5, r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e129      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c6c:	4b96      	ldr	r3, [pc, #600]	; (8005ec8 <HAL_RCC_ClockConfig+0x270>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2201      	movs	r2, #1
 8005c72:	4013      	ands	r3, r2
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d91e      	bls.n	8005cb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7a:	4b93      	ldr	r3, [pc, #588]	; (8005ec8 <HAL_RCC_ClockConfig+0x270>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4393      	bics	r3, r2
 8005c82:	0019      	movs	r1, r3
 8005c84:	4b90      	ldr	r3, [pc, #576]	; (8005ec8 <HAL_RCC_ClockConfig+0x270>)
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c8c:	f7fe f8c4 	bl	8003e18 <HAL_GetTick>
 8005c90:	0003      	movs	r3, r0
 8005c92:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c94:	e009      	b.n	8005caa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c96:	f7fe f8bf 	bl	8003e18 <HAL_GetTick>
 8005c9a:	0002      	movs	r2, r0
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	4a8a      	ldr	r2, [pc, #552]	; (8005ecc <HAL_RCC_ClockConfig+0x274>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e10a      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005caa:	4b87      	ldr	r3, [pc, #540]	; (8005ec8 <HAL_RCC_ClockConfig+0x270>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d1ee      	bne.n	8005c96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d009      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc2:	4b83      	ldr	r3, [pc, #524]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	22f0      	movs	r2, #240	; 0xf0
 8005cc8:	4393      	bics	r3, r2
 8005cca:	0019      	movs	r1, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	4b7f      	ldr	r3, [pc, #508]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	4013      	ands	r3, r2
 8005cde:	d100      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0x8a>
 8005ce0:	e089      	b.n	8005df6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cea:	4b79      	ldr	r3, [pc, #484]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	2380      	movs	r3, #128	; 0x80
 8005cf0:	029b      	lsls	r3, r3, #10
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	d120      	bne.n	8005d38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e0e2      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d107      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d02:	4b73      	ldr	r3, [pc, #460]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	2380      	movs	r3, #128	; 0x80
 8005d08:	049b      	lsls	r3, r3, #18
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d114      	bne.n	8005d38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e0d6      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d106      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d1a:	4b6d      	ldr	r3, [pc, #436]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	4013      	ands	r3, r2
 8005d22:	d109      	bne.n	8005d38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0cb      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d28:	4b69      	ldr	r3, [pc, #420]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4013      	ands	r3, r2
 8005d32:	d101      	bne.n	8005d38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0c3      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d38:	4b65      	ldr	r3, [pc, #404]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	4393      	bics	r3, r2
 8005d40:	0019      	movs	r1, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	4b62      	ldr	r3, [pc, #392]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d4c:	f7fe f864 	bl	8003e18 <HAL_GetTick>
 8005d50:	0003      	movs	r3, r0
 8005d52:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d111      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d5c:	e009      	b.n	8005d72 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d5e:	f7fe f85b 	bl	8003e18 <HAL_GetTick>
 8005d62:	0002      	movs	r2, r0
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	4a58      	ldr	r2, [pc, #352]	; (8005ecc <HAL_RCC_ClockConfig+0x274>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e0a6      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d72:	4b57      	ldr	r3, [pc, #348]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	220c      	movs	r2, #12
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d1ef      	bne.n	8005d5e <HAL_RCC_ClockConfig+0x106>
 8005d7e:	e03a      	b.n	8005df6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d111      	bne.n	8005dac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d88:	e009      	b.n	8005d9e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d8a:	f7fe f845 	bl	8003e18 <HAL_GetTick>
 8005d8e:	0002      	movs	r2, r0
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	4a4d      	ldr	r2, [pc, #308]	; (8005ecc <HAL_RCC_ClockConfig+0x274>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e090      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d9e:	4b4c      	ldr	r3, [pc, #304]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	220c      	movs	r2, #12
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b0c      	cmp	r3, #12
 8005da8:	d1ef      	bne.n	8005d8a <HAL_RCC_ClockConfig+0x132>
 8005daa:	e024      	b.n	8005df6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d11b      	bne.n	8005dec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005db4:	e009      	b.n	8005dca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db6:	f7fe f82f 	bl	8003e18 <HAL_GetTick>
 8005dba:	0002      	movs	r2, r0
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	4a42      	ldr	r2, [pc, #264]	; (8005ecc <HAL_RCC_ClockConfig+0x274>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e07a      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dca:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	220c      	movs	r2, #12
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d1ef      	bne.n	8005db6 <HAL_RCC_ClockConfig+0x15e>
 8005dd6:	e00e      	b.n	8005df6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd8:	f7fe f81e 	bl	8003e18 <HAL_GetTick>
 8005ddc:	0002      	movs	r2, r0
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	4a3a      	ldr	r2, [pc, #232]	; (8005ecc <HAL_RCC_ClockConfig+0x274>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e069      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dec:	4b38      	ldr	r3, [pc, #224]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	220c      	movs	r2, #12
 8005df2:	4013      	ands	r3, r2
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005df6:	4b34      	ldr	r3, [pc, #208]	; (8005ec8 <HAL_RCC_ClockConfig+0x270>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d21e      	bcs.n	8005e42 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e04:	4b30      	ldr	r3, [pc, #192]	; (8005ec8 <HAL_RCC_ClockConfig+0x270>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	4393      	bics	r3, r2
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	4b2e      	ldr	r3, [pc, #184]	; (8005ec8 <HAL_RCC_ClockConfig+0x270>)
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e16:	f7fd ffff 	bl	8003e18 <HAL_GetTick>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1e:	e009      	b.n	8005e34 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e20:	f7fd fffa 	bl	8003e18 <HAL_GetTick>
 8005e24:	0002      	movs	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	4a28      	ldr	r2, [pc, #160]	; (8005ecc <HAL_RCC_ClockConfig+0x274>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e045      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e34:	4b24      	ldr	r3, [pc, #144]	; (8005ec8 <HAL_RCC_ClockConfig+0x270>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d1ee      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2204      	movs	r2, #4
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d009      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e4c:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a20      	ldr	r2, [pc, #128]	; (8005ed4 <HAL_RCC_ClockConfig+0x27c>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	0019      	movs	r1, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2208      	movs	r2, #8
 8005e66:	4013      	ands	r3, r2
 8005e68:	d00a      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e6a:	4b19      	ldr	r3, [pc, #100]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	4a1a      	ldr	r2, [pc, #104]	; (8005ed8 <HAL_RCC_ClockConfig+0x280>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	0019      	movs	r1, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	00da      	lsls	r2, r3, #3
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e80:	f000 f832 	bl	8005ee8 <HAL_RCC_GetSysClockFreq>
 8005e84:	0001      	movs	r1, r0
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_RCC_ClockConfig+0x278>)
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	220f      	movs	r2, #15
 8005e8e:	4013      	ands	r3, r2
 8005e90:	4a12      	ldr	r2, [pc, #72]	; (8005edc <HAL_RCC_ClockConfig+0x284>)
 8005e92:	5cd3      	ldrb	r3, [r2, r3]
 8005e94:	000a      	movs	r2, r1
 8005e96:	40da      	lsrs	r2, r3
 8005e98:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <HAL_RCC_ClockConfig+0x288>)
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e9c:	4b11      	ldr	r3, [pc, #68]	; (8005ee4 <HAL_RCC_ClockConfig+0x28c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	250b      	movs	r5, #11
 8005ea2:	197c      	adds	r4, r7, r5
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f7fd ff71 	bl	8003d8c <HAL_InitTick>
 8005eaa:	0003      	movs	r3, r0
 8005eac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005eae:	197b      	adds	r3, r7, r5
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8005eb6:	230b      	movs	r3, #11
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	e000      	b.n	8005ec0 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b004      	add	sp, #16
 8005ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec8:	40022000 	.word	0x40022000
 8005ecc:	00001388 	.word	0x00001388
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	fffff8ff 	.word	0xfffff8ff
 8005ed8:	ffffc7ff 	.word	0xffffc7ff
 8005edc:	0800ed5c 	.word	0x0800ed5c
 8005ee0:	20000000 	.word	0x20000000
 8005ee4:	20000004 	.word	0x20000004

08005ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eea:	b08f      	sub	sp, #60	; 0x3c
 8005eec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005eee:	4b4a      	ldr	r3, [pc, #296]	; (8006018 <HAL_RCC_GetSysClockFreq+0x130>)
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ef6:	230c      	movs	r3, #12
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d00f      	beq.n	8005f1e <HAL_RCC_GetSysClockFreq+0x36>
 8005efe:	2b0c      	cmp	r3, #12
 8005f00:	d010      	beq.n	8005f24 <HAL_RCC_GetSysClockFreq+0x3c>
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d000      	beq.n	8005f08 <HAL_RCC_GetSysClockFreq+0x20>
 8005f06:	e073      	b.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005f08:	4b43      	ldr	r3, [pc, #268]	; (8006018 <HAL_RCC_GetSysClockFreq+0x130>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d002      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005f12:	4b42      	ldr	r3, [pc, #264]	; (800601c <HAL_RCC_GetSysClockFreq+0x134>)
 8005f14:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005f16:	e079      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8005f18:	4b41      	ldr	r3, [pc, #260]	; (8006020 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f1c:	e076      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f1e:	4b41      	ldr	r3, [pc, #260]	; (8006024 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005f20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f22:	e073      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	0c9a      	lsrs	r2, r3, #18
 8005f28:	230f      	movs	r3, #15
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	4b3e      	ldr	r3, [pc, #248]	; (8006028 <HAL_RCC_GetSysClockFreq+0x140>)
 8005f2e:	5c9b      	ldrb	r3, [r3, r2]
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	0d9a      	lsrs	r2, r3, #22
 8005f36:	2303      	movs	r3, #3
 8005f38:	4013      	ands	r3, r2
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f3e:	4b36      	ldr	r3, [pc, #216]	; (8006018 <HAL_RCC_GetSysClockFreq+0x130>)
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	2380      	movs	r3, #128	; 0x80
 8005f44:	025b      	lsls	r3, r3, #9
 8005f46:	4013      	ands	r3, r2
 8005f48:	d019      	beq.n	8005f7e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	4a34      	ldr	r2, [pc, #208]	; (8006024 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005f54:	2300      	movs	r3, #0
 8005f56:	69b8      	ldr	r0, [r7, #24]
 8005f58:	69f9      	ldr	r1, [r7, #28]
 8005f5a:	f7fa fabb 	bl	80004d4 <__aeabi_lmul>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	000c      	movs	r4, r1
 8005f62:	0018      	movs	r0, r3
 8005f64:	0021      	movs	r1, r4
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f7fa fa8f 	bl	8000494 <__aeabi_uldivmod>
 8005f76:	0003      	movs	r3, r0
 8005f78:	000c      	movs	r4, r1
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7c:	e035      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005f7e:	4b26      	ldr	r3, [pc, #152]	; (8006018 <HAL_RCC_GetSysClockFreq+0x130>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2210      	movs	r2, #16
 8005f84:	4013      	ands	r3, r2
 8005f86:	d019      	beq.n	8005fbc <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	60bb      	str	r3, [r7, #8]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	4a22      	ldr	r2, [pc, #136]	; (800601c <HAL_RCC_GetSysClockFreq+0x134>)
 8005f92:	2300      	movs	r3, #0
 8005f94:	68b8      	ldr	r0, [r7, #8]
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	f7fa fa9c 	bl	80004d4 <__aeabi_lmul>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	000c      	movs	r4, r1
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	0021      	movs	r1, r4
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	607b      	str	r3, [r7, #4]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f7fa fa70 	bl	8000494 <__aeabi_uldivmod>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	000c      	movs	r4, r1
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fba:	e016      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	4a16      	ldr	r2, [pc, #88]	; (8006020 <HAL_RCC_GetSysClockFreq+0x138>)
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f7fa fa84 	bl	80004d4 <__aeabi_lmul>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	000c      	movs	r4, r1
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	0021      	movs	r1, r4
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	001d      	movs	r5, r3
 8005fd8:	2300      	movs	r3, #0
 8005fda:	001e      	movs	r6, r3
 8005fdc:	002a      	movs	r2, r5
 8005fde:	0033      	movs	r3, r6
 8005fe0:	f7fa fa58 	bl	8000494 <__aeabi_uldivmod>
 8005fe4:	0003      	movs	r3, r0
 8005fe6:	000c      	movs	r4, r1
 8005fe8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005fee:	e00d      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <HAL_RCC_GetSysClockFreq+0x130>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	0b5b      	lsrs	r3, r3, #13
 8005ff6:	2207      	movs	r2, #7
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	3301      	adds	r3, #1
 8006000:	2280      	movs	r2, #128	; 0x80
 8006002:	0212      	lsls	r2, r2, #8
 8006004:	409a      	lsls	r2, r3
 8006006:	0013      	movs	r3, r2
 8006008:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800600a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800600e:	0018      	movs	r0, r3
 8006010:	46bd      	mov	sp, r7
 8006012:	b00f      	add	sp, #60	; 0x3c
 8006014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	40021000 	.word	0x40021000
 800601c:	003d0900 	.word	0x003d0900
 8006020:	00f42400 	.word	0x00f42400
 8006024:	007a1200 	.word	0x007a1200
 8006028:	0800ed74 	.word	0x0800ed74

0800602c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006030:	4b02      	ldr	r3, [pc, #8]	; (800603c <HAL_RCC_GetHCLKFreq+0x10>)
 8006032:	681b      	ldr	r3, [r3, #0]
}
 8006034:	0018      	movs	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	20000000 	.word	0x20000000

08006040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006044:	f7ff fff2 	bl	800602c <HAL_RCC_GetHCLKFreq>
 8006048:	0001      	movs	r1, r0
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	2207      	movs	r2, #7
 8006052:	4013      	ands	r3, r2
 8006054:	4a04      	ldr	r2, [pc, #16]	; (8006068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006056:	5cd3      	ldrb	r3, [r2, r3]
 8006058:	40d9      	lsrs	r1, r3
 800605a:	000b      	movs	r3, r1
}
 800605c:	0018      	movs	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	40021000 	.word	0x40021000
 8006068:	0800ed6c 	.word	0x0800ed6c

0800606c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006070:	f7ff ffdc 	bl	800602c <HAL_RCC_GetHCLKFreq>
 8006074:	0001      	movs	r1, r0
 8006076:	4b06      	ldr	r3, [pc, #24]	; (8006090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	0adb      	lsrs	r3, r3, #11
 800607c:	2207      	movs	r2, #7
 800607e:	4013      	ands	r3, r2
 8006080:	4a04      	ldr	r2, [pc, #16]	; (8006094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006082:	5cd3      	ldrb	r3, [r2, r3]
 8006084:	40d9      	lsrs	r1, r3
 8006086:	000b      	movs	r3, r1
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	40021000 	.word	0x40021000
 8006094:	0800ed6c 	.word	0x0800ed6c

08006098 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80060a0:	2317      	movs	r3, #23
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2220      	movs	r2, #32
 80060ae:	4013      	ands	r3, r2
 80060b0:	d106      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	2380      	movs	r3, #128	; 0x80
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	4013      	ands	r3, r2
 80060bc:	d100      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80060be:	e0d9      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060c0:	4ba4      	ldr	r3, [pc, #656]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	055b      	lsls	r3, r3, #21
 80060c8:	4013      	ands	r3, r2
 80060ca:	d10a      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060cc:	4ba1      	ldr	r3, [pc, #644]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d0:	4ba0      	ldr	r3, [pc, #640]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060d2:	2180      	movs	r1, #128	; 0x80
 80060d4:	0549      	lsls	r1, r1, #21
 80060d6:	430a      	orrs	r2, r1
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80060da:	2317      	movs	r3, #23
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	2201      	movs	r2, #1
 80060e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e2:	4b9d      	ldr	r3, [pc, #628]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	4013      	ands	r3, r2
 80060ec:	d11a      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ee:	4b9a      	ldr	r3, [pc, #616]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b99      	ldr	r3, [pc, #612]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80060f4:	2180      	movs	r1, #128	; 0x80
 80060f6:	0049      	lsls	r1, r1, #1
 80060f8:	430a      	orrs	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060fc:	f7fd fe8c 	bl	8003e18 <HAL_GetTick>
 8006100:	0003      	movs	r3, r0
 8006102:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006104:	e008      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006106:	f7fd fe87 	bl	8003e18 <HAL_GetTick>
 800610a:	0002      	movs	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b64      	cmp	r3, #100	; 0x64
 8006112:	d901      	bls.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e118      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006118:	4b8f      	ldr	r3, [pc, #572]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	2380      	movs	r3, #128	; 0x80
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	4013      	ands	r3, r2
 8006122:	d0f0      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006124:	4b8b      	ldr	r3, [pc, #556]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	23c0      	movs	r3, #192	; 0xc0
 800612a:	039b      	lsls	r3, r3, #14
 800612c:	4013      	ands	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	23c0      	movs	r3, #192	; 0xc0
 8006136:	039b      	lsls	r3, r3, #14
 8006138:	4013      	ands	r3, r2
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	429a      	cmp	r2, r3
 800613e:	d107      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	23c0      	movs	r3, #192	; 0xc0
 8006146:	039b      	lsls	r3, r3, #14
 8006148:	4013      	ands	r3, r2
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	429a      	cmp	r2, r3
 800614e:	d013      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	23c0      	movs	r3, #192	; 0xc0
 8006156:	029b      	lsls	r3, r3, #10
 8006158:	401a      	ands	r2, r3
 800615a:	23c0      	movs	r3, #192	; 0xc0
 800615c:	029b      	lsls	r3, r3, #10
 800615e:	429a      	cmp	r2, r3
 8006160:	d10a      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006162:	4b7c      	ldr	r3, [pc, #496]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	2380      	movs	r3, #128	; 0x80
 8006168:	029b      	lsls	r3, r3, #10
 800616a:	401a      	ands	r2, r3
 800616c:	2380      	movs	r3, #128	; 0x80
 800616e:	029b      	lsls	r3, r3, #10
 8006170:	429a      	cmp	r2, r3
 8006172:	d101      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0e8      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006178:	4b76      	ldr	r3, [pc, #472]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800617a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800617c:	23c0      	movs	r3, #192	; 0xc0
 800617e:	029b      	lsls	r3, r3, #10
 8006180:	4013      	ands	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d049      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	23c0      	movs	r3, #192	; 0xc0
 8006190:	029b      	lsls	r3, r3, #10
 8006192:	4013      	ands	r3, r2
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	429a      	cmp	r2, r3
 8006198:	d004      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2220      	movs	r2, #32
 80061a0:	4013      	ands	r3, r2
 80061a2:	d10d      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	23c0      	movs	r3, #192	; 0xc0
 80061aa:	029b      	lsls	r3, r3, #10
 80061ac:	4013      	ands	r3, r2
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d034      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	4013      	ands	r3, r2
 80061be:	d02e      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80061c0:	4b64      	ldr	r3, [pc, #400]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80061c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c4:	4a65      	ldr	r2, [pc, #404]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ca:	4b62      	ldr	r3, [pc, #392]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80061cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061ce:	4b61      	ldr	r3, [pc, #388]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80061d0:	2180      	movs	r1, #128	; 0x80
 80061d2:	0309      	lsls	r1, r1, #12
 80061d4:	430a      	orrs	r2, r1
 80061d6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061d8:	4b5e      	ldr	r3, [pc, #376]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80061da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061dc:	4b5d      	ldr	r3, [pc, #372]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80061de:	4960      	ldr	r1, [pc, #384]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80061e0:	400a      	ands	r2, r1
 80061e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80061e4:	4b5b      	ldr	r3, [pc, #364]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	4013      	ands	r3, r2
 80061f2:	d014      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f4:	f7fd fe10 	bl	8003e18 <HAL_GetTick>
 80061f8:	0003      	movs	r3, r0
 80061fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061fc:	e009      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061fe:	f7fd fe0b 	bl	8003e18 <HAL_GetTick>
 8006202:	0002      	movs	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	4a56      	ldr	r2, [pc, #344]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e09b      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006212:	4b50      	ldr	r3, [pc, #320]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006216:	2380      	movs	r3, #128	; 0x80
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4013      	ands	r3, r2
 800621c:	d0ef      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	23c0      	movs	r3, #192	; 0xc0
 8006224:	029b      	lsls	r3, r3, #10
 8006226:	401a      	ands	r2, r3
 8006228:	23c0      	movs	r3, #192	; 0xc0
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	429a      	cmp	r2, r3
 800622e:	d10c      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006230:	4b48      	ldr	r3, [pc, #288]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a4c      	ldr	r2, [pc, #304]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006236:	4013      	ands	r3, r2
 8006238:	0019      	movs	r1, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	23c0      	movs	r3, #192	; 0xc0
 8006240:	039b      	lsls	r3, r3, #14
 8006242:	401a      	ands	r2, r3
 8006244:	4b43      	ldr	r3, [pc, #268]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	4b42      	ldr	r3, [pc, #264]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800624c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	23c0      	movs	r3, #192	; 0xc0
 8006254:	029b      	lsls	r3, r3, #10
 8006256:	401a      	ands	r2, r3
 8006258:	4b3e      	ldr	r3, [pc, #248]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800625a:	430a      	orrs	r2, r1
 800625c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800625e:	2317      	movs	r3, #23
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d105      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006268:	4b3a      	ldr	r3, [pc, #232]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800626a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626c:	4b39      	ldr	r3, [pc, #228]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800626e:	493f      	ldr	r1, [pc, #252]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006270:	400a      	ands	r2, r1
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2201      	movs	r2, #1
 800627a:	4013      	ands	r3, r2
 800627c:	d009      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800627e:	4b35      	ldr	r3, [pc, #212]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006282:	2203      	movs	r2, #3
 8006284:	4393      	bics	r3, r2
 8006286:	0019      	movs	r1, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	4b31      	ldr	r3, [pc, #196]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800628e:	430a      	orrs	r2, r1
 8006290:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2202      	movs	r2, #2
 8006298:	4013      	ands	r3, r2
 800629a:	d009      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800629c:	4b2d      	ldr	r3, [pc, #180]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800629e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a0:	220c      	movs	r2, #12
 80062a2:	4393      	bics	r3, r2
 80062a4:	0019      	movs	r1, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	4b2a      	ldr	r3, [pc, #168]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062ac:	430a      	orrs	r2, r1
 80062ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2204      	movs	r2, #4
 80062b6:	4013      	ands	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062ba:	4b26      	ldr	r3, [pc, #152]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062be:	4a2c      	ldr	r2, [pc, #176]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	0019      	movs	r1, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	4b22      	ldr	r3, [pc, #136]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062ca:	430a      	orrs	r2, r1
 80062cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2208      	movs	r2, #8
 80062d4:	4013      	ands	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062d8:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062dc:	4a25      	ldr	r2, [pc, #148]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80062de:	4013      	ands	r3, r2
 80062e0:	0019      	movs	r1, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062e8:	430a      	orrs	r2, r1
 80062ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	2380      	movs	r3, #128	; 0x80
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	4013      	ands	r3, r2
 80062f6:	d009      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062f8:	4b16      	ldr	r3, [pc, #88]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fc:	4a17      	ldr	r2, [pc, #92]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062fe:	4013      	ands	r3, r2
 8006300:	0019      	movs	r1, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006308:	430a      	orrs	r2, r1
 800630a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2240      	movs	r2, #64	; 0x40
 8006312:	4013      	ands	r3, r2
 8006314:	d009      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006316:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631a:	4a17      	ldr	r2, [pc, #92]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800631c:	4013      	ands	r3, r2
 800631e:	0019      	movs	r1, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006326:	430a      	orrs	r2, r1
 8006328:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2280      	movs	r2, #128	; 0x80
 8006330:	4013      	ands	r3, r2
 8006332:	d009      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006334:	4b07      	ldr	r3, [pc, #28]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006338:	4a10      	ldr	r2, [pc, #64]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800633a:	4013      	ands	r3, r2
 800633c:	0019      	movs	r1, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1a      	ldr	r2, [r3, #32]
 8006342:	4b04      	ldr	r3, [pc, #16]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006344:	430a      	orrs	r2, r1
 8006346:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	0018      	movs	r0, r3
 800634c:	46bd      	mov	sp, r7
 800634e:	b006      	add	sp, #24
 8006350:	bd80      	pop	{r7, pc}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	40021000 	.word	0x40021000
 8006358:	40007000 	.word	0x40007000
 800635c:	fffcffff 	.word	0xfffcffff
 8006360:	fff7ffff 	.word	0xfff7ffff
 8006364:	00001388 	.word	0x00001388
 8006368:	ffcfffff 	.word	0xffcfffff
 800636c:	efffffff 	.word	0xefffffff
 8006370:	fffff3ff 	.word	0xfffff3ff
 8006374:	ffffcfff 	.word	0xffffcfff
 8006378:	fbffffff 	.word	0xfbffffff
 800637c:	fff3ffff 	.word	0xfff3ffff

08006380 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e08e      	b.n	80064b0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2221      	movs	r2, #33	; 0x21
 8006396:	5c9b      	ldrb	r3, [r3, r2]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d107      	bne.n	80063ae <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	2100      	movs	r1, #0
 80063a4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0018      	movs	r0, r3
 80063aa:	f7fd f9c5 	bl	8003738 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2221      	movs	r2, #33	; 0x21
 80063b2:	2102      	movs	r1, #2
 80063b4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	22ca      	movs	r2, #202	; 0xca
 80063bc:	625a      	str	r2, [r3, #36]	; 0x24
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2253      	movs	r2, #83	; 0x53
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	0018      	movs	r0, r3
 80063ca:	f000 f89e 	bl	800650a <RTC_EnterInitMode>
 80063ce:	1e03      	subs	r3, r0, #0
 80063d0:	d009      	beq.n	80063e6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	22ff      	movs	r2, #255	; 0xff
 80063d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2221      	movs	r2, #33	; 0x21
 80063de:	2104      	movs	r1, #4
 80063e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e064      	b.n	80064b0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4931      	ldr	r1, [pc, #196]	; (80064b8 <HAL_RTC_Init+0x138>)
 80063f2:	400a      	ands	r2, r1
 80063f4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6899      	ldr	r1, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	68d2      	ldr	r2, [r2, #12]
 800641c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6919      	ldr	r1, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	041a      	lsls	r2, r3, #16
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2180      	movs	r1, #128	; 0x80
 800643e:	438a      	bics	r2, r1
 8006440:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2103      	movs	r1, #3
 800644e:	438a      	bics	r2, r1
 8006450:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2220      	movs	r2, #32
 8006472:	4013      	ands	r3, r2
 8006474:	d113      	bne.n	800649e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	0018      	movs	r0, r3
 800647a:	f000 f81f 	bl	80064bc <HAL_RTC_WaitForSynchro>
 800647e:	1e03      	subs	r3, r0, #0
 8006480:	d00d      	beq.n	800649e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2221      	movs	r2, #33	; 0x21
 800648e:	2104      	movs	r1, #4
 8006490:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	2100      	movs	r1, #0
 8006498:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e008      	b.n	80064b0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	22ff      	movs	r2, #255	; 0xff
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2221      	movs	r2, #33	; 0x21
 80064aa:	2101      	movs	r1, #1
 80064ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80064ae:	2300      	movs	r3, #0
  }
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b002      	add	sp, #8
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	ff8fffbf 	.word	0xff8fffbf

080064bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	21a0      	movs	r1, #160	; 0xa0
 80064d0:	438a      	bics	r2, r1
 80064d2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80064d4:	f7fd fca0 	bl	8003e18 <HAL_GetTick>
 80064d8:	0003      	movs	r3, r0
 80064da:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064dc:	e00a      	b.n	80064f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064de:	f7fd fc9b 	bl	8003e18 <HAL_GetTick>
 80064e2:	0002      	movs	r2, r0
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	1ad2      	subs	r2, r2, r3
 80064e8:	23fa      	movs	r3, #250	; 0xfa
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d901      	bls.n	80064f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e006      	b.n	8006502 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	4013      	ands	r3, r2
 80064fe:	d0ee      	beq.n	80064de <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	0018      	movs	r0, r3
 8006504:	46bd      	mov	sp, r7
 8006506:	b004      	add	sp, #16
 8006508:	bd80      	pop	{r7, pc}

0800650a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	2240      	movs	r2, #64	; 0x40
 800651a:	4013      	ands	r3, r2
 800651c:	d11a      	bne.n	8006554 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2201      	movs	r2, #1
 8006524:	4252      	negs	r2, r2
 8006526:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006528:	f7fd fc76 	bl	8003e18 <HAL_GetTick>
 800652c:	0003      	movs	r3, r0
 800652e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006530:	e00a      	b.n	8006548 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006532:	f7fd fc71 	bl	8003e18 <HAL_GetTick>
 8006536:	0002      	movs	r2, r0
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	23fa      	movs	r3, #250	; 0xfa
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	429a      	cmp	r2, r3
 8006542:	d901      	bls.n	8006548 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e006      	b.n	8006556 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2240      	movs	r2, #64	; 0x40
 8006550:	4013      	ands	r3, r2
 8006552:	d0ee      	beq.n	8006532 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	0018      	movs	r0, r3
 8006558:	46bd      	mov	sp, r7
 800655a:	b004      	add	sp, #16
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2220      	movs	r2, #32
 8006570:	5c9b      	ldrb	r3, [r3, r2]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006576:	2302      	movs	r3, #2
 8006578:	e0ad      	b.n	80066d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	2101      	movs	r1, #1
 8006580:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2221      	movs	r2, #33	; 0x21
 8006586:	2102      	movs	r1, #2
 8006588:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	22ca      	movs	r2, #202	; 0xca
 8006590:	625a      	str	r2, [r3, #36]	; 0x24
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2253      	movs	r2, #83	; 0x53
 8006598:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	2380      	movs	r3, #128	; 0x80
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4013      	ands	r3, r2
 80065a6:	d021      	beq.n	80065ec <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 80065a8:	f7fd fc36 	bl	8003e18 <HAL_GetTick>
 80065ac:	0003      	movs	r3, r0
 80065ae:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80065b0:	e016      	b.n	80065e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065b2:	f7fd fc31 	bl	8003e18 <HAL_GetTick>
 80065b6:	0002      	movs	r2, r0
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	23fa      	movs	r3, #250	; 0xfa
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d90d      	bls.n	80065e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	22ff      	movs	r2, #255	; 0xff
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2221      	movs	r2, #33	; 0x21
 80065d0:	2103      	movs	r1, #3
 80065d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	2100      	movs	r1, #0
 80065da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e07a      	b.n	80066d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	2204      	movs	r2, #4
 80065e8:	4013      	ands	r3, r2
 80065ea:	d1e2      	bne.n	80065b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	493a      	ldr	r1, [pc, #232]	; (80066e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80065f8:	400a      	ands	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	22ff      	movs	r2, #255	; 0xff
 8006604:	401a      	ands	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4936      	ldr	r1, [pc, #216]	; (80066e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 800660c:	430a      	orrs	r2, r1
 800660e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006610:	f7fd fc02 	bl	8003e18 <HAL_GetTick>
 8006614:	0003      	movs	r3, r0
 8006616:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006618:	e016      	b.n	8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800661a:	f7fd fbfd 	bl	8003e18 <HAL_GetTick>
 800661e:	0002      	movs	r2, r0
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	23fa      	movs	r3, #250	; 0xfa
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	429a      	cmp	r2, r3
 800662a:	d90d      	bls.n	8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	22ff      	movs	r2, #255	; 0xff
 8006632:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2221      	movs	r2, #33	; 0x21
 8006638:	2103      	movs	r1, #3
 800663a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	2100      	movs	r1, #0
 8006642:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e046      	b.n	80066d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	2204      	movs	r2, #4
 8006650:	4013      	ands	r3, r2
 8006652:	d0e2      	beq.n	800661a <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2107      	movs	r1, #7
 8006668:	438a      	bics	r2, r1
 800666a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6899      	ldr	r1, [r3, #8]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	430a      	orrs	r2, r1
 800667a:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800667c:	4b1a      	ldr	r3, [pc, #104]	; (80066e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	0349      	lsls	r1, r1, #13
 8006686:	430a      	orrs	r2, r1
 8006688:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800668a:	4b17      	ldr	r3, [pc, #92]	; (80066e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	4b16      	ldr	r3, [pc, #88]	; (80066e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006690:	2180      	movs	r1, #128	; 0x80
 8006692:	0349      	lsls	r1, r1, #13
 8006694:	430a      	orrs	r2, r1
 8006696:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	01c9      	lsls	r1, r1, #7
 80066a6:	430a      	orrs	r2, r1
 80066a8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2180      	movs	r1, #128	; 0x80
 80066b6:	00c9      	lsls	r1, r1, #3
 80066b8:	430a      	orrs	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	22ff      	movs	r2, #255	; 0xff
 80066c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2221      	movs	r2, #33	; 0x21
 80066c8:	2101      	movs	r1, #1
 80066ca:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	2100      	movs	r1, #0
 80066d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	0018      	movs	r0, r3
 80066d8:	46bd      	mov	sp, r7
 80066da:	b006      	add	sp, #24
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	fffffbff 	.word	0xfffffbff
 80066e4:	fffffb7f 	.word	0xfffffb7f
 80066e8:	40010400 	.word	0x40010400

080066ec <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	2380      	movs	r3, #128	; 0x80
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4013      	ands	r3, r2
 8006700:	d00d      	beq.n	800671e <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	0018      	movs	r0, r3
 8006706:	f000 f81b 	bl	8006740 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	22ff      	movs	r2, #255	; 0xff
 8006712:	401a      	ands	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4907      	ldr	r1, [pc, #28]	; (8006738 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 800671a:	430a      	orrs	r2, r1
 800671c:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8006720:	2280      	movs	r2, #128	; 0x80
 8006722:	0352      	lsls	r2, r2, #13
 8006724:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2221      	movs	r2, #33	; 0x21
 800672a:	2101      	movs	r1, #1
 800672c:	5499      	strb	r1, [r3, r2]
}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	46bd      	mov	sp, r7
 8006732:	b002      	add	sp, #8
 8006734:	bd80      	pop	{r7, pc}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	fffffb7f 	.word	0xfffffb7f
 800673c:	40010400 	.word	0x40010400

08006740 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b002      	add	sp, #8
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e032      	b.n	80067c8 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2239      	movs	r2, #57	; 0x39
 8006766:	5c9b      	ldrb	r3, [r3, r2]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2238      	movs	r2, #56	; 0x38
 8006772:	2100      	movs	r1, #0
 8006774:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0018      	movs	r0, r3
 800677a:	f7fd f91b 	bl	80039b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2239      	movs	r2, #57	; 0x39
 8006782:	2102      	movs	r1, #2
 8006784:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3304      	adds	r3, #4
 800678e:	0019      	movs	r1, r3
 8006790:	0010      	movs	r0, r2
 8006792:	f000 f973 	bl	8006a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	223e      	movs	r2, #62	; 0x3e
 800679a:	2101      	movs	r1, #1
 800679c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	223a      	movs	r2, #58	; 0x3a
 80067a2:	2101      	movs	r1, #1
 80067a4:	5499      	strb	r1, [r3, r2]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	223b      	movs	r2, #59	; 0x3b
 80067aa:	2101      	movs	r1, #1
 80067ac:	5499      	strb	r1, [r3, r2]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	223c      	movs	r2, #60	; 0x3c
 80067b2:	2101      	movs	r1, #1
 80067b4:	5499      	strb	r1, [r3, r2]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	223d      	movs	r2, #61	; 0x3d
 80067ba:	2101      	movs	r1, #1
 80067bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2239      	movs	r2, #57	; 0x39
 80067c2:	2101      	movs	r1, #1
 80067c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	0018      	movs	r0, r3
 80067ca:	46bd      	mov	sp, r7
 80067cc:	b002      	add	sp, #8
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2202      	movs	r2, #2
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d124      	bne.n	8006830 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	2202      	movs	r2, #2
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d11d      	bne.n	8006830 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2203      	movs	r2, #3
 80067fa:	4252      	negs	r2, r2
 80067fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	2203      	movs	r2, #3
 800680c:	4013      	ands	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	0018      	movs	r0, r3
 8006814:	f000 f91a 	bl	8006a4c <HAL_TIM_IC_CaptureCallback>
 8006818:	e007      	b.n	800682a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 f90d 	bl	8006a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0018      	movs	r0, r3
 8006826:	f000 f919 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2204      	movs	r2, #4
 8006838:	4013      	ands	r3, r2
 800683a:	2b04      	cmp	r3, #4
 800683c:	d125      	bne.n	800688a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2204      	movs	r2, #4
 8006846:	4013      	ands	r3, r2
 8006848:	2b04      	cmp	r3, #4
 800684a:	d11e      	bne.n	800688a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2205      	movs	r2, #5
 8006852:	4252      	negs	r2, r2
 8006854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	23c0      	movs	r3, #192	; 0xc0
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4013      	ands	r3, r2
 8006868:	d004      	beq.n	8006874 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	0018      	movs	r0, r3
 800686e:	f000 f8ed 	bl	8006a4c <HAL_TIM_IC_CaptureCallback>
 8006872:	e007      	b.n	8006884 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	0018      	movs	r0, r3
 8006878:	f000 f8e0 	bl	8006a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	0018      	movs	r0, r3
 8006880:	f000 f8ec 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2208      	movs	r2, #8
 8006892:	4013      	ands	r3, r2
 8006894:	2b08      	cmp	r3, #8
 8006896:	d124      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	2208      	movs	r2, #8
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d11d      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2209      	movs	r2, #9
 80068ac:	4252      	negs	r2, r2
 80068ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2204      	movs	r2, #4
 80068b4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	2203      	movs	r2, #3
 80068be:	4013      	ands	r3, r2
 80068c0:	d004      	beq.n	80068cc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	0018      	movs	r0, r3
 80068c6:	f000 f8c1 	bl	8006a4c <HAL_TIM_IC_CaptureCallback>
 80068ca:	e007      	b.n	80068dc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0018      	movs	r0, r3
 80068d0:	f000 f8b4 	bl	8006a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	0018      	movs	r0, r3
 80068d8:	f000 f8c0 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2210      	movs	r2, #16
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d125      	bne.n	800693c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2210      	movs	r2, #16
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d11e      	bne.n	800693c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2211      	movs	r2, #17
 8006904:	4252      	negs	r2, r2
 8006906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2208      	movs	r2, #8
 800690c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69da      	ldr	r2, [r3, #28]
 8006914:	23c0      	movs	r3, #192	; 0xc0
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4013      	ands	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	0018      	movs	r0, r3
 8006920:	f000 f894 	bl	8006a4c <HAL_TIM_IC_CaptureCallback>
 8006924:	e007      	b.n	8006936 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	0018      	movs	r0, r3
 800692a:	f000 f887 	bl	8006a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	0018      	movs	r0, r3
 8006932:	f000 f893 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2201      	movs	r2, #1
 8006944:	4013      	ands	r3, r2
 8006946:	2b01      	cmp	r3, #1
 8006948:	d10f      	bne.n	800696a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	4013      	ands	r3, r2
 8006954:	2b01      	cmp	r3, #1
 8006956:	d108      	bne.n	800696a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2202      	movs	r2, #2
 800695e:	4252      	negs	r2, r2
 8006960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	0018      	movs	r0, r3
 8006966:	f000 f861 	bl	8006a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2240      	movs	r2, #64	; 0x40
 8006972:	4013      	ands	r3, r2
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d10f      	bne.n	8006998 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	2240      	movs	r2, #64	; 0x40
 8006980:	4013      	ands	r3, r2
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d108      	bne.n	8006998 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2241      	movs	r2, #65	; 0x41
 800698c:	4252      	negs	r2, r2
 800698e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0018      	movs	r0, r3
 8006994:	f000 f86a 	bl	8006a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46bd      	mov	sp, r7
 800699c:	b002      	add	sp, #8
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2238      	movs	r2, #56	; 0x38
 80069b0:	5c9b      	ldrb	r3, [r3, r2]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_TIM_OC_ConfigChannel+0x1a>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e034      	b.n	8006a24 <HAL_TIM_OC_ConfigChannel+0x84>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2238      	movs	r2, #56	; 0x38
 80069be:	2101      	movs	r1, #1
 80069c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d010      	beq.n	80069ea <HAL_TIM_OC_ConfigChannel+0x4a>
 80069c8:	d802      	bhi.n	80069d0 <HAL_TIM_OC_ConfigChannel+0x30>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 80069ce:	e024      	b.n	8006a1a <HAL_TIM_OC_ConfigChannel+0x7a>
  switch (Channel)
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d012      	beq.n	80069fa <HAL_TIM_OC_ConfigChannel+0x5a>
 80069d4:	2b0c      	cmp	r3, #12
 80069d6:	d018      	beq.n	8006a0a <HAL_TIM_OC_ConfigChannel+0x6a>
      break;
 80069d8:	e01f      	b.n	8006a1a <HAL_TIM_OC_ConfigChannel+0x7a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	0011      	movs	r1, r2
 80069e2:	0018      	movs	r0, r3
 80069e4:	f000 f8a8 	bl	8006b38 <TIM_OC1_SetConfig>
      break;
 80069e8:	e017      	b.n	8006a1a <HAL_TIM_OC_ConfigChannel+0x7a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	0011      	movs	r1, r2
 80069f2:	0018      	movs	r0, r3
 80069f4:	f000 f8dc 	bl	8006bb0 <TIM_OC2_SetConfig>
      break;
 80069f8:	e00f      	b.n	8006a1a <HAL_TIM_OC_ConfigChannel+0x7a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	0011      	movs	r1, r2
 8006a02:	0018      	movs	r0, r3
 8006a04:	f000 f916 	bl	8006c34 <TIM_OC3_SetConfig>
      break;
 8006a08:	e007      	b.n	8006a1a <HAL_TIM_OC_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	0011      	movs	r1, r2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f000 f94e 	bl	8006cb4 <TIM_OC4_SetConfig>
      break;
 8006a18:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2238      	movs	r2, #56	; 0x38
 8006a1e:	2100      	movs	r1, #0
 8006a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	0018      	movs	r0, r3
 8006a26:	46bd      	mov	sp, r7
 8006a28:	b004      	add	sp, #16
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a34:	46c0      	nop			; (mov r8, r8)
 8006a36:	46bd      	mov	sp, r7
 8006a38:	b002      	add	sp, #8
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a44:	46c0      	nop			; (mov r8, r8)
 8006a46:	46bd      	mov	sp, r7
 8006a48:	b002      	add	sp, #8
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a54:	46c0      	nop			; (mov r8, r8)
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b002      	add	sp, #8
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a64:	46c0      	nop			; (mov r8, r8)
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b002      	add	sp, #8
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a74:	46c0      	nop			; (mov r8, r8)
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b002      	add	sp, #8
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	2380      	movs	r3, #128	; 0x80
 8006a90:	05db      	lsls	r3, r3, #23
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d00b      	beq.n	8006aae <TIM_Base_SetConfig+0x32>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a23      	ldr	r2, [pc, #140]	; (8006b28 <TIM_Base_SetConfig+0xac>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d007      	beq.n	8006aae <TIM_Base_SetConfig+0x32>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a22      	ldr	r2, [pc, #136]	; (8006b2c <TIM_Base_SetConfig+0xb0>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d003      	beq.n	8006aae <TIM_Base_SetConfig+0x32>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a21      	ldr	r2, [pc, #132]	; (8006b30 <TIM_Base_SetConfig+0xb4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d108      	bne.n	8006ac0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2270      	movs	r2, #112	; 0x70
 8006ab2:	4393      	bics	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	2380      	movs	r3, #128	; 0x80
 8006ac4:	05db      	lsls	r3, r3, #23
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d00b      	beq.n	8006ae2 <TIM_Base_SetConfig+0x66>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a16      	ldr	r2, [pc, #88]	; (8006b28 <TIM_Base_SetConfig+0xac>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d007      	beq.n	8006ae2 <TIM_Base_SetConfig+0x66>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a15      	ldr	r2, [pc, #84]	; (8006b2c <TIM_Base_SetConfig+0xb0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_Base_SetConfig+0x66>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a14      	ldr	r2, [pc, #80]	; (8006b30 <TIM_Base_SetConfig+0xb4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d108      	bne.n	8006af4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <TIM_Base_SetConfig+0xb8>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2280      	movs	r2, #128	; 0x80
 8006af8:	4393      	bics	r3, r2
 8006afa:	001a      	movs	r2, r3
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	615a      	str	r2, [r3, #20]
}
 8006b20:	46c0      	nop			; (mov r8, r8)
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b004      	add	sp, #16
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40010800 	.word	0x40010800
 8006b30:	40011400 	.word	0x40011400
 8006b34:	fffffcff 	.word	0xfffffcff

08006b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	2201      	movs	r2, #1
 8006b48:	4393      	bics	r3, r2
 8006b4a:	001a      	movs	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2270      	movs	r2, #112	; 0x70
 8006b66:	4393      	bics	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	4393      	bics	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	4393      	bics	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	46c0      	nop			; (mov r8, r8)
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b006      	add	sp, #24
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	2210      	movs	r2, #16
 8006bc0:	4393      	bics	r3, r2
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4a13      	ldr	r2, [pc, #76]	; (8006c2c <TIM_OC2_SetConfig+0x7c>)
 8006bde:	4013      	ands	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a12      	ldr	r2, [pc, #72]	; (8006c30 <TIM_OC2_SetConfig+0x80>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	4393      	bics	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	621a      	str	r2, [r3, #32]
}
 8006c24:	46c0      	nop			; (mov r8, r8)
 8006c26:	46bd      	mov	sp, r7
 8006c28:	b006      	add	sp, #24
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	ffff8fff 	.word	0xffff8fff
 8006c30:	fffffcff 	.word	0xfffffcff

08006c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	4a1a      	ldr	r2, [pc, #104]	; (8006cac <TIM_OC3_SetConfig+0x78>)
 8006c44:	401a      	ands	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2270      	movs	r2, #112	; 0x70
 8006c60:	4393      	bics	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2203      	movs	r2, #3
 8006c68:	4393      	bics	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	4a0d      	ldr	r2, [pc, #52]	; (8006cb0 <TIM_OC3_SetConfig+0x7c>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	621a      	str	r2, [r3, #32]
}
 8006ca4:	46c0      	nop			; (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b006      	add	sp, #24
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	fffffeff 	.word	0xfffffeff
 8006cb0:	fffffdff 	.word	0xfffffdff

08006cb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	4a1b      	ldr	r2, [pc, #108]	; (8006d30 <TIM_OC4_SetConfig+0x7c>)
 8006cc4:	401a      	ands	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a15      	ldr	r2, [pc, #84]	; (8006d34 <TIM_OC4_SetConfig+0x80>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a14      	ldr	r2, [pc, #80]	; (8006d38 <TIM_OC4_SetConfig+0x84>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	021b      	lsls	r3, r3, #8
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4a10      	ldr	r2, [pc, #64]	; (8006d3c <TIM_OC4_SetConfig+0x88>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	031b      	lsls	r3, r3, #12
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	621a      	str	r2, [r3, #32]
}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b006      	add	sp, #24
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	46c0      	nop			; (mov r8, r8)
 8006d30:	ffffefff 	.word	0xffffefff
 8006d34:	ffff8fff 	.word	0xffff8fff
 8006d38:	fffffcff 	.word	0xfffffcff
 8006d3c:	ffffdfff 	.word	0xffffdfff

08006d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2238      	movs	r2, #56	; 0x38
 8006d4e:	5c9b      	ldrb	r3, [r3, r2]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e047      	b.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2238      	movs	r2, #56	; 0x38
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2239      	movs	r2, #57	; 0x39
 8006d64:	2102      	movs	r1, #2
 8006d66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2270      	movs	r2, #112	; 0x70
 8006d7c:	4393      	bics	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	2380      	movs	r3, #128	; 0x80
 8006d98:	05db      	lsls	r3, r3, #23
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d00e      	beq.n	8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a13      	ldr	r2, [pc, #76]	; (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d009      	beq.n	8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a11      	ldr	r2, [pc, #68]	; (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d004      	beq.n	8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a10      	ldr	r2, [pc, #64]	; (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d10c      	bne.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2280      	movs	r2, #128	; 0x80
 8006dc0:	4393      	bics	r3, r2
 8006dc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2239      	movs	r2, #57	; 0x39
 8006dda:	2101      	movs	r1, #1
 8006ddc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2238      	movs	r2, #56	; 0x38
 8006de2:	2100      	movs	r1, #0
 8006de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	0018      	movs	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b004      	add	sp, #16
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40000400 	.word	0x40000400
 8006df4:	40010800 	.word	0x40010800
 8006df8:	40011400 	.word	0x40011400

08006dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e044      	b.n	8006e98 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d107      	bne.n	8006e26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2274      	movs	r2, #116	; 0x74
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	0018      	movs	r0, r3
 8006e22:	f7fc fe81 	bl	8003b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2224      	movs	r2, #36	; 0x24
 8006e2a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2101      	movs	r1, #1
 8006e38:	438a      	bics	r2, r1
 8006e3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f000 fb56 	bl	80074f0 <UART_SetConfig>
 8006e44:	0003      	movs	r3, r0
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d101      	bne.n	8006e4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e024      	b.n	8006e98 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 fe05 	bl	8007a68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	490d      	ldr	r1, [pc, #52]	; (8006ea0 <HAL_UART_Init+0xa4>)
 8006e6a:	400a      	ands	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	212a      	movs	r1, #42	; 0x2a
 8006e7a:	438a      	bics	r2, r1
 8006e7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2101      	movs	r1, #1
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	0018      	movs	r0, r3
 8006e92:	f000 fe9d 	bl	8007bd0 <UART_CheckIdleState>
 8006e96:	0003      	movs	r3, r0
}
 8006e98:	0018      	movs	r0, r3
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	b002      	add	sp, #8
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	ffffb7ff 	.word	0xffffb7ff

08006ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	; 0x28
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	1dbb      	adds	r3, r7, #6
 8006eb2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d000      	beq.n	8006ebe <HAL_UART_Transmit+0x1a>
 8006ebc:	e095      	b.n	8006fea <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_UART_Transmit+0x28>
 8006ec4:	1dbb      	adds	r3, r7, #6
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e08d      	b.n	8006fec <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	2380      	movs	r3, #128	; 0x80
 8006ed6:	015b      	lsls	r3, r3, #5
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d109      	bne.n	8006ef0 <HAL_UART_Transmit+0x4c>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	4013      	ands	r3, r2
 8006eea:	d001      	beq.n	8006ef0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e07d      	b.n	8006fec <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2274      	movs	r2, #116	; 0x74
 8006ef4:	5c9b      	ldrb	r3, [r3, r2]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_UART_Transmit+0x5a>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e076      	b.n	8006fec <HAL_UART_Transmit+0x148>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2274      	movs	r2, #116	; 0x74
 8006f02:	2101      	movs	r1, #1
 8006f04:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2280      	movs	r2, #128	; 0x80
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2221      	movs	r2, #33	; 0x21
 8006f12:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f14:	f7fc ff80 	bl	8003e18 <HAL_GetTick>
 8006f18:	0003      	movs	r3, r0
 8006f1a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	1dba      	adds	r2, r7, #6
 8006f20:	2150      	movs	r1, #80	; 0x50
 8006f22:	8812      	ldrh	r2, [r2, #0]
 8006f24:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	1dba      	adds	r2, r7, #6
 8006f2a:	2152      	movs	r1, #82	; 0x52
 8006f2c:	8812      	ldrh	r2, [r2, #0]
 8006f2e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	2380      	movs	r3, #128	; 0x80
 8006f36:	015b      	lsls	r3, r3, #5
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d108      	bne.n	8006f4e <HAL_UART_Transmit+0xaa>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d104      	bne.n	8006f4e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006f44:	2300      	movs	r3, #0
 8006f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	61bb      	str	r3, [r7, #24]
 8006f4c:	e003      	b.n	8006f56 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2274      	movs	r2, #116	; 0x74
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006f5e:	e02c      	b.n	8006fba <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	0013      	movs	r3, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	f000 fe79 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8006f72:	1e03      	subs	r3, r0, #0
 8006f74:	d001      	beq.n	8006f7a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e038      	b.n	8006fec <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10b      	bne.n	8006f98 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	001a      	movs	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	05d2      	lsls	r2, r2, #23
 8006f8c:	0dd2      	lsrs	r2, r2, #23
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	3302      	adds	r3, #2
 8006f94:	61bb      	str	r3, [r7, #24]
 8006f96:	e007      	b.n	8006fa8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	781a      	ldrb	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2252      	movs	r2, #82	; 0x52
 8006fac:	5a9b      	ldrh	r3, [r3, r2]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b299      	uxth	r1, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2252      	movs	r2, #82	; 0x52
 8006fb8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2252      	movs	r2, #82	; 0x52
 8006fbe:	5a9b      	ldrh	r3, [r3, r2]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1cc      	bne.n	8006f60 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	0013      	movs	r3, r2
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2140      	movs	r1, #64	; 0x40
 8006fd4:	f000 fe46 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8006fd8:	1e03      	subs	r3, r0, #0
 8006fda:	d001      	beq.n	8006fe0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e005      	b.n	8006fec <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e000      	b.n	8006fec <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006fea:	2302      	movs	r3, #2
  }
}
 8006fec:	0018      	movs	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	b008      	add	sp, #32
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	1dbb      	adds	r3, r7, #6
 8007000:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007006:	2b20      	cmp	r3, #32
 8007008:	d144      	bne.n	8007094 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_UART_Receive_IT+0x24>
 8007010:	1dbb      	adds	r3, r7, #6
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e03c      	b.n	8007096 <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	2380      	movs	r3, #128	; 0x80
 8007022:	015b      	lsls	r3, r3, #5
 8007024:	429a      	cmp	r2, r3
 8007026:	d109      	bne.n	800703c <HAL_UART_Receive_IT+0x48>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d105      	bne.n	800703c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2201      	movs	r2, #1
 8007034:	4013      	ands	r3, r2
 8007036:	d001      	beq.n	800703c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e02c      	b.n	8007096 <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2274      	movs	r2, #116	; 0x74
 8007040:	5c9b      	ldrb	r3, [r3, r2]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_UART_Receive_IT+0x56>
 8007046:	2302      	movs	r3, #2
 8007048:	e025      	b.n	8007096 <HAL_UART_Receive_IT+0xa2>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2274      	movs	r2, #116	; 0x74
 800704e:	2101      	movs	r1, #1
 8007050:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a10      	ldr	r2, [pc, #64]	; (80070a0 <HAL_UART_Receive_IT+0xac>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00f      	beq.n	8007082 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	041b      	lsls	r3, r3, #16
 800706c:	4013      	ands	r3, r2
 800706e:	d008      	beq.n	8007082 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	04c9      	lsls	r1, r1, #19
 800707e:	430a      	orrs	r2, r1
 8007080:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007082:	1dbb      	adds	r3, r7, #6
 8007084:	881a      	ldrh	r2, [r3, #0]
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	0018      	movs	r0, r3
 800708c:	f000 fe68 	bl	8007d60 <UART_Start_Receive_IT>
 8007090:	0003      	movs	r3, r0
 8007092:	e000      	b.n	8007096 <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8007094:	2302      	movs	r3, #2
  }
}
 8007096:	0018      	movs	r0, r3
 8007098:	46bd      	mov	sp, r7
 800709a:	b004      	add	sp, #16
 800709c:	bd80      	pop	{r7, pc}
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	40004800 	.word	0x40004800

080070a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4ab6      	ldr	r2, [pc, #728]	; (80073a0 <HAL_UART_IRQHandler+0x2fc>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d112      	bne.n	80070f8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	2220      	movs	r2, #32
 80070d6:	4013      	ands	r3, r2
 80070d8:	d00e      	beq.n	80070f8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	2220      	movs	r2, #32
 80070de:	4013      	ands	r3, r2
 80070e0:	d00a      	beq.n	80070f8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d100      	bne.n	80070ec <HAL_UART_IRQHandler+0x48>
 80070ea:	e1d6      	b.n	800749a <HAL_UART_IRQHandler+0x3f6>
      {
        huart->RxISR(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	0010      	movs	r0, r2
 80070f4:	4798      	blx	r3
      }
      return;
 80070f6:	e1d0      	b.n	800749a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d100      	bne.n	8007100 <HAL_UART_IRQHandler+0x5c>
 80070fe:	e0d9      	b.n	80072b4 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2201      	movs	r2, #1
 8007104:	4013      	ands	r3, r2
 8007106:	d104      	bne.n	8007112 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	4aa6      	ldr	r2, [pc, #664]	; (80073a4 <HAL_UART_IRQHandler+0x300>)
 800710c:	4013      	ands	r3, r2
 800710e:	d100      	bne.n	8007112 <HAL_UART_IRQHandler+0x6e>
 8007110:	e0d0      	b.n	80072b4 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	2201      	movs	r2, #1
 8007116:	4013      	ands	r3, r2
 8007118:	d010      	beq.n	800713c <HAL_UART_IRQHandler+0x98>
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	2380      	movs	r3, #128	; 0x80
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	4013      	ands	r3, r2
 8007122:	d00b      	beq.n	800713c <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2201      	movs	r2, #1
 800712a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2280      	movs	r2, #128	; 0x80
 8007130:	589b      	ldr	r3, [r3, r2]
 8007132:	2201      	movs	r2, #1
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2180      	movs	r1, #128	; 0x80
 800713a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	2202      	movs	r2, #2
 8007140:	4013      	ands	r3, r2
 8007142:	d00f      	beq.n	8007164 <HAL_UART_IRQHandler+0xc0>
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2201      	movs	r2, #1
 8007148:	4013      	ands	r3, r2
 800714a:	d00b      	beq.n	8007164 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2202      	movs	r2, #2
 8007152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2280      	movs	r2, #128	; 0x80
 8007158:	589b      	ldr	r3, [r3, r2]
 800715a:	2204      	movs	r2, #4
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2180      	movs	r1, #128	; 0x80
 8007162:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	2204      	movs	r2, #4
 8007168:	4013      	ands	r3, r2
 800716a:	d00f      	beq.n	800718c <HAL_UART_IRQHandler+0xe8>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2201      	movs	r2, #1
 8007170:	4013      	ands	r3, r2
 8007172:	d00b      	beq.n	800718c <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2204      	movs	r2, #4
 800717a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2280      	movs	r2, #128	; 0x80
 8007180:	589b      	ldr	r3, [r3, r2]
 8007182:	2202      	movs	r2, #2
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2180      	movs	r1, #128	; 0x80
 800718a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2208      	movs	r2, #8
 8007190:	4013      	ands	r3, r2
 8007192:	d013      	beq.n	80071bc <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2220      	movs	r2, #32
 8007198:	4013      	ands	r3, r2
 800719a:	d103      	bne.n	80071a4 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2201      	movs	r2, #1
 80071a0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071a2:	d00b      	beq.n	80071bc <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2208      	movs	r2, #8
 80071aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2280      	movs	r2, #128	; 0x80
 80071b0:	589b      	ldr	r3, [r3, r2]
 80071b2:	2208      	movs	r2, #8
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2180      	movs	r1, #128	; 0x80
 80071ba:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	2380      	movs	r3, #128	; 0x80
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	4013      	ands	r3, r2
 80071c4:	d011      	beq.n	80071ea <HAL_UART_IRQHandler+0x146>
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	2380      	movs	r3, #128	; 0x80
 80071ca:	04db      	lsls	r3, r3, #19
 80071cc:	4013      	ands	r3, r2
 80071ce:	d00c      	beq.n	80071ea <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	0112      	lsls	r2, r2, #4
 80071d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2280      	movs	r2, #128	; 0x80
 80071de:	589b      	ldr	r3, [r3, r2]
 80071e0:	2220      	movs	r2, #32
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2180      	movs	r1, #128	; 0x80
 80071e8:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2280      	movs	r2, #128	; 0x80
 80071ee:	589b      	ldr	r3, [r3, r2]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d100      	bne.n	80071f6 <HAL_UART_IRQHandler+0x152>
 80071f4:	e153      	b.n	800749e <HAL_UART_IRQHandler+0x3fa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	2220      	movs	r2, #32
 80071fa:	4013      	ands	r3, r2
 80071fc:	d00c      	beq.n	8007218 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2220      	movs	r2, #32
 8007202:	4013      	ands	r3, r2
 8007204:	d008      	beq.n	8007218 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800720a:	2b00      	cmp	r3, #0
 800720c:	d004      	beq.n	8007218 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	0010      	movs	r0, r2
 8007216:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2280      	movs	r2, #128	; 0x80
 800721c:	589b      	ldr	r3, [r3, r2]
 800721e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2240      	movs	r2, #64	; 0x40
 8007228:	4013      	ands	r3, r2
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d003      	beq.n	8007236 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2228      	movs	r2, #40	; 0x28
 8007232:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007234:	d033      	beq.n	800729e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	0018      	movs	r0, r3
 800723a:	f000 fe1f 	bl	8007e7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2240      	movs	r2, #64	; 0x40
 8007246:	4013      	ands	r3, r2
 8007248:	2b40      	cmp	r3, #64	; 0x40
 800724a:	d123      	bne.n	8007294 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2140      	movs	r1, #64	; 0x40
 8007258:	438a      	bics	r2, r1
 800725a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007260:	2b00      	cmp	r3, #0
 8007262:	d012      	beq.n	800728a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	4a4f      	ldr	r2, [pc, #316]	; (80073a8 <HAL_UART_IRQHandler+0x304>)
 800726a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007270:	0018      	movs	r0, r3
 8007272:	f7fd fa1b 	bl	80046ac <HAL_DMA_Abort_IT>
 8007276:	1e03      	subs	r3, r0, #0
 8007278:	d01a      	beq.n	80072b0 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	0018      	movs	r0, r3
 8007286:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007288:	e012      	b.n	80072b0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	0018      	movs	r0, r3
 800728e:	f000 f91b 	bl	80074c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007292:	e00d      	b.n	80072b0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	0018      	movs	r0, r3
 8007298:	f000 f916 	bl	80074c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729c:	e008      	b.n	80072b0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	0018      	movs	r0, r3
 80072a2:	f000 f911 	bl	80074c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2280      	movs	r2, #128	; 0x80
 80072aa:	2100      	movs	r1, #0
 80072ac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80072ae:	e0f6      	b.n	800749e <HAL_UART_IRQHandler+0x3fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b0:	46c0      	nop			; (mov r8, r8)
    return;
 80072b2:	e0f4      	b.n	800749e <HAL_UART_IRQHandler+0x3fa>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d000      	beq.n	80072be <HAL_UART_IRQHandler+0x21a>
 80072bc:	e0b9      	b.n	8007432 <HAL_UART_IRQHandler+0x38e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	2210      	movs	r2, #16
 80072c2:	4013      	ands	r3, r2
 80072c4:	d100      	bne.n	80072c8 <HAL_UART_IRQHandler+0x224>
 80072c6:	e0b4      	b.n	8007432 <HAL_UART_IRQHandler+0x38e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	2210      	movs	r2, #16
 80072cc:	4013      	ands	r3, r2
 80072ce:	d100      	bne.n	80072d2 <HAL_UART_IRQHandler+0x22e>
 80072d0:	e0af      	b.n	8007432 <HAL_UART_IRQHandler+0x38e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2210      	movs	r2, #16
 80072d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2240      	movs	r2, #64	; 0x40
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d163      	bne.n	80073b0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	2108      	movs	r1, #8
 80072f2:	187b      	adds	r3, r7, r1
 80072f4:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80072f6:	187b      	adds	r3, r7, r1
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d100      	bne.n	8007300 <HAL_UART_IRQHandler+0x25c>
 80072fe:	e0d0      	b.n	80074a2 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2258      	movs	r2, #88	; 0x58
 8007304:	5a9b      	ldrh	r3, [r3, r2]
 8007306:	2208      	movs	r2, #8
 8007308:	18ba      	adds	r2, r7, r2
 800730a:	8812      	ldrh	r2, [r2, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d300      	bcc.n	8007312 <HAL_UART_IRQHandler+0x26e>
 8007310:	e0c7      	b.n	80074a2 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2208      	movs	r2, #8
 8007316:	18ba      	adds	r2, r7, r2
 8007318:	215a      	movs	r1, #90	; 0x5a
 800731a:	8812      	ldrh	r2, [r2, #0]
 800731c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2220      	movs	r2, #32
 8007328:	4013      	ands	r3, r2
 800732a:	d12a      	bne.n	8007382 <HAL_UART_IRQHandler+0x2de>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	491d      	ldr	r1, [pc, #116]	; (80073ac <HAL_UART_IRQHandler+0x308>)
 8007338:	400a      	ands	r2, r1
 800733a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689a      	ldr	r2, [r3, #8]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2101      	movs	r1, #1
 8007348:	438a      	bics	r2, r1
 800734a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2140      	movs	r1, #64	; 0x40
 8007358:	438a      	bics	r2, r1
 800735a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2110      	movs	r1, #16
 8007374:	438a      	bics	r2, r1
 8007376:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737c:	0018      	movs	r0, r3
 800737e:	f7fd f955 	bl	800462c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2258      	movs	r2, #88	; 0x58
 8007386:	5a9a      	ldrh	r2, [r3, r2]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	215a      	movs	r1, #90	; 0x5a
 800738c:	5a5b      	ldrh	r3, [r3, r1]
 800738e:	b29b      	uxth	r3, r3
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	b29a      	uxth	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	0011      	movs	r1, r2
 8007398:	0018      	movs	r0, r3
 800739a:	f000 f89d 	bl	80074d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800739e:	e080      	b.n	80074a2 <HAL_UART_IRQHandler+0x3fe>
 80073a0:	0000080f 	.word	0x0000080f
 80073a4:	04000120 	.word	0x04000120
 80073a8:	08007edd 	.word	0x08007edd
 80073ac:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2258      	movs	r2, #88	; 0x58
 80073b4:	5a99      	ldrh	r1, [r3, r2]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	225a      	movs	r2, #90	; 0x5a
 80073ba:	5a9b      	ldrh	r3, [r3, r2]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	230a      	movs	r3, #10
 80073c0:	18fb      	adds	r3, r7, r3
 80073c2:	1a8a      	subs	r2, r1, r2
 80073c4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	225a      	movs	r2, #90	; 0x5a
 80073ca:	5a9b      	ldrh	r3, [r3, r2]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d100      	bne.n	80073d4 <HAL_UART_IRQHandler+0x330>
 80073d2:	e068      	b.n	80074a6 <HAL_UART_IRQHandler+0x402>
          &&(nb_rx_data > 0U) )
 80073d4:	230a      	movs	r3, #10
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d063      	beq.n	80074a6 <HAL_UART_IRQHandler+0x402>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4932      	ldr	r1, [pc, #200]	; (80074b4 <HAL_UART_IRQHandler+0x410>)
 80073ea:	400a      	ands	r2, r1
 80073ec:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2101      	movs	r1, #1
 80073fa:	438a      	bics	r2, r1
 80073fc:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2220      	movs	r2, #32
 8007402:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2110      	movs	r1, #16
 800741c:	438a      	bics	r2, r1
 800741e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007420:	230a      	movs	r3, #10
 8007422:	18fb      	adds	r3, r7, r3
 8007424:	881a      	ldrh	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	0011      	movs	r1, r2
 800742a:	0018      	movs	r0, r3
 800742c:	f000 f854 	bl	80074d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007430:	e039      	b.n	80074a6 <HAL_UART_IRQHandler+0x402>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007432:	69fa      	ldr	r2, [r7, #28]
 8007434:	2380      	movs	r3, #128	; 0x80
 8007436:	035b      	lsls	r3, r3, #13
 8007438:	4013      	ands	r3, r2
 800743a:	d00e      	beq.n	800745a <HAL_UART_IRQHandler+0x3b6>
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	2380      	movs	r3, #128	; 0x80
 8007440:	03db      	lsls	r3, r3, #15
 8007442:	4013      	ands	r3, r2
 8007444:	d009      	beq.n	800745a <HAL_UART_IRQHandler+0x3b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2280      	movs	r2, #128	; 0x80
 800744c:	0352      	lsls	r2, r2, #13
 800744e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	0018      	movs	r0, r3
 8007454:	f000 fe60 	bl	8008118 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007458:	e028      	b.n	80074ac <HAL_UART_IRQHandler+0x408>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	2280      	movs	r2, #128	; 0x80
 800745e:	4013      	ands	r3, r2
 8007460:	d00d      	beq.n	800747e <HAL_UART_IRQHandler+0x3da>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2280      	movs	r2, #128	; 0x80
 8007466:	4013      	ands	r3, r2
 8007468:	d009      	beq.n	800747e <HAL_UART_IRQHandler+0x3da>
  {
    if (huart->TxISR != NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01b      	beq.n	80074aa <HAL_UART_IRQHandler+0x406>
    {
      huart->TxISR(huart);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	0010      	movs	r0, r2
 800747a:	4798      	blx	r3
    }
    return;
 800747c:	e015      	b.n	80074aa <HAL_UART_IRQHandler+0x406>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	2240      	movs	r2, #64	; 0x40
 8007482:	4013      	ands	r3, r2
 8007484:	d012      	beq.n	80074ac <HAL_UART_IRQHandler+0x408>
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2240      	movs	r2, #64	; 0x40
 800748a:	4013      	ands	r3, r2
 800748c:	d00e      	beq.n	80074ac <HAL_UART_IRQHandler+0x408>
  {
    UART_EndTransmit_IT(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	0018      	movs	r0, r3
 8007492:	f000 fd3a 	bl	8007f0a <UART_EndTransmit_IT>
    return;
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	e008      	b.n	80074ac <HAL_UART_IRQHandler+0x408>
      return;
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	e006      	b.n	80074ac <HAL_UART_IRQHandler+0x408>
    return;
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	e004      	b.n	80074ac <HAL_UART_IRQHandler+0x408>
      return;
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	e002      	b.n	80074ac <HAL_UART_IRQHandler+0x408>
      return;
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	e000      	b.n	80074ac <HAL_UART_IRQHandler+0x408>
    return;
 80074aa:	46c0      	nop			; (mov r8, r8)
  }

}
 80074ac:	46bd      	mov	sp, r7
 80074ae:	b008      	add	sp, #32
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	46c0      	nop			; (mov r8, r8)
 80074b4:	fffffedf 	.word	0xfffffedf

080074b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074c0:	46c0      	nop			; (mov r8, r8)
 80074c2:	46bd      	mov	sp, r7
 80074c4:	b002      	add	sp, #8
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074d0:	46c0      	nop			; (mov r8, r8)
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b002      	add	sp, #8
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	000a      	movs	r2, r1
 80074e2:	1cbb      	adds	r3, r7, #2
 80074e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	46bd      	mov	sp, r7
 80074ea:	b002      	add	sp, #8
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f0:	b5b0      	push	{r4, r5, r7, lr}
 80074f2:	b08e      	sub	sp, #56	; 0x38
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074f8:	231a      	movs	r3, #26
 80074fa:	2218      	movs	r2, #24
 80074fc:	4694      	mov	ip, r2
 80074fe:	44bc      	add	ip, r7
 8007500:	4463      	add	r3, ip
 8007502:	2200      	movs	r2, #0
 8007504:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	431a      	orrs	r2, r3
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	431a      	orrs	r2, r3
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	4313      	orrs	r3, r2
 800751c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4acb      	ldr	r2, [pc, #812]	; (8007854 <UART_SetConfig+0x364>)
 8007526:	4013      	ands	r3, r2
 8007528:	0019      	movs	r1, r3
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007530:	430a      	orrs	r2, r1
 8007532:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	4ac7      	ldr	r2, [pc, #796]	; (8007858 <UART_SetConfig+0x368>)
 800753c:	4013      	ands	r3, r2
 800753e:	0019      	movs	r1, r3
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4ac1      	ldr	r2, [pc, #772]	; (800785c <UART_SetConfig+0x36c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d004      	beq.n	8007566 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007562:	4313      	orrs	r3, r2
 8007564:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	4abc      	ldr	r2, [pc, #752]	; (8007860 <UART_SetConfig+0x370>)
 800756e:	4013      	ands	r3, r2
 8007570:	0019      	movs	r1, r3
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007578:	430a      	orrs	r2, r1
 800757a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4ab8      	ldr	r2, [pc, #736]	; (8007864 <UART_SetConfig+0x374>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d134      	bne.n	80075f0 <UART_SetConfig+0x100>
 8007586:	4bb8      	ldr	r3, [pc, #736]	; (8007868 <UART_SetConfig+0x378>)
 8007588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758a:	2203      	movs	r2, #3
 800758c:	4013      	ands	r3, r2
 800758e:	2b01      	cmp	r3, #1
 8007590:	d015      	beq.n	80075be <UART_SetConfig+0xce>
 8007592:	d304      	bcc.n	800759e <UART_SetConfig+0xae>
 8007594:	2b02      	cmp	r3, #2
 8007596:	d00a      	beq.n	80075ae <UART_SetConfig+0xbe>
 8007598:	2b03      	cmp	r3, #3
 800759a:	d018      	beq.n	80075ce <UART_SetConfig+0xde>
 800759c:	e01f      	b.n	80075de <UART_SetConfig+0xee>
 800759e:	231b      	movs	r3, #27
 80075a0:	2218      	movs	r2, #24
 80075a2:	4694      	mov	ip, r2
 80075a4:	44bc      	add	ip, r7
 80075a6:	4463      	add	r3, ip
 80075a8:	2201      	movs	r2, #1
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	e0c5      	b.n	800773a <UART_SetConfig+0x24a>
 80075ae:	231b      	movs	r3, #27
 80075b0:	2218      	movs	r2, #24
 80075b2:	4694      	mov	ip, r2
 80075b4:	44bc      	add	ip, r7
 80075b6:	4463      	add	r3, ip
 80075b8:	2202      	movs	r2, #2
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	e0bd      	b.n	800773a <UART_SetConfig+0x24a>
 80075be:	231b      	movs	r3, #27
 80075c0:	2218      	movs	r2, #24
 80075c2:	4694      	mov	ip, r2
 80075c4:	44bc      	add	ip, r7
 80075c6:	4463      	add	r3, ip
 80075c8:	2204      	movs	r2, #4
 80075ca:	701a      	strb	r2, [r3, #0]
 80075cc:	e0b5      	b.n	800773a <UART_SetConfig+0x24a>
 80075ce:	231b      	movs	r3, #27
 80075d0:	2218      	movs	r2, #24
 80075d2:	4694      	mov	ip, r2
 80075d4:	44bc      	add	ip, r7
 80075d6:	4463      	add	r3, ip
 80075d8:	2208      	movs	r2, #8
 80075da:	701a      	strb	r2, [r3, #0]
 80075dc:	e0ad      	b.n	800773a <UART_SetConfig+0x24a>
 80075de:	231b      	movs	r3, #27
 80075e0:	2218      	movs	r2, #24
 80075e2:	4694      	mov	ip, r2
 80075e4:	44bc      	add	ip, r7
 80075e6:	4463      	add	r3, ip
 80075e8:	2210      	movs	r2, #16
 80075ea:	701a      	strb	r2, [r3, #0]
 80075ec:	46c0      	nop			; (mov r8, r8)
 80075ee:	e0a4      	b.n	800773a <UART_SetConfig+0x24a>
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a9d      	ldr	r2, [pc, #628]	; (800786c <UART_SetConfig+0x37c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d137      	bne.n	800766a <UART_SetConfig+0x17a>
 80075fa:	4b9b      	ldr	r3, [pc, #620]	; (8007868 <UART_SetConfig+0x378>)
 80075fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fe:	220c      	movs	r2, #12
 8007600:	4013      	ands	r3, r2
 8007602:	2b04      	cmp	r3, #4
 8007604:	d018      	beq.n	8007638 <UART_SetConfig+0x148>
 8007606:	d802      	bhi.n	800760e <UART_SetConfig+0x11e>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <UART_SetConfig+0x128>
 800760c:	e024      	b.n	8007658 <UART_SetConfig+0x168>
 800760e:	2b08      	cmp	r3, #8
 8007610:	d00a      	beq.n	8007628 <UART_SetConfig+0x138>
 8007612:	2b0c      	cmp	r3, #12
 8007614:	d018      	beq.n	8007648 <UART_SetConfig+0x158>
 8007616:	e01f      	b.n	8007658 <UART_SetConfig+0x168>
 8007618:	231b      	movs	r3, #27
 800761a:	2218      	movs	r2, #24
 800761c:	4694      	mov	ip, r2
 800761e:	44bc      	add	ip, r7
 8007620:	4463      	add	r3, ip
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	e088      	b.n	800773a <UART_SetConfig+0x24a>
 8007628:	231b      	movs	r3, #27
 800762a:	2218      	movs	r2, #24
 800762c:	4694      	mov	ip, r2
 800762e:	44bc      	add	ip, r7
 8007630:	4463      	add	r3, ip
 8007632:	2202      	movs	r2, #2
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	e080      	b.n	800773a <UART_SetConfig+0x24a>
 8007638:	231b      	movs	r3, #27
 800763a:	2218      	movs	r2, #24
 800763c:	4694      	mov	ip, r2
 800763e:	44bc      	add	ip, r7
 8007640:	4463      	add	r3, ip
 8007642:	2204      	movs	r2, #4
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	e078      	b.n	800773a <UART_SetConfig+0x24a>
 8007648:	231b      	movs	r3, #27
 800764a:	2218      	movs	r2, #24
 800764c:	4694      	mov	ip, r2
 800764e:	44bc      	add	ip, r7
 8007650:	4463      	add	r3, ip
 8007652:	2208      	movs	r2, #8
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	e070      	b.n	800773a <UART_SetConfig+0x24a>
 8007658:	231b      	movs	r3, #27
 800765a:	2218      	movs	r2, #24
 800765c:	4694      	mov	ip, r2
 800765e:	44bc      	add	ip, r7
 8007660:	4463      	add	r3, ip
 8007662:	2210      	movs	r2, #16
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	e067      	b.n	800773a <UART_SetConfig+0x24a>
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a80      	ldr	r2, [pc, #512]	; (8007870 <UART_SetConfig+0x380>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d107      	bne.n	8007684 <UART_SetConfig+0x194>
 8007674:	231b      	movs	r3, #27
 8007676:	2218      	movs	r2, #24
 8007678:	4694      	mov	ip, r2
 800767a:	44bc      	add	ip, r7
 800767c:	4463      	add	r3, ip
 800767e:	2200      	movs	r2, #0
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	e05a      	b.n	800773a <UART_SetConfig+0x24a>
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a7a      	ldr	r2, [pc, #488]	; (8007874 <UART_SetConfig+0x384>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d107      	bne.n	800769e <UART_SetConfig+0x1ae>
 800768e:	231b      	movs	r3, #27
 8007690:	2218      	movs	r2, #24
 8007692:	4694      	mov	ip, r2
 8007694:	44bc      	add	ip, r7
 8007696:	4463      	add	r3, ip
 8007698:	2200      	movs	r2, #0
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	e04d      	b.n	800773a <UART_SetConfig+0x24a>
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a6e      	ldr	r2, [pc, #440]	; (800785c <UART_SetConfig+0x36c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d141      	bne.n	800772c <UART_SetConfig+0x23c>
 80076a8:	4b6f      	ldr	r3, [pc, #444]	; (8007868 <UART_SetConfig+0x378>)
 80076aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076ac:	23c0      	movs	r3, #192	; 0xc0
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	4013      	ands	r3, r2
 80076b2:	2280      	movs	r2, #128	; 0x80
 80076b4:	00d2      	lsls	r2, r2, #3
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d01f      	beq.n	80076fa <UART_SetConfig+0x20a>
 80076ba:	2280      	movs	r2, #128	; 0x80
 80076bc:	00d2      	lsls	r2, r2, #3
 80076be:	4293      	cmp	r3, r2
 80076c0:	d802      	bhi.n	80076c8 <UART_SetConfig+0x1d8>
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <UART_SetConfig+0x1ea>
 80076c6:	e028      	b.n	800771a <UART_SetConfig+0x22a>
 80076c8:	2280      	movs	r2, #128	; 0x80
 80076ca:	0112      	lsls	r2, r2, #4
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00c      	beq.n	80076ea <UART_SetConfig+0x1fa>
 80076d0:	22c0      	movs	r2, #192	; 0xc0
 80076d2:	0112      	lsls	r2, r2, #4
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d018      	beq.n	800770a <UART_SetConfig+0x21a>
 80076d8:	e01f      	b.n	800771a <UART_SetConfig+0x22a>
 80076da:	231b      	movs	r3, #27
 80076dc:	2218      	movs	r2, #24
 80076de:	4694      	mov	ip, r2
 80076e0:	44bc      	add	ip, r7
 80076e2:	4463      	add	r3, ip
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	e027      	b.n	800773a <UART_SetConfig+0x24a>
 80076ea:	231b      	movs	r3, #27
 80076ec:	2218      	movs	r2, #24
 80076ee:	4694      	mov	ip, r2
 80076f0:	44bc      	add	ip, r7
 80076f2:	4463      	add	r3, ip
 80076f4:	2202      	movs	r2, #2
 80076f6:	701a      	strb	r2, [r3, #0]
 80076f8:	e01f      	b.n	800773a <UART_SetConfig+0x24a>
 80076fa:	231b      	movs	r3, #27
 80076fc:	2218      	movs	r2, #24
 80076fe:	4694      	mov	ip, r2
 8007700:	44bc      	add	ip, r7
 8007702:	4463      	add	r3, ip
 8007704:	2204      	movs	r2, #4
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	e017      	b.n	800773a <UART_SetConfig+0x24a>
 800770a:	231b      	movs	r3, #27
 800770c:	2218      	movs	r2, #24
 800770e:	4694      	mov	ip, r2
 8007710:	44bc      	add	ip, r7
 8007712:	4463      	add	r3, ip
 8007714:	2208      	movs	r2, #8
 8007716:	701a      	strb	r2, [r3, #0]
 8007718:	e00f      	b.n	800773a <UART_SetConfig+0x24a>
 800771a:	231b      	movs	r3, #27
 800771c:	2218      	movs	r2, #24
 800771e:	4694      	mov	ip, r2
 8007720:	44bc      	add	ip, r7
 8007722:	4463      	add	r3, ip
 8007724:	2210      	movs	r2, #16
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	46c0      	nop			; (mov r8, r8)
 800772a:	e006      	b.n	800773a <UART_SetConfig+0x24a>
 800772c:	231b      	movs	r3, #27
 800772e:	2218      	movs	r2, #24
 8007730:	4694      	mov	ip, r2
 8007732:	44bc      	add	ip, r7
 8007734:	4463      	add	r3, ip
 8007736:	2210      	movs	r2, #16
 8007738:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a47      	ldr	r2, [pc, #284]	; (800785c <UART_SetConfig+0x36c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d000      	beq.n	8007746 <UART_SetConfig+0x256>
 8007744:	e0a0      	b.n	8007888 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007746:	231b      	movs	r3, #27
 8007748:	2218      	movs	r2, #24
 800774a:	4694      	mov	ip, r2
 800774c:	44bc      	add	ip, r7
 800774e:	4463      	add	r3, ip
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d00d      	beq.n	8007772 <UART_SetConfig+0x282>
 8007756:	dc02      	bgt.n	800775e <UART_SetConfig+0x26e>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d005      	beq.n	8007768 <UART_SetConfig+0x278>
 800775c:	e01d      	b.n	800779a <UART_SetConfig+0x2aa>
 800775e:	2b04      	cmp	r3, #4
 8007760:	d012      	beq.n	8007788 <UART_SetConfig+0x298>
 8007762:	2b08      	cmp	r3, #8
 8007764:	d015      	beq.n	8007792 <UART_SetConfig+0x2a2>
 8007766:	e018      	b.n	800779a <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007768:	f7fe fc6a 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 800776c:	0003      	movs	r3, r0
 800776e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007770:	e01d      	b.n	80077ae <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007772:	4b3d      	ldr	r3, [pc, #244]	; (8007868 <UART_SetConfig+0x378>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2210      	movs	r2, #16
 8007778:	4013      	ands	r3, r2
 800777a:	d002      	beq.n	8007782 <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800777c:	4b3e      	ldr	r3, [pc, #248]	; (8007878 <UART_SetConfig+0x388>)
 800777e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007780:	e015      	b.n	80077ae <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 8007782:	4b3e      	ldr	r3, [pc, #248]	; (800787c <UART_SetConfig+0x38c>)
 8007784:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007786:	e012      	b.n	80077ae <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007788:	f7fe fbae 	bl	8005ee8 <HAL_RCC_GetSysClockFreq>
 800778c:	0003      	movs	r3, r0
 800778e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007790:	e00d      	b.n	80077ae <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007792:	2380      	movs	r3, #128	; 0x80
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007798:	e009      	b.n	80077ae <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800779e:	231a      	movs	r3, #26
 80077a0:	2218      	movs	r2, #24
 80077a2:	4694      	mov	ip, r2
 80077a4:	44bc      	add	ip, r7
 80077a6:	4463      	add	r3, ip
 80077a8:	2201      	movs	r2, #1
 80077aa:	701a      	strb	r2, [r3, #0]
        break;
 80077ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d100      	bne.n	80077b6 <UART_SetConfig+0x2c6>
 80077b4:	e13c      	b.n	8007a30 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	0013      	movs	r3, r2
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	189b      	adds	r3, r3, r2
 80077c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d305      	bcc.n	80077d2 <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d907      	bls.n	80077e2 <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 80077d2:	231a      	movs	r3, #26
 80077d4:	2218      	movs	r2, #24
 80077d6:	4694      	mov	ip, r2
 80077d8:	44bc      	add	ip, r7
 80077da:	4463      	add	r3, ip
 80077dc:	2201      	movs	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	e126      	b.n	8007a30 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80077e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e4:	613b      	str	r3, [r7, #16]
 80077e6:	2300      	movs	r3, #0
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	6939      	ldr	r1, [r7, #16]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	000b      	movs	r3, r1
 80077f0:	0e1b      	lsrs	r3, r3, #24
 80077f2:	0010      	movs	r0, r2
 80077f4:	0205      	lsls	r5, r0, #8
 80077f6:	431d      	orrs	r5, r3
 80077f8:	000b      	movs	r3, r1
 80077fa:	021c      	lsls	r4, r3, #8
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	60bb      	str	r3, [r7, #8]
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68b8      	ldr	r0, [r7, #8]
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	1900      	adds	r0, r0, r4
 800780e:	4169      	adcs	r1, r5
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	603b      	str	r3, [r7, #0]
 8007816:	2300      	movs	r3, #0
 8007818:	607b      	str	r3, [r7, #4]
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f7f8 fe39 	bl	8000494 <__aeabi_uldivmod>
 8007822:	0003      	movs	r3, r0
 8007824:	000c      	movs	r4, r1
 8007826:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	4a15      	ldr	r2, [pc, #84]	; (8007880 <UART_SetConfig+0x390>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d908      	bls.n	8007842 <UART_SetConfig+0x352>
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	4a14      	ldr	r2, [pc, #80]	; (8007884 <UART_SetConfig+0x394>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d804      	bhi.n	8007842 <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783e:	60da      	str	r2, [r3, #12]
 8007840:	e0f6      	b.n	8007a30 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 8007842:	231a      	movs	r3, #26
 8007844:	2218      	movs	r2, #24
 8007846:	4694      	mov	ip, r2
 8007848:	44bc      	add	ip, r7
 800784a:	4463      	add	r3, ip
 800784c:	2201      	movs	r2, #1
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	e0ee      	b.n	8007a30 <UART_SetConfig+0x540>
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	efff69f3 	.word	0xefff69f3
 8007858:	ffffcfff 	.word	0xffffcfff
 800785c:	40004800 	.word	0x40004800
 8007860:	fffff4ff 	.word	0xfffff4ff
 8007864:	40013800 	.word	0x40013800
 8007868:	40021000 	.word	0x40021000
 800786c:	40004400 	.word	0x40004400
 8007870:	40004c00 	.word	0x40004c00
 8007874:	40005000 	.word	0x40005000
 8007878:	003d0900 	.word	0x003d0900
 800787c:	00f42400 	.word	0x00f42400
 8007880:	000002ff 	.word	0x000002ff
 8007884:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	69da      	ldr	r2, [r3, #28]
 800788c:	2380      	movs	r3, #128	; 0x80
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	429a      	cmp	r2, r3
 8007892:	d000      	beq.n	8007896 <UART_SetConfig+0x3a6>
 8007894:	e073      	b.n	800797e <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 8007896:	231b      	movs	r3, #27
 8007898:	2218      	movs	r2, #24
 800789a:	4694      	mov	ip, r2
 800789c:	44bc      	add	ip, r7
 800789e:	4463      	add	r3, ip
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d822      	bhi.n	80078ec <UART_SetConfig+0x3fc>
 80078a6:	009a      	lsls	r2, r3, #2
 80078a8:	4b69      	ldr	r3, [pc, #420]	; (8007a50 <UART_SetConfig+0x560>)
 80078aa:	18d3      	adds	r3, r2, r3
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b0:	f7fe fbc6 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 80078b4:	0003      	movs	r3, r0
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078b8:	e022      	b.n	8007900 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ba:	f7fe fbd7 	bl	800606c <HAL_RCC_GetPCLK2Freq>
 80078be:	0003      	movs	r3, r0
 80078c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078c2:	e01d      	b.n	8007900 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078c4:	4b63      	ldr	r3, [pc, #396]	; (8007a54 <UART_SetConfig+0x564>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2210      	movs	r2, #16
 80078ca:	4013      	ands	r3, r2
 80078cc:	d002      	beq.n	80078d4 <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80078ce:	4b62      	ldr	r3, [pc, #392]	; (8007a58 <UART_SetConfig+0x568>)
 80078d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078d2:	e015      	b.n	8007900 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 80078d4:	4b61      	ldr	r3, [pc, #388]	; (8007a5c <UART_SetConfig+0x56c>)
 80078d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078d8:	e012      	b.n	8007900 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078da:	f7fe fb05 	bl	8005ee8 <HAL_RCC_GetSysClockFreq>
 80078de:	0003      	movs	r3, r0
 80078e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078e2:	e00d      	b.n	8007900 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078e4:	2380      	movs	r3, #128	; 0x80
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078ea:	e009      	b.n	8007900 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80078f0:	231a      	movs	r3, #26
 80078f2:	2218      	movs	r2, #24
 80078f4:	4694      	mov	ip, r2
 80078f6:	44bc      	add	ip, r7
 80078f8:	4463      	add	r3, ip
 80078fa:	2201      	movs	r2, #1
 80078fc:	701a      	strb	r2, [r3, #0]
        break;
 80078fe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d100      	bne.n	8007908 <UART_SetConfig+0x418>
 8007906:	e093      	b.n	8007a30 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	005a      	lsls	r2, r3, #1
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	085b      	lsrs	r3, r3, #1
 8007912:	18d2      	adds	r2, r2, r3
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	0019      	movs	r1, r3
 800791a:	0010      	movs	r0, r2
 800791c:	f7f8 fc06 	bl	800012c <__udivsi3>
 8007920:	0003      	movs	r3, r0
 8007922:	b29b      	uxth	r3, r3
 8007924:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	2b0f      	cmp	r3, #15
 800792a:	d920      	bls.n	800796e <UART_SetConfig+0x47e>
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	4a4c      	ldr	r2, [pc, #304]	; (8007a60 <UART_SetConfig+0x570>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d81c      	bhi.n	800796e <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	b29a      	uxth	r2, r3
 8007938:	200e      	movs	r0, #14
 800793a:	2418      	movs	r4, #24
 800793c:	193b      	adds	r3, r7, r4
 800793e:	181b      	adds	r3, r3, r0
 8007940:	210f      	movs	r1, #15
 8007942:	438a      	bics	r2, r1
 8007944:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	085b      	lsrs	r3, r3, #1
 800794a:	b29b      	uxth	r3, r3
 800794c:	2207      	movs	r2, #7
 800794e:	4013      	ands	r3, r2
 8007950:	b299      	uxth	r1, r3
 8007952:	193b      	adds	r3, r7, r4
 8007954:	181b      	adds	r3, r3, r0
 8007956:	193a      	adds	r2, r7, r4
 8007958:	1812      	adds	r2, r2, r0
 800795a:	8812      	ldrh	r2, [r2, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	193a      	adds	r2, r7, r4
 8007966:	1812      	adds	r2, r2, r0
 8007968:	8812      	ldrh	r2, [r2, #0]
 800796a:	60da      	str	r2, [r3, #12]
 800796c:	e060      	b.n	8007a30 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 800796e:	231a      	movs	r3, #26
 8007970:	2218      	movs	r2, #24
 8007972:	4694      	mov	ip, r2
 8007974:	44bc      	add	ip, r7
 8007976:	4463      	add	r3, ip
 8007978:	2201      	movs	r2, #1
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	e058      	b.n	8007a30 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 800797e:	231b      	movs	r3, #27
 8007980:	2218      	movs	r2, #24
 8007982:	4694      	mov	ip, r2
 8007984:	44bc      	add	ip, r7
 8007986:	4463      	add	r3, ip
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b08      	cmp	r3, #8
 800798c:	d822      	bhi.n	80079d4 <UART_SetConfig+0x4e4>
 800798e:	009a      	lsls	r2, r3, #2
 8007990:	4b34      	ldr	r3, [pc, #208]	; (8007a64 <UART_SetConfig+0x574>)
 8007992:	18d3      	adds	r3, r2, r3
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007998:	f7fe fb52 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 800799c:	0003      	movs	r3, r0
 800799e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079a0:	e022      	b.n	80079e8 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079a2:	f7fe fb63 	bl	800606c <HAL_RCC_GetPCLK2Freq>
 80079a6:	0003      	movs	r3, r0
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079aa:	e01d      	b.n	80079e8 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ac:	4b29      	ldr	r3, [pc, #164]	; (8007a54 <UART_SetConfig+0x564>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2210      	movs	r2, #16
 80079b2:	4013      	ands	r3, r2
 80079b4:	d002      	beq.n	80079bc <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80079b6:	4b28      	ldr	r3, [pc, #160]	; (8007a58 <UART_SetConfig+0x568>)
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079ba:	e015      	b.n	80079e8 <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 80079bc:	4b27      	ldr	r3, [pc, #156]	; (8007a5c <UART_SetConfig+0x56c>)
 80079be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079c0:	e012      	b.n	80079e8 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079c2:	f7fe fa91 	bl	8005ee8 <HAL_RCC_GetSysClockFreq>
 80079c6:	0003      	movs	r3, r0
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079ca:	e00d      	b.n	80079e8 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079cc:	2380      	movs	r3, #128	; 0x80
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079d2:	e009      	b.n	80079e8 <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80079d8:	231a      	movs	r3, #26
 80079da:	2218      	movs	r2, #24
 80079dc:	4694      	mov	ip, r2
 80079de:	44bc      	add	ip, r7
 80079e0:	4463      	add	r3, ip
 80079e2:	2201      	movs	r2, #1
 80079e4:	701a      	strb	r2, [r3, #0]
        break;
 80079e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d020      	beq.n	8007a30 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	085a      	lsrs	r2, r3, #1
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	18d2      	adds	r2, r2, r3
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	0019      	movs	r1, r3
 80079fe:	0010      	movs	r0, r2
 8007a00:	f7f8 fb94 	bl	800012c <__udivsi3>
 8007a04:	0003      	movs	r3, r0
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	2b0f      	cmp	r3, #15
 8007a0e:	d908      	bls.n	8007a22 <UART_SetConfig+0x532>
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <UART_SetConfig+0x570>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d804      	bhi.n	8007a22 <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a1e:	60da      	str	r2, [r3, #12]
 8007a20:	e006      	b.n	8007a30 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8007a22:	231a      	movs	r3, #26
 8007a24:	2218      	movs	r2, #24
 8007a26:	4694      	mov	ip, r2
 8007a28:	44bc      	add	ip, r7
 8007a2a:	4463      	add	r3, ip
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	2200      	movs	r2, #0
 8007a34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007a3c:	231a      	movs	r3, #26
 8007a3e:	2218      	movs	r2, #24
 8007a40:	4694      	mov	ip, r2
 8007a42:	44bc      	add	ip, r7
 8007a44:	4463      	add	r3, ip
 8007a46:	781b      	ldrb	r3, [r3, #0]
}
 8007a48:	0018      	movs	r0, r3
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	b00e      	add	sp, #56	; 0x38
 8007a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8007a50:	0800ed80 	.word	0x0800ed80
 8007a54:	40021000 	.word	0x40021000
 8007a58:	003d0900 	.word	0x003d0900
 8007a5c:	00f42400 	.word	0x00f42400
 8007a60:	0000ffff 	.word	0x0000ffff
 8007a64:	0800eda4 	.word	0x0800eda4

08007a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	2201      	movs	r2, #1
 8007a76:	4013      	ands	r3, r2
 8007a78:	d00b      	beq.n	8007a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	4a4a      	ldr	r2, [pc, #296]	; (8007bac <UART_AdvFeatureConfig+0x144>)
 8007a82:	4013      	ands	r3, r2
 8007a84:	0019      	movs	r1, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	2202      	movs	r2, #2
 8007a98:	4013      	ands	r3, r2
 8007a9a:	d00b      	beq.n	8007ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	4a43      	ldr	r2, [pc, #268]	; (8007bb0 <UART_AdvFeatureConfig+0x148>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	0019      	movs	r1, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2204      	movs	r2, #4
 8007aba:	4013      	ands	r3, r2
 8007abc:	d00b      	beq.n	8007ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	4a3b      	ldr	r2, [pc, #236]	; (8007bb4 <UART_AdvFeatureConfig+0x14c>)
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	0019      	movs	r1, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	2208      	movs	r2, #8
 8007adc:	4013      	ands	r3, r2
 8007ade:	d00b      	beq.n	8007af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	4a34      	ldr	r2, [pc, #208]	; (8007bb8 <UART_AdvFeatureConfig+0x150>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	0019      	movs	r1, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	2210      	movs	r2, #16
 8007afe:	4013      	ands	r3, r2
 8007b00:	d00b      	beq.n	8007b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	4a2c      	ldr	r2, [pc, #176]	; (8007bbc <UART_AdvFeatureConfig+0x154>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	0019      	movs	r1, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	2220      	movs	r2, #32
 8007b20:	4013      	ands	r3, r2
 8007b22:	d00b      	beq.n	8007b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	4a25      	ldr	r2, [pc, #148]	; (8007bc0 <UART_AdvFeatureConfig+0x158>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	0019      	movs	r1, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	2240      	movs	r2, #64	; 0x40
 8007b42:	4013      	ands	r3, r2
 8007b44:	d01d      	beq.n	8007b82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <UART_AdvFeatureConfig+0x15c>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	0019      	movs	r1, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b62:	2380      	movs	r3, #128	; 0x80
 8007b64:	035b      	lsls	r3, r3, #13
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d10b      	bne.n	8007b82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <UART_AdvFeatureConfig+0x160>)
 8007b72:	4013      	ands	r3, r2
 8007b74:	0019      	movs	r1, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2280      	movs	r2, #128	; 0x80
 8007b88:	4013      	ands	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	4a0e      	ldr	r2, [pc, #56]	; (8007bcc <UART_AdvFeatureConfig+0x164>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	0019      	movs	r1, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	605a      	str	r2, [r3, #4]
  }
}
 8007ba4:	46c0      	nop			; (mov r8, r8)
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b002      	add	sp, #8
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	fffdffff 	.word	0xfffdffff
 8007bb0:	fffeffff 	.word	0xfffeffff
 8007bb4:	fffbffff 	.word	0xfffbffff
 8007bb8:	ffff7fff 	.word	0xffff7fff
 8007bbc:	ffffefff 	.word	0xffffefff
 8007bc0:	ffffdfff 	.word	0xffffdfff
 8007bc4:	ffefffff 	.word	0xffefffff
 8007bc8:	ff9fffff 	.word	0xff9fffff
 8007bcc:	fff7ffff 	.word	0xfff7ffff

08007bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2280      	movs	r2, #128	; 0x80
 8007bdc:	2100      	movs	r1, #0
 8007bde:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007be0:	f7fc f91a 	bl	8003e18 <HAL_GetTick>
 8007be4:	0003      	movs	r3, r0
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2208      	movs	r2, #8
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	2b08      	cmp	r3, #8
 8007bf4:	d10d      	bne.n	8007c12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	2380      	movs	r3, #128	; 0x80
 8007bfa:	0399      	lsls	r1, r3, #14
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4b18      	ldr	r3, [pc, #96]	; (8007c60 <UART_CheckIdleState+0x90>)
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	0013      	movs	r3, r2
 8007c04:	2200      	movs	r2, #0
 8007c06:	f000 f82d 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8007c0a:	1e03      	subs	r3, r0, #0
 8007c0c:	d001      	beq.n	8007c12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e022      	b.n	8007c58 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2204      	movs	r2, #4
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d10d      	bne.n	8007c3c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	2380      	movs	r3, #128	; 0x80
 8007c24:	03d9      	lsls	r1, r3, #15
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4b0d      	ldr	r3, [pc, #52]	; (8007c60 <UART_CheckIdleState+0x90>)
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	0013      	movs	r3, r2
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f000 f818 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8007c34:	1e03      	subs	r3, r0, #0
 8007c36:	d001      	beq.n	8007c3c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e00d      	b.n	8007c58 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2274      	movs	r2, #116	; 0x74
 8007c52:	2100      	movs	r1, #0
 8007c54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	0018      	movs	r0, r3
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	b004      	add	sp, #16
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	01ffffff 	.word	0x01ffffff

08007c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	1dfb      	adds	r3, r7, #7
 8007c72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c74:	e05e      	b.n	8007d34 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	d05b      	beq.n	8007d34 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c7c:	f7fc f8cc 	bl	8003e18 <HAL_GetTick>
 8007c80:	0002      	movs	r2, r0
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d302      	bcc.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d11b      	bne.n	8007cca <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	492f      	ldr	r1, [pc, #188]	; (8007d5c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007c9e:	400a      	ands	r2, r1
 8007ca0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2101      	movs	r1, #1
 8007cae:	438a      	bics	r2, r1
 8007cb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2274      	movs	r2, #116	; 0x74
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e044      	b.n	8007d54 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	d02e      	beq.n	8007d34 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69da      	ldr	r2, [r3, #28]
 8007cdc:	2380      	movs	r3, #128	; 0x80
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	401a      	ands	r2, r3
 8007ce2:	2380      	movs	r3, #128	; 0x80
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d124      	bne.n	8007d34 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2280      	movs	r2, #128	; 0x80
 8007cf0:	0112      	lsls	r2, r2, #4
 8007cf2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4917      	ldr	r1, [pc, #92]	; (8007d5c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007d00:	400a      	ands	r2, r1
 8007d02:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689a      	ldr	r2, [r3, #8]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2101      	movs	r1, #1
 8007d10:	438a      	bics	r2, r1
 8007d12:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2220      	movs	r2, #32
 8007d18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2280      	movs	r2, #128	; 0x80
 8007d24:	2120      	movs	r1, #32
 8007d26:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2274      	movs	r2, #116	; 0x74
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e00f      	b.n	8007d54 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	425a      	negs	r2, r3
 8007d44:	4153      	adcs	r3, r2
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	001a      	movs	r2, r3
 8007d4a:	1dfb      	adds	r3, r7, #7
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d091      	beq.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	0018      	movs	r0, r3
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b004      	add	sp, #16
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	fffffe5f 	.word	0xfffffe5f

08007d60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	1dbb      	adds	r3, r7, #6
 8007d6c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	1dba      	adds	r2, r7, #6
 8007d78:	2158      	movs	r1, #88	; 0x58
 8007d7a:	8812      	ldrh	r2, [r2, #0]
 8007d7c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1dba      	adds	r2, r7, #6
 8007d82:	215a      	movs	r1, #90	; 0x5a
 8007d84:	8812      	ldrh	r2, [r2, #0]
 8007d86:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	2380      	movs	r3, #128	; 0x80
 8007d94:	015b      	lsls	r3, r3, #5
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d10d      	bne.n	8007db6 <UART_Start_Receive_IT+0x56>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d104      	bne.n	8007dac <UART_Start_Receive_IT+0x4c>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	225c      	movs	r2, #92	; 0x5c
 8007da6:	4932      	ldr	r1, [pc, #200]	; (8007e70 <UART_Start_Receive_IT+0x110>)
 8007da8:	5299      	strh	r1, [r3, r2]
 8007daa:	e02e      	b.n	8007e0a <UART_Start_Receive_IT+0xaa>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	225c      	movs	r2, #92	; 0x5c
 8007db0:	21ff      	movs	r1, #255	; 0xff
 8007db2:	5299      	strh	r1, [r3, r2]
 8007db4:	e029      	b.n	8007e0a <UART_Start_Receive_IT+0xaa>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10d      	bne.n	8007dda <UART_Start_Receive_IT+0x7a>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d104      	bne.n	8007dd0 <UART_Start_Receive_IT+0x70>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	225c      	movs	r2, #92	; 0x5c
 8007dca:	21ff      	movs	r1, #255	; 0xff
 8007dcc:	5299      	strh	r1, [r3, r2]
 8007dce:	e01c      	b.n	8007e0a <UART_Start_Receive_IT+0xaa>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	225c      	movs	r2, #92	; 0x5c
 8007dd4:	217f      	movs	r1, #127	; 0x7f
 8007dd6:	5299      	strh	r1, [r3, r2]
 8007dd8:	e017      	b.n	8007e0a <UART_Start_Receive_IT+0xaa>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	2380      	movs	r3, #128	; 0x80
 8007de0:	055b      	lsls	r3, r3, #21
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d10d      	bne.n	8007e02 <UART_Start_Receive_IT+0xa2>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d104      	bne.n	8007df8 <UART_Start_Receive_IT+0x98>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	225c      	movs	r2, #92	; 0x5c
 8007df2:	217f      	movs	r1, #127	; 0x7f
 8007df4:	5299      	strh	r1, [r3, r2]
 8007df6:	e008      	b.n	8007e0a <UART_Start_Receive_IT+0xaa>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	225c      	movs	r2, #92	; 0x5c
 8007dfc:	213f      	movs	r1, #63	; 0x3f
 8007dfe:	5299      	strh	r1, [r3, r2]
 8007e00:	e003      	b.n	8007e0a <UART_Start_Receive_IT+0xaa>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	225c      	movs	r2, #92	; 0x5c
 8007e06:	2100      	movs	r1, #0
 8007e08:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2280      	movs	r2, #128	; 0x80
 8007e0e:	2100      	movs	r1, #0
 8007e10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2222      	movs	r2, #34	; 0x22
 8007e16:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2101      	movs	r1, #1
 8007e24:	430a      	orrs	r2, r1
 8007e26:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	2380      	movs	r3, #128	; 0x80
 8007e2e:	015b      	lsls	r3, r3, #5
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d107      	bne.n	8007e44 <UART_Start_Receive_IT+0xe4>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4a0d      	ldr	r2, [pc, #52]	; (8007e74 <UART_Start_Receive_IT+0x114>)
 8007e40:	665a      	str	r2, [r3, #100]	; 0x64
 8007e42:	e002      	b.n	8007e4a <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4a0c      	ldr	r2, [pc, #48]	; (8007e78 <UART_Start_Receive_IT+0x118>)
 8007e48:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2274      	movs	r2, #116	; 0x74
 8007e4e:	2100      	movs	r1, #0
 8007e50:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2190      	movs	r1, #144	; 0x90
 8007e5e:	0049      	lsls	r1, r1, #1
 8007e60:	430a      	orrs	r2, r1
 8007e62:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	0018      	movs	r0, r3
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	b004      	add	sp, #16
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	000001ff 	.word	0x000001ff
 8007e74:	0800802d 	.word	0x0800802d
 8007e78:	08007f41 	.word	0x08007f41

08007e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4912      	ldr	r1, [pc, #72]	; (8007ed8 <UART_EndRxTransfer+0x5c>)
 8007e90:	400a      	ands	r2, r1
 8007e92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	438a      	bics	r2, r1
 8007ea2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d107      	bne.n	8007ebc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2110      	movs	r1, #16
 8007eb8:	438a      	bics	r2, r1
 8007eba:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	b002      	add	sp, #8
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	fffffedf 	.word	0xfffffedf

08007edc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	225a      	movs	r2, #90	; 0x5a
 8007eee:	2100      	movs	r1, #0
 8007ef0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2252      	movs	r2, #82	; 0x52
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	0018      	movs	r0, r3
 8007efe:	f7ff fae3 	bl	80074c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f02:	46c0      	nop			; (mov r8, r8)
 8007f04:	46bd      	mov	sp, r7
 8007f06:	b004      	add	sp, #16
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2140      	movs	r1, #64	; 0x40
 8007f1e:	438a      	bics	r2, r1
 8007f20:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7ff fac1 	bl	80074b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f36:	46c0      	nop			; (mov r8, r8)
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b002      	add	sp, #8
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f48:	230e      	movs	r3, #14
 8007f4a:	18fb      	adds	r3, r7, r3
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	215c      	movs	r1, #92	; 0x5c
 8007f50:	5a52      	ldrh	r2, [r2, r1]
 8007f52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f58:	2b22      	cmp	r3, #34	; 0x22
 8007f5a:	d158      	bne.n	800800e <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f62:	210c      	movs	r1, #12
 8007f64:	187b      	adds	r3, r7, r1
 8007f66:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f68:	187b      	adds	r3, r7, r1
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	230e      	movs	r3, #14
 8007f70:	18fb      	adds	r3, r7, r3
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b2d9      	uxtb	r1, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7a:	400a      	ands	r2, r1
 8007f7c:	b2d2      	uxtb	r2, r2
 8007f7e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	225a      	movs	r2, #90	; 0x5a
 8007f8e:	5a9b      	ldrh	r3, [r3, r2]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b299      	uxth	r1, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	225a      	movs	r2, #90	; 0x5a
 8007f9a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	225a      	movs	r2, #90	; 0x5a
 8007fa0:	5a9b      	ldrh	r3, [r3, r2]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d13a      	bne.n	800801e <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	491d      	ldr	r1, [pc, #116]	; (8008028 <UART_RxISR_8BIT+0xe8>)
 8007fb4:	400a      	ands	r2, r1
 8007fb6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689a      	ldr	r2, [r3, #8]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	438a      	bics	r2, r1
 8007fc6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d110      	bne.n	8007ffe <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2110      	movs	r1, #16
 8007fe8:	438a      	bics	r2, r1
 8007fea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2258      	movs	r2, #88	; 0x58
 8007ff0:	5a9a      	ldrh	r2, [r3, r2]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	0011      	movs	r1, r2
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f7ff fa6e 	bl	80074d8 <HAL_UARTEx_RxEventCallback>
 8007ffc:	e003      	b.n	8008006 <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	0018      	movs	r0, r3
 8008002:	f7fa fc2d 	bl	8002860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800800c:	e007      	b.n	800801e <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	699a      	ldr	r2, [r3, #24]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2108      	movs	r1, #8
 800801a:	430a      	orrs	r2, r1
 800801c:	619a      	str	r2, [r3, #24]
}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	46bd      	mov	sp, r7
 8008022:	b004      	add	sp, #16
 8008024:	bd80      	pop	{r7, pc}
 8008026:	46c0      	nop			; (mov r8, r8)
 8008028:	fffffedf 	.word	0xfffffedf

0800802c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008034:	230e      	movs	r3, #14
 8008036:	18fb      	adds	r3, r7, r3
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	215c      	movs	r1, #92	; 0x5c
 800803c:	5a52      	ldrh	r2, [r2, r1]
 800803e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008044:	2b22      	cmp	r3, #34	; 0x22
 8008046:	d158      	bne.n	80080fa <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800804e:	210c      	movs	r1, #12
 8008050:	187b      	adds	r3, r7, r1
 8008052:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008058:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800805a:	187b      	adds	r3, r7, r1
 800805c:	220e      	movs	r2, #14
 800805e:	18ba      	adds	r2, r7, r2
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	8812      	ldrh	r2, [r2, #0]
 8008064:	4013      	ands	r3, r2
 8008066:	b29a      	uxth	r2, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	1c9a      	adds	r2, r3, #2
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	225a      	movs	r2, #90	; 0x5a
 800807a:	5a9b      	ldrh	r3, [r3, r2]
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b299      	uxth	r1, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	225a      	movs	r2, #90	; 0x5a
 8008086:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	225a      	movs	r2, #90	; 0x5a
 800808c:	5a9b      	ldrh	r3, [r3, r2]
 800808e:	b29b      	uxth	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d13a      	bne.n	800810a <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	491d      	ldr	r1, [pc, #116]	; (8008114 <UART_RxISR_16BIT+0xe8>)
 80080a0:	400a      	ands	r2, r1
 80080a2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2101      	movs	r1, #1
 80080b0:	438a      	bics	r2, r1
 80080b2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d110      	bne.n	80080ea <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2110      	movs	r1, #16
 80080d4:	438a      	bics	r2, r1
 80080d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2258      	movs	r2, #88	; 0x58
 80080dc:	5a9a      	ldrh	r2, [r3, r2]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	0011      	movs	r1, r2
 80080e2:	0018      	movs	r0, r3
 80080e4:	f7ff f9f8 	bl	80074d8 <HAL_UARTEx_RxEventCallback>
 80080e8:	e003      	b.n	80080f2 <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	0018      	movs	r0, r3
 80080ee:	f7fa fbb7 	bl	8002860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080f8:	e007      	b.n	800810a <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2108      	movs	r1, #8
 8008106:	430a      	orrs	r2, r1
 8008108:	619a      	str	r2, [r3, #24]
}
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	46bd      	mov	sp, r7
 800810e:	b004      	add	sp, #16
 8008110:	bd80      	pop	{r7, pc}
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	fffffedf 	.word	0xfffffedf

08008118 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008120:	46c0      	nop			; (mov r8, r8)
 8008122:	46bd      	mov	sp, r7
 8008124:	b002      	add	sp, #8
 8008126:	bd80      	pop	{r7, pc}

08008128 <_ZN5debugC1EP20__UART_HandleTypeDef>:

#include "hw.h"


/**********************************************************************************************/
debug::debug( UART_HandleTypeDef * _huartx ){
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
	huartx = &*_huartx ;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	601a      	str	r2, [r3, #0]
}
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	0018      	movs	r0, r3
 800813c:	46bd      	mov	sp, r7
 800813e:	b002      	add	sp, #8
 8008140:	bd80      	pop	{r7, pc}

08008142 <_ZN5debug5printEPKc>:


/**********************************************************************************************/
void debug::print( const char *_info ){
 8008142:	b590      	push	{r4, r7, lr}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huartx, (uint8_t*)_info, (int)strlen(_info), 1000) ;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681c      	ldr	r4, [r3, #0]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	0018      	movs	r0, r3
 8008154:	f7f7 ffd8 	bl	8000108 <strlen>
 8008158:	0003      	movs	r3, r0
 800815a:	b29a      	uxth	r2, r3
 800815c:	23fa      	movs	r3, #250	; 0xfa
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	0020      	movs	r0, r4
 8008164:	f7fe fe9e 	bl	8006ea4 <HAL_UART_Transmit>
}
 8008168:	46c0      	nop			; (mov r8, r8)
 800816a:	46bd      	mov	sp, r7
 800816c:	b003      	add	sp, #12
 800816e:	bd90      	pop	{r4, r7, pc}

08008170 <_ZN5debug7printlnEPKc>:


/**********************************************************************************************/
void debug::println( const char *_info ){
 8008170:	b590      	push	{r4, r7, lr}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huartx, (uint8_t*)"\n", 1, 1000) ;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	23fa      	movs	r3, #250	; 0xfa
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	490b      	ldr	r1, [pc, #44]	; (80081b0 <_ZN5debug7printlnEPKc+0x40>)
 8008184:	2201      	movs	r2, #1
 8008186:	f7fe fe8d 	bl	8006ea4 <HAL_UART_Transmit>
	HAL_UART_Transmit(huartx, (uint8_t*)_info, (int)strlen(_info), 1000) ;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681c      	ldr	r4, [r3, #0]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	0018      	movs	r0, r3
 8008192:	f7f7 ffb9 	bl	8000108 <strlen>
 8008196:	0003      	movs	r3, r0
 8008198:	b29a      	uxth	r2, r3
 800819a:	23fa      	movs	r3, #250	; 0xfa
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	0020      	movs	r0, r4
 80081a2:	f7fe fe7f 	bl	8006ea4 <HAL_UART_Transmit>
}
 80081a6:	46c0      	nop			; (mov r8, r8)
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b003      	add	sp, #12
 80081ac:	bd90      	pop	{r4, r7, pc}
 80081ae:	46c0      	nop			; (mov r8, r8)
 80081b0:	0800e278 	.word	0x0800e278

080081b4 <_ZN7unDebugC1Ev>:


/**********************************************************************************************/
unDebug::unDebug(){
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]

}
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	0018      	movs	r0, r3
 80081c0:	46bd      	mov	sp, r7
 80081c2:	b002      	add	sp, #8
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <_ZN5lrwanC1EP20__UART_HandleTypeDef>:
	#undef LR_DEBUG
	#define LR_DEBUG lrUnDebug
#endif
#define LRWAN_CLC_OK "SM+CLC_OK"
#define LRWAN_CLC_LOST "SM+CLC_LOST"
lrwan::lrwan( UART_HandleTypeDef * _huartx ){
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a06      	ldr	r2, [pc, #24]	; (80081f4 <_ZN5lrwanC1EP20__UART_HandleTypeDef+0x2c>)
 80081dc:	2100      	movs	r1, #0
 80081de:	5099      	str	r1, [r3, r2]
	huartx = &*_huartx ;
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	23fb      	movs	r3, #251	; 0xfb
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	50d1      	str	r1, [r2, r3]
}
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	0018      	movs	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b002      	add	sp, #8
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	000007d4 	.word	0x000007d4

080081f8 <_ZN5lrwan10IRQhandlerEv>:
/*
 * Hàm sim7x00::IRQhandler(); sẽ được đặt vào hàm ngắt UART : void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) ;
 */
/*____________________________________________________________________________________________________________________________*/

void lrwan::IRQhandler(){
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	6078      	str	r0, [r7, #4]
	// khi nào nhận được ký tự \r thì sẽ hiểu là đã kết thúc lệnh.
	if(  rxBuff[0] == '\r' ){
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	2b0d      	cmp	r3, #13
 8008206:	d14a      	bne.n	800829e <_ZN5lrwan10IRQhandlerEv+0xa6>
		if( strstr(rxData, LRWAN_CLC_LOST) != NULL ){
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3303      	adds	r3, #3
 800820c:	4a36      	ldr	r2, [pc, #216]	; (80082e8 <_ZN5lrwan10IRQhandlerEv+0xf0>)
 800820e:	0011      	movs	r1, r2
 8008210:	0018      	movs	r0, r3
 8008212:	f002 ff4f 	bl	800b0b4 <strstr>
 8008216:	1e03      	subs	r3, r0, #0
 8008218:	d016      	beq.n	8008248 <_ZN5lrwan10IRQhandlerEv+0x50>
			lrwanStatus = 2;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2202      	movs	r2, #2
 800821e:	709a      	strb	r2, [r3, #2]
			SSD1306_DrawFilledRectangle(66, 0, 15, 15, SSD1306_COLOR_BLACK);
 8008220:	2300      	movs	r3, #0
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	230f      	movs	r3, #15
 8008226:	220f      	movs	r2, #15
 8008228:	2100      	movs	r1, #0
 800822a:	2042      	movs	r0, #66	; 0x42
 800822c:	f001 fe10 	bl	8009e50 <SSD1306_DrawFilledRectangle>
			SSD1306_DrawBitmap( 66, 3, loraFailEvent, 13, 12, SSD1306_COLOR_WHITE );
 8008230:	4a2e      	ldr	r2, [pc, #184]	; (80082ec <_ZN5lrwan10IRQhandlerEv+0xf4>)
 8008232:	2301      	movs	r3, #1
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	230c      	movs	r3, #12
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	230d      	movs	r3, #13
 800823c:	2103      	movs	r1, #3
 800823e:	2042      	movs	r0, #66	; 0x42
 8008240:	f001 f8aa 	bl	8009398 <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 8008244:	f001 fa14 	bl	8009670 <SSD1306_UpdateScreen>
		}
		if( strstr(rxData, LRWAN_CLC_OK) != NULL ){
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3303      	adds	r3, #3
 800824c:	4a28      	ldr	r2, [pc, #160]	; (80082f0 <_ZN5lrwan10IRQhandlerEv+0xf8>)
 800824e:	0011      	movs	r1, r2
 8008250:	0018      	movs	r0, r3
 8008252:	f002 ff2f 	bl	800b0b4 <strstr>
 8008256:	1e03      	subs	r3, r0, #0
 8008258:	d016      	beq.n	8008288 <_ZN5lrwan10IRQhandlerEv+0x90>
			lrwanStatus =1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	709a      	strb	r2, [r3, #2]
			SSD1306_DrawFilledRectangle(66, 0, 15, 15, SSD1306_COLOR_BLACK);
 8008260:	2300      	movs	r3, #0
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	230f      	movs	r3, #15
 8008266:	220f      	movs	r2, #15
 8008268:	2100      	movs	r1, #0
 800826a:	2042      	movs	r0, #66	; 0x42
 800826c:	f001 fdf0 	bl	8009e50 <SSD1306_DrawFilledRectangle>
			SSD1306_DrawBitmap( 66, 2, loraDoneEvent, 15, 14, SSD1306_COLOR_WHITE );
 8008270:	4a20      	ldr	r2, [pc, #128]	; (80082f4 <_ZN5lrwan10IRQhandlerEv+0xfc>)
 8008272:	2301      	movs	r3, #1
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	230e      	movs	r3, #14
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	230f      	movs	r3, #15
 800827c:	2102      	movs	r1, #2
 800827e:	2042      	movs	r0, #66	; 0x42
 8008280:	f001 f88a 	bl	8009398 <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 8008284:	f001 f9f4 	bl	8009670 <SSD1306_UpdateScreen>
		}
		rxDone_FLAG = 1 ;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	701a      	strb	r2, [r3, #0]
		memset(rxBuff,0,1) ;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3301      	adds	r3, #1
 8008292:	2201      	movs	r2, #1
 8008294:	2100      	movs	r1, #0
 8008296:	0018      	movs	r0, r3
 8008298:	f001 ffb3 	bl	800a202 <memset>
 800829c:	e015      	b.n	80082ca <_ZN5lrwan10IRQhandlerEv+0xd2>
	}else{
		// tạo ra 1 biến dữ liệu  rxData = \nOK\n
		rxData[dataCount] = rxBuff[0] ;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a15      	ldr	r2, [pc, #84]	; (80082f8 <_ZN5lrwan10IRQhandlerEv+0x100>)
 80082a2:	589b      	ldr	r3, [r3, r2]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	7851      	ldrb	r1, [r2, #1]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	18d3      	adds	r3, r2, r3
 80082ac:	1c0a      	adds	r2, r1, #0
 80082ae:	70da      	strb	r2, [r3, #3]
		// Cộng dồn dữ liệu lên nhưng phải đảm bảo nằm trong vùng nhớ của bộ đệm ! Không được để quá, sẽ gây treo VĐK ( nguy hiểm )
		if ( dataCount < RX_DATA_MAX ) dataCount++ ;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a11      	ldr	r2, [pc, #68]	; (80082f8 <_ZN5lrwan10IRQhandlerEv+0x100>)
 80082b4:	589b      	ldr	r3, [r3, r2]
 80082b6:	4a11      	ldr	r2, [pc, #68]	; (80082fc <_ZN5lrwan10IRQhandlerEv+0x104>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	dc06      	bgt.n	80082ca <_ZN5lrwan10IRQhandlerEv+0xd2>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a0e      	ldr	r2, [pc, #56]	; (80082f8 <_ZN5lrwan10IRQhandlerEv+0x100>)
 80082c0:	589b      	ldr	r3, [r3, r2]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	490c      	ldr	r1, [pc, #48]	; (80082f8 <_ZN5lrwan10IRQhandlerEv+0x100>)
 80082c8:	505a      	str	r2, [r3, r1]
		else {}
	}
	HAL_UART_Receive_IT(huartx, (uint8_t*)rxBuff, 1) ;
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	23fb      	movs	r3, #251	; 0xfb
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	58d0      	ldr	r0, [r2, r3]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	3301      	adds	r3, #1
 80082d6:	2201      	movs	r2, #1
 80082d8:	0019      	movs	r1, r3
 80082da:	f7fe fe8b 	bl	8006ff4 <HAL_UART_Receive_IT>
}
 80082de:	46c0      	nop			; (mov r8, r8)
 80082e0:	46bd      	mov	sp, r7
 80082e2:	b002      	add	sp, #8
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	0800e27c 	.word	0x0800e27c
 80082ec:	0800edc8 	.word	0x0800edc8
 80082f0:	0800e288 	.word	0x0800e288
 80082f4:	0800ede0 	.word	0x0800ede0
 80082f8:	000007d4 	.word	0x000007d4
 80082fc:	000007cf 	.word	0x000007cf

08008300 <_ZN5lrwan8memresetEv>:

void lrwan::memreset(){
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
	rxDone_FLAG = false ;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	701a      	strb	r2, [r3, #0]
	dataCount = 0 ;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a07      	ldr	r2, [pc, #28]	; (8008330 <_ZN5lrwan8memresetEv+0x30>)
 8008312:	2100      	movs	r1, #0
 8008314:	5099      	str	r1, [r3, r2]
	memset ( rxData, 0 , (size_t)sizeof(rxData)/sizeof(char) ) ;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	1cd8      	adds	r0, r3, #3
 800831a:	23fa      	movs	r3, #250	; 0xfa
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	001a      	movs	r2, r3
 8008320:	2100      	movs	r1, #0
 8008322:	f001 ff6e 	bl	800a202 <memset>
}
 8008326:	46c0      	nop			; (mov r8, r8)
 8008328:	46bd      	mov	sp, r7
 800832a:	b002      	add	sp, #8
 800832c:	bd80      	pop	{r7, pc}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	000007d4 	.word	0x000007d4

08008334 <_ZN5lrwan11sendCommandEPKcS1_i>:

/*
 * Hàm gửi dữ liệu và nhận phản hồi từ AT mega*/
/*____________________________________________________________________________________________________________________________*/
bool lrwan::sendCommand (const char* command, const char* expected_answer, int timeout) {
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]

    int answer=0;
 8008342:	2300      	movs	r3, #0
 8008344:	617b      	str	r3, [r7, #20]

    dataCount = 0 ;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4a46      	ldr	r2, [pc, #280]	; (8008464 <_ZN5lrwan11sendCommandEPKcS1_i+0x130>)
 800834a:	2100      	movs	r1, #0
 800834c:	5099      	str	r1, [r3, r2]
    rxDone_FLAG = 0 ;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	701a      	strb	r2, [r3, #0]
    memset(rxData, 0, RX_DATA_MAX );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	1cd8      	adds	r0, r3, #3
 8008358:	23fa      	movs	r3, #250	; 0xfa
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	001a      	movs	r2, r3
 800835e:	2100      	movs	r1, #0
 8008360:	f001 ff4f 	bl	800a202 <memset>

    LR_DEBUG.println("Requested to LRWAN module : ") ;
 8008364:	4a40      	ldr	r2, [pc, #256]	; (8008468 <_ZN5lrwan11sendCommandEPKcS1_i+0x134>)
 8008366:	4b41      	ldr	r3, [pc, #260]	; (800846c <_ZN5lrwan11sendCommandEPKcS1_i+0x138>)
 8008368:	0011      	movs	r1, r2
 800836a:	0018      	movs	r0, r3
 800836c:	f7ff ff00 	bl	8008170 <_ZN5debug7printlnEPKc>
    LR_DEBUG.print(command) ;
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	4b3e      	ldr	r3, [pc, #248]	; (800846c <_ZN5lrwan11sendCommandEPKcS1_i+0x138>)
 8008374:	0011      	movs	r1, r2
 8008376:	0018      	movs	r0, r3
 8008378:	f7ff fee3 	bl	8008142 <_ZN5debug5printEPKc>

    // Bắt đầu gửi lệnh cmd ngay tại đây
    HAL_UART_Transmit(huartx, (uint8_t*)command, strlen(command), timeout) ;
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	23fb      	movs	r3, #251	; 0xfb
 8008380:	00db      	lsls	r3, r3, #3
 8008382:	58d4      	ldr	r4, [r2, r3]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	0018      	movs	r0, r3
 8008388:	f7f7 febe 	bl	8000108 <strlen>
 800838c:	0003      	movs	r3, r0
 800838e:	b29a      	uxth	r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	68b9      	ldr	r1, [r7, #8]
 8008394:	0020      	movs	r0, r4
 8008396:	f7fe fd85 	bl	8006ea4 <HAL_UART_Transmit>

    LR_DEBUG.println("LRWAN responsed : ") ;
 800839a:	4a35      	ldr	r2, [pc, #212]	; (8008470 <_ZN5lrwan11sendCommandEPKcS1_i+0x13c>)
 800839c:	4b33      	ldr	r3, [pc, #204]	; (800846c <_ZN5lrwan11sendCommandEPKcS1_i+0x138>)
 800839e:	0011      	movs	r1, r2
 80083a0:	0018      	movs	r0, r3
 80083a2:	f7ff fee5 	bl	8008170 <_ZN5debug7printlnEPKc>

    // lệnh này để bắt đầu lấy mốc t.g để check Timeout
    uint32_t tickStart = HAL_GetTick() ;
 80083a6:	f7fb fd37 	bl	8003e18 <HAL_GetTick>
 80083aa:	0003      	movs	r3, r0
 80083ac:	613b      	str	r3, [r7, #16]


    while( answer == 0 ) {
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d132      	bne.n	800841a <_ZN5lrwan11sendCommandEPKcS1_i+0xe6>
    	// Kiểm tra thời gian phản hồi, nếu lâu quá timeout thì break, và báo lỗi
		if ( (int)( HAL_GetTick() - tickStart )  >=  timeout ) {
 80083b4:	f7fb fd30 	bl	8003e18 <HAL_GetTick>
 80083b8:	0002      	movs	r2, r0
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	001a      	movs	r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	0fd8      	lsrs	r0, r3, #31
 80083c4:	17d1      	asrs	r1, r2, #31
 80083c6:	429a      	cmp	r2, r3
 80083c8:	4148      	adcs	r0, r1
 80083ca:	0003      	movs	r3, r0
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d122      	bne.n	8008418 <_ZN5lrwan11sendCommandEPKcS1_i+0xe4>
	     * Kiểm tra module sim có phản hồi về đúng expected_answer hay khong
	     * Note : Hàm strstr(X, x) sẽ tìm 1 chuỗi con x trong chuỗi lớn hơn X
	     *  	  Nếu x xuất hiện trong X, thì hàm strstr sẽ trả về 1 chuỗi bắt đầu từ x và chuỗi
	     *  	  kéo dài còn lại phía sau từ x trong X
	     */
		if ( strstr(rxData, expected_answer) != NULL ){
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3303      	adds	r3, #3
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	0011      	movs	r1, r2
 80083da:	0018      	movs	r0, r3
 80083dc:	f002 fe6a 	bl	800b0b4 <strstr>
 80083e0:	1e03      	subs	r3, r0, #0
 80083e2:	d001      	beq.n	80083e8 <_ZN5lrwan11sendCommandEPKcS1_i+0xb4>
			// Nếu có thi la OK, answer == 1, thoát khỏi vòng while
			answer = 1;
 80083e4:	2301      	movs	r3, #1
 80083e6:	617b      	str	r3, [r7, #20]
		}

		// Led nhấp nháy báo hiệu đang tương tác với module sim
		if ( ( (int)( HAL_GetTick() - tickStart )/(int)100 % 2 ) == 0 )
 80083e8:	f7fb fd16 	bl	8003e18 <HAL_GetTick>
 80083ec:	0002      	movs	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2164      	movs	r1, #100	; 0x64
 80083f4:	0018      	movs	r0, r3
 80083f6:	f7f7 ff23 	bl	8000240 <__divsi3>
 80083fa:	0003      	movs	r3, r0
 80083fc:	001a      	movs	r2, r3
 80083fe:	2301      	movs	r3, #1
 8008400:	4013      	ands	r3, r2
 8008402:	425a      	negs	r2, r3
 8008404:	4153      	adcs	r3, r2
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0d0      	beq.n	80083ae <_ZN5lrwan11sendCommandEPKcS1_i+0x7a>
			HAL_GPIO_TogglePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin) ;
 800840c:	4b19      	ldr	r3, [pc, #100]	; (8008474 <_ZN5lrwan11sendCommandEPKcS1_i+0x140>)
 800840e:	2140      	movs	r1, #64	; 0x40
 8008410:	0018      	movs	r0, r3
 8008412:	f7fc fb4b 	bl	8004aac <HAL_GPIO_TogglePin>
    while( answer == 0 ) {
 8008416:	e7ca      	b.n	80083ae <_ZN5lrwan11sendCommandEPKcS1_i+0x7a>
			break ;
 8008418:	46c0      	nop			; (mov r8, r8)
	}

    // In thông tin mà module lorawan đã phản hồi về :
    LR_DEBUG.println(rxData) ;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	1cda      	adds	r2, r3, #3
 800841e:	4b13      	ldr	r3, [pc, #76]	; (800846c <_ZN5lrwan11sendCommandEPKcS1_i+0x138>)
 8008420:	0011      	movs	r1, r2
 8008422:	0018      	movs	r0, r3
 8008424:	f7ff fea4 	bl	8008170 <_ZN5debug7printlnEPKc>

    // Nếu kết quả phản hồi không như mong muốn :
    if ( answer == 0 )
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d105      	bne.n	800843a <_ZN5lrwan11sendCommandEPKcS1_i+0x106>
    	LR_DEBUG.println("Fail to get responses from LRWAN! ") ;
 800842e:	4a12      	ldr	r2, [pc, #72]	; (8008478 <_ZN5lrwan11sendCommandEPKcS1_i+0x144>)
 8008430:	4b0e      	ldr	r3, [pc, #56]	; (800846c <_ZN5lrwan11sendCommandEPKcS1_i+0x138>)
 8008432:	0011      	movs	r1, r2
 8008434:	0018      	movs	r0, r3
 8008436:	f7ff fe9b 	bl	8008170 <_ZN5debug7printlnEPKc>

    HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, (GPIO_PinState) 0 ) ;
 800843a:	4b0e      	ldr	r3, [pc, #56]	; (8008474 <_ZN5lrwan11sendCommandEPKcS1_i+0x140>)
 800843c:	2200      	movs	r2, #0
 800843e:	2140      	movs	r1, #64	; 0x40
 8008440:	0018      	movs	r0, r3
 8008442:	f7fc fb16 	bl	8004a72 <HAL_GPIO_WritePin>

    // Reset lại các biến phục vụ trong quá trình lấy dữ liệu từ module sim
    dataCount = 0 ;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4a06      	ldr	r2, [pc, #24]	; (8008464 <_ZN5lrwan11sendCommandEPKcS1_i+0x130>)
 800844a:	2100      	movs	r1, #0
 800844c:	5099      	str	r1, [r3, r2]
    rxDone_FLAG = 0 ;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	701a      	strb	r2, [r3, #0]
    //  Do hiện tại, rxData được sử dụng cho các tác vụ kế tiếp sau AT cmd, nên không được reset hàm  memset(rxData, 0, sizeof(rxData) ) ;
    return answer;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	1e5a      	subs	r2, r3, #1
 8008458:	4193      	sbcs	r3, r2
 800845a:	b2db      	uxtb	r3, r3
}
 800845c:	0018      	movs	r0, r3
 800845e:	46bd      	mov	sp, r7
 8008460:	b007      	add	sp, #28
 8008462:	bd90      	pop	{r4, r7, pc}
 8008464:	000007d4 	.word	0x000007d4
 8008468:	0800e294 	.word	0x0800e294
 800846c:	20001cb4 	.word	0x20001cb4
 8008470:	0800e2b4 	.word	0x0800e2b4
 8008474:	50000800 	.word	0x50000800
 8008478:	0800e2c8 	.word	0x0800e2c8

0800847c <_ZN5lrwan8responseEPKci>:

/*
 * Hàm phản hồi lại AT mega*/
/*____________________________________________________________________________________________________________________________*/
void lrwan::response( const char* response, int timeout ){
 800847c:	b590      	push	{r4, r7, lr}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huartx, (uint8_t*)response, strlen(response), timeout) ;
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	23fb      	movs	r3, #251	; 0xfb
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	58d4      	ldr	r4, [r2, r3]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	0018      	movs	r0, r3
 8008494:	f7f7 fe38 	bl	8000108 <strlen>
 8008498:	0003      	movs	r3, r0
 800849a:	b29a      	uxth	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	0020      	movs	r0, r4
 80084a2:	f7fe fcff 	bl	8006ea4 <HAL_UART_Transmit>
}
 80084a6:	46c0      	nop			; (mov r8, r8)
 80084a8:	46bd      	mov	sp, r7
 80084aa:	b005      	add	sp, #20
 80084ac:	bd90      	pop	{r4, r7, pc}
	...

080084b0 <_ZN5lrwan13identifyEventEv>:

/*
 * Hàm xử lí khi dữ liệu đến*/
/*____________________________________________________________________________________________________________________________*/
lr_events_t lrwan::identifyEvent(){
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
	lr_events_t lrEvent ;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	605a      	str	r2, [r3, #4]
	lrEvent.warning = NON ;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
	lrEvent.update = NON ;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	605a      	str	r2, [r3, #4]

	if( strstr(rxData, LR_REQ_WARNING_LV1_CODE) != NULL ){
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	3303      	adds	r3, #3
 80084d6:	4a5c      	ldr	r2, [pc, #368]	; (8008648 <_ZN5lrwan13identifyEventEv+0x198>)
 80084d8:	0011      	movs	r1, r2
 80084da:	0018      	movs	r0, r3
 80084dc:	f002 fdea 	bl	800b0b4 <strstr>
 80084e0:	1e03      	subs	r3, r0, #0
 80084e2:	d010      	beq.n	8008506 <_ZN5lrwan13identifyEventEv+0x56>
		lrEvent.warning = LR_REQ_WARNING_LV1 ;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - WARNING_LEVEL_1" ) ;
 80084ea:	4a58      	ldr	r2, [pc, #352]	; (800864c <_ZN5lrwan13identifyEventEv+0x19c>)
 80084ec:	4b58      	ldr	r3, [pc, #352]	; (8008650 <_ZN5lrwan13identifyEventEv+0x1a0>)
 80084ee:	0011      	movs	r1, r2
 80084f0:	0018      	movs	r0, r3
 80084f2:	f7ff fe3d 	bl	8008170 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 80084f6:	23fa      	movs	r3, #250	; 0xfa
 80084f8:	009a      	lsls	r2, r3, #2
 80084fa:	4956      	ldr	r1, [pc, #344]	; (8008654 <_ZN5lrwan13identifyEventEv+0x1a4>)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	0018      	movs	r0, r3
 8008500:	f7ff ffbc 	bl	800847c <_ZN5lrwan8responseEPKci>
		lrEvent.update = LR_REQ_PERIOD_DATA_UPDATE ;
		LR_DEBUG.println("EVENT: [ UPDATE ] - LORAWAN UPDATE DATA" ) ;
		response("OK\r", 1000 );
	}

	return lrEvent ;
 8008504:	e09a      	b.n	800863c <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_WARNING_LV2_CODE) != NULL ){
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	3303      	adds	r3, #3
 800850a:	4a53      	ldr	r2, [pc, #332]	; (8008658 <_ZN5lrwan13identifyEventEv+0x1a8>)
 800850c:	0011      	movs	r1, r2
 800850e:	0018      	movs	r0, r3
 8008510:	f002 fdd0 	bl	800b0b4 <strstr>
 8008514:	1e03      	subs	r3, r0, #0
 8008516:	d010      	beq.n	800853a <_ZN5lrwan13identifyEventEv+0x8a>
		lrEvent.warning = LR_REQ_WARNING_LV2 ;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - WARNING_LEVEL_2" ) ;
 800851e:	4a4f      	ldr	r2, [pc, #316]	; (800865c <_ZN5lrwan13identifyEventEv+0x1ac>)
 8008520:	4b4b      	ldr	r3, [pc, #300]	; (8008650 <_ZN5lrwan13identifyEventEv+0x1a0>)
 8008522:	0011      	movs	r1, r2
 8008524:	0018      	movs	r0, r3
 8008526:	f7ff fe23 	bl	8008170 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 800852a:	23fa      	movs	r3, #250	; 0xfa
 800852c:	009a      	lsls	r2, r3, #2
 800852e:	4949      	ldr	r1, [pc, #292]	; (8008654 <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	0018      	movs	r0, r3
 8008534:	f7ff ffa2 	bl	800847c <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 8008538:	e080      	b.n	800863c <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_WARNING_LV3_CODE) != NULL ){
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	3303      	adds	r3, #3
 800853e:	4a48      	ldr	r2, [pc, #288]	; (8008660 <_ZN5lrwan13identifyEventEv+0x1b0>)
 8008540:	0011      	movs	r1, r2
 8008542:	0018      	movs	r0, r3
 8008544:	f002 fdb6 	bl	800b0b4 <strstr>
 8008548:	1e03      	subs	r3, r0, #0
 800854a:	d010      	beq.n	800856e <_ZN5lrwan13identifyEventEv+0xbe>
		lrEvent.warning = LR_REQ_WARNING_LV3 ;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2203      	movs	r2, #3
 8008550:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - WARNING_LEVEL_3" ) ;
 8008552:	4a44      	ldr	r2, [pc, #272]	; (8008664 <_ZN5lrwan13identifyEventEv+0x1b4>)
 8008554:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <_ZN5lrwan13identifyEventEv+0x1a0>)
 8008556:	0011      	movs	r1, r2
 8008558:	0018      	movs	r0, r3
 800855a:	f7ff fe09 	bl	8008170 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 800855e:	23fa      	movs	r3, #250	; 0xfa
 8008560:	009a      	lsls	r2, r3, #2
 8008562:	493c      	ldr	r1, [pc, #240]	; (8008654 <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	0018      	movs	r0, r3
 8008568:	f7ff ff88 	bl	800847c <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 800856c:	e066      	b.n	800863c <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_WARNING_LV4_CODE) != NULL ){
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	3303      	adds	r3, #3
 8008572:	4a3d      	ldr	r2, [pc, #244]	; (8008668 <_ZN5lrwan13identifyEventEv+0x1b8>)
 8008574:	0011      	movs	r1, r2
 8008576:	0018      	movs	r0, r3
 8008578:	f002 fd9c 	bl	800b0b4 <strstr>
 800857c:	1e03      	subs	r3, r0, #0
 800857e:	d010      	beq.n	80085a2 <_ZN5lrwan13identifyEventEv+0xf2>
		lrEvent.warning = LR_REQ_WARNING_LV4 ;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2204      	movs	r2, #4
 8008584:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - WARNING_LEVEL_4" ) ;
 8008586:	4a39      	ldr	r2, [pc, #228]	; (800866c <_ZN5lrwan13identifyEventEv+0x1bc>)
 8008588:	4b31      	ldr	r3, [pc, #196]	; (8008650 <_ZN5lrwan13identifyEventEv+0x1a0>)
 800858a:	0011      	movs	r1, r2
 800858c:	0018      	movs	r0, r3
 800858e:	f7ff fdef 	bl	8008170 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 8008592:	23fa      	movs	r3, #250	; 0xfa
 8008594:	009a      	lsls	r2, r3, #2
 8008596:	492f      	ldr	r1, [pc, #188]	; (8008654 <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	0018      	movs	r0, r3
 800859c:	f7ff ff6e 	bl	800847c <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 80085a0:	e04c      	b.n	800863c <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_WARNING_LV5_CODE) != NULL ){
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	3303      	adds	r3, #3
 80085a6:	4a32      	ldr	r2, [pc, #200]	; (8008670 <_ZN5lrwan13identifyEventEv+0x1c0>)
 80085a8:	0011      	movs	r1, r2
 80085aa:	0018      	movs	r0, r3
 80085ac:	f002 fd82 	bl	800b0b4 <strstr>
 80085b0:	1e03      	subs	r3, r0, #0
 80085b2:	d010      	beq.n	80085d6 <_ZN5lrwan13identifyEventEv+0x126>
		lrEvent.warning = LR_REQ_WARNING_LV5 ;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2205      	movs	r2, #5
 80085b8:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - WARNING_LEVEL_5" ) ;
 80085ba:	4a2e      	ldr	r2, [pc, #184]	; (8008674 <_ZN5lrwan13identifyEventEv+0x1c4>)
 80085bc:	4b24      	ldr	r3, [pc, #144]	; (8008650 <_ZN5lrwan13identifyEventEv+0x1a0>)
 80085be:	0011      	movs	r1, r2
 80085c0:	0018      	movs	r0, r3
 80085c2:	f7ff fdd5 	bl	8008170 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 80085c6:	23fa      	movs	r3, #250	; 0xfa
 80085c8:	009a      	lsls	r2, r3, #2
 80085ca:	4922      	ldr	r1, [pc, #136]	; (8008654 <_ZN5lrwan13identifyEventEv+0x1a4>)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	0018      	movs	r0, r3
 80085d0:	f7ff ff54 	bl	800847c <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 80085d4:	e032      	b.n	800863c <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_STOP_WARNING_CODE) != NULL ){
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	3303      	adds	r3, #3
 80085da:	4a27      	ldr	r2, [pc, #156]	; (8008678 <_ZN5lrwan13identifyEventEv+0x1c8>)
 80085dc:	0011      	movs	r1, r2
 80085de:	0018      	movs	r0, r3
 80085e0:	f002 fd68 	bl	800b0b4 <strstr>
 80085e4:	1e03      	subs	r3, r0, #0
 80085e6:	d010      	beq.n	800860a <_ZN5lrwan13identifyEventEv+0x15a>
		lrEvent.warning = LR_REQ_STOP_WARNING ;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2206      	movs	r2, #6
 80085ec:	601a      	str	r2, [r3, #0]
		LR_DEBUG.println("EVENT: [ WARNING ] - STOP_WARNING" ) ;
 80085ee:	4a23      	ldr	r2, [pc, #140]	; (800867c <_ZN5lrwan13identifyEventEv+0x1cc>)
 80085f0:	4b17      	ldr	r3, [pc, #92]	; (8008650 <_ZN5lrwan13identifyEventEv+0x1a0>)
 80085f2:	0011      	movs	r1, r2
 80085f4:	0018      	movs	r0, r3
 80085f6:	f7ff fdbb 	bl	8008170 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 80085fa:	23fa      	movs	r3, #250	; 0xfa
 80085fc:	009a      	lsls	r2, r3, #2
 80085fe:	4915      	ldr	r1, [pc, #84]	; (8008654 <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	0018      	movs	r0, r3
 8008604:	f7ff ff3a 	bl	800847c <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 8008608:	e018      	b.n	800863c <_ZN5lrwan13identifyEventEv+0x18c>
	}else if( strstr(rxData, LR_REQ_DATA_PERIODLY_CODE) != NULL ){
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	3303      	adds	r3, #3
 800860e:	4a1c      	ldr	r2, [pc, #112]	; (8008680 <_ZN5lrwan13identifyEventEv+0x1d0>)
 8008610:	0011      	movs	r1, r2
 8008612:	0018      	movs	r0, r3
 8008614:	f002 fd4e 	bl	800b0b4 <strstr>
 8008618:	1e03      	subs	r3, r0, #0
 800861a:	d00f      	beq.n	800863c <_ZN5lrwan13identifyEventEv+0x18c>
		lrEvent.update = LR_REQ_PERIOD_DATA_UPDATE ;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2207      	movs	r2, #7
 8008620:	605a      	str	r2, [r3, #4]
		LR_DEBUG.println("EVENT: [ UPDATE ] - LORAWAN UPDATE DATA" ) ;
 8008622:	4a18      	ldr	r2, [pc, #96]	; (8008684 <_ZN5lrwan13identifyEventEv+0x1d4>)
 8008624:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <_ZN5lrwan13identifyEventEv+0x1a0>)
 8008626:	0011      	movs	r1, r2
 8008628:	0018      	movs	r0, r3
 800862a:	f7ff fda1 	bl	8008170 <_ZN5debug7printlnEPKc>
		response("OK\r", 1000 );
 800862e:	23fa      	movs	r3, #250	; 0xfa
 8008630:	009a      	lsls	r2, r3, #2
 8008632:	4908      	ldr	r1, [pc, #32]	; (8008654 <_ZN5lrwan13identifyEventEv+0x1a4>)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	0018      	movs	r0, r3
 8008638:	f7ff ff20 	bl	800847c <_ZN5lrwan8responseEPKci>
	return lrEvent ;
 800863c:	46c0      	nop			; (mov r8, r8)
}
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	46bd      	mov	sp, r7
 8008642:	b002      	add	sp, #8
 8008644:	bd80      	pop	{r7, pc}
 8008646:	46c0      	nop			; (mov r8, r8)
 8008648:	0800e2ec 	.word	0x0800e2ec
 800864c:	0800e2f4 	.word	0x0800e2f4
 8008650:	20001cb4 	.word	0x20001cb4
 8008654:	0800e31c 	.word	0x0800e31c
 8008658:	0800e320 	.word	0x0800e320
 800865c:	0800e328 	.word	0x0800e328
 8008660:	0800e350 	.word	0x0800e350
 8008664:	0800e358 	.word	0x0800e358
 8008668:	0800e380 	.word	0x0800e380
 800866c:	0800e388 	.word	0x0800e388
 8008670:	0800e3b0 	.word	0x0800e3b0
 8008674:	0800e3b8 	.word	0x0800e3b8
 8008678:	0800e3e0 	.word	0x0800e3e0
 800867c:	0800e3e4 	.word	0x0800e3e4
 8008680:	0800e408 	.word	0x0800e408
 8008684:	0800e40c 	.word	0x0800e40c

08008688 <_ZN5lrwan4initEv>:


/*
 * Hàm khởi khởi tạo lrwan*/
/*____________________________________________________________________________________________________________________________*/
void lrwan::init(){
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	// Init uart4 :
	MX_USART4_UART_Init();
 8008690:	f7fb f9e2 	bl	8003a58 <MX_USART4_UART_Init>

	// Khoi dong ngat uart4
	HAL_UART_Receive_IT(&huart4, (uint8_t*)rxBuff, 1) ;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	1c59      	adds	r1, r3, #1
 8008698:	4b04      	ldr	r3, [pc, #16]	; (80086ac <_ZN5lrwan4initEv+0x24>)
 800869a:	2201      	movs	r2, #1
 800869c:	0018      	movs	r0, r3
 800869e:	f7fe fca9 	bl	8006ff4 <HAL_UART_Receive_IT>
}
 80086a2:	46c0      	nop			; (mov r8, r8)
 80086a4:	46bd      	mov	sp, r7
 80086a6:	b002      	add	sp, #8
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	20001bac 	.word	0x20001bac

080086b0 <_ZN5lrwan8sendDataEPKcS1_ii>:

/*
 * Hàm reset và gửi dữ liệu với retrytime lần*/
/*____________________________________________________________________________________________________________________________*/
bool lrwan::sendData(const char* sms,const char* expectAnswer, int timeout, int retrytime){
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
	bool tmp =0;
 80086be:	2317      	movs	r3, #23
 80086c0:	18fb      	adds	r3, r7, r3
 80086c2:	2200      	movs	r2, #0
 80086c4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<retrytime;i++){
 80086c6:	2300      	movs	r3, #0
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	da34      	bge.n	800873c <_ZN5lrwan8sendDataEPKcS1_ii+0x8c>
		LR_DEBUG.println("Prepare for reset LORAWAN");
 80086d2:	4a1e      	ldr	r2, [pc, #120]	; (800874c <_ZN5lrwan8sendDataEPKcS1_ii+0x9c>)
 80086d4:	4b1e      	ldr	r3, [pc, #120]	; (8008750 <_ZN5lrwan8sendDataEPKcS1_ii+0xa0>)
 80086d6:	0011      	movs	r1, r2
 80086d8:	0018      	movs	r0, r3
 80086da:	f7ff fd49 	bl	8008170 <_ZN5debug7printlnEPKc>
		HAL_GPIO_WritePin(LRWAN_ONOFF_GPIO_Port, LRWAN_ONOFF_Pin, GPIO_PIN_RESET);
 80086de:	2380      	movs	r3, #128	; 0x80
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	481c      	ldr	r0, [pc, #112]	; (8008754 <_ZN5lrwan8sendDataEPKcS1_ii+0xa4>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	0019      	movs	r1, r3
 80086e8:	f7fc f9c3 	bl	8004a72 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80086ec:	23fa      	movs	r3, #250	; 0xfa
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	0018      	movs	r0, r3
 80086f2:	f7fb fb9b 	bl	8003e2c <HAL_Delay>
		HAL_GPIO_WritePin(LRWAN_ONOFF_GPIO_Port, LRWAN_ONOFF_Pin, GPIO_PIN_SET);
 80086f6:	2380      	movs	r3, #128	; 0x80
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	4816      	ldr	r0, [pc, #88]	; (8008754 <_ZN5lrwan8sendDataEPKcS1_ii+0xa4>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	0019      	movs	r1, r3
 8008700:	f7fc f9b7 	bl	8004a72 <HAL_GPIO_WritePin>
		HAL_Delay(4000);
 8008704:	23fa      	movs	r3, #250	; 0xfa
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	0018      	movs	r0, r3
 800870a:	f7fb fb8f 	bl	8003e2c <HAL_Delay>
			LR_DEBUG.println("Done Reset LORAWAN");
 800870e:	4a12      	ldr	r2, [pc, #72]	; (8008758 <_ZN5lrwan8sendDataEPKcS1_ii+0xa8>)
 8008710:	4b0f      	ldr	r3, [pc, #60]	; (8008750 <_ZN5lrwan8sendDataEPKcS1_ii+0xa0>)
 8008712:	0011      	movs	r1, r2
 8008714:	0018      	movs	r0, r3
 8008716:	f7ff fd2b 	bl	8008170 <_ZN5debug7printlnEPKc>
			if(sendCommand (sms,expectAnswer, timeout)==1){
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	68b9      	ldr	r1, [r7, #8]
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f7ff fe07 	bl	8008334 <_ZN5lrwan11sendCommandEPKcS1_i>
 8008726:	1e03      	subs	r3, r0, #0
 8008728:	d004      	beq.n	8008734 <_ZN5lrwan8sendDataEPKcS1_ii+0x84>
				tmp=1;
 800872a:	2317      	movs	r3, #23
 800872c:	18fb      	adds	r3, r7, r3
 800872e:	2201      	movs	r2, #1
 8008730:	701a      	strb	r2, [r3, #0]
//				response("OK", 1000);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
//				HAL_Delay(1000);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
				break;
 8008732:	e003      	b.n	800873c <_ZN5lrwan8sendDataEPKcS1_ii+0x8c>
	for(int i=0;i<retrytime;i++){
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	3301      	adds	r3, #1
 8008738:	613b      	str	r3, [r7, #16]
 800873a:	e7c6      	b.n	80086ca <_ZN5lrwan8sendDataEPKcS1_ii+0x1a>
			}
	}
	return tmp;
 800873c:	2317      	movs	r3, #23
 800873e:	18fb      	adds	r3, r7, r3
 8008740:	781b      	ldrb	r3, [r3, #0]
}
 8008742:	0018      	movs	r0, r3
 8008744:	46bd      	mov	sp, r7
 8008746:	b006      	add	sp, #24
 8008748:	bd80      	pop	{r7, pc}
 800874a:	46c0      	nop			; (mov r8, r8)
 800874c:	0800e434 	.word	0x0800e434
 8008750:	20001cb4 	.word	0x20001cb4
 8008754:	50000400 	.word	0x50000400
 8008758:	0800e450 	.word	0x0800e450

0800875c <_Z41__static_initialization_and_destruction_0ii>:
/*____________________________________________________________________________________________________________________________*/



#ifdef __cplusplus
}
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d10d      	bne.n	8008788 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	4a08      	ldr	r2, [pc, #32]	; (8008790 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d109      	bne.n	8008788 <_Z41__static_initialization_and_destruction_0ii+0x2c>
debug lrDebug(&DEBUG_UART) ;
 8008774:	4a07      	ldr	r2, [pc, #28]	; (8008794 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8008776:	4b08      	ldr	r3, [pc, #32]	; (8008798 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8008778:	0011      	movs	r1, r2
 800877a:	0018      	movs	r0, r3
 800877c:	f7ff fcd4 	bl	8008128 <_ZN5debugC1EP20__UART_HandleTypeDef>
unDebug lrUnDebug ;
 8008780:	4b06      	ldr	r3, [pc, #24]	; (800879c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008782:	0018      	movs	r0, r3
 8008784:	f7ff fd16 	bl	80081b4 <_ZN7unDebugC1Ev>
}
 8008788:	46c0      	nop			; (mov r8, r8)
 800878a:	46bd      	mov	sp, r7
 800878c:	b002      	add	sp, #8
 800878e:	bd80      	pop	{r7, pc}
 8008790:	0000ffff 	.word	0x0000ffff
 8008794:	20001c30 	.word	0x20001c30
 8008798:	20001cb4 	.word	0x20001cb4
 800879c:	20001cb8 	.word	0x20001cb8

080087a0 <_GLOBAL__sub_I_lrDebug>:
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	4b03      	ldr	r3, [pc, #12]	; (80087b4 <_GLOBAL__sub_I_lrDebug+0x14>)
 80087a6:	0019      	movs	r1, r3
 80087a8:	2001      	movs	r0, #1
 80087aa:	f7ff ffd7 	bl	800875c <_Z41__static_initialization_and_destruction_0ii>
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	46c0      	nop			; (mov r8, r8)
 80087b4:	0000ffff 	.word	0x0000ffff

080087b8 <_ZN7sim7x00C1EP20__UART_HandleTypeDef>:
//__________________________________________________________________________________________________________________________________________________//
//*****************************************************/ SIM FUNCTIONS /*************************************************************************//


/*____________________________________________________________________________________________________________________________*/
sim7x00::sim7x00( UART_HandleTypeDef * _huartx ){
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	701a      	strb	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a06      	ldr	r2, [pc, #24]	; (80087e4 <_ZN7sim7x00C1EP20__UART_HandleTypeDef+0x2c>)
 80087cc:	2100      	movs	r1, #0
 80087ce:	5099      	str	r1, [r3, r2]
	huartx = &*_huartx ;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4905      	ldr	r1, [pc, #20]	; (80087e8 <_ZN7sim7x00C1EP20__UART_HandleTypeDef+0x30>)
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	505a      	str	r2, [r3, r1]
}
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	0018      	movs	r0, r3
 80087dc:	46bd      	mov	sp, r7
 80087de:	b002      	add	sp, #8
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	46c0      	nop			; (mov r8, r8)
 80087e4:	000007d4 	.word	0x000007d4
 80087e8:	00000fa8 	.word	0x00000fa8

080087ec <_ZN7sim7x0010IRQhandlerEv>:


/*____________________________________________________________________________________________________________________________*/
void sim7x00::IRQhandler(){
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
	// khi nào nhận được ký tự \r thì sẽ hiểu là đã kết thúc lệnh.
	if(  rxBuff[0] == '\r' ){
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	2b0d      	cmp	r3, #13
 80087fa:	d10a      	bne.n	8008812 <_ZN7sim7x0010IRQhandlerEv+0x26>
		rxDone_FLAG = 1 ;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	701a      	strb	r2, [r3, #0]
		memset(rxBuff,0,1) ;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3301      	adds	r3, #1
 8008806:	2201      	movs	r2, #1
 8008808:	2100      	movs	r1, #0
 800880a:	0018      	movs	r0, r3
 800880c:	f001 fcf9 	bl	800a202 <memset>
 8008810:	e015      	b.n	800883e <_ZN7sim7x0010IRQhandlerEv+0x52>
	}else{
		// tạo ra 1 biến dữ liệu  rxData = \nOK\n
		rxData[dataCount] = rxBuff[0] ;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a10      	ldr	r2, [pc, #64]	; (8008858 <_ZN7sim7x0010IRQhandlerEv+0x6c>)
 8008816:	589b      	ldr	r3, [r3, r2]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	7851      	ldrb	r1, [r2, #1]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	18d3      	adds	r3, r2, r3
 8008820:	1c0a      	adds	r2, r1, #0
 8008822:	709a      	strb	r2, [r3, #2]
		// Cộng dồn dữ liệu lên nhưng phải đảm bảo nằm trong vùng nhớ của bộ đệm ! Không được để quá, sẽ gây treo VĐK ( nguy hiểm )
		if ( dataCount < RX_DATA_MAX ) dataCount++ ;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a0c      	ldr	r2, [pc, #48]	; (8008858 <_ZN7sim7x0010IRQhandlerEv+0x6c>)
 8008828:	589b      	ldr	r3, [r3, r2]
 800882a:	4a0c      	ldr	r2, [pc, #48]	; (800885c <_ZN7sim7x0010IRQhandlerEv+0x70>)
 800882c:	4293      	cmp	r3, r2
 800882e:	dc06      	bgt.n	800883e <_ZN7sim7x0010IRQhandlerEv+0x52>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a09      	ldr	r2, [pc, #36]	; (8008858 <_ZN7sim7x0010IRQhandlerEv+0x6c>)
 8008834:	589b      	ldr	r3, [r3, r2]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4907      	ldr	r1, [pc, #28]	; (8008858 <_ZN7sim7x0010IRQhandlerEv+0x6c>)
 800883c:	505a      	str	r2, [r3, r1]
		else {}
	}
	HAL_UART_Receive_IT(huartx, (uint8_t*)rxBuff, 1) ;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a07      	ldr	r2, [pc, #28]	; (8008860 <_ZN7sim7x0010IRQhandlerEv+0x74>)
 8008842:	5898      	ldr	r0, [r3, r2]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3301      	adds	r3, #1
 8008848:	2201      	movs	r2, #1
 800884a:	0019      	movs	r1, r3
 800884c:	f7fe fbd2 	bl	8006ff4 <HAL_UART_Receive_IT>
}
 8008850:	46c0      	nop			; (mov r8, r8)
 8008852:	46bd      	mov	sp, r7
 8008854:	b002      	add	sp, #8
 8008856:	bd80      	pop	{r7, pc}
 8008858:	000007d4 	.word	0x000007d4
 800885c:	000007cf 	.word	0x000007cf
 8008860:	00000fa8 	.word	0x00000fa8

08008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>:


/*____________________________________________________________________________________________________________________________*/
bool sim7x00::sendATcommand (const char* ATcommand, const char* expected_answer, int timeout) {
 8008864:	b590      	push	{r4, r7, lr}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	603b      	str	r3, [r7, #0]

    int answer=0;
 8008872:	2300      	movs	r3, #0
 8008874:	617b      	str	r3, [r7, #20]

    dataCount = 0 ;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4a46      	ldr	r2, [pc, #280]	; (8008994 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x130>)
 800887a:	2100      	movs	r1, #0
 800887c:	5099      	str	r1, [r3, r2]
    rxDone_FLAG = 0 ;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	701a      	strb	r2, [r3, #0]
    memset(rxData, 0, RX_DATA_MAX );
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	1c98      	adds	r0, r3, #2
 8008888:	23fa      	movs	r3, #250	; 0xfa
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	001a      	movs	r2, r3
 800888e:	2100      	movs	r1, #0
 8008890:	f001 fcb7 	bl	800a202 <memset>

    SIM_DEBUG.println("Requested to SIM7600 : ") ;
 8008894:	4a40      	ldr	r2, [pc, #256]	; (8008998 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x134>)
 8008896:	4b41      	ldr	r3, [pc, #260]	; (800899c <_ZN7sim7x0013sendATcommandEPKcS1_i+0x138>)
 8008898:	0011      	movs	r1, r2
 800889a:	0018      	movs	r0, r3
 800889c:	f7ff fc68 	bl	8008170 <_ZN5debug7printlnEPKc>
    SIM_DEBUG.print(ATcommand) ;
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	4b3e      	ldr	r3, [pc, #248]	; (800899c <_ZN7sim7x0013sendATcommandEPKcS1_i+0x138>)
 80088a4:	0011      	movs	r1, r2
 80088a6:	0018      	movs	r0, r3
 80088a8:	f7ff fc4b 	bl	8008142 <_ZN5debug5printEPKc>

    // Bắt đầu gửi lệnh AT ngay tại đây
    HAL_UART_Transmit(huartx, (uint8_t*)ATcommand, strlen(ATcommand), timeout) ;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4a3c      	ldr	r2, [pc, #240]	; (80089a0 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x13c>)
 80088b0:	589c      	ldr	r4, [r3, r2]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	0018      	movs	r0, r3
 80088b6:	f7f7 fc27 	bl	8000108 <strlen>
 80088ba:	0003      	movs	r3, r0
 80088bc:	b29a      	uxth	r2, r3
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	0020      	movs	r0, r4
 80088c4:	f7fe faee 	bl	8006ea4 <HAL_UART_Transmit>

    SIM_DEBUG.println("SIM7600E responsed : ") ;
 80088c8:	4a36      	ldr	r2, [pc, #216]	; (80089a4 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x140>)
 80088ca:	4b34      	ldr	r3, [pc, #208]	; (800899c <_ZN7sim7x0013sendATcommandEPKcS1_i+0x138>)
 80088cc:	0011      	movs	r1, r2
 80088ce:	0018      	movs	r0, r3
 80088d0:	f7ff fc4e 	bl	8008170 <_ZN5debug7printlnEPKc>

    // lệnh này để bắt đầu lấy mốc t.g để check Timeout
    uint32_t tickStart = HAL_GetTick() ;
 80088d4:	f7fb faa0 	bl	8003e18 <HAL_GetTick>
 80088d8:	0003      	movs	r3, r0
 80088da:	613b      	str	r3, [r7, #16]


    while( answer == 0 ) {
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d132      	bne.n	8008948 <_ZN7sim7x0013sendATcommandEPKcS1_i+0xe4>

    	// Kiểm tra thời gian phản hồi, nếu lâu quá timeout thì break, và báo lỗi
		if ( (int)( HAL_GetTick() - tickStart )  >=  timeout ) {
 80088e2:	f7fb fa99 	bl	8003e18 <HAL_GetTick>
 80088e6:	0002      	movs	r2, r0
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	001a      	movs	r2, r3
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	0fd8      	lsrs	r0, r3, #31
 80088f2:	17d1      	asrs	r1, r2, #31
 80088f4:	429a      	cmp	r2, r3
 80088f6:	4148      	adcs	r0, r1
 80088f8:	0003      	movs	r3, r0
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d122      	bne.n	8008946 <_ZN7sim7x0013sendATcommandEPKcS1_i+0xe2>
	     * Kiểm tra module sim có phản hồi về đúng expected_answer hay khong
	     * Note : Hàm strstr(X, x) sẽ tìm 1 chuỗi con x trong chuỗi lớn hơn X
	     *  	  Nếu x xuất hiện trong X, thì hàm strstr sẽ trả về 1 chuỗi bắt đầu từ x và chuỗi
	     *  	  kéo dài còn lại phía sau từ x trong X
	     */
		if ( strstr(rxData, expected_answer) != NULL ){
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3302      	adds	r3, #2
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	0011      	movs	r1, r2
 8008908:	0018      	movs	r0, r3
 800890a:	f002 fbd3 	bl	800b0b4 <strstr>
 800890e:	1e03      	subs	r3, r0, #0
 8008910:	d001      	beq.n	8008916 <_ZN7sim7x0013sendATcommandEPKcS1_i+0xb2>
			// Nếu có thi la OK, answer == 1, thoát khỏi vòng while
			answer = 1;
 8008912:	2301      	movs	r3, #1
 8008914:	617b      	str	r3, [r7, #20]
		}

		// Led nhấp nháy báo hiệu đang tương tác với module sim
		if ( ( (int)( HAL_GetTick() - tickStart )/(int)100 % 2 ) == 0 )
 8008916:	f7fb fa7f 	bl	8003e18 <HAL_GetTick>
 800891a:	0002      	movs	r2, r0
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	2164      	movs	r1, #100	; 0x64
 8008922:	0018      	movs	r0, r3
 8008924:	f7f7 fc8c 	bl	8000240 <__divsi3>
 8008928:	0003      	movs	r3, r0
 800892a:	001a      	movs	r2, r3
 800892c:	2301      	movs	r3, #1
 800892e:	4013      	ands	r3, r2
 8008930:	425a      	negs	r2, r3
 8008932:	4153      	adcs	r3, r2
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0d0      	beq.n	80088dc <_ZN7sim7x0013sendATcommandEPKcS1_i+0x78>
			HAL_GPIO_TogglePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin) ;
 800893a:	4b1b      	ldr	r3, [pc, #108]	; (80089a8 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x144>)
 800893c:	2140      	movs	r1, #64	; 0x40
 800893e:	0018      	movs	r0, r3
 8008940:	f7fc f8b4 	bl	8004aac <HAL_GPIO_TogglePin>
    while( answer == 0 ) {
 8008944:	e7ca      	b.n	80088dc <_ZN7sim7x0013sendATcommandEPKcS1_i+0x78>
			break ;
 8008946:	46c0      	nop			; (mov r8, r8)

	}

    // In thông tin mà module sim đã phản hồi về :
    SIM_DEBUG.println(rxData) ;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	1c9a      	adds	r2, r3, #2
 800894c:	4b13      	ldr	r3, [pc, #76]	; (800899c <_ZN7sim7x0013sendATcommandEPKcS1_i+0x138>)
 800894e:	0011      	movs	r1, r2
 8008950:	0018      	movs	r0, r3
 8008952:	f7ff fc0d 	bl	8008170 <_ZN5debug7printlnEPKc>

    // Nếu kết quả phản hồi không như mong muốn :
    if ( answer == 0 )
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d105      	bne.n	8008968 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x104>
    	SIM_DEBUG.println("Fail to get responses from SIM7600E! ") ;
 800895c:	4a13      	ldr	r2, [pc, #76]	; (80089ac <_ZN7sim7x0013sendATcommandEPKcS1_i+0x148>)
 800895e:	4b0f      	ldr	r3, [pc, #60]	; (800899c <_ZN7sim7x0013sendATcommandEPKcS1_i+0x138>)
 8008960:	0011      	movs	r1, r2
 8008962:	0018      	movs	r0, r3
 8008964:	f7ff fc04 	bl	8008170 <_ZN5debug7printlnEPKc>

    HAL_GPIO_WritePin(LED_Working_Status_GPIO_Port, LED_Working_Status_Pin, (GPIO_PinState) 0 ) ;
 8008968:	4b0f      	ldr	r3, [pc, #60]	; (80089a8 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x144>)
 800896a:	2200      	movs	r2, #0
 800896c:	2140      	movs	r1, #64	; 0x40
 800896e:	0018      	movs	r0, r3
 8008970:	f7fc f87f 	bl	8004a72 <HAL_GPIO_WritePin>

    // Reset lại các biến phục vụ trong quá trình lấy dữ liệu từ module sim
    dataCount = 0 ;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a07      	ldr	r2, [pc, #28]	; (8008994 <_ZN7sim7x0013sendATcommandEPKcS1_i+0x130>)
 8008978:	2100      	movs	r1, #0
 800897a:	5099      	str	r1, [r3, r2]
    rxDone_FLAG = 0 ;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]
    //  Do hiện tại, rxData được sử dụng cho các tác vụ kế tiếp sau AT cmd, nên không được reset hàm  memset(rxData, 0, sizeof(rxData) ) ;

    return answer;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	1e5a      	subs	r2, r3, #1
 8008986:	4193      	sbcs	r3, r2
 8008988:	b2db      	uxtb	r3, r3
}
 800898a:	0018      	movs	r0, r3
 800898c:	46bd      	mov	sp, r7
 800898e:	b007      	add	sp, #28
 8008990:	bd90      	pop	{r4, r7, pc}
 8008992:	46c0      	nop			; (mov r8, r8)
 8008994:	000007d4 	.word	0x000007d4
 8008998:	0800e508 	.word	0x0800e508
 800899c:	20001cbc 	.word	0x20001cbc
 80089a0:	00000fa8 	.word	0x00000fa8
 80089a4:	0800e520 	.word	0x0800e520
 80089a8:	50000800 	.word	0x50000800
 80089ac:	0800e538 	.word	0x0800e538

080089b0 <_ZN7sim7x004initEi>:

    return answer;
}

/*____________________________________________________________________________________________________________________________*/
bool sim7x00::init(int timeout){
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
	// Khởi tạo UART 1 và kích hoạt ngắt :
//	HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuff, 1) ;

	// Khởi động module sim bằng cách set chân PWRKEY mức 0 trên module sim
	SIM_DEBUG.println("Sim7x00e booting ..." ) ;
 80089ba:	4a4d      	ldr	r2, [pc, #308]	; (8008af0 <_ZN7sim7x004initEi+0x140>)
 80089bc:	4b4d      	ldr	r3, [pc, #308]	; (8008af4 <_ZN7sim7x004initEi+0x144>)
 80089be:	0011      	movs	r1, r2
 80089c0:	0018      	movs	r0, r3
 80089c2:	f7ff fbd5 	bl	8008170 <_ZN5debug7printlnEPKc>
	HAL_UART_Receive_IT( huartx, (uint8_t*)rxBuff, 1 ) ;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a4b      	ldr	r2, [pc, #300]	; (8008af8 <_ZN7sim7x004initEi+0x148>)
 80089ca:	5898      	ldr	r0, [r3, r2]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3301      	adds	r3, #1
 80089d0:	2201      	movs	r2, #1
 80089d2:	0019      	movs	r1, r3
 80089d4:	f7fe fb0e 	bl	8006ff4 <HAL_UART_Receive_IT>

	HAL_GPIO_WritePin( SIM7600_PWRKEY_GPIO_Port, SIM7600_PWRKEY_Pin, (GPIO_PinState)0 ) ;
 80089d8:	4b48      	ldr	r3, [pc, #288]	; (8008afc <_ZN7sim7x004initEi+0x14c>)
 80089da:	2200      	movs	r2, #0
 80089dc:	2101      	movs	r1, #1
 80089de:	0018      	movs	r0, r3
 80089e0:	f7fc f847 	bl	8004a72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( SIM7600_FLIGHTMODE_GPIO_Port, SIM7600_FLIGHTMODE_Pin, (GPIO_PinState)0 ) ;
 80089e4:	4b45      	ldr	r3, [pc, #276]	; (8008afc <_ZN7sim7x004initEi+0x14c>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	2102      	movs	r1, #2
 80089ea:	0018      	movs	r0, r3
 80089ec:	f7fc f841 	bl	8004a72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( SIM7600_RESET_GPIO_Port, SIM7600_RESET_Pin, (GPIO_PinState)0 ) ;
 80089f0:	4b42      	ldr	r3, [pc, #264]	; (8008afc <_ZN7sim7x004initEi+0x14c>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	2104      	movs	r1, #4
 80089f6:	0018      	movs	r0, r3
 80089f8:	f7fc f83b 	bl	8004a72 <HAL_GPIO_WritePin>

	// Khi Start, nếu Sim đã khởi động trước đó ( == true ) thì bỏ qua, còn không ( == false ) thì kích chân

		HAL_GPIO_WritePin( SIM7600_PWRKEY_GPIO_Port, SIM7600_PWRKEY_Pin, (GPIO_PinState)1 ) ;
 80089fc:	4b3f      	ldr	r3, [pc, #252]	; (8008afc <_ZN7sim7x004initEi+0x14c>)
 80089fe:	2201      	movs	r2, #1
 8008a00:	2101      	movs	r1, #1
 8008a02:	0018      	movs	r0, r3
 8008a04:	f7fc f835 	bl	8004a72 <HAL_GPIO_WritePin>



		HAL_GPIO_WritePin( SIM7600_FLIGHTMODE_GPIO_Port, SIM7600_FLIGHTMODE_Pin, (GPIO_PinState)0 ) ;
 8008a08:	4b3c      	ldr	r3, [pc, #240]	; (8008afc <_ZN7sim7x004initEi+0x14c>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2102      	movs	r1, #2
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f7fc f82f 	bl	8004a72 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin( SIM7600_RESET_GPIO_Port, SIM7600_RESET_Pin, (GPIO_PinState)0 ) ;
 8008a14:	4b39      	ldr	r3, [pc, #228]	; (8008afc <_ZN7sim7x004initEi+0x14c>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	2104      	movs	r1, #4
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f7fc f829 	bl	8004a72 <HAL_GPIO_WritePin>

	uint32_t tikStarted = HAL_GetTick();
 8008a20:	f7fb f9fa 	bl	8003e18 <HAL_GetTick>
 8008a24:	0003      	movs	r3, r0
 8008a26:	60fb      	str	r3, [r7, #12]
	while ((unsigned int)(HAL_GetTick() - tikStarted) <= 90000)
 8008a28:	f7fb f9f6 	bl	8003e18 <HAL_GetTick>
 8008a2c:	0002      	movs	r2, r0
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1ad2      	subs	r2, r2, r3
 8008a32:	4933      	ldr	r1, [pc, #204]	; (8008b00 <_ZN7sim7x004initEi+0x150>)
 8008a34:	2300      	movs	r3, #0
 8008a36:	4291      	cmp	r1, r2
 8008a38:	415b      	adcs	r3, r3
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00d      	beq.n	8008a5c <_ZN7sim7x004initEi+0xac>
	{
		SIM_DEBUG.println(".");
 8008a40:	4a30      	ldr	r2, [pc, #192]	; (8008b04 <_ZN7sim7x004initEi+0x154>)
 8008a42:	4b2c      	ldr	r3, [pc, #176]	; (8008af4 <_ZN7sim7x004initEi+0x144>)
 8008a44:	0011      	movs	r1, r2
 8008a46:	0018      	movs	r0, r3
 8008a48:	f7ff fb92 	bl	8008170 <_ZN5debug7printlnEPKc>
		HAL_Delay(3000);
 8008a4c:	4b2e      	ldr	r3, [pc, #184]	; (8008b08 <_ZN7sim7x004initEi+0x158>)
 8008a4e:	0018      	movs	r0, r3
 8008a50:	f7fb f9ec 	bl	8003e2c <HAL_Delay>
		IWDG->KR = 0xAAAA;
 8008a54:	4b2d      	ldr	r3, [pc, #180]	; (8008b0c <_ZN7sim7x004initEi+0x15c>)
 8008a56:	4a2e      	ldr	r2, [pc, #184]	; (8008b10 <_ZN7sim7x004initEi+0x160>)
 8008a58:	601a      	str	r2, [r3, #0]
	while ((unsigned int)(HAL_GetTick() - tikStarted) <= 90000)
 8008a5a:	e7e5      	b.n	8008a28 <_ZN7sim7x004initEi+0x78>
	}

	sendATcommand( "AT", "OK", 100 ) ;
 8008a5c:	4a2d      	ldr	r2, [pc, #180]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008a5e:	492e      	ldr	r1, [pc, #184]	; (8008b18 <_ZN7sim7x004initEi+0x168>)
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	2364      	movs	r3, #100	; 0x64
 8008a64:	f7ff fefe 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	sendATcommand( "AT+CREG?", "OK", 100 ) ;
 8008a68:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008a6a:	492c      	ldr	r1, [pc, #176]	; (8008b1c <_ZN7sim7x004initEi+0x16c>)
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	2364      	movs	r3, #100	; 0x64
 8008a70:	f7ff fef8 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	sendATcommand( "AT+CNMP=2", "OK", 100 ) ;
 8008a74:	4a27      	ldr	r2, [pc, #156]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008a76:	492a      	ldr	r1, [pc, #168]	; (8008b20 <_ZN7sim7x004initEi+0x170>)
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	2364      	movs	r3, #100	; 0x64
 8008a7c:	f7ff fef2 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	sendATcommand( "ATI", "OK", 5000 ) ;
 8008a80:	4b28      	ldr	r3, [pc, #160]	; (8008b24 <_ZN7sim7x004initEi+0x174>)
 8008a82:	4a24      	ldr	r2, [pc, #144]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008a84:	4928      	ldr	r1, [pc, #160]	; (8008b28 <_ZN7sim7x004initEi+0x178>)
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff feec 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	sendATcommand( "AT+CNMI=2,1,0,0,0", "OK", 100 ) ;
 8008a8c:	4a21      	ldr	r2, [pc, #132]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008a8e:	4927      	ldr	r1, [pc, #156]	; (8008b2c <_ZN7sim7x004initEi+0x17c>)
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	2364      	movs	r3, #100	; 0x64
 8008a94:	f7ff fee6 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	sendATcommand( "AT+CNMP=2", "OK", 100 ) ;
 8008a98:	4a1e      	ldr	r2, [pc, #120]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008a9a:	4921      	ldr	r1, [pc, #132]	; (8008b20 <_ZN7sim7x004initEi+0x170>)
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	2364      	movs	r3, #100	; 0x64
 8008aa0:	f7ff fee0 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	sendATcommand("AT+CPMS=\"SM\",\"SM\",\"SM\"", "OK", 200 ); // Select đường dẫn bộ nhớ tin nhắn
 8008aa4:	4a1b      	ldr	r2, [pc, #108]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008aa6:	4922      	ldr	r1, [pc, #136]	; (8008b30 <_ZN7sim7x004initEi+0x180>)
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	23c8      	movs	r3, #200	; 0xc8
 8008aac:	f7ff feda 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	sendATcommand("AT+CMGL=\"ALL\"", "OK", 5000);
 8008ab0:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <_ZN7sim7x004initEi+0x174>)
 8008ab2:	4a18      	ldr	r2, [pc, #96]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008ab4:	491f      	ldr	r1, [pc, #124]	; (8008b34 <_ZN7sim7x004initEi+0x184>)
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff fed4 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	sendATcommand( "AT+CMGD=,4", "OK", 100 ) ; // Xóa hết toàn bộ tin nhắn
 8008abc:	4a15      	ldr	r2, [pc, #84]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008abe:	491e      	ldr	r1, [pc, #120]	; (8008b38 <_ZN7sim7x004initEi+0x188>)
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	2364      	movs	r3, #100	; 0x64
 8008ac4:	f7ff fece 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	sendATcommand( "AT+CMGF=1", "OK", 100 ) ;
 8008ac8:	4a12      	ldr	r2, [pc, #72]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008aca:	491c      	ldr	r1, [pc, #112]	; (8008b3c <_ZN7sim7x004initEi+0x18c>)
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	2364      	movs	r3, #100	; 0x64
 8008ad0:	f7ff fec8 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	// update date and time automatically
	sendATcommand("AT+CTZU=1", "OK", 5000);
 8008ad4:	4b13      	ldr	r3, [pc, #76]	; (8008b24 <_ZN7sim7x004initEi+0x174>)
 8008ad6:	4a0f      	ldr	r2, [pc, #60]	; (8008b14 <_ZN7sim7x004initEi+0x164>)
 8008ad8:	4919      	ldr	r1, [pc, #100]	; (8008b40 <_ZN7sim7x004initEi+0x190>)
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7ff fec2 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
	IWDG->KR = 0xAAAA;
 8008ae0:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <_ZN7sim7x004initEi+0x15c>)
 8008ae2:	4a0b      	ldr	r2, [pc, #44]	; (8008b10 <_ZN7sim7x004initEi+0x160>)
 8008ae4:	601a      	str	r2, [r3, #0]

	return true ;
 8008ae6:	2301      	movs	r3, #1

}
 8008ae8:	0018      	movs	r0, r3
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b004      	add	sp, #16
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	0800e560 	.word	0x0800e560
 8008af4:	20001cbc 	.word	0x20001cbc
 8008af8:	00000fa8 	.word	0x00000fa8
 8008afc:	50000400 	.word	0x50000400
 8008b00:	00015f90 	.word	0x00015f90
 8008b04:	0800e578 	.word	0x0800e578
 8008b08:	00000bb8 	.word	0x00000bb8
 8008b0c:	40003000 	.word	0x40003000
 8008b10:	0000aaaa 	.word	0x0000aaaa
 8008b14:	0800e57c 	.word	0x0800e57c
 8008b18:	0800e580 	.word	0x0800e580
 8008b1c:	0800e584 	.word	0x0800e584
 8008b20:	0800e590 	.word	0x0800e590
 8008b24:	00001388 	.word	0x00001388
 8008b28:	0800e59c 	.word	0x0800e59c
 8008b2c:	0800e5a0 	.word	0x0800e5a0
 8008b30:	0800e5b4 	.word	0x0800e5b4
 8008b34:	0800e5cc 	.word	0x0800e5cc
 8008b38:	0800e5dc 	.word	0x0800e5dc
 8008b3c:	0800e5e8 	.word	0x0800e5e8
 8008b40:	0800e5f4 	.word	0x0800e5f4

08008b44 <_ZN7sim7x008memresetEv>:


/*____________________________________________________________________________________________________________________________*/
void sim7x00::memreset(){
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	rxDone_FLAG = false ;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]
	dataCount = 0 ;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a07      	ldr	r2, [pc, #28]	; (8008b74 <_ZN7sim7x008memresetEv+0x30>)
 8008b56:	2100      	movs	r1, #0
 8008b58:	5099      	str	r1, [r3, r2]
	memset ( rxData, 0 , (size_t)sizeof(rxData)/sizeof(char) ) ;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	1c98      	adds	r0, r3, #2
 8008b5e:	23fa      	movs	r3, #250	; 0xfa
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	001a      	movs	r2, r3
 8008b64:	2100      	movs	r1, #0
 8008b66:	f001 fb4c 	bl	800a202 <memset>
}
 8008b6a:	46c0      	nop			; (mov r8, r8)
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	b002      	add	sp, #8
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	000007d4 	.word	0x000007d4

08008b78 <_ZN7sim7x0013identifyEventEv>:


/*____________________________________________________________________________________________________________________________*/
sim_events_t sim7x00::identifyEvent(){
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
	sim_events_t simEvent ;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	605a      	str	r2, [r3, #4]
	simEvent.update = NONE ;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	605a      	str	r2, [r3, #4]
	simEvent.warning = NONE ;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]

	// Kiểm tra sự kiện đến từ module sim :
	switch ( checkIncommingEvent() ) {
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f000 f8ff 	bl	8008da0 <_ZN7sim7x0019checkIncommingEventEv>
 8008ba2:	0003      	movs	r3, r0
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d003      	beq.n	8008bb0 <_ZN7sim7x0013identifyEventEv+0x38>
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d100      	bne.n	8008bae <_ZN7sim7x0013identifyEventEv+0x36>
 8008bac:	e09e      	b.n	8008cec <_ZN7sim7x0013identifyEventEv+0x174>
			// Bỏ qua
			break;


		default:
			break;
 8008bae:	e0a0      	b.n	8008cf2 <_ZN7sim7x0013identifyEventEv+0x17a>
			memset(SMSContent, 0, RX_DATA_MAX) ;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	24fb      	movs	r4, #251	; 0xfb
 8008bb4:	00e4      	lsls	r4, r4, #3
 8008bb6:	1918      	adds	r0, r3, r4
 8008bb8:	23fa      	movs	r3, #250	; 0xfa
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	001a      	movs	r2, r3
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	f001 fb1f 	bl	800a202 <memset>
			readSMS() ;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f000 f928 	bl	8008e1c <_ZN7sim7x007readSMSEv>
			if( isAuthorizePhoneNumber(SMSContent) ){
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	191a      	adds	r2, r3, r4
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	0011      	movs	r1, r2
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	f000 f969 	bl	8008eac <_ZN7sim7x0022isAuthorizePhoneNumberEPKc>
 8008bda:	1e03      	subs	r3, r0, #0
 8008bdc:	d100      	bne.n	8008be0 <_ZN7sim7x0013identifyEventEv+0x68>
 8008bde:	e087      	b.n	8008cf0 <_ZN7sim7x0013identifyEventEv+0x178>
				int result = NONE ;
 8008be0:	2300      	movs	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]
				result = identifySMSRequest(SMSContent) ;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	22fb      	movs	r2, #251	; 0xfb
 8008be8:	00d2      	lsls	r2, r2, #3
 8008bea:	189a      	adds	r2, r3, r2
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	0011      	movs	r1, r2
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f000 f9a5 	bl	8008f40 <_ZN7sim7x0018identifySMSRequestEPKc>
 8008bf6:	0003      	movs	r3, r0
 8008bf8:	60fb      	str	r3, [r7, #12]
				switch (result) {
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b0d      	cmp	r3, #13
 8008bfe:	d873      	bhi.n	8008ce8 <_ZN7sim7x0013identifyEventEv+0x170>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	009a      	lsls	r2, r3, #2
 8008c04:	4b3d      	ldr	r3, [pc, #244]	; (8008cfc <_ZN7sim7x0013identifyEventEv+0x184>)
 8008c06:	18d3      	adds	r3, r2, r3
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	469f      	mov	pc, r3
						simEvent.warning = SIM_REQ_WARNING_LV1 ;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("WARNING_LEVEL_1" ) ;
 8008c12:	4a3b      	ldr	r2, [pc, #236]	; (8008d00 <_ZN7sim7x0013identifyEventEv+0x188>)
 8008c14:	4b3b      	ldr	r3, [pc, #236]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008c16:	0011      	movs	r1, r2
 8008c18:	0018      	movs	r0, r3
 8008c1a:	f7ff fa92 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008c1e:	e064      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.warning = SIM_REQ_WARNING_LV2 ;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("WARNING_LEVEL_2" ) ;
 8008c26:	4a38      	ldr	r2, [pc, #224]	; (8008d08 <_ZN7sim7x0013identifyEventEv+0x190>)
 8008c28:	4b36      	ldr	r3, [pc, #216]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008c2a:	0011      	movs	r1, r2
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f7ff fa88 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008c32:	e05a      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.warning = SIM_REQ_WARNING_LV3 ;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2203      	movs	r2, #3
 8008c38:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("WARNING_LEVEL_3" ) ;
 8008c3a:	4a34      	ldr	r2, [pc, #208]	; (8008d0c <_ZN7sim7x0013identifyEventEv+0x194>)
 8008c3c:	4b31      	ldr	r3, [pc, #196]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008c3e:	0011      	movs	r1, r2
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7ff fa7e 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008c46:	e050      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.warning = SIM_REQ_WARNING_LV4 ;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2204      	movs	r2, #4
 8008c4c:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("WARNING_LEVEL_4" ) ;
 8008c4e:	4a30      	ldr	r2, [pc, #192]	; (8008d10 <_ZN7sim7x0013identifyEventEv+0x198>)
 8008c50:	4b2c      	ldr	r3, [pc, #176]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008c52:	0011      	movs	r1, r2
 8008c54:	0018      	movs	r0, r3
 8008c56:	f7ff fa74 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008c5a:	e046      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.warning = SIM_REQ_WARNING_LV5 ;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2205      	movs	r2, #5
 8008c60:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("WARNING_LEVEL_5" ) ;
 8008c62:	4a2c      	ldr	r2, [pc, #176]	; (8008d14 <_ZN7sim7x0013identifyEventEv+0x19c>)
 8008c64:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008c66:	0011      	movs	r1, r2
 8008c68:	0018      	movs	r0, r3
 8008c6a:	f7ff fa6a 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008c6e:	e03c      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.warning = SIM_REQ_STOP_WARNING ;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2206      	movs	r2, #6
 8008c74:	601a      	str	r2, [r3, #0]
						SIM_DEBUG.print("STOP_WARNING" ) ;
 8008c76:	4a28      	ldr	r2, [pc, #160]	; (8008d18 <_ZN7sim7x0013identifyEventEv+0x1a0>)
 8008c78:	4b22      	ldr	r3, [pc, #136]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008c7a:	0011      	movs	r1, r2
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f7ff fa60 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008c82:	e032      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.update = SIM_REQ_SMS_STATUS_UPDATE ;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2209      	movs	r2, #9
 8008c88:	605a      	str	r2, [r3, #4]
						SIM_DEBUG.print("SMS STATUS QUERY" ) ;
 8008c8a:	4a24      	ldr	r2, [pc, #144]	; (8008d1c <_ZN7sim7x0013identifyEventEv+0x1a4>)
 8008c8c:	4b1d      	ldr	r3, [pc, #116]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008c8e:	0011      	movs	r1, r2
 8008c90:	0018      	movs	r0, r3
 8008c92:	f7ff fa56 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008c96:	e028      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.update = SIM_REQ_AUDIO_UPDATE ;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	220a      	movs	r2, #10
 8008c9c:	605a      	str	r2, [r3, #4]
						SIM_DEBUG.print("AUDIO UPDATE" ) ;
 8008c9e:	4a20      	ldr	r2, [pc, #128]	; (8008d20 <_ZN7sim7x0013identifyEventEv+0x1a8>)
 8008ca0:	4b18      	ldr	r3, [pc, #96]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008ca2:	0011      	movs	r1, r2
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f7ff fa4c 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008caa:	e01e      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.update = SIM_REQ_ADD_PHONENUMBER ;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	220b      	movs	r2, #11
 8008cb0:	605a      	str	r2, [r3, #4]
						SIM_DEBUG.print("ADD PHONE NUMBER") ;
 8008cb2:	4a1c      	ldr	r2, [pc, #112]	; (8008d24 <_ZN7sim7x0013identifyEventEv+0x1ac>)
 8008cb4:	4b13      	ldr	r3, [pc, #76]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008cb6:	0011      	movs	r1, r2
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f7ff fa42 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008cbe:	e014      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.update = SIM_REQ_REMOVE_PHONENUMBER ;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	220c      	movs	r2, #12
 8008cc4:	605a      	str	r2, [r3, #4]
						SIM_DEBUG.print("REMOVE PHONE NUMBER") ;
 8008cc6:	4a18      	ldr	r2, [pc, #96]	; (8008d28 <_ZN7sim7x0013identifyEventEv+0x1b0>)
 8008cc8:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008cca:	0011      	movs	r1, r2
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f7ff fa38 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008cd2:	e00a      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						simEvent.update = SIM_REQ_FOTA ;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	220d      	movs	r2, #13
 8008cd8:	605a      	str	r2, [r3, #4]
						SIM_DEBUG.print("FIRMWARE UPDATE OTA") ;
 8008cda:	4a14      	ldr	r2, [pc, #80]	; (8008d2c <_ZN7sim7x0013identifyEventEv+0x1b4>)
 8008cdc:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <_ZN7sim7x0013identifyEventEv+0x18c>)
 8008cde:	0011      	movs	r1, r2
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	f7ff fa2e 	bl	8008142 <_ZN5debug5printEPKc>
						break;
 8008ce6:	e000      	b.n	8008cea <_ZN7sim7x0013identifyEventEv+0x172>
						break;
 8008ce8:	46c0      	nop			; (mov r8, r8)
			break ;
 8008cea:	e001      	b.n	8008cf0 <_ZN7sim7x0013identifyEventEv+0x178>
			break;
 8008cec:	46c0      	nop			; (mov r8, r8)
 8008cee:	e000      	b.n	8008cf2 <_ZN7sim7x0013identifyEventEv+0x17a>
			break ;
 8008cf0:	46c0      	nop			; (mov r8, r8)
	}

	// reset lại nội dung tin nhắn
//	memset(SMSContent, 0, RX_DATA_MAX) ;
	return simEvent ;
 8008cf2:	46c0      	nop			; (mov r8, r8)

}
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	b005      	add	sp, #20
 8008cfa:	bd90      	pop	{r4, r7, pc}
 8008cfc:	0800edfc 	.word	0x0800edfc
 8008d00:	0800e600 	.word	0x0800e600
 8008d04:	20001cbc 	.word	0x20001cbc
 8008d08:	0800e610 	.word	0x0800e610
 8008d0c:	0800e620 	.word	0x0800e620
 8008d10:	0800e630 	.word	0x0800e630
 8008d14:	0800e640 	.word	0x0800e640
 8008d18:	0800e650 	.word	0x0800e650
 8008d1c:	0800e660 	.word	0x0800e660
 8008d20:	0800e674 	.word	0x0800e674
 8008d24:	0800e684 	.word	0x0800e684
 8008d28:	0800e698 	.word	0x0800e698
 8008d2c:	0800e6ac 	.word	0x0800e6ac

08008d30 <_ZN7sim7x0015checkingRespondEPKcm>:


/*____________________________________________________________________________________________________________________________*/
int sim7x00::checkingRespond( const char* rpdMsg, uint32_t timeout){
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
	int answer=0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	617b      	str	r3, [r7, #20]
	uint32_t tickStart = HAL_GetTick() ;
 8008d40:	f7fb f86a 	bl	8003e18 <HAL_GetTick>
 8008d44:	0003      	movs	r3, r0
 8008d46:	613b      	str	r3, [r7, #16]
	while ( (uint32_t)( HAL_GetTick() - tickStart )  <=  timeout ) {
 8008d48:	f7fb f866 	bl	8003e18 <HAL_GetTick>
 8008d4c:	0002      	movs	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad2      	subs	r2, r2, r3
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	2300      	movs	r3, #0
 8008d56:	4291      	cmp	r1, r2
 8008d58:	415b      	adcs	r3, r3
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d019      	beq.n	8008d94 <_ZN7sim7x0015checkingRespondEPKcm+0x64>
		if((checkIncommingEvent()==1)&&(strstr(readSMS(),rpdMsg)!=NULL)){
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	0018      	movs	r0, r3
 8008d64:	f000 f81c 	bl	8008da0 <_ZN7sim7x0019checkIncommingEventEv>
 8008d68:	0003      	movs	r3, r0
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d10d      	bne.n	8008d8a <_ZN7sim7x0015checkingRespondEPKcm+0x5a>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	0018      	movs	r0, r3
 8008d72:	f000 f853 	bl	8008e1c <_ZN7sim7x007readSMSEv>
 8008d76:	0002      	movs	r2, r0
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	0019      	movs	r1, r3
 8008d7c:	0010      	movs	r0, r2
 8008d7e:	f002 f999 	bl	800b0b4 <strstr>
 8008d82:	1e03      	subs	r3, r0, #0
 8008d84:	d001      	beq.n	8008d8a <_ZN7sim7x0015checkingRespondEPKcm+0x5a>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e000      	b.n	8008d8c <_ZN7sim7x0015checkingRespondEPKcm+0x5c>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0db      	beq.n	8008d48 <_ZN7sim7x0015checkingRespondEPKcm+0x18>
		answer =1;
 8008d90:	2301      	movs	r3, #1
 8008d92:	617b      	str	r3, [r7, #20]
		break;
		}
	}
	return answer;
 8008d94:	697b      	ldr	r3, [r7, #20]

}
 8008d96:	0018      	movs	r0, r3
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b006      	add	sp, #24
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <_ZN7sim7x0019checkIncommingEventEv>:


/*____________________________________________________________________________________________________________________________*/
int sim7x00::checkIncommingEvent(){
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
	int result = IS_NOTHING ;
 8008da8:	2300      	movs	r3, #0
 8008daa:	617b      	str	r3, [r7, #20]

	// Kiểm tra có phải SMS đến ?
	char* isSMS = strstr(rxData, "SM") ;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3302      	adds	r3, #2
 8008db0:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <_ZN7sim7x0019checkIncommingEventEv+0x68>)
 8008db2:	0011      	movs	r1, r2
 8008db4:	0018      	movs	r0, r3
 8008db6:	f002 f97d 	bl	800b0b4 <strstr>
 8008dba:	0003      	movs	r3, r0
 8008dbc:	613b      	str	r3, [r7, #16]

	// Kiểm tra có phải cuộc gọi đến ?
	char* isPhoneCall = strstr(rxData, "RING") ;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	4a12      	ldr	r2, [pc, #72]	; (8008e0c <_ZN7sim7x0019checkIncommingEventEv+0x6c>)
 8008dc4:	0011      	movs	r1, r2
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f002 f974 	bl	800b0b4 <strstr>
 8008dcc:	0003      	movs	r3, r0
 8008dce:	60fb      	str	r3, [r7, #12]

	if( isSMS != NULL){
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d007      	beq.n	8008de6 <_ZN7sim7x0019checkIncommingEventEv+0x46>
		SIM_DEBUG.println("Received SMS !") ;
 8008dd6:	4a0e      	ldr	r2, [pc, #56]	; (8008e10 <_ZN7sim7x0019checkIncommingEventEv+0x70>)
 8008dd8:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <_ZN7sim7x0019checkIncommingEventEv+0x74>)
 8008dda:	0011      	movs	r1, r2
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f7ff f9c7 	bl	8008170 <_ZN5debug7printlnEPKc>
		result = IS_SMS ;
 8008de2:	2301      	movs	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
	}
	if( isPhoneCall != NULL){
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d007      	beq.n	8008dfc <_ZN7sim7x0019checkIncommingEventEv+0x5c>
		SIM_DEBUG.println("Incomming call !") ;
 8008dec:	4a0a      	ldr	r2, [pc, #40]	; (8008e18 <_ZN7sim7x0019checkIncommingEventEv+0x78>)
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <_ZN7sim7x0019checkIncommingEventEv+0x74>)
 8008df0:	0011      	movs	r1, r2
 8008df2:	0018      	movs	r0, r3
 8008df4:	f7ff f9bc 	bl	8008170 <_ZN5debug7printlnEPKc>
		result = IS_INCOMMING_CALL ;
 8008df8:	2302      	movs	r3, #2
 8008dfa:	617b      	str	r3, [r7, #20]
	}

	return result ;
 8008dfc:	697b      	ldr	r3, [r7, #20]
}
 8008dfe:	0018      	movs	r0, r3
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b006      	add	sp, #24
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	0800e6c0 	.word	0x0800e6c0
 8008e0c:	0800e6c4 	.word	0x0800e6c4
 8008e10:	0800e6cc 	.word	0x0800e6cc
 8008e14:	20001cbc 	.word	0x20001cbc
 8008e18:	0800e6dc 	.word	0x0800e6dc

08008e1c <_ZN7sim7x007readSMSEv>:


/*____________________________________________________________________________________________________________________________*/
char* sim7x00::readSMS(){
 8008e1c:	b590      	push	{r4, r7, lr}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]

	// Reset lại bộ nhớ SMS
	memset(SMSContent, 0, RX_DATA_MAX) ;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	24fb      	movs	r4, #251	; 0xfb
 8008e28:	00e4      	lsls	r4, r4, #3
 8008e2a:	1918      	adds	r0, r3, r4
 8008e2c:	23fa      	movs	r3, #250	; 0xfa
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	001a      	movs	r2, r3
 8008e32:	2100      	movs	r1, #0
 8008e34:	f001 f9e5 	bl	800a202 <memset>

	// Selects the memory
	sendATcommand("AT+CPMS=\"SM\",\"SM\",\"SM\"\r", "OK", 3000);
 8008e38:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <_ZN7sim7x007readSMSEv+0x74>)
 8008e3a:	4a16      	ldr	r2, [pc, #88]	; (8008e94 <_ZN7sim7x007readSMSEv+0x78>)
 8008e3c:	4916      	ldr	r1, [pc, #88]	; (8008e98 <_ZN7sim7x007readSMSEv+0x7c>)
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff fd10 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>

	// Gửi lệnh đọc SMS mới nhất đó
	sendATcommand("AT+CMGR=0\r", "OK", 5000);
 8008e44:	4b15      	ldr	r3, [pc, #84]	; (8008e9c <_ZN7sim7x007readSMSEv+0x80>)
 8008e46:	4a13      	ldr	r2, [pc, #76]	; (8008e94 <_ZN7sim7x007readSMSEv+0x78>)
 8008e48:	4915      	ldr	r1, [pc, #84]	; (8008ea0 <_ZN7sim7x007readSMSEv+0x84>)
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff fd0a 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>

	// Copy nội dung lệnh từ bộ đệm đọc được sang biến SMSContent để xử lý
	strcpy(SMSContent, rxData) ;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	191a      	adds	r2, r3, r4
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3302      	adds	r3, #2
 8008e58:	0019      	movs	r1, r3
 8008e5a:	0010      	movs	r0, r2
 8008e5c:	f002 f922 	bl	800b0a4 <strcpy>

	// debug nội dung SMS để kiểm tra
	SIM_DEBUG.println(SMSContent) ;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	191a      	adds	r2, r3, r4
 8008e64:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <_ZN7sim7x007readSMSEv+0x88>)
 8008e66:	0011      	movs	r1, r2
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f7ff f981 	bl	8008170 <_ZN5debug7printlnEPKc>

	// check xong rồi thì xóa tin nhắn đó đi
	sendATcommand("AT+CMGD=,4\r", "OK", 1000);
 8008e6e:	23fa      	movs	r3, #250	; 0xfa
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4a08      	ldr	r2, [pc, #32]	; (8008e94 <_ZN7sim7x007readSMSEv+0x78>)
 8008e74:	490c      	ldr	r1, [pc, #48]	; (8008ea8 <_ZN7sim7x007readSMSEv+0x8c>)
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7ff fcf4 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>

	return SMSContent;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	22fb      	movs	r2, #251	; 0xfb
 8008e80:	00d2      	lsls	r2, r2, #3
 8008e82:	4694      	mov	ip, r2
 8008e84:	4463      	add	r3, ip

}
 8008e86:	0018      	movs	r0, r3
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	b003      	add	sp, #12
 8008e8c:	bd90      	pop	{r4, r7, pc}
 8008e8e:	46c0      	nop			; (mov r8, r8)
 8008e90:	00000bb8 	.word	0x00000bb8
 8008e94:	0800e57c 	.word	0x0800e57c
 8008e98:	0800e6f0 	.word	0x0800e6f0
 8008e9c:	00001388 	.word	0x00001388
 8008ea0:	0800e708 	.word	0x0800e708
 8008ea4:	20001cbc 	.word	0x20001cbc
 8008ea8:	0800e714 	.word	0x0800e714

08008eac <_ZN7sim7x0022isAuthorizePhoneNumberEPKc>:


/*____________________________________________________________________________________________________________________________*/
bool sim7x00::isAuthorizePhoneNumber( const char *_SMScontent ){
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
	SIM_DEBUG.println("Authorizing phone number ... ") ;
 8008eb6:	4a1d      	ldr	r2, [pc, #116]	; (8008f2c <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x80>)
 8008eb8:	4b1d      	ldr	r3, [pc, #116]	; (8008f30 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x84>)
 8008eba:	0011      	movs	r1, r2
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f7ff f957 	bl	8008170 <_ZN5debug7printlnEPKc>

	bool result = 0 ;
 8008ec2:	230f      	movs	r3, #15
 8008ec4:	18fb      	adds	r3, r7, r3
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]

	// Bắt đầu kiểm tra số điện thoại cho phép
	for(int i = 0 ; i < MAX_PHONE_NUMBER_ALLOWED ; i++){
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60bb      	str	r3, [r7, #8]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b05      	cmp	r3, #5
 8008ed2:	dc12      	bgt.n	8008efa <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x4e>
		if(  strstr(_SMScontent, phoneNumbersAllowed[i]) != NULL  ){
 8008ed4:	4b17      	ldr	r3, [pc, #92]	; (8008f34 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x88>)
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	0092      	lsls	r2, r2, #2
 8008eda:	58d2      	ldr	r2, [r2, r3]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	0011      	movs	r1, r2
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	f002 f8e7 	bl	800b0b4 <strstr>
 8008ee6:	1e03      	subs	r3, r0, #0
 8008ee8:	d003      	beq.n	8008ef2 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x46>
			result = 1 ;
 8008eea:	230f      	movs	r3, #15
 8008eec:	18fb      	adds	r3, r7, r3
 8008eee:	2201      	movs	r2, #1
 8008ef0:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < MAX_PHONE_NUMBER_ALLOWED ; i++){
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	60bb      	str	r3, [r7, #8]
 8008ef8:	e7e9      	b.n	8008ece <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x22>
		}
	}

	if(result == 1)
 8008efa:	230f      	movs	r3, #15
 8008efc:	18fb      	adds	r3, r7, r3
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d006      	beq.n	8008f12 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x66>
		SIM_DEBUG.println("Phone number is accepted !" ) ;
 8008f04:	4a0c      	ldr	r2, [pc, #48]	; (8008f38 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x8c>)
 8008f06:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x84>)
 8008f08:	0011      	movs	r1, r2
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	f7ff f930 	bl	8008170 <_ZN5debug7printlnEPKc>
 8008f10:	e005      	b.n	8008f1e <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x72>
	else
		SIM_DEBUG.println("Phone number is invalid !" ) ;
 8008f12:	4a0a      	ldr	r2, [pc, #40]	; (8008f3c <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x90>)
 8008f14:	4b06      	ldr	r3, [pc, #24]	; (8008f30 <_ZN7sim7x0022isAuthorizePhoneNumberEPKc+0x84>)
 8008f16:	0011      	movs	r1, r2
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f7ff f929 	bl	8008170 <_ZN5debug7printlnEPKc>

	return result ;
 8008f1e:	230f      	movs	r3, #15
 8008f20:	18fb      	adds	r3, r7, r3
 8008f22:	781b      	ldrb	r3, [r3, #0]
}
 8008f24:	0018      	movs	r0, r3
 8008f26:	46bd      	mov	sp, r7
 8008f28:	b004      	add	sp, #16
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	0800e720 	.word	0x0800e720
 8008f30:	20001cbc 	.word	0x20001cbc
 8008f34:	2000000c 	.word	0x2000000c
 8008f38:	0800e740 	.word	0x0800e740
 8008f3c:	0800e75c 	.word	0x0800e75c

08008f40 <_ZN7sim7x0018identifySMSRequestEPKc>:


/*____________________________________________________________________________________________________________________________*/
int sim7x00::identifySMSRequest( const char *_SMScontent ){
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
	SIM_DEBUG.println("Identifying SMS request content ... ") ;
 8008f4a:	4a37      	ldr	r2, [pc, #220]	; (8009028 <_ZN7sim7x0018identifySMSRequestEPKc+0xe8>)
 8008f4c:	4b37      	ldr	r3, [pc, #220]	; (800902c <_ZN7sim7x0018identifySMSRequestEPKc+0xec>)
 8008f4e:	0011      	movs	r1, r2
 8008f50:	0018      	movs	r0, r3
 8008f52:	f7ff f90d 	bl	8008170 <_ZN5debug7printlnEPKc>
	int result = IDLE ;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]

	for(int i = 0 ; i < MAX_WARNING_CODES ; i++){
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60bb      	str	r3, [r7, #8]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	dc42      	bgt.n	8008fea <_ZN7sim7x0018identifySMSRequestEPKc+0xaa>

		// kiểm tra xem đã đúng cú pháp chưa
		if( strstr(_SMScontent, warningCodesAllowed[i]) != NULL ){
 8008f64:	4b32      	ldr	r3, [pc, #200]	; (8009030 <_ZN7sim7x0018identifySMSRequestEPKc+0xf0>)
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	0092      	lsls	r2, r2, #2
 8008f6a:	58d2      	ldr	r2, [r2, r3]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	0011      	movs	r1, r2
 8008f70:	0018      	movs	r0, r3
 8008f72:	f002 f89f 	bl	800b0b4 <strstr>
 8008f76:	1e03      	subs	r3, r0, #0
 8008f78:	d01d      	beq.n	8008fb6 <_ZN7sim7x0018identifySMSRequestEPKc+0x76>
			if     (i == 0 ) result = WARNING_LEVEL_1 ;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d102      	bne.n	8008f86 <_ZN7sim7x0018identifySMSRequestEPKc+0x46>
 8008f80:	2303      	movs	r3, #3
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	e02d      	b.n	8008fe2 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
			else if(i == 1 ) result = WARNING_LEVEL_2 ;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d102      	bne.n	8008f92 <_ZN7sim7x0018identifySMSRequestEPKc+0x52>
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	e027      	b.n	8008fe2 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
			else if(i == 2 ) result = WARNING_LEVEL_3 ;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d102      	bne.n	8008f9e <_ZN7sim7x0018identifySMSRequestEPKc+0x5e>
 8008f98:	2305      	movs	r3, #5
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	e021      	b.n	8008fe2 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
			else if(i == 3 ) result = WARNING_LEVEL_4 ;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d102      	bne.n	8008faa <_ZN7sim7x0018identifySMSRequestEPKc+0x6a>
 8008fa4:	2306      	movs	r3, #6
 8008fa6:	60fb      	str	r3, [r7, #12]
 8008fa8:	e01b      	b.n	8008fe2 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
			else if(i == 4 ) result = WARNING_LEVEL_5 ;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b04      	cmp	r3, #4
 8008fae:	d118      	bne.n	8008fe2 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
 8008fb0:	2307      	movs	r3, #7
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	e015      	b.n	8008fe2 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>

		// kiểm tra xem có phải là stop không
		}else if( strstr(_SMScontent, stopWarningCodesAllowed) != NULL ){
 8008fb6:	4b1f      	ldr	r3, [pc, #124]	; (8009034 <_ZN7sim7x0018identifySMSRequestEPKc+0xf4>)
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	0011      	movs	r1, r2
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	f002 f878 	bl	800b0b4 <strstr>
 8008fc4:	1e03      	subs	r3, r0, #0
 8008fc6:	d002      	beq.n	8008fce <_ZN7sim7x0018identifySMSRequestEPKc+0x8e>
			result = STOP_WARNING ;
 8008fc8:	2308      	movs	r3, #8
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	e009      	b.n	8008fe2 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
		}else if( strstr(_SMScontent, "ok") != NULL ){
 8008fce:	4a1a      	ldr	r2, [pc, #104]	; (8009038 <_ZN7sim7x0018identifySMSRequestEPKc+0xf8>)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	0011      	movs	r1, r2
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f002 f86d 	bl	800b0b4 <strstr>
 8008fda:	1e03      	subs	r3, r0, #0
 8008fdc:	d001      	beq.n	8008fe2 <_ZN7sim7x0018identifySMSRequestEPKc+0xa2>
			result = OK ;
 8008fde:	230e      	movs	r3, #14
 8008fe0:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i < MAX_WARNING_CODES ; i++){
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	60bb      	str	r3, [r7, #8]
 8008fe8:	e7b9      	b.n	8008f5e <_ZN7sim7x0018identifySMSRequestEPKc+0x1e>
			// do nothing
			// Ngoài ra còn nhiều chức năng ngoài cảnh báo, như là add thêm số điện thoại, hẹn giờ cảnh báo ... to be continue
		}
	}

	if(result == WARNING_LEVEL_5  )
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b07      	cmp	r3, #7
 8008fee:	d106      	bne.n	8008ffe <_ZN7sim7x0018identifySMSRequestEPKc+0xbe>
		SIM_DEBUG.println("Datalogger was responded : " ) ;
 8008ff0:	4a12      	ldr	r2, [pc, #72]	; (800903c <_ZN7sim7x0018identifySMSRequestEPKc+0xfc>)
 8008ff2:	4b0e      	ldr	r3, [pc, #56]	; (800902c <_ZN7sim7x0018identifySMSRequestEPKc+0xec>)
 8008ff4:	0011      	movs	r1, r2
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f7ff f8ba 	bl	8008170 <_ZN5debug7printlnEPKc>
 8008ffc:	e00f      	b.n	800901e <_ZN7sim7x0018identifySMSRequestEPKc+0xde>
	else if(result == STOP_WARNING  )
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b08      	cmp	r3, #8
 8009002:	d106      	bne.n	8009012 <_ZN7sim7x0018identifySMSRequestEPKc+0xd2>
		SIM_DEBUG.println("Datalogger was responded : " ) ;
 8009004:	4a0d      	ldr	r2, [pc, #52]	; (800903c <_ZN7sim7x0018identifySMSRequestEPKc+0xfc>)
 8009006:	4b09      	ldr	r3, [pc, #36]	; (800902c <_ZN7sim7x0018identifySMSRequestEPKc+0xec>)
 8009008:	0011      	movs	r1, r2
 800900a:	0018      	movs	r0, r3
 800900c:	f7ff f8b0 	bl	8008170 <_ZN5debug7printlnEPKc>
 8009010:	e005      	b.n	800901e <_ZN7sim7x0018identifySMSRequestEPKc+0xde>
	else
		SIM_DEBUG.println("Datalogger was not respond !!!\n" ) ;
 8009012:	4a0b      	ldr	r2, [pc, #44]	; (8009040 <_ZN7sim7x0018identifySMSRequestEPKc+0x100>)
 8009014:	4b05      	ldr	r3, [pc, #20]	; (800902c <_ZN7sim7x0018identifySMSRequestEPKc+0xec>)
 8009016:	0011      	movs	r1, r2
 8009018:	0018      	movs	r0, r3
 800901a:	f7ff f8a9 	bl	8008170 <_ZN5debug7printlnEPKc>

	// Ngoài ra còn nhiều chức năng ngoài cảnh báo, như là add thêm số điện thoại, hẹn giờ cảnh báo ... to be continue

	return result ;
 800901e:	68fb      	ldr	r3, [r7, #12]
}
 8009020:	0018      	movs	r0, r3
 8009022:	46bd      	mov	sp, r7
 8009024:	b004      	add	sp, #16
 8009026:	bd80      	pop	{r7, pc}
 8009028:	0800e778 	.word	0x0800e778
 800902c:	20001cbc 	.word	0x20001cbc
 8009030:	20000024 	.word	0x20000024
 8009034:	20000038 	.word	0x20000038
 8009038:	0800e7a0 	.word	0x0800e7a0
 800903c:	0800e7a4 	.word	0x0800e7a4
 8009040:	0800e7c0 	.word	0x0800e7c0

08009044 <_ZN7sim7x009getIntCSQEv>:
	}



/*____________________________________________________________________________________________________________________________*/
int sim7x00::getIntCSQ(){
 8009044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009046:	b08d      	sub	sp, #52	; 0x34
 8009048:	af00      	add	r7, sp, #0
 800904a:	61f8      	str	r0, [r7, #28]
		memcpy ( rxDataCpy, rxData, len ) ;

		for ( int i = 0; i < 2; i++ ) {
			csqData[i] = rxDataCpy[ i + 13 ] ;
		}
		return atoi(csqData);
 800904c:	466b      	mov	r3, sp
 800904e:	61bb      	str	r3, [r7, #24]
	sendATcommand( "AT+CSQ\r" , "OK", 2000) ;
 8009050:	23fa      	movs	r3, #250	; 0xfa
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	4a34      	ldr	r2, [pc, #208]	; (8009128 <_ZN7sim7x009getIntCSQEv+0xe4>)
 8009056:	4935      	ldr	r1, [pc, #212]	; (800912c <_ZN7sim7x009getIntCSQEv+0xe8>)
 8009058:	69f8      	ldr	r0, [r7, #28]
 800905a:	f7ff fc03 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
		memset ( csqData, 0 , 3 ) ;
 800905e:	4b34      	ldr	r3, [pc, #208]	; (8009130 <_ZN7sim7x009getIntCSQEv+0xec>)
 8009060:	2203      	movs	r2, #3
 8009062:	2100      	movs	r1, #0
 8009064:	0018      	movs	r0, r3
 8009066:	f001 f8cc 	bl	800a202 <memset>
		int len = strlen( rxData ) ;
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	3302      	adds	r3, #2
 800906e:	0018      	movs	r0, r3
 8009070:	f7f7 f84a 	bl	8000108 <strlen>
 8009074:	0003      	movs	r3, r0
 8009076:	62bb      	str	r3, [r7, #40]	; 0x28
		char rxDataCpy [len]  ;
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	3b01      	subs	r3, #1
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
 800907e:	001a      	movs	r2, r3
 8009080:	3201      	adds	r2, #1
 8009082:	60ba      	str	r2, [r7, #8]
 8009084:	2200      	movs	r2, #0
 8009086:	60fa      	str	r2, [r7, #12]
 8009088:	68b8      	ldr	r0, [r7, #8]
 800908a:	68f9      	ldr	r1, [r7, #12]
 800908c:	0002      	movs	r2, r0
 800908e:	0f52      	lsrs	r2, r2, #29
 8009090:	000e      	movs	r6, r1
 8009092:	00f6      	lsls	r6, r6, #3
 8009094:	617e      	str	r6, [r7, #20]
 8009096:	697e      	ldr	r6, [r7, #20]
 8009098:	4316      	orrs	r6, r2
 800909a:	617e      	str	r6, [r7, #20]
 800909c:	0002      	movs	r2, r0
 800909e:	00d2      	lsls	r2, r2, #3
 80090a0:	613a      	str	r2, [r7, #16]
 80090a2:	001a      	movs	r2, r3
 80090a4:	3201      	adds	r2, #1
 80090a6:	603a      	str	r2, [r7, #0]
 80090a8:	2200      	movs	r2, #0
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	6838      	ldr	r0, [r7, #0]
 80090ae:	6879      	ldr	r1, [r7, #4]
 80090b0:	0002      	movs	r2, r0
 80090b2:	0f52      	lsrs	r2, r2, #29
 80090b4:	000e      	movs	r6, r1
 80090b6:	00f5      	lsls	r5, r6, #3
 80090b8:	4315      	orrs	r5, r2
 80090ba:	0002      	movs	r2, r0
 80090bc:	00d4      	lsls	r4, r2, #3
 80090be:	3301      	adds	r3, #1
 80090c0:	3307      	adds	r3, #7
 80090c2:	08db      	lsrs	r3, r3, #3
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	466a      	mov	r2, sp
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	469d      	mov	sp, r3
 80090cc:	466b      	mov	r3, sp
 80090ce:	3300      	adds	r3, #0
 80090d0:	623b      	str	r3, [r7, #32]
		memset ( rxDataCpy, 0, len ) ;
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090d6:	2100      	movs	r1, #0
 80090d8:	0018      	movs	r0, r3
 80090da:	f001 f892 	bl	800a202 <memset>
		memcpy ( rxDataCpy, rxData, len ) ;
 80090de:	6a38      	ldr	r0, [r7, #32]
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	3302      	adds	r3, #2
 80090e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090e6:	0019      	movs	r1, r3
 80090e8:	f001 f882 	bl	800a1f0 <memcpy>
		for ( int i = 0; i < 2; i++ ) {
 80090ec:	2300      	movs	r3, #0
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	dc0c      	bgt.n	8009110 <_ZN7sim7x009getIntCSQEv+0xcc>
			csqData[i] = rxDataCpy[ i + 13 ] ;
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	330d      	adds	r3, #13
 80090fa:	6a3a      	ldr	r2, [r7, #32]
 80090fc:	5cd1      	ldrb	r1, [r2, r3]
 80090fe:	4a0c      	ldr	r2, [pc, #48]	; (8009130 <_ZN7sim7x009getIntCSQEv+0xec>)
 8009100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009102:	18d3      	adds	r3, r2, r3
 8009104:	1c0a      	adds	r2, r1, #0
 8009106:	701a      	strb	r2, [r3, #0]
		for ( int i = 0; i < 2; i++ ) {
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	3301      	adds	r3, #1
 800910c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800910e:	e7ef      	b.n	80090f0 <_ZN7sim7x009getIntCSQEv+0xac>
		return atoi(csqData);
 8009110:	4b07      	ldr	r3, [pc, #28]	; (8009130 <_ZN7sim7x009getIntCSQEv+0xec>)
 8009112:	0018      	movs	r0, r3
 8009114:	f001 f832 	bl	800a17c <atoi>
 8009118:	0003      	movs	r3, r0
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	4695      	mov	sp, r2
}
 800911e:	0018      	movs	r0, r3
 8009120:	46bd      	mov	sp, r7
 8009122:	b00d      	add	sp, #52	; 0x34
 8009124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009126:	46c0      	nop			; (mov r8, r8)
 8009128:	0800e57c 	.word	0x0800e57c
 800912c:	0800e934 	.word	0x0800e934
 8009130:	200024c0 	.word	0x200024c0

08009134 <_ZN7sim7x007sendSMSEPKcS1_>:


/*____________________________________________________________________________________________________________________________*/
bool sim7x00::sendSMS(const char* PhoneNumber,const char* Message){
 8009134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009136:	b099      	sub	sp, #100	; 0x64
 8009138:	af00      	add	r7, sp, #0
 800913a:	6278      	str	r0, [r7, #36]	; 0x24
 800913c:	6239      	str	r1, [r7, #32]
 800913e:	61fa      	str	r2, [r7, #28]

	bool answer = 0;
 8009140:	2347      	movs	r3, #71	; 0x47
 8009142:	2218      	movs	r2, #24
 8009144:	4694      	mov	ip, r2
 8009146:	44bc      	add	ip, r7
 8009148:	4463      	add	r3, ip
 800914a:	2200      	movs	r2, #0
 800914c:	701a      	strb	r2, [r3, #0]
	char aux_string[30];

	SIM_DEBUG.println("Sending short message... ");
 800914e:	4a6c      	ldr	r2, [pc, #432]	; (8009300 <_ZN7sim7x007sendSMSEPKcS1_+0x1cc>)
 8009150:	4b6c      	ldr	r3, [pc, #432]	; (8009304 <_ZN7sim7x007sendSMSEPKcS1_+0x1d0>)
 8009152:	0011      	movs	r1, r2
 8009154:	0018      	movs	r0, r3
 8009156:	f7ff f80b 	bl	8008170 <_ZN5debug7printlnEPKc>

	sendATcommand("AT+CMGF=1\r", "OK", 1000);    // sets the SMS mode to text
 800915a:	23fa      	movs	r3, #250	; 0xfa
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4a6a      	ldr	r2, [pc, #424]	; (8009308 <_ZN7sim7x007sendSMSEPKcS1_+0x1d4>)
 8009160:	496a      	ldr	r1, [pc, #424]	; (800930c <_ZN7sim7x007sendSMSEPKcS1_+0x1d8>)
 8009162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009164:	f7ff fb7e 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>

	memset( aux_string, 0, 30 ) ;
 8009168:	2618      	movs	r6, #24
 800916a:	2318      	movs	r3, #24
 800916c:	18fb      	adds	r3, r7, r3
 800916e:	199b      	adds	r3, r3, r6
 8009170:	221e      	movs	r2, #30
 8009172:	2100      	movs	r1, #0
 8009174:	0018      	movs	r0, r3
 8009176:	f001 f844 	bl	800a202 <memset>
	strcat( aux_string, "AT+CMGS=\"" ) ;
 800917a:	2318      	movs	r3, #24
 800917c:	18fb      	adds	r3, r7, r3
 800917e:	199b      	adds	r3, r3, r6
 8009180:	0018      	movs	r0, r3
 8009182:	f7f6 ffc1 	bl	8000108 <strlen>
 8009186:	0003      	movs	r3, r0
 8009188:	001a      	movs	r2, r3
 800918a:	2318      	movs	r3, #24
 800918c:	18fb      	adds	r3, r7, r3
 800918e:	199b      	adds	r3, r3, r6
 8009190:	189a      	adds	r2, r3, r2
 8009192:	4b5f      	ldr	r3, [pc, #380]	; (8009310 <_ZN7sim7x007sendSMSEPKcS1_+0x1dc>)
 8009194:	0010      	movs	r0, r2
 8009196:	0019      	movs	r1, r3
 8009198:	230a      	movs	r3, #10
 800919a:	001a      	movs	r2, r3
 800919c:	f001 f828 	bl	800a1f0 <memcpy>
	strcat( aux_string, PhoneNumber ) ;
 80091a0:	6a3a      	ldr	r2, [r7, #32]
 80091a2:	2318      	movs	r3, #24
 80091a4:	18fb      	adds	r3, r7, r3
 80091a6:	199b      	adds	r3, r3, r6
 80091a8:	0011      	movs	r1, r2
 80091aa:	0018      	movs	r0, r3
 80091ac:	f001 ff6c 	bl	800b088 <strcat>
	strcat( aux_string, "\"\r" ) ;
 80091b0:	2318      	movs	r3, #24
 80091b2:	18fb      	adds	r3, r7, r3
 80091b4:	199b      	adds	r3, r3, r6
 80091b6:	0018      	movs	r0, r3
 80091b8:	f7f6 ffa6 	bl	8000108 <strlen>
 80091bc:	0003      	movs	r3, r0
 80091be:	001a      	movs	r2, r3
 80091c0:	2318      	movs	r3, #24
 80091c2:	18fb      	adds	r3, r7, r3
 80091c4:	199b      	adds	r3, r3, r6
 80091c6:	189a      	adds	r2, r3, r2
 80091c8:	4b52      	ldr	r3, [pc, #328]	; (8009314 <_ZN7sim7x007sendSMSEPKcS1_+0x1e0>)
 80091ca:	0010      	movs	r0, r2
 80091cc:	0019      	movs	r1, r3
 80091ce:	2303      	movs	r3, #3
 80091d0:	001a      	movs	r2, r3
 80091d2:	f001 f80d 	bl	800a1f0 <memcpy>

	answer = sendATcommand(aux_string, ">", 3000);    // send the SMS number
 80091d6:	2347      	movs	r3, #71	; 0x47
 80091d8:	2218      	movs	r2, #24
 80091da:	18ba      	adds	r2, r7, r2
 80091dc:	18d6      	adds	r6, r2, r3
 80091de:	4b4e      	ldr	r3, [pc, #312]	; (8009318 <_ZN7sim7x007sendSMSEPKcS1_+0x1e4>)
 80091e0:	4a4e      	ldr	r2, [pc, #312]	; (800931c <_ZN7sim7x007sendSMSEPKcS1_+0x1e8>)
 80091e2:	2118      	movs	r1, #24
 80091e4:	2018      	movs	r0, #24
 80091e6:	4684      	mov	ip, r0
 80091e8:	44bc      	add	ip, r7
 80091ea:	4461      	add	r1, ip
 80091ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091ee:	f7ff fb39 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
 80091f2:	0003      	movs	r3, r0
 80091f4:	7033      	strb	r3, [r6, #0]
	if (answer == 1){
 80091f6:	2347      	movs	r3, #71	; 0x47
 80091f8:	2218      	movs	r2, #24
 80091fa:	4694      	mov	ip, r2
 80091fc:	44bc      	add	ip, r7
 80091fe:	4463      	add	r3, ip
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d06b      	beq.n	80092de <_ZN7sim7x007sendSMSEPKcS1_+0x1aa>
		char msgPackage[SMSsize] ;
		char end[2] = { 0x1A, 0 } ;
		memset(msgPackage, 0, strlen(Message)+1 ) ;
		strcat( msgPackage, Message ) ;
		strcat( msgPackage, end ) ;
		answer = sendATcommand(msgPackage, "OK", 5000);
 8009206:	466b      	mov	r3, sp
 8009208:	001e      	movs	r6, r3
		int SMSsize = strlen(Message) + 1 ;
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	0018      	movs	r0, r3
 800920e:	f7f6 ff7b 	bl	8000108 <strlen>
 8009212:	0003      	movs	r3, r0
 8009214:	3301      	adds	r3, #1
 8009216:	65bb      	str	r3, [r7, #88]	; 0x58
		char msgPackage[SMSsize] ;
 8009218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800921a:	3b01      	subs	r3, #1
 800921c:	657b      	str	r3, [r7, #84]	; 0x54
 800921e:	001a      	movs	r2, r3
 8009220:	3201      	adds	r2, #1
 8009222:	0014      	movs	r4, r2
 8009224:	2200      	movs	r2, #0
 8009226:	0015      	movs	r5, r2
 8009228:	0020      	movs	r0, r4
 800922a:	0029      	movs	r1, r5
 800922c:	0002      	movs	r2, r0
 800922e:	0f52      	lsrs	r2, r2, #29
 8009230:	000c      	movs	r4, r1
 8009232:	00e4      	lsls	r4, r4, #3
 8009234:	617c      	str	r4, [r7, #20]
 8009236:	697c      	ldr	r4, [r7, #20]
 8009238:	4314      	orrs	r4, r2
 800923a:	617c      	str	r4, [r7, #20]
 800923c:	0002      	movs	r2, r0
 800923e:	00d2      	lsls	r2, r2, #3
 8009240:	613a      	str	r2, [r7, #16]
 8009242:	001a      	movs	r2, r3
 8009244:	3201      	adds	r2, #1
 8009246:	603a      	str	r2, [r7, #0]
 8009248:	2200      	movs	r2, #0
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	6838      	ldr	r0, [r7, #0]
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	0002      	movs	r2, r0
 8009252:	0f52      	lsrs	r2, r2, #29
 8009254:	000c      	movs	r4, r1
 8009256:	00e4      	lsls	r4, r4, #3
 8009258:	60fc      	str	r4, [r7, #12]
 800925a:	68fc      	ldr	r4, [r7, #12]
 800925c:	4314      	orrs	r4, r2
 800925e:	60fc      	str	r4, [r7, #12]
 8009260:	0002      	movs	r2, r0
 8009262:	00d2      	lsls	r2, r2, #3
 8009264:	60ba      	str	r2, [r7, #8]
 8009266:	3301      	adds	r3, #1
 8009268:	3307      	adds	r3, #7
 800926a:	08db      	lsrs	r3, r3, #3
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	466a      	mov	r2, sp
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	469d      	mov	sp, r3
 8009274:	466b      	mov	r3, sp
 8009276:	3300      	adds	r3, #0
 8009278:	653b      	str	r3, [r7, #80]	; 0x50
		char end[2] = { 0x1A, 0 } ;
 800927a:	2514      	movs	r5, #20
 800927c:	2318      	movs	r3, #24
 800927e:	18fb      	adds	r3, r7, r3
 8009280:	195b      	adds	r3, r3, r5
 8009282:	221a      	movs	r2, #26
 8009284:	701a      	strb	r2, [r3, #0]
 8009286:	2318      	movs	r3, #24
 8009288:	18fb      	adds	r3, r7, r3
 800928a:	195b      	adds	r3, r3, r5
 800928c:	2200      	movs	r2, #0
 800928e:	705a      	strb	r2, [r3, #1]
		memset(msgPackage, 0, strlen(Message)+1 ) ;
 8009290:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	0018      	movs	r0, r3
 8009296:	f7f6 ff37 	bl	8000108 <strlen>
 800929a:	0003      	movs	r3, r0
 800929c:	3301      	adds	r3, #1
 800929e:	001a      	movs	r2, r3
 80092a0:	2100      	movs	r1, #0
 80092a2:	0020      	movs	r0, r4
 80092a4:	f000 ffad 	bl	800a202 <memset>
		strcat( msgPackage, Message ) ;
 80092a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	0011      	movs	r1, r2
 80092ae:	0018      	movs	r0, r3
 80092b0:	f001 feea 	bl	800b088 <strcat>
		strcat( msgPackage, end ) ;
 80092b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b6:	2218      	movs	r2, #24
 80092b8:	18ba      	adds	r2, r7, r2
 80092ba:	1952      	adds	r2, r2, r5
 80092bc:	0011      	movs	r1, r2
 80092be:	0018      	movs	r0, r3
 80092c0:	f001 fee2 	bl	800b088 <strcat>
		answer = sendATcommand(msgPackage, "OK", 5000);
 80092c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092c6:	2347      	movs	r3, #71	; 0x47
 80092c8:	2218      	movs	r2, #24
 80092ca:	18ba      	adds	r2, r7, r2
 80092cc:	18d4      	adds	r4, r2, r3
 80092ce:	4b14      	ldr	r3, [pc, #80]	; (8009320 <_ZN7sim7x007sendSMSEPKcS1_+0x1ec>)
 80092d0:	4a0d      	ldr	r2, [pc, #52]	; (8009308 <_ZN7sim7x007sendSMSEPKcS1_+0x1d4>)
 80092d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092d4:	f7ff fac6 	bl	8008864 <_ZN7sim7x0013sendATcommandEPKcS1_i>
 80092d8:	0003      	movs	r3, r0
 80092da:	7023      	strb	r3, [r4, #0]
 80092dc:	46b5      	mov	sp, r6
	}

	SIM_DEBUG.print("Done");
 80092de:	4a11      	ldr	r2, [pc, #68]	; (8009324 <_ZN7sim7x007sendSMSEPKcS1_+0x1f0>)
 80092e0:	4b08      	ldr	r3, [pc, #32]	; (8009304 <_ZN7sim7x007sendSMSEPKcS1_+0x1d0>)
 80092e2:	0011      	movs	r1, r2
 80092e4:	0018      	movs	r0, r3
 80092e6:	f7fe ff2c 	bl	8008142 <_ZN5debug5printEPKc>
	return answer ;
 80092ea:	2347      	movs	r3, #71	; 0x47
 80092ec:	2218      	movs	r2, #24
 80092ee:	4694      	mov	ip, r2
 80092f0:	44bc      	add	ip, r7
 80092f2:	4463      	add	r3, ip
 80092f4:	781b      	ldrb	r3, [r3, #0]
}
 80092f6:	0018      	movs	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	b019      	add	sp, #100	; 0x64
 80092fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fe:	46c0      	nop			; (mov r8, r8)
 8009300:	0800e94c 	.word	0x0800e94c
 8009304:	20001cbc 	.word	0x20001cbc
 8009308:	0800e57c 	.word	0x0800e57c
 800930c:	0800e968 	.word	0x0800e968
 8009310:	0800e974 	.word	0x0800e974
 8009314:	0800e980 	.word	0x0800e980
 8009318:	00000bb8 	.word	0x00000bb8
 800931c:	0800e838 	.word	0x0800e838
 8009320:	00001388 	.word	0x00001388
 8009324:	0800e984 	.word	0x0800e984

08009328 <_Z41__static_initialization_and_destruction_0ii>:
	else return false ;
}


#ifdef __cplusplus
}
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d113      	bne.n	8009360 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	4a0b      	ldr	r2, [pc, #44]	; (8009368 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10f      	bne.n	8009360 <_Z41__static_initialization_and_destruction_0ii+0x38>
debug simDebug(&DEBUG_UART) ;
 8009340:	4a0a      	ldr	r2, [pc, #40]	; (800936c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009342:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009344:	0011      	movs	r1, r2
 8009346:	0018      	movs	r0, r3
 8009348:	f7fe feee 	bl	8008128 <_ZN5debugC1EP20__UART_HandleTypeDef>
unDebug simUnDebug ;
 800934c:	4b09      	ldr	r3, [pc, #36]	; (8009374 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800934e:	0018      	movs	r0, r3
 8009350:	f7fe ff30 	bl	80081b4 <_ZN7unDebugC1Ev>
lrwan LRW(&huart4) ;
 8009354:	4a08      	ldr	r2, [pc, #32]	; (8009378 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009356:	4b09      	ldr	r3, [pc, #36]	; (800937c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8009358:	0011      	movs	r1, r2
 800935a:	0018      	movs	r0, r3
 800935c:	f7fe ff34 	bl	80081c8 <_ZN5lrwanC1EP20__UART_HandleTypeDef>
}
 8009360:	46c0      	nop			; (mov r8, r8)
 8009362:	46bd      	mov	sp, r7
 8009364:	b002      	add	sp, #8
 8009366:	bd80      	pop	{r7, pc}
 8009368:	0000ffff 	.word	0x0000ffff
 800936c:	20001c30 	.word	0x20001c30
 8009370:	20001cbc 	.word	0x20001cbc
 8009374:	20001cc0 	.word	0x20001cc0
 8009378:	20001bac 	.word	0x20001bac
 800937c:	20001cc4 	.word	0x20001cc4

08009380 <_GLOBAL__sub_I_simDebug>:
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
 8009384:	4b03      	ldr	r3, [pc, #12]	; (8009394 <_GLOBAL__sub_I_simDebug+0x14>)
 8009386:	0019      	movs	r1, r3
 8009388:	2001      	movs	r0, #1
 800938a:	f7ff ffcd 	bl	8009328 <_Z41__static_initialization_and_destruction_0ii>
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	0000ffff 	.word	0x0000ffff

08009398 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, SSD1306_COLOR_t color)
{
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	0004      	movs	r4, r0
 80093a0:	0008      	movs	r0, r1
 80093a2:	60ba      	str	r2, [r7, #8]
 80093a4:	0019      	movs	r1, r3
 80093a6:	230e      	movs	r3, #14
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	1c22      	adds	r2, r4, #0
 80093ac:	801a      	strh	r2, [r3, #0]
 80093ae:	230c      	movs	r3, #12
 80093b0:	18fb      	adds	r3, r7, r3
 80093b2:	1c02      	adds	r2, r0, #0
 80093b4:	801a      	strh	r2, [r3, #0]
 80093b6:	1dbb      	adds	r3, r7, #6
 80093b8:	1c0a      	adds	r2, r1, #0
 80093ba:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80093bc:	1dbb      	adds	r3, r7, #6
 80093be:	2200      	movs	r2, #0
 80093c0:	5e9b      	ldrsh	r3, [r3, r2]
 80093c2:	3307      	adds	r3, #7
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	da00      	bge.n	80093ca <SSD1306_DrawBitmap+0x32>
 80093c8:	3307      	adds	r3, #7
 80093ca:	10db      	asrs	r3, r3, #3
 80093cc:	001a      	movs	r2, r3
 80093ce:	2310      	movs	r3, #16
 80093d0:	18fb      	adds	r3, r7, r3
 80093d2:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 80093d4:	2317      	movs	r3, #23
 80093d6:	18fb      	adds	r3, r7, r3
 80093d8:	2200      	movs	r2, #0
 80093da:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 80093dc:	2314      	movs	r3, #20
 80093de:	18fb      	adds	r3, r7, r3
 80093e0:	2200      	movs	r2, #0
 80093e2:	801a      	strh	r2, [r3, #0]
 80093e4:	2314      	movs	r3, #20
 80093e6:	18fb      	adds	r3, r7, r3
 80093e8:	2228      	movs	r2, #40	; 0x28
 80093ea:	18b9      	adds	r1, r7, r2
 80093ec:	2200      	movs	r2, #0
 80093ee:	5e9a      	ldrsh	r2, [r3, r2]
 80093f0:	2300      	movs	r3, #0
 80093f2:	5ecb      	ldrsh	r3, [r1, r3]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	da68      	bge.n	80094ca <SSD1306_DrawBitmap+0x132>
    {
        for(int16_t i=0; i<w; i++)
 80093f8:	2312      	movs	r3, #18
 80093fa:	18fb      	adds	r3, r7, r3
 80093fc:	2200      	movs	r2, #0
 80093fe:	801a      	strh	r2, [r3, #0]
 8009400:	2312      	movs	r3, #18
 8009402:	18fa      	adds	r2, r7, r3
 8009404:	1dbb      	adds	r3, r7, #6
 8009406:	2100      	movs	r1, #0
 8009408:	5e52      	ldrsh	r2, [r2, r1]
 800940a:	2100      	movs	r1, #0
 800940c:	5e5b      	ldrsh	r3, [r3, r1]
 800940e:	429a      	cmp	r2, r3
 8009410:	da48      	bge.n	80094a4 <SSD1306_DrawBitmap+0x10c>
        {
            if(i & 7)
 8009412:	2312      	movs	r3, #18
 8009414:	18fb      	adds	r3, r7, r3
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	001a      	movs	r2, r3
 800941a:	2307      	movs	r3, #7
 800941c:	4013      	ands	r3, r2
 800941e:	d006      	beq.n	800942e <SSD1306_DrawBitmap+0x96>
            {
               byte <<= 1;
 8009420:	2317      	movs	r3, #23
 8009422:	18fa      	adds	r2, r7, r3
 8009424:	18fb      	adds	r3, r7, r3
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	18db      	adds	r3, r3, r3
 800942a:	7013      	strb	r3, [r2, #0]
 800942c:	e019      	b.n	8009462 <SSD1306_DrawBitmap+0xca>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800942e:	2314      	movs	r3, #20
 8009430:	18fb      	adds	r3, r7, r3
 8009432:	2200      	movs	r2, #0
 8009434:	5e9b      	ldrsh	r3, [r3, r2]
 8009436:	2210      	movs	r2, #16
 8009438:	18ba      	adds	r2, r7, r2
 800943a:	2100      	movs	r1, #0
 800943c:	5e52      	ldrsh	r2, [r2, r1]
 800943e:	435a      	muls	r2, r3
 8009440:	2312      	movs	r3, #18
 8009442:	18fb      	adds	r3, r7, r3
 8009444:	2100      	movs	r1, #0
 8009446:	5e5b      	ldrsh	r3, [r3, r1]
 8009448:	2b00      	cmp	r3, #0
 800944a:	da00      	bge.n	800944e <SSD1306_DrawBitmap+0xb6>
 800944c:	3307      	adds	r3, #7
 800944e:	10db      	asrs	r3, r3, #3
 8009450:	b21b      	sxth	r3, r3
 8009452:	18d3      	adds	r3, r2, r3
 8009454:	001a      	movs	r2, r3
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	189a      	adds	r2, r3, r2
 800945a:	2317      	movs	r3, #23
 800945c:	18fb      	adds	r3, r7, r3
 800945e:	7812      	ldrb	r2, [r2, #0]
 8009460:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8009462:	2317      	movs	r3, #23
 8009464:	18fb      	adds	r3, r7, r3
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	b25b      	sxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	da10      	bge.n	8009490 <SSD1306_DrawBitmap+0xf8>
 800946e:	230e      	movs	r3, #14
 8009470:	18fb      	adds	r3, r7, r3
 8009472:	881a      	ldrh	r2, [r3, #0]
 8009474:	2312      	movs	r3, #18
 8009476:	18fb      	adds	r3, r7, r3
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	18d3      	adds	r3, r2, r3
 800947c:	b298      	uxth	r0, r3
 800947e:	230c      	movs	r3, #12
 8009480:	18fb      	adds	r3, r7, r3
 8009482:	8819      	ldrh	r1, [r3, #0]
 8009484:	232c      	movs	r3, #44	; 0x2c
 8009486:	18fb      	adds	r3, r7, r3
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	001a      	movs	r2, r3
 800948c:	f000 f93e 	bl	800970c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8009490:	2112      	movs	r1, #18
 8009492:	187b      	adds	r3, r7, r1
 8009494:	2200      	movs	r2, #0
 8009496:	5e9b      	ldrsh	r3, [r3, r2]
 8009498:	b29b      	uxth	r3, r3
 800949a:	3301      	adds	r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	187b      	adds	r3, r7, r1
 80094a0:	801a      	strh	r2, [r3, #0]
 80094a2:	e7ad      	b.n	8009400 <SSD1306_DrawBitmap+0x68>
    for(int16_t j=0; j<h; j++, y++)
 80094a4:	2114      	movs	r1, #20
 80094a6:	187b      	adds	r3, r7, r1
 80094a8:	2200      	movs	r2, #0
 80094aa:	5e9b      	ldrsh	r3, [r3, r2]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	3301      	adds	r3, #1
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	187b      	adds	r3, r7, r1
 80094b4:	801a      	strh	r2, [r3, #0]
 80094b6:	210c      	movs	r1, #12
 80094b8:	187b      	adds	r3, r7, r1
 80094ba:	2200      	movs	r2, #0
 80094bc:	5e9b      	ldrsh	r3, [r3, r2]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	3301      	adds	r3, #1
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	187b      	adds	r3, r7, r1
 80094c6:	801a      	strh	r2, [r3, #0]
 80094c8:	e78c      	b.n	80093e4 <SSD1306_DrawBitmap+0x4c>
        }
    }
}
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	46bd      	mov	sp, r7
 80094ce:	b007      	add	sp, #28
 80094d0:	bd90      	pop	{r4, r7, pc}
	...

080094d4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0

	/* Init I2C */
	SSD1306_I2C_Init();
 80094da:	f000 fd97 	bl	800a00c <SSD1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&I2C_PORT, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80094de:	4b60      	ldr	r3, [pc, #384]	; (8009660 <SSD1306_Init+0x18c>)
 80094e0:	4860      	ldr	r0, [pc, #384]	; (8009664 <SSD1306_Init+0x190>)
 80094e2:	2201      	movs	r2, #1
 80094e4:	2178      	movs	r1, #120	; 0x78
 80094e6:	f7fb fcb7 	bl	8004e58 <HAL_I2C_IsDeviceReady>
 80094ea:	0003      	movs	r3, r0
 80094ec:	1e5a      	subs	r2, r3, #1
 80094ee:	4193      	sbcs	r3, r2
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <SSD1306_Init+0x26>
		/* Return false */
		return 0;
 80094f6:	2300      	movs	r3, #0
 80094f8:	e0ad      	b.n	8009656 <SSD1306_Init+0x182>
	}

	/* A little delay */
	uint32_t p = 2500;
 80094fa:	4b5b      	ldr	r3, [pc, #364]	; (8009668 <SSD1306_Init+0x194>)
 80094fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <SSD1306_Init+0x38>
		p--;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3b01      	subs	r3, #1
 8009508:	607b      	str	r3, [r7, #4]
	while(p>0)
 800950a:	e7f8      	b.n	80094fe <SSD1306_Init+0x2a>
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //ok display off
 800950c:	22ae      	movs	r2, #174	; 0xae
 800950e:	2100      	movs	r1, #0
 8009510:	2078      	movs	r0, #120	; 0x78
 8009512:	f000 fe0b 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8009516:	2220      	movs	r2, #32
 8009518:	2100      	movs	r1, #0
 800951a:	2078      	movs	r0, #120	; 0x78
 800951c:	f000 fe06 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8009520:	2210      	movs	r2, #16
 8009522:	2100      	movs	r1, #0
 8009524:	2078      	movs	r0, #120	; 0x78
 8009526:	f000 fe01 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //ok Set Page Start Address for Page Addressing Mode,0-7
 800952a:	22b0      	movs	r2, #176	; 0xb0
 800952c:	2100      	movs	r1, #0
 800952e:	2078      	movs	r0, #120	; 0x78
 8009530:	f000 fdfc 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //ok Set COM Output Scan Direction
 8009534:	22c8      	movs	r2, #200	; 0xc8
 8009536:	2100      	movs	r1, #0
 8009538:	2078      	movs	r0, #120	; 0x78
 800953a:	f000 fdf7 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //ok ---set low column address
 800953e:	2200      	movs	r2, #0
 8009540:	2100      	movs	r1, #0
 8009542:	2078      	movs	r0, #120	; 0x78
 8009544:	f000 fdf2 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //ok ---set high column address
 8009548:	2210      	movs	r2, #16
 800954a:	2100      	movs	r1, #0
 800954c:	2078      	movs	r0, #120	; 0x78
 800954e:	f000 fded 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //ok --set start line address
 8009552:	2240      	movs	r2, #64	; 0x40
 8009554:	2100      	movs	r1, #0
 8009556:	2078      	movs	r0, #120	; 0x78
 8009558:	f000 fde8 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); // Toan them // Start line : 0
 800955c:	2200      	movs	r2, #0
 800955e:	2100      	movs	r1, #0
 8009560:	2078      	movs	r0, #120	; 0x78
 8009562:	f000 fde3 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //ok --set contrast control register
 8009566:	2281      	movs	r2, #129	; 0x81
 8009568:	2100      	movs	r1, #0
 800956a:	2078      	movs	r0, #120	; 0x78
 800956c:	f000 fdde 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8009570:	22ff      	movs	r2, #255	; 0xff
 8009572:	2100      	movs	r1, #0
 8009574:	2078      	movs	r0, #120	; 0x78
 8009576:	f000 fdd9 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //ok --set segment re-map 0 to 127
 800957a:	22a1      	movs	r2, #161	; 0xa1
 800957c:	2100      	movs	r1, #0
 800957e:	2078      	movs	r0, #120	; 0x78
 8009580:	f000 fdd4 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //ok --set normal display
 8009584:	22a6      	movs	r2, #166	; 0xa6
 8009586:	2100      	movs	r1, #0
 8009588:	2078      	movs	r0, #120	; 0x78
 800958a:	f000 fdcf 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //ok --set multiplex ratio(1 to 64)
 800958e:	22a8      	movs	r2, #168	; 0xa8
 8009590:	2100      	movs	r1, #0
 8009592:	2078      	movs	r0, #120	; 0x78
 8009594:	f000 fdca 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8009598:	223f      	movs	r2, #63	; 0x3f
 800959a:	2100      	movs	r1, #0
 800959c:	2078      	movs	r0, #120	; 0x78
 800959e:	f000 fdc5 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //ok 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80095a2:	22a4      	movs	r2, #164	; 0xa4
 80095a4:	2100      	movs	r1, #0
 80095a6:	2078      	movs	r0, #120	; 0x78
 80095a8:	f000 fdc0 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //ok -set display offset
 80095ac:	22d3      	movs	r2, #211	; 0xd3
 80095ae:	2100      	movs	r1, #0
 80095b0:	2078      	movs	r0, #120	; 0x78
 80095b2:	f000 fdbb 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //ok -not offset
 80095b6:	2200      	movs	r2, #0
 80095b8:	2100      	movs	r1, #0
 80095ba:	2078      	movs	r0, #120	; 0x78
 80095bc:	f000 fdb6 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //ok --set display clock divide ratio/oscillator frequency
 80095c0:	22d5      	movs	r2, #213	; 0xd5
 80095c2:	2100      	movs	r1, #0
 80095c4:	2078      	movs	r0, #120	; 0x78
 80095c6:	f000 fdb1 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80095ca:	22f0      	movs	r2, #240	; 0xf0
 80095cc:	2100      	movs	r1, #0
 80095ce:	2078      	movs	r0, #120	; 0x78
 80095d0:	f000 fdac 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80095d4:	22d9      	movs	r2, #217	; 0xd9
 80095d6:	2100      	movs	r1, #0
 80095d8:	2078      	movs	r0, #120	; 0x78
 80095da:	f000 fda7 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80095de:	2222      	movs	r2, #34	; 0x22
 80095e0:	2100      	movs	r1, #0
 80095e2:	2078      	movs	r0, #120	; 0x78
 80095e4:	f000 fda2 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80095e8:	22da      	movs	r2, #218	; 0xda
 80095ea:	2100      	movs	r1, #0
 80095ec:	2078      	movs	r0, #120	; 0x78
 80095ee:	f000 fd9d 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80095f2:	2212      	movs	r2, #18
 80095f4:	2100      	movs	r1, #0
 80095f6:	2078      	movs	r0, #120	; 0x78
 80095f8:	f000 fd98 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80095fc:	22db      	movs	r2, #219	; 0xdb
 80095fe:	2100      	movs	r1, #0
 8009600:	2078      	movs	r0, #120	; 0x78
 8009602:	f000 fd93 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8009606:	2220      	movs	r2, #32
 8009608:	2100      	movs	r1, #0
 800960a:	2078      	movs	r0, #120	; 0x78
 800960c:	f000 fd8e 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8009610:	228d      	movs	r2, #141	; 0x8d
 8009612:	2100      	movs	r1, #0
 8009614:	2078      	movs	r0, #120	; 0x78
 8009616:	f000 fd89 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800961a:	2214      	movs	r2, #20
 800961c:	2100      	movs	r1, #0
 800961e:	2078      	movs	r0, #120	; 0x78
 8009620:	f000 fd84 	bl	800a12c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //ok --turn on SSD1306 panel
 8009624:	22af      	movs	r2, #175	; 0xaf
 8009626:	2100      	movs	r1, #0
 8009628:	2078      	movs	r0, #120	; 0x78
 800962a:	f000 fd7f 	bl	800a12c <SSD1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800962e:	222e      	movs	r2, #46	; 0x2e
 8009630:	2100      	movs	r1, #0
 8009632:	2078      	movs	r0, #120	; 0x78
 8009634:	f000 fd7a 	bl	800a12c <SSD1306_I2C_Write>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8009638:	4b0c      	ldr	r3, [pc, #48]	; (800966c <SSD1306_Init+0x198>)
 800963a:	2200      	movs	r2, #0
 800963c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800963e:	4b0b      	ldr	r3, [pc, #44]	; (800966c <SSD1306_Init+0x198>)
 8009640:	2200      	movs	r2, #0
 8009642:	805a      	strh	r2, [r3, #2]

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8009644:	2000      	movs	r0, #0
 8009646:	f000 f847 	bl	80096d8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800964a:	f000 f811 	bl	8009670 <SSD1306_UpdateScreen>

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <SSD1306_Init+0x198>)
 8009650:	2201      	movs	r2, #1
 8009652:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8009654:	2301      	movs	r3, #1
}
 8009656:	0018      	movs	r0, r3
 8009658:	46bd      	mov	sp, r7
 800965a:	b002      	add	sp, #8
 800965c:	bd80      	pop	{r7, pc}
 800965e:	46c0      	nop			; (mov r8, r8)
 8009660:	00004e20 	.word	0x00004e20
 8009664:	2000028c 	.word	0x2000028c
 8009668:	000009c4 	.word	0x000009c4
 800966c:	200028c4 	.word	0x200028c4

08009670 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8009676:	1dfb      	adds	r3, r7, #7
 8009678:	2200      	movs	r2, #0
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	1dfb      	adds	r3, r7, #7
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b07      	cmp	r3, #7
 8009682:	d822      	bhi.n	80096ca <SSD1306_UpdateScreen+0x5a>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8009684:	1dfb      	adds	r3, r7, #7
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	3b50      	subs	r3, #80	; 0x50
 800968a:	b2db      	uxtb	r3, r3
 800968c:	001a      	movs	r2, r3
 800968e:	2100      	movs	r1, #0
 8009690:	2078      	movs	r0, #120	; 0x78
 8009692:	f000 fd4b 	bl	800a12c <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8009696:	2200      	movs	r2, #0
 8009698:	2100      	movs	r1, #0
 800969a:	2078      	movs	r0, #120	; 0x78
 800969c:	f000 fd46 	bl	800a12c <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80096a0:	2210      	movs	r2, #16
 80096a2:	2100      	movs	r1, #0
 80096a4:	2078      	movs	r0, #120	; 0x78
 80096a6:	f000 fd41 	bl	800a12c <SSD1306_I2C_Write>

		/* Write multi data */
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80096aa:	1dfb      	adds	r3, r7, #7
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	01da      	lsls	r2, r3, #7
 80096b0:	4b08      	ldr	r3, [pc, #32]	; (80096d4 <SSD1306_UpdateScreen+0x64>)
 80096b2:	18d2      	adds	r2, r2, r3
 80096b4:	2380      	movs	r3, #128	; 0x80
 80096b6:	2140      	movs	r1, #64	; 0x40
 80096b8:	2078      	movs	r0, #120	; 0x78
 80096ba:	f000 fcb9 	bl	800a030 <SSD1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80096be:	1dfb      	adds	r3, r7, #7
 80096c0:	781a      	ldrb	r2, [r3, #0]
 80096c2:	1dfb      	adds	r3, r7, #7
 80096c4:	3201      	adds	r2, #1
 80096c6:	701a      	strb	r2, [r3, #0]
 80096c8:	e7d8      	b.n	800967c <SSD1306_UpdateScreen+0xc>
	}
}
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	46bd      	mov	sp, r7
 80096ce:	b002      	add	sp, #8
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	200024c4 	.word	0x200024c4

080096d8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	0002      	movs	r2, r0
 80096e0:	1dfb      	adds	r3, r7, #7
 80096e2:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80096e4:	1dfb      	adds	r3, r7, #7
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <SSD1306_Fill+0x18>
 80096ec:	2100      	movs	r1, #0
 80096ee:	e000      	b.n	80096f2 <SSD1306_Fill+0x1a>
 80096f0:	21ff      	movs	r1, #255	; 0xff
 80096f2:	2380      	movs	r3, #128	; 0x80
 80096f4:	00da      	lsls	r2, r3, #3
 80096f6:	4b04      	ldr	r3, [pc, #16]	; (8009708 <SSD1306_Fill+0x30>)
 80096f8:	0018      	movs	r0, r3
 80096fa:	f000 fd82 	bl	800a202 <memset>
}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	46bd      	mov	sp, r7
 8009702:	b002      	add	sp, #8
 8009704:	bd80      	pop	{r7, pc}
 8009706:	46c0      	nop			; (mov r8, r8)
 8009708:	200024c4 	.word	0x200024c4

0800970c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800970c:	b590      	push	{r4, r7, lr}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	0004      	movs	r4, r0
 8009714:	0008      	movs	r0, r1
 8009716:	0011      	movs	r1, r2
 8009718:	1dbb      	adds	r3, r7, #6
 800971a:	1c22      	adds	r2, r4, #0
 800971c:	801a      	strh	r2, [r3, #0]
 800971e:	1d3b      	adds	r3, r7, #4
 8009720:	1c02      	adds	r2, r0, #0
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	1cfb      	adds	r3, r7, #3
 8009726:	1c0a      	adds	r2, r1, #0
 8009728:	701a      	strb	r2, [r3, #0]
	if (
 800972a:	1dbb      	adds	r3, r7, #6
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	2b7f      	cmp	r3, #127	; 0x7f
 8009730:	d852      	bhi.n	80097d8 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8009732:	1d3b      	adds	r3, r7, #4
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	2b3f      	cmp	r3, #63	; 0x3f
 8009738:	d84e      	bhi.n	80097d8 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800973a:	4b29      	ldr	r3, [pc, #164]	; (80097e0 <SSD1306_DrawPixel+0xd4>)
 800973c:	791b      	ldrb	r3, [r3, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d006      	beq.n	8009750 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8009742:	1cfb      	adds	r3, r7, #3
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	425a      	negs	r2, r3
 8009748:	4153      	adcs	r3, r2
 800974a:	b2da      	uxtb	r2, r3
 800974c:	1cfb      	adds	r3, r7, #3
 800974e:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8009750:	1cfb      	adds	r3, r7, #3
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d11e      	bne.n	8009796 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8009758:	1dbb      	adds	r3, r7, #6
 800975a:	881a      	ldrh	r2, [r3, #0]
 800975c:	1d3b      	adds	r3, r7, #4
 800975e:	881b      	ldrh	r3, [r3, #0]
 8009760:	08db      	lsrs	r3, r3, #3
 8009762:	b298      	uxth	r0, r3
 8009764:	0003      	movs	r3, r0
 8009766:	01db      	lsls	r3, r3, #7
 8009768:	18d3      	adds	r3, r2, r3
 800976a:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <SSD1306_DrawPixel+0xd8>)
 800976c:	5cd3      	ldrb	r3, [r2, r3]
 800976e:	b25a      	sxtb	r2, r3
 8009770:	1d3b      	adds	r3, r7, #4
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	2107      	movs	r1, #7
 8009776:	400b      	ands	r3, r1
 8009778:	2101      	movs	r1, #1
 800977a:	4099      	lsls	r1, r3
 800977c:	000b      	movs	r3, r1
 800977e:	b25b      	sxtb	r3, r3
 8009780:	4313      	orrs	r3, r2
 8009782:	b259      	sxtb	r1, r3
 8009784:	1dbb      	adds	r3, r7, #6
 8009786:	881a      	ldrh	r2, [r3, #0]
 8009788:	0003      	movs	r3, r0
 800978a:	01db      	lsls	r3, r3, #7
 800978c:	18d3      	adds	r3, r2, r3
 800978e:	b2c9      	uxtb	r1, r1
 8009790:	4a14      	ldr	r2, [pc, #80]	; (80097e4 <SSD1306_DrawPixel+0xd8>)
 8009792:	54d1      	strb	r1, [r2, r3]
 8009794:	e021      	b.n	80097da <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8009796:	1dbb      	adds	r3, r7, #6
 8009798:	881a      	ldrh	r2, [r3, #0]
 800979a:	1d3b      	adds	r3, r7, #4
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	08db      	lsrs	r3, r3, #3
 80097a0:	b298      	uxth	r0, r3
 80097a2:	0003      	movs	r3, r0
 80097a4:	01db      	lsls	r3, r3, #7
 80097a6:	18d3      	adds	r3, r2, r3
 80097a8:	4a0e      	ldr	r2, [pc, #56]	; (80097e4 <SSD1306_DrawPixel+0xd8>)
 80097aa:	5cd3      	ldrb	r3, [r2, r3]
 80097ac:	b25b      	sxtb	r3, r3
 80097ae:	1d3a      	adds	r2, r7, #4
 80097b0:	8812      	ldrh	r2, [r2, #0]
 80097b2:	2107      	movs	r1, #7
 80097b4:	400a      	ands	r2, r1
 80097b6:	2101      	movs	r1, #1
 80097b8:	4091      	lsls	r1, r2
 80097ba:	000a      	movs	r2, r1
 80097bc:	b252      	sxtb	r2, r2
 80097be:	43d2      	mvns	r2, r2
 80097c0:	b252      	sxtb	r2, r2
 80097c2:	4013      	ands	r3, r2
 80097c4:	b259      	sxtb	r1, r3
 80097c6:	1dbb      	adds	r3, r7, #6
 80097c8:	881a      	ldrh	r2, [r3, #0]
 80097ca:	0003      	movs	r3, r0
 80097cc:	01db      	lsls	r3, r3, #7
 80097ce:	18d3      	adds	r3, r2, r3
 80097d0:	b2c9      	uxtb	r1, r1
 80097d2:	4a04      	ldr	r2, [pc, #16]	; (80097e4 <SSD1306_DrawPixel+0xd8>)
 80097d4:	54d1      	strb	r1, [r2, r3]
 80097d6:	e000      	b.n	80097da <SSD1306_DrawPixel+0xce>
		return;
 80097d8:	46c0      	nop			; (mov r8, r8)
	}
}
 80097da:	46bd      	mov	sp, r7
 80097dc:	b003      	add	sp, #12
 80097de:	bd90      	pop	{r4, r7, pc}
 80097e0:	200028c4 	.word	0x200028c4
 80097e4:	200024c4 	.word	0x200024c4

080097e8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	0002      	movs	r2, r0
 80097f0:	1dbb      	adds	r3, r7, #6
 80097f2:	801a      	strh	r2, [r3, #0]
 80097f4:	1d3b      	adds	r3, r7, #4
 80097f6:	1c0a      	adds	r2, r1, #0
 80097f8:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x+2;
 80097fa:	1dbb      	adds	r3, r7, #6
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	3302      	adds	r3, #2
 8009800:	b29a      	uxth	r2, r3
 8009802:	4b05      	ldr	r3, [pc, #20]	; (8009818 <SSD1306_GotoXY+0x30>)
 8009804:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8009806:	4b04      	ldr	r3, [pc, #16]	; (8009818 <SSD1306_GotoXY+0x30>)
 8009808:	1d3a      	adds	r2, r7, #4
 800980a:	8812      	ldrh	r2, [r2, #0]
 800980c:	805a      	strh	r2, [r3, #2]
}
 800980e:	46c0      	nop			; (mov r8, r8)
 8009810:	46bd      	mov	sp, r7
 8009812:	b002      	add	sp, #8
 8009814:	bd80      	pop	{r7, pc}
 8009816:	46c0      	nop			; (mov r8, r8)
 8009818:	200028c4 	.word	0x200028c4

0800981c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	6039      	str	r1, [r7, #0]
 8009824:	0011      	movs	r1, r2
 8009826:	1dfb      	adds	r3, r7, #7
 8009828:	1c02      	adds	r2, r0, #0
 800982a:	701a      	strb	r2, [r3, #0]
 800982c:	1dbb      	adds	r3, r7, #6
 800982e:	1c0a      	adds	r2, r1, #0
 8009830:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	FontDef_t* _Font = &*Font ;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	60fb      	str	r3, [r7, #12]
	if( _Font == &Font_5x7){
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	4b7f      	ldr	r3, [pc, #508]	; (8009a38 <SSD1306_Putc+0x21c>)
 800983a:	429a      	cmp	r2, r3
 800983c:	d000      	beq.n	8009840 <SSD1306_Putc+0x24>
 800983e:	e086      	b.n	800994e <SSD1306_Putc+0x132>

		/* Check available space in LCD */
		if (
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8009840:	4b7e      	ldr	r3, [pc, #504]	; (8009a3c <SSD1306_Putc+0x220>)
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	001a      	movs	r2, r3
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	18d3      	adds	r3, r2, r3
		if (
 800984c:	2b7f      	cmp	r3, #127	; 0x7f
 800984e:	dc07      	bgt.n	8009860 <SSD1306_Putc+0x44>
			SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8009850:	4b7a      	ldr	r3, [pc, #488]	; (8009a3c <SSD1306_Putc+0x220>)
 8009852:	885b      	ldrh	r3, [r3, #2]
 8009854:	001a      	movs	r2, r3
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	785b      	ldrb	r3, [r3, #1]
 800985a:	18d3      	adds	r3, r2, r3
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800985c:	2b3f      	cmp	r3, #63	; 0x3f
 800985e:	dd01      	ble.n	8009864 <SSD1306_Putc+0x48>
		) {
			/* Error */
			return 0;
 8009860:	2300      	movs	r3, #0
 8009862:	e0e5      	b.n	8009a30 <SSD1306_Putc+0x214>
		}

		/* Go through font */
		for (i = 0; i < Font->FontHeight; i++) {
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	001a      	movs	r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	4293      	cmp	r3, r2
 8009872:	d253      	bcs.n	800991c <SSD1306_Putc+0x100>
			b = Font->data[(ch - 32) * Font->FontHeight + i];
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	1dfb      	adds	r3, r7, #7
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	3b20      	subs	r3, #32
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	7849      	ldrb	r1, [r1, #1]
 8009882:	434b      	muls	r3, r1
 8009884:	0019      	movs	r1, r3
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	18cb      	adds	r3, r1, r3
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	18d3      	adds	r3, r2, r3
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	60bb      	str	r3, [r7, #8]

			for (j = Font->FontWidth; j > 0; j--) {
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	613b      	str	r3, [r7, #16]
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d03a      	beq.n	8009914 <SSD1306_Putc+0xf8>

				if ((b << j) & 0x8000) {
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	409a      	lsls	r2, r3
 80098a4:	2380      	movs	r3, #128	; 0x80
 80098a6:	021b      	lsls	r3, r3, #8
 80098a8:	4013      	ands	r3, r2
 80098aa:	d016      	beq.n	80098da <SSD1306_Putc+0xbe>
					SSD1306_DrawPixel(SSD1306.CurrentX + i, (SSD1306.CurrentY + (Font->FontWidth -j)), (SSD1306_COLOR_t) color);
 80098ac:	4b63      	ldr	r3, [pc, #396]	; (8009a3c <SSD1306_Putc+0x220>)
 80098ae:	881a      	ldrh	r2, [r3, #0]
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	18d3      	adds	r3, r2, r3
 80098b6:	b298      	uxth	r0, r3
 80098b8:	4b60      	ldr	r3, [pc, #384]	; (8009a3c <SSD1306_Putc+0x220>)
 80098ba:	885a      	ldrh	r2, [r3, #2]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	b299      	uxth	r1, r3
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	1acb      	subs	r3, r1, r3
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	18d3      	adds	r3, r2, r3
 80098cc:	b299      	uxth	r1, r3
 80098ce:	1dbb      	adds	r3, r7, #6
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	001a      	movs	r2, r3
 80098d4:	f7ff ff1a 	bl	800970c <SSD1306_DrawPixel>
 80098d8:	e018      	b.n	800990c <SSD1306_Putc+0xf0>
				} else {
					SSD1306_DrawPixel(SSD1306.CurrentX + i, (SSD1306.CurrentY + (Font->FontWidth -j)), (SSD1306_COLOR_t)!color);
 80098da:	4b58      	ldr	r3, [pc, #352]	; (8009a3c <SSD1306_Putc+0x220>)
 80098dc:	881a      	ldrh	r2, [r3, #0]
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	18d3      	adds	r3, r2, r3
 80098e4:	b298      	uxth	r0, r3
 80098e6:	4b55      	ldr	r3, [pc, #340]	; (8009a3c <SSD1306_Putc+0x220>)
 80098e8:	885a      	ldrh	r2, [r3, #2]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	b299      	uxth	r1, r3
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	1acb      	subs	r3, r1, r3
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	18d3      	adds	r3, r2, r3
 80098fa:	b299      	uxth	r1, r3
 80098fc:	1dbb      	adds	r3, r7, #6
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	425a      	negs	r2, r3
 8009902:	4153      	adcs	r3, r2
 8009904:	b2db      	uxtb	r3, r3
 8009906:	001a      	movs	r2, r3
 8009908:	f7ff ff00 	bl	800970c <SSD1306_DrawPixel>
			for (j = Font->FontWidth; j > 0; j--) {
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	3b01      	subs	r3, #1
 8009910:	613b      	str	r3, [r7, #16]
 8009912:	e7c1      	b.n	8009898 <SSD1306_Putc+0x7c>
		for (i = 0; i < Font->FontHeight; i++) {
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	3301      	adds	r3, #1
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	e7a5      	b.n	8009868 <SSD1306_Putc+0x4c>
				}
			}
		}

		/* Increase pointer */
		if( ch == ' '){
 800991c:	1dfb      	adds	r3, r7, #7
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b20      	cmp	r3, #32
 8009922:	d106      	bne.n	8009932 <SSD1306_Putc+0x116>
			SSD1306.CurrentX += 4;
 8009924:	4b45      	ldr	r3, [pc, #276]	; (8009a3c <SSD1306_Putc+0x220>)
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	3304      	adds	r3, #4
 800992a:	b29a      	uxth	r2, r3
 800992c:	4b43      	ldr	r3, [pc, #268]	; (8009a3c <SSD1306_Putc+0x220>)
 800992e:	801a      	strh	r2, [r3, #0]
 8009930:	e00a      	b.n	8009948 <SSD1306_Putc+0x12c>
		}else{
			SSD1306.CurrentX += Font->FontHeight + 1;
 8009932:	4b42      	ldr	r3, [pc, #264]	; (8009a3c <SSD1306_Putc+0x220>)
 8009934:	881a      	ldrh	r2, [r3, #0]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	785b      	ldrb	r3, [r3, #1]
 800993a:	b29b      	uxth	r3, r3
 800993c:	18d3      	adds	r3, r2, r3
 800993e:	b29b      	uxth	r3, r3
 8009940:	3301      	adds	r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	4b3d      	ldr	r3, [pc, #244]	; (8009a3c <SSD1306_Putc+0x220>)
 8009946:	801a      	strh	r2, [r3, #0]
		}

		/* Return character written */
		return ch;
 8009948:	1dfb      	adds	r3, r7, #7
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	e070      	b.n	8009a30 <SSD1306_Putc+0x214>
	}
	else{
		/* Check available space in LCD */
		if (
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800994e:	4b3b      	ldr	r3, [pc, #236]	; (8009a3c <SSD1306_Putc+0x220>)
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	001a      	movs	r2, r3
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	18d3      	adds	r3, r2, r3
		if (
 800995a:	2b7f      	cmp	r3, #127	; 0x7f
 800995c:	dc07      	bgt.n	800996e <SSD1306_Putc+0x152>
			SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800995e:	4b37      	ldr	r3, [pc, #220]	; (8009a3c <SSD1306_Putc+0x220>)
 8009960:	885b      	ldrh	r3, [r3, #2]
 8009962:	001a      	movs	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	785b      	ldrb	r3, [r3, #1]
 8009968:	18d3      	adds	r3, r2, r3
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800996a:	2b3f      	cmp	r3, #63	; 0x3f
 800996c:	dd01      	ble.n	8009972 <SSD1306_Putc+0x156>
		) {
			/* Error */
			return 0;
 800996e:	2300      	movs	r3, #0
 8009970:	e05e      	b.n	8009a30 <SSD1306_Putc+0x214>
		}

		/* Go through font */
		for (i = 0; i < Font->FontHeight; i++) {
 8009972:	2300      	movs	r3, #0
 8009974:	617b      	str	r3, [r7, #20]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	001a      	movs	r2, r3
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	4293      	cmp	r3, r2
 8009980:	d24b      	bcs.n	8009a1a <SSD1306_Putc+0x1fe>
			b = Font->data[(ch - 32) * Font->FontHeight + i];
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	1dfb      	adds	r3, r7, #7
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	3b20      	subs	r3, #32
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	7849      	ldrb	r1, [r1, #1]
 8009990:	434b      	muls	r3, r1
 8009992:	0019      	movs	r1, r3
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	18cb      	adds	r3, r1, r3
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	18d3      	adds	r3, r2, r3
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	60bb      	str	r3, [r7, #8]
			for (j = 0; j < Font->FontWidth; j++) {
 80099a0:	2300      	movs	r3, #0
 80099a2:	613b      	str	r3, [r7, #16]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	001a      	movs	r2, r3
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d230      	bcs.n	8009a12 <SSD1306_Putc+0x1f6>
				if ((b << j) & 0x8000) {
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	409a      	lsls	r2, r3
 80099b6:	2380      	movs	r3, #128	; 0x80
 80099b8:	021b      	lsls	r3, r3, #8
 80099ba:	4013      	ands	r3, r2
 80099bc:	d011      	beq.n	80099e2 <SSD1306_Putc+0x1c6>
					SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80099be:	4b1f      	ldr	r3, [pc, #124]	; (8009a3c <SSD1306_Putc+0x220>)
 80099c0:	881a      	ldrh	r2, [r3, #0]
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	18d3      	adds	r3, r2, r3
 80099c8:	b298      	uxth	r0, r3
 80099ca:	4b1c      	ldr	r3, [pc, #112]	; (8009a3c <SSD1306_Putc+0x220>)
 80099cc:	885a      	ldrh	r2, [r3, #2]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	18d3      	adds	r3, r2, r3
 80099d4:	b299      	uxth	r1, r3
 80099d6:	1dbb      	adds	r3, r7, #6
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	001a      	movs	r2, r3
 80099dc:	f7ff fe96 	bl	800970c <SSD1306_DrawPixel>
 80099e0:	e013      	b.n	8009a0a <SSD1306_Putc+0x1ee>
				} else {
					SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80099e2:	4b16      	ldr	r3, [pc, #88]	; (8009a3c <SSD1306_Putc+0x220>)
 80099e4:	881a      	ldrh	r2, [r3, #0]
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	18d3      	adds	r3, r2, r3
 80099ec:	b298      	uxth	r0, r3
 80099ee:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <SSD1306_Putc+0x220>)
 80099f0:	885a      	ldrh	r2, [r3, #2]
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	18d3      	adds	r3, r2, r3
 80099f8:	b299      	uxth	r1, r3
 80099fa:	1dbb      	adds	r3, r7, #6
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	425a      	negs	r2, r3
 8009a00:	4153      	adcs	r3, r2
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	001a      	movs	r2, r3
 8009a06:	f7ff fe81 	bl	800970c <SSD1306_DrawPixel>
			for (j = 0; j < Font->FontWidth; j++) {
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	613b      	str	r3, [r7, #16]
 8009a10:	e7c8      	b.n	80099a4 <SSD1306_Putc+0x188>
		for (i = 0; i < Font->FontHeight; i++) {
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	3301      	adds	r3, #1
 8009a16:	617b      	str	r3, [r7, #20]
 8009a18:	e7ad      	b.n	8009976 <SSD1306_Putc+0x15a>
				}
			}
		}

		/* Increase pointer */
		SSD1306.CurrentX += Font->FontWidth;
 8009a1a:	4b08      	ldr	r3, [pc, #32]	; (8009a3c <SSD1306_Putc+0x220>)
 8009a1c:	881a      	ldrh	r2, [r3, #0]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	18d3      	adds	r3, r2, r3
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <SSD1306_Putc+0x220>)
 8009a2a:	801a      	strh	r2, [r3, #0]

		/* Return character written */
		return ch;
 8009a2c:	1dfb      	adds	r3, r7, #7
 8009a2e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8009a30:	0018      	movs	r0, r3
 8009a32:	46bd      	mov	sp, r7
 8009a34:	b006      	add	sp, #24
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	2000003c 	.word	0x2000003c
 8009a3c:	200028c4 	.word	0x200028c4

08009a40 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	1dfb      	adds	r3, r7, #7
 8009a4c:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d018      	beq.n	8009a88 <SSD1306_Puts+0x48>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	7818      	ldrb	r0, [r3, #0]
 8009a5a:	1dfb      	adds	r3, r7, #7
 8009a5c:	781a      	ldrb	r2, [r3, #0]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	0019      	movs	r1, r3
 8009a62:	f7ff fedb 	bl	800981c <SSD1306_Putc>
 8009a66:	0003      	movs	r3, r0
 8009a68:	001a      	movs	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	1e5a      	subs	r2, r3, #1
 8009a72:	4193      	sbcs	r3, r2
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <SSD1306_Puts+0x40>
			/* Return error */
			return *str;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	e005      	b.n	8009a8c <SSD1306_Puts+0x4c>
		}

		/* Increase string pointer */
		str++;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3301      	adds	r3, #1
 8009a84:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8009a86:	e7e2      	b.n	8009a4e <SSD1306_Puts+0xe>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
}
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	b004      	add	sp, #16
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <SSD1306_Putstring>:
// Hàm viết chữ theo các dòng trên Oled và không tính dòng header
char SSD1306_Putstring(int line,int x, char* str, FontDef_t* Font, SSD1306_COLOR_t color){
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]
	switch(line){
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d011      	beq.n	8009acc <SSD1306_Putstring+0x38>
 8009aa8:	dc02      	bgt.n	8009ab0 <SSD1306_Putstring+0x1c>
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d005      	beq.n	8009aba <SSD1306_Putstring+0x26>
 8009aae:	e028      	b.n	8009b02 <SSD1306_Putstring+0x6e>
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d014      	beq.n	8009ade <SSD1306_Putstring+0x4a>
 8009ab4:	2b04      	cmp	r3, #4
 8009ab6:	d01b      	beq.n	8009af0 <SSD1306_Putstring+0x5c>
 8009ab8:	e023      	b.n	8009b02 <SSD1306_Putstring+0x6e>
		case 1:
			// Xóa dữ liệu cũ dòng 1 và đưa đến vị trí để hiện chữ lên dòng 1
			SSD1306_Clear_Activity();
 8009aba:	f000 fa76 	bl	8009faa <SSD1306_Clear_Activity>
			SSD1306_GotoXY(x, 17);
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	2111      	movs	r1, #17
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f7ff fe8f 	bl	80097e8 <SSD1306_GotoXY>
			break;
 8009aca:	e01a      	b.n	8009b02 <SSD1306_Putstring+0x6e>
		case 2:
			// Xóa dữ liệu cũ dòng 2 và đưa đến vị trí để hiện chữ lên dòng 2
			SSD1306_Clear_Status1();
 8009acc:	f000 fa7d 	bl	8009fca <SSD1306_Clear_Status1>
			SSD1306_GotoXY(x, 29);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	211d      	movs	r1, #29
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f7ff fe86 	bl	80097e8 <SSD1306_GotoXY>
			break;
 8009adc:	e011      	b.n	8009b02 <SSD1306_Putstring+0x6e>
		case 3:
			// Xóa dữ liệu cũ dòng 3 và đưa đến vị trí để hiện chữ lên dòng 3
			SSD1306_Clear_Status2();
 8009ade:	f000 fa84 	bl	8009fea <SSD1306_Clear_Status2>
			SSD1306_GotoXY(x, 42);
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	212a      	movs	r1, #42	; 0x2a
 8009ae8:	0018      	movs	r0, r3
 8009aea:	f7ff fe7d 	bl	80097e8 <SSD1306_GotoXY>
			break;
 8009aee:	e008      	b.n	8009b02 <SSD1306_Putstring+0x6e>
		case 4:
			// Xóa dữ liệu cũ dòng 4 và đưa đến vị trí để hiện chữ lên dòng 4
			SSD1306_Clear_Bottom();
 8009af0:	f000 fa4b 	bl	8009f8a <SSD1306_Clear_Bottom>
			SSD1306_GotoXY(x, 54);
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2136      	movs	r1, #54	; 0x36
 8009afa:	0018      	movs	r0, r3
 8009afc:	f7ff fe74 	bl	80097e8 <SSD1306_GotoXY>
			break;
 8009b00:	46c0      	nop			; (mov r8, r8)
	}
	SSD1306_Puts (str, Font, color);
 8009b02:	2318      	movs	r3, #24
 8009b04:	18fb      	adds	r3, r7, r3
 8009b06:	781a      	ldrb	r2, [r3, #0]
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	f7ff ff97 	bl	8009a40 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8009b12:	f7ff fdad 	bl	8009670 <SSD1306_UpdateScreen>
	return *str;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	781b      	ldrb	r3, [r3, #0]
}
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	b004      	add	sp, #16
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8009b22:	b5b0      	push	{r4, r5, r7, lr}
 8009b24:	b086      	sub	sp, #24
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	0005      	movs	r5, r0
 8009b2a:	000c      	movs	r4, r1
 8009b2c:	0010      	movs	r0, r2
 8009b2e:	0019      	movs	r1, r3
 8009b30:	1dbb      	adds	r3, r7, #6
 8009b32:	1c2a      	adds	r2, r5, #0
 8009b34:	801a      	strh	r2, [r3, #0]
 8009b36:	1d3b      	adds	r3, r7, #4
 8009b38:	1c22      	adds	r2, r4, #0
 8009b3a:	801a      	strh	r2, [r3, #0]
 8009b3c:	1cbb      	adds	r3, r7, #2
 8009b3e:	1c02      	adds	r2, r0, #0
 8009b40:	801a      	strh	r2, [r3, #0]
 8009b42:	003b      	movs	r3, r7
 8009b44:	1c0a      	adds	r2, r1, #0
 8009b46:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8009b48:	1dbb      	adds	r3, r7, #6
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8009b4e:	d902      	bls.n	8009b56 <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 8009b50:	1dbb      	adds	r3, r7, #6
 8009b52:	227f      	movs	r2, #127	; 0x7f
 8009b54:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 8009b56:	1cbb      	adds	r3, r7, #2
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b5c:	d902      	bls.n	8009b64 <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 8009b5e:	1cbb      	adds	r3, r7, #2
 8009b60:	227f      	movs	r2, #127	; 0x7f
 8009b62:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8009b64:	1d3b      	adds	r3, r7, #4
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	2b3f      	cmp	r3, #63	; 0x3f
 8009b6a:	d902      	bls.n	8009b72 <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 8009b6c:	1d3b      	adds	r3, r7, #4
 8009b6e:	223f      	movs	r2, #63	; 0x3f
 8009b70:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8009b72:	003b      	movs	r3, r7
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	2b3f      	cmp	r3, #63	; 0x3f
 8009b78:	d902      	bls.n	8009b80 <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 8009b7a:	003b      	movs	r3, r7
 8009b7c:	223f      	movs	r2, #63	; 0x3f
 8009b7e:	801a      	strh	r2, [r3, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8009b80:	1dba      	adds	r2, r7, #6
 8009b82:	1cbb      	adds	r3, r7, #2
 8009b84:	8812      	ldrh	r2, [r2, #0]
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d207      	bcs.n	8009b9c <SSD1306_DrawLine+0x7a>
 8009b8c:	1cba      	adds	r2, r7, #2
 8009b8e:	1dbb      	adds	r3, r7, #6
 8009b90:	8812      	ldrh	r2, [r2, #0]
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	b21b      	sxth	r3, r3
 8009b9a:	e006      	b.n	8009baa <SSD1306_DrawLine+0x88>
 8009b9c:	1dba      	adds	r2, r7, #6
 8009b9e:	1cbb      	adds	r3, r7, #2
 8009ba0:	8812      	ldrh	r2, [r2, #0]
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	b21b      	sxth	r3, r3
 8009baa:	2212      	movs	r2, #18
 8009bac:	18ba      	adds	r2, r7, r2
 8009bae:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8009bb0:	1d3a      	adds	r2, r7, #4
 8009bb2:	003b      	movs	r3, r7
 8009bb4:	8812      	ldrh	r2, [r2, #0]
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d207      	bcs.n	8009bcc <SSD1306_DrawLine+0xaa>
 8009bbc:	003a      	movs	r2, r7
 8009bbe:	1d3b      	adds	r3, r7, #4
 8009bc0:	8812      	ldrh	r2, [r2, #0]
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	b21b      	sxth	r3, r3
 8009bca:	e006      	b.n	8009bda <SSD1306_DrawLine+0xb8>
 8009bcc:	1d3a      	adds	r2, r7, #4
 8009bce:	003b      	movs	r3, r7
 8009bd0:	8812      	ldrh	r2, [r2, #0]
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	b21b      	sxth	r3, r3
 8009bda:	2210      	movs	r2, #16
 8009bdc:	18ba      	adds	r2, r7, r2
 8009bde:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1;
 8009be0:	1dba      	adds	r2, r7, #6
 8009be2:	1cbb      	adds	r3, r7, #2
 8009be4:	8812      	ldrh	r2, [r2, #0]
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d201      	bcs.n	8009bf0 <SSD1306_DrawLine+0xce>
 8009bec:	2201      	movs	r2, #1
 8009bee:	e001      	b.n	8009bf4 <SSD1306_DrawLine+0xd2>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	425a      	negs	r2, r3
 8009bf4:	230e      	movs	r3, #14
 8009bf6:	18fb      	adds	r3, r7, r3
 8009bf8:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1;
 8009bfa:	1d3a      	adds	r2, r7, #4
 8009bfc:	003b      	movs	r3, r7
 8009bfe:	8812      	ldrh	r2, [r2, #0]
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d201      	bcs.n	8009c0a <SSD1306_DrawLine+0xe8>
 8009c06:	2201      	movs	r2, #1
 8009c08:	e001      	b.n	8009c0e <SSD1306_DrawLine+0xec>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	425a      	negs	r2, r3
 8009c0e:	230c      	movs	r3, #12
 8009c10:	18fb      	adds	r3, r7, r3
 8009c12:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2;
 8009c14:	2312      	movs	r3, #18
 8009c16:	18fa      	adds	r2, r7, r3
 8009c18:	2310      	movs	r3, #16
 8009c1a:	18fb      	adds	r3, r7, r3
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	5e52      	ldrsh	r2, [r2, r1]
 8009c20:	2100      	movs	r1, #0
 8009c22:	5e5b      	ldrsh	r3, [r3, r1]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	dd09      	ble.n	8009c3c <SSD1306_DrawLine+0x11a>
 8009c28:	2312      	movs	r3, #18
 8009c2a:	18fb      	adds	r3, r7, r3
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	5e9b      	ldrsh	r3, [r3, r2]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	da00      	bge.n	8009c36 <SSD1306_DrawLine+0x114>
 8009c34:	3301      	adds	r3, #1
 8009c36:	105b      	asrs	r3, r3, #1
 8009c38:	b21b      	sxth	r3, r3
 8009c3a:	e009      	b.n	8009c50 <SSD1306_DrawLine+0x12e>
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	18fb      	adds	r3, r7, r3
 8009c40:	2200      	movs	r2, #0
 8009c42:	5e9b      	ldrsh	r3, [r3, r2]
 8009c44:	425b      	negs	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	da00      	bge.n	8009c4c <SSD1306_DrawLine+0x12a>
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	105b      	asrs	r3, r3, #1
 8009c4e:	b21b      	sxth	r3, r3
 8009c50:	2216      	movs	r2, #22
 8009c52:	18ba      	adds	r2, r7, r2
 8009c54:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 8009c56:	2312      	movs	r3, #18
 8009c58:	18fb      	adds	r3, r7, r3
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	5e9b      	ldrsh	r3, [r3, r2]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d149      	bne.n	8009cf6 <SSD1306_DrawLine+0x1d4>
		if (y1 < y0) {
 8009c62:	003a      	movs	r2, r7
 8009c64:	1d3b      	adds	r3, r7, #4
 8009c66:	8812      	ldrh	r2, [r2, #0]
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d20c      	bcs.n	8009c88 <SSD1306_DrawLine+0x166>
			tmp = y1;
 8009c6e:	2108      	movs	r1, #8
 8009c70:	187b      	adds	r3, r7, r1
 8009c72:	003a      	movs	r2, r7
 8009c74:	8812      	ldrh	r2, [r2, #0]
 8009c76:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 8009c78:	003b      	movs	r3, r7
 8009c7a:	1d3a      	adds	r2, r7, #4
 8009c7c:	8812      	ldrh	r2, [r2, #0]
 8009c7e:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 8009c80:	1d3b      	adds	r3, r7, #4
 8009c82:	187a      	adds	r2, r7, r1
 8009c84:	8812      	ldrh	r2, [r2, #0]
 8009c86:	801a      	strh	r2, [r3, #0]
		}

		if (x1 < x0) {
 8009c88:	1cba      	adds	r2, r7, #2
 8009c8a:	1dbb      	adds	r3, r7, #6
 8009c8c:	8812      	ldrh	r2, [r2, #0]
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d20c      	bcs.n	8009cae <SSD1306_DrawLine+0x18c>
			tmp = x1;
 8009c94:	2108      	movs	r1, #8
 8009c96:	187b      	adds	r3, r7, r1
 8009c98:	1cba      	adds	r2, r7, #2
 8009c9a:	8812      	ldrh	r2, [r2, #0]
 8009c9c:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 8009c9e:	1cbb      	adds	r3, r7, #2
 8009ca0:	1dba      	adds	r2, r7, #6
 8009ca2:	8812      	ldrh	r2, [r2, #0]
 8009ca4:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 8009ca6:	1dbb      	adds	r3, r7, #6
 8009ca8:	187a      	adds	r2, r7, r1
 8009caa:	8812      	ldrh	r2, [r2, #0]
 8009cac:	801a      	strh	r2, [r3, #0]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8009cae:	2314      	movs	r3, #20
 8009cb0:	18fb      	adds	r3, r7, r3
 8009cb2:	1d3a      	adds	r2, r7, #4
 8009cb4:	8812      	ldrh	r2, [r2, #0]
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	2314      	movs	r3, #20
 8009cba:	18fb      	adds	r3, r7, r3
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	5e9a      	ldrsh	r2, [r3, r2]
 8009cc0:	003b      	movs	r3, r7
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	dd00      	ble.n	8009cca <SSD1306_DrawLine+0x1a8>
 8009cc8:	e0ba      	b.n	8009e40 <SSD1306_DrawLine+0x31e>
			SSD1306_DrawPixel(x0, i, c);
 8009cca:	2114      	movs	r1, #20
 8009ccc:	000c      	movs	r4, r1
 8009cce:	187b      	adds	r3, r7, r1
 8009cd0:	8819      	ldrh	r1, [r3, #0]
 8009cd2:	2328      	movs	r3, #40	; 0x28
 8009cd4:	18fb      	adds	r3, r7, r3
 8009cd6:	781a      	ldrb	r2, [r3, #0]
 8009cd8:	1dbb      	adds	r3, r7, #6
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f7ff fd15 	bl	800970c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8009ce2:	0021      	movs	r1, r4
 8009ce4:	187b      	adds	r3, r7, r1
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	5e9b      	ldrsh	r3, [r3, r2]
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	3301      	adds	r3, #1
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	187b      	adds	r3, r7, r1
 8009cf2:	801a      	strh	r2, [r3, #0]
 8009cf4:	e7e0      	b.n	8009cb8 <SSD1306_DrawLine+0x196>

		/* Return from function */
		return;
	}

	if (dy == 0) {
 8009cf6:	2310      	movs	r3, #16
 8009cf8:	18fb      	adds	r3, r7, r3
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	5e9b      	ldrsh	r3, [r3, r2]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d149      	bne.n	8009d96 <SSD1306_DrawLine+0x274>
		if (y1 < y0) {
 8009d02:	003a      	movs	r2, r7
 8009d04:	1d3b      	adds	r3, r7, #4
 8009d06:	8812      	ldrh	r2, [r2, #0]
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d20c      	bcs.n	8009d28 <SSD1306_DrawLine+0x206>
			tmp = y1;
 8009d0e:	2108      	movs	r1, #8
 8009d10:	187b      	adds	r3, r7, r1
 8009d12:	003a      	movs	r2, r7
 8009d14:	8812      	ldrh	r2, [r2, #0]
 8009d16:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 8009d18:	003b      	movs	r3, r7
 8009d1a:	1d3a      	adds	r2, r7, #4
 8009d1c:	8812      	ldrh	r2, [r2, #0]
 8009d1e:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 8009d20:	1d3b      	adds	r3, r7, #4
 8009d22:	187a      	adds	r2, r7, r1
 8009d24:	8812      	ldrh	r2, [r2, #0]
 8009d26:	801a      	strh	r2, [r3, #0]
		}

		if (x1 < x0) {
 8009d28:	1cba      	adds	r2, r7, #2
 8009d2a:	1dbb      	adds	r3, r7, #6
 8009d2c:	8812      	ldrh	r2, [r2, #0]
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d20c      	bcs.n	8009d4e <SSD1306_DrawLine+0x22c>
			tmp = x1;
 8009d34:	2108      	movs	r1, #8
 8009d36:	187b      	adds	r3, r7, r1
 8009d38:	1cba      	adds	r2, r7, #2
 8009d3a:	8812      	ldrh	r2, [r2, #0]
 8009d3c:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 8009d3e:	1cbb      	adds	r3, r7, #2
 8009d40:	1dba      	adds	r2, r7, #6
 8009d42:	8812      	ldrh	r2, [r2, #0]
 8009d44:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 8009d46:	1dbb      	adds	r3, r7, #6
 8009d48:	187a      	adds	r2, r7, r1
 8009d4a:	8812      	ldrh	r2, [r2, #0]
 8009d4c:	801a      	strh	r2, [r3, #0]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8009d4e:	2314      	movs	r3, #20
 8009d50:	18fb      	adds	r3, r7, r3
 8009d52:	1dba      	adds	r2, r7, #6
 8009d54:	8812      	ldrh	r2, [r2, #0]
 8009d56:	801a      	strh	r2, [r3, #0]
 8009d58:	2314      	movs	r3, #20
 8009d5a:	18fb      	adds	r3, r7, r3
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	5e9a      	ldrsh	r2, [r3, r2]
 8009d60:	1cbb      	adds	r3, r7, #2
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	dd00      	ble.n	8009d6a <SSD1306_DrawLine+0x248>
 8009d68:	e06c      	b.n	8009e44 <SSD1306_DrawLine+0x322>
			SSD1306_DrawPixel(i, y0, c);
 8009d6a:	2114      	movs	r1, #20
 8009d6c:	000c      	movs	r4, r1
 8009d6e:	187b      	adds	r3, r7, r1
 8009d70:	8818      	ldrh	r0, [r3, #0]
 8009d72:	2328      	movs	r3, #40	; 0x28
 8009d74:	18fb      	adds	r3, r7, r3
 8009d76:	781a      	ldrb	r2, [r3, #0]
 8009d78:	1d3b      	adds	r3, r7, #4
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	0019      	movs	r1, r3
 8009d7e:	f7ff fcc5 	bl	800970c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8009d82:	0021      	movs	r1, r4
 8009d84:	187b      	adds	r3, r7, r1
 8009d86:	2200      	movs	r2, #0
 8009d88:	5e9b      	ldrsh	r3, [r3, r2]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	187b      	adds	r3, r7, r1
 8009d92:	801a      	strh	r2, [r3, #0]
 8009d94:	e7e0      	b.n	8009d58 <SSD1306_DrawLine+0x236>
		/* Return from function */
		return;
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8009d96:	2328      	movs	r3, #40	; 0x28
 8009d98:	18fb      	adds	r3, r7, r3
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	1d3b      	adds	r3, r7, #4
 8009d9e:	8819      	ldrh	r1, [r3, #0]
 8009da0:	1dbb      	adds	r3, r7, #6
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	0018      	movs	r0, r3
 8009da6:	f7ff fcb1 	bl	800970c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8009daa:	1dba      	adds	r2, r7, #6
 8009dac:	1cbb      	adds	r3, r7, #2
 8009dae:	8812      	ldrh	r2, [r2, #0]
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d105      	bne.n	8009dc2 <SSD1306_DrawLine+0x2a0>
 8009db6:	1d3a      	adds	r2, r7, #4
 8009db8:	003b      	movs	r3, r7
 8009dba:	8812      	ldrh	r2, [r2, #0]
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d042      	beq.n	8009e48 <SSD1306_DrawLine+0x326>
			break;
		}
		e2 = err;
 8009dc2:	210a      	movs	r1, #10
 8009dc4:	187b      	adds	r3, r7, r1
 8009dc6:	2216      	movs	r2, #22
 8009dc8:	18ba      	adds	r2, r7, r2
 8009dca:	8812      	ldrh	r2, [r2, #0]
 8009dcc:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 8009dce:	187b      	adds	r3, r7, r1
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	5e9a      	ldrsh	r2, [r3, r2]
 8009dd4:	2312      	movs	r3, #18
 8009dd6:	18fb      	adds	r3, r7, r3
 8009dd8:	2100      	movs	r1, #0
 8009dda:	5e5b      	ldrsh	r3, [r3, r1]
 8009ddc:	425b      	negs	r3, r3
 8009dde:	429a      	cmp	r2, r3
 8009de0:	dd11      	ble.n	8009e06 <SSD1306_DrawLine+0x2e4>
			err -= dy;
 8009de2:	2116      	movs	r1, #22
 8009de4:	187b      	adds	r3, r7, r1
 8009de6:	881a      	ldrh	r2, [r3, #0]
 8009de8:	2310      	movs	r3, #16
 8009dea:	18fb      	adds	r3, r7, r3
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	187b      	adds	r3, r7, r1
 8009df4:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 8009df6:	230e      	movs	r3, #14
 8009df8:	18fb      	adds	r3, r7, r3
 8009dfa:	8819      	ldrh	r1, [r3, #0]
 8009dfc:	1dbb      	adds	r3, r7, #6
 8009dfe:	1dba      	adds	r2, r7, #6
 8009e00:	8812      	ldrh	r2, [r2, #0]
 8009e02:	188a      	adds	r2, r1, r2
 8009e04:	801a      	strh	r2, [r3, #0]
		}
		if (e2 < dy) {
 8009e06:	230a      	movs	r3, #10
 8009e08:	18fa      	adds	r2, r7, r3
 8009e0a:	2310      	movs	r3, #16
 8009e0c:	18fb      	adds	r3, r7, r3
 8009e0e:	2100      	movs	r1, #0
 8009e10:	5e52      	ldrsh	r2, [r2, r1]
 8009e12:	2100      	movs	r1, #0
 8009e14:	5e5b      	ldrsh	r3, [r3, r1]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	dabd      	bge.n	8009d96 <SSD1306_DrawLine+0x274>
			err += dx;
 8009e1a:	2116      	movs	r1, #22
 8009e1c:	187b      	adds	r3, r7, r1
 8009e1e:	881a      	ldrh	r2, [r3, #0]
 8009e20:	2312      	movs	r3, #18
 8009e22:	18fb      	adds	r3, r7, r3
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	18d3      	adds	r3, r2, r3
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	187b      	adds	r3, r7, r1
 8009e2c:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 8009e2e:	230c      	movs	r3, #12
 8009e30:	18fb      	adds	r3, r7, r3
 8009e32:	8819      	ldrh	r1, [r3, #0]
 8009e34:	1d3b      	adds	r3, r7, #4
 8009e36:	1d3a      	adds	r2, r7, #4
 8009e38:	8812      	ldrh	r2, [r2, #0]
 8009e3a:	188a      	adds	r2, r1, r2
 8009e3c:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 8009e3e:	e7aa      	b.n	8009d96 <SSD1306_DrawLine+0x274>
		return;
 8009e40:	46c0      	nop			; (mov r8, r8)
 8009e42:	e002      	b.n	8009e4a <SSD1306_DrawLine+0x328>
		return;
 8009e44:	46c0      	nop			; (mov r8, r8)
 8009e46:	e000      	b.n	8009e4a <SSD1306_DrawLine+0x328>
			break;
 8009e48:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	b006      	add	sp, #24
 8009e4e:	bdb0      	pop	{r4, r5, r7, pc}

08009e50 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8009e50:	b5b0      	push	{r4, r5, r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af02      	add	r7, sp, #8
 8009e56:	0005      	movs	r5, r0
 8009e58:	000c      	movs	r4, r1
 8009e5a:	0010      	movs	r0, r2
 8009e5c:	0019      	movs	r1, r3
 8009e5e:	1dbb      	adds	r3, r7, #6
 8009e60:	1c2a      	adds	r2, r5, #0
 8009e62:	801a      	strh	r2, [r3, #0]
 8009e64:	1d3b      	adds	r3, r7, #4
 8009e66:	1c22      	adds	r2, r4, #0
 8009e68:	801a      	strh	r2, [r3, #0]
 8009e6a:	1cbb      	adds	r3, r7, #2
 8009e6c:	1c02      	adds	r2, r0, #0
 8009e6e:	801a      	strh	r2, [r3, #0]
 8009e70:	003b      	movs	r3, r7
 8009e72:	1c0a      	adds	r2, r1, #0
 8009e74:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8009e76:	1dbb      	adds	r3, r7, #6
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8009e7c:	d84f      	bhi.n	8009f1e <SSD1306_DrawFilledRectangle+0xce>
		x >= SSD1306_WIDTH ||
 8009e7e:	1d3b      	adds	r3, r7, #4
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	2b3f      	cmp	r3, #63	; 0x3f
 8009e84:	d84b      	bhi.n	8009f1e <SSD1306_DrawFilledRectangle+0xce>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8009e86:	1dbb      	adds	r3, r7, #6
 8009e88:	881a      	ldrh	r2, [r3, #0]
 8009e8a:	1cbb      	adds	r3, r7, #2
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	18d3      	adds	r3, r2, r3
 8009e90:	2b7f      	cmp	r3, #127	; 0x7f
 8009e92:	dd05      	ble.n	8009ea0 <SSD1306_DrawFilledRectangle+0x50>
		w = SSD1306_WIDTH - x;
 8009e94:	1cbb      	adds	r3, r7, #2
 8009e96:	1dba      	adds	r2, r7, #6
 8009e98:	8812      	ldrh	r2, [r2, #0]
 8009e9a:	2180      	movs	r1, #128	; 0x80
 8009e9c:	1a8a      	subs	r2, r1, r2
 8009e9e:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8009ea0:	1d3b      	adds	r3, r7, #4
 8009ea2:	881a      	ldrh	r2, [r3, #0]
 8009ea4:	003b      	movs	r3, r7
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	18d3      	adds	r3, r2, r3
 8009eaa:	2b3f      	cmp	r3, #63	; 0x3f
 8009eac:	dd05      	ble.n	8009eba <SSD1306_DrawFilledRectangle+0x6a>
		h = SSD1306_HEIGHT - y;
 8009eae:	003b      	movs	r3, r7
 8009eb0:	1d3a      	adds	r2, r7, #4
 8009eb2:	8812      	ldrh	r2, [r2, #0]
 8009eb4:	2140      	movs	r1, #64	; 0x40
 8009eb6:	1a8a      	subs	r2, r1, r2
 8009eb8:	801a      	strh	r2, [r3, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8009eba:	230f      	movs	r3, #15
 8009ebc:	18fb      	adds	r3, r7, r3
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	701a      	strb	r2, [r3, #0]
 8009ec2:	230f      	movs	r3, #15
 8009ec4:	18fb      	adds	r3, r7, r3
 8009ec6:	781a      	ldrb	r2, [r3, #0]
 8009ec8:	003b      	movs	r3, r7
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	dc27      	bgt.n	8009f20 <SSD1306_DrawFilledRectangle+0xd0>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8009ed0:	200f      	movs	r0, #15
 8009ed2:	183b      	adds	r3, r7, r0
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	1d3b      	adds	r3, r7, #4
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	18d3      	adds	r3, r2, r3
 8009ede:	b299      	uxth	r1, r3
 8009ee0:	1dba      	adds	r2, r7, #6
 8009ee2:	1cbb      	adds	r3, r7, #2
 8009ee4:	8812      	ldrh	r2, [r2, #0]
 8009ee6:	881b      	ldrh	r3, [r3, #0]
 8009ee8:	18d3      	adds	r3, r2, r3
 8009eea:	b29c      	uxth	r4, r3
 8009eec:	0005      	movs	r5, r0
 8009eee:	183b      	adds	r3, r7, r0
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	1d3b      	adds	r3, r7, #4
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	18d3      	adds	r3, r2, r3
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	1dbb      	adds	r3, r7, #6
 8009efe:	8818      	ldrh	r0, [r3, #0]
 8009f00:	2320      	movs	r3, #32
 8009f02:	18fb      	adds	r3, r7, r3
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	0013      	movs	r3, r2
 8009f0a:	0022      	movs	r2, r4
 8009f0c:	f7ff fe09 	bl	8009b22 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8009f10:	0028      	movs	r0, r5
 8009f12:	183b      	adds	r3, r7, r0
 8009f14:	781a      	ldrb	r2, [r3, #0]
 8009f16:	183b      	adds	r3, r7, r0
 8009f18:	3201      	adds	r2, #1
 8009f1a:	701a      	strb	r2, [r3, #0]
 8009f1c:	e7d1      	b.n	8009ec2 <SSD1306_DrawFilledRectangle+0x72>
		return;
 8009f1e:	46c0      	nop			; (mov r8, r8)
	}
}
 8009f20:	46bd      	mov	sp, r7
 8009f22:	b004      	add	sp, #16
 8009f24:	bdb0      	pop	{r4, r5, r7, pc}

08009f26 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	af00      	add	r7, sp, #0
	SSD1306_Fill (SSD1306_COLOR_BLACK);
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	f7ff fbd4 	bl	80096d8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8009f30:	f7ff fb9e 	bl	8009670 <SSD1306_UpdateScreen>
}
 8009f34:	46c0      	nop			; (mov r8, r8)
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <SSD1306_Clear_Data>:

void SSD1306_Clear_Data(void){
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b082      	sub	sp, #8
 8009f3e:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 16, 128, 48, SSD1306_COLOR_BLACK);
 8009f40:	2300      	movs	r3, #0
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	2330      	movs	r3, #48	; 0x30
 8009f46:	2280      	movs	r2, #128	; 0x80
 8009f48:	2110      	movs	r1, #16
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	f7ff ff80 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 8009f50:	f7ff fb8e 	bl	8009670 <SSD1306_UpdateScreen>
}
 8009f54:	46c0      	nop			; (mov r8, r8)
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <SSD1306_Clear_Header>:
void SSD1306_Clear_Header(void){
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 0, 66, 15, SSD1306_COLOR_BLACK);
 8009f60:	2300      	movs	r3, #0
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	230f      	movs	r3, #15
 8009f66:	2242      	movs	r2, #66	; 0x42
 8009f68:	2100      	movs	r1, #0
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	f7ff ff70 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawFilledRectangle(82, 0, 45, 15, SSD1306_COLOR_BLACK);
 8009f70:	2300      	movs	r3, #0
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	230f      	movs	r3, #15
 8009f76:	222d      	movs	r2, #45	; 0x2d
 8009f78:	2100      	movs	r1, #0
 8009f7a:	2052      	movs	r0, #82	; 0x52
 8009f7c:	f7ff ff68 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 8009f80:	f7ff fb76 	bl	8009670 <SSD1306_UpdateScreen>
}
 8009f84:	46c0      	nop			; (mov r8, r8)
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <SSD1306_Clear_Bottom>:
void SSD1306_Clear_Bottom(void){
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 52, 128, 14, SSD1306_COLOR_BLACK);
 8009f90:	2300      	movs	r3, #0
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	230e      	movs	r3, #14
 8009f96:	2280      	movs	r2, #128	; 0x80
 8009f98:	2134      	movs	r1, #52	; 0x34
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f7ff ff58 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 8009fa0:	f7ff fb66 	bl	8009670 <SSD1306_UpdateScreen>
}
 8009fa4:	46c0      	nop			; (mov r8, r8)
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <SSD1306_Clear_Activity>:
void SSD1306_Clear_Activity(void){
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b082      	sub	sp, #8
 8009fae:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 16, 128, 13, SSD1306_COLOR_BLACK);
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	230d      	movs	r3, #13
 8009fb6:	2280      	movs	r2, #128	; 0x80
 8009fb8:	2110      	movs	r1, #16
 8009fba:	2000      	movs	r0, #0
 8009fbc:	f7ff ff48 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 8009fc0:	f7ff fb56 	bl	8009670 <SSD1306_UpdateScreen>
}
 8009fc4:	46c0      	nop			; (mov r8, r8)
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <SSD1306_Clear_Status1>:
void SSD1306_Clear_Status1(void){
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 27, 128, 13, SSD1306_COLOR_BLACK);
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	230d      	movs	r3, #13
 8009fd6:	2280      	movs	r2, #128	; 0x80
 8009fd8:	211b      	movs	r1, #27
 8009fda:	2000      	movs	r0, #0
 8009fdc:	f7ff ff38 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 8009fe0:	f7ff fb46 	bl	8009670 <SSD1306_UpdateScreen>
}
 8009fe4:	46c0      	nop			; (mov r8, r8)
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <SSD1306_Clear_Status2>:
void SSD1306_Clear_Status2(void){
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 39, 128, 13, SSD1306_COLOR_BLACK);
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	230d      	movs	r3, #13
 8009ff6:	2280      	movs	r2, #128	; 0x80
 8009ff8:	2127      	movs	r1, #39	; 0x27
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	f7ff ff28 	bl	8009e50 <SSD1306_DrawFilledRectangle>
	SSD1306_UpdateScreen();
 800a000:	f7ff fb36 	bl	8009670 <SSD1306_UpdateScreen>
}
 800a004:	46c0      	nop			; (mov r8, r8)
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <SSD1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void SSD1306_I2C_Init() {
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800a012:	4b06      	ldr	r3, [pc, #24]	; (800a02c <SSD1306_I2C_Init+0x20>)
 800a014:	607b      	str	r3, [r7, #4]
	while(p>0)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <SSD1306_I2C_Init+0x18>
		p--;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3b01      	subs	r3, #1
 800a020:	607b      	str	r3, [r7, #4]
	while(p>0)
 800a022:	e7f8      	b.n	800a016 <SSD1306_I2C_Init+0xa>
	//HAL_I2C_DeInit(&I2C_PORT);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800a024:	46c0      	nop			; (mov r8, r8)
 800a026:	46bd      	mov	sp, r7
 800a028:	b002      	add	sp, #8
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	0003d090 	.word	0x0003d090

0800a030 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800a030:	b590      	push	{r4, r7, lr}
 800a032:	b0c7      	sub	sp, #284	; 0x11c
 800a034:	af02      	add	r7, sp, #8
 800a036:	0004      	movs	r4, r0
 800a038:	0008      	movs	r0, r1
 800a03a:	603a      	str	r2, [r7, #0]
 800a03c:	0019      	movs	r1, r3
 800a03e:	4b36      	ldr	r3, [pc, #216]	; (800a118 <SSD1306_I2C_WriteMulti+0xe8>)
 800a040:	2288      	movs	r2, #136	; 0x88
 800a042:	0052      	lsls	r2, r2, #1
 800a044:	4694      	mov	ip, r2
 800a046:	44bc      	add	ip, r7
 800a048:	4463      	add	r3, ip
 800a04a:	1c22      	adds	r2, r4, #0
 800a04c:	701a      	strb	r2, [r3, #0]
 800a04e:	4b33      	ldr	r3, [pc, #204]	; (800a11c <SSD1306_I2C_WriteMulti+0xec>)
 800a050:	2288      	movs	r2, #136	; 0x88
 800a052:	0052      	lsls	r2, r2, #1
 800a054:	4694      	mov	ip, r2
 800a056:	44bc      	add	ip, r7
 800a058:	4463      	add	r3, ip
 800a05a:	1c02      	adds	r2, r0, #0
 800a05c:	701a      	strb	r2, [r3, #0]
 800a05e:	4b30      	ldr	r3, [pc, #192]	; (800a120 <SSD1306_I2C_WriteMulti+0xf0>)
 800a060:	2288      	movs	r2, #136	; 0x88
 800a062:	0052      	lsls	r2, r2, #1
 800a064:	4694      	mov	ip, r2
 800a066:	44bc      	add	ip, r7
 800a068:	4463      	add	r3, ip
 800a06a:	1c0a      	adds	r2, r1, #0
 800a06c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800a06e:	4b2d      	ldr	r3, [pc, #180]	; (800a124 <SSD1306_I2C_WriteMulti+0xf4>)
 800a070:	2288      	movs	r2, #136	; 0x88
 800a072:	0052      	lsls	r2, r2, #1
 800a074:	4694      	mov	ip, r2
 800a076:	44bc      	add	ip, r7
 800a078:	4463      	add	r3, ip
 800a07a:	4a28      	ldr	r2, [pc, #160]	; (800a11c <SSD1306_I2C_WriteMulti+0xec>)
 800a07c:	2188      	movs	r1, #136	; 0x88
 800a07e:	0049      	lsls	r1, r1, #1
 800a080:	468c      	mov	ip, r1
 800a082:	44bc      	add	ip, r7
 800a084:	4462      	add	r2, ip
 800a086:	7812      	ldrb	r2, [r2, #0]
 800a088:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800a08a:	2310      	movs	r3, #16
 800a08c:	33ff      	adds	r3, #255	; 0xff
 800a08e:	18fb      	adds	r3, r7, r3
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]
 800a094:	2310      	movs	r3, #16
 800a096:	33ff      	adds	r3, #255	; 0xff
 800a098:	18fb      	adds	r3, r7, r3
 800a09a:	781a      	ldrb	r2, [r3, #0]
 800a09c:	4b20      	ldr	r3, [pc, #128]	; (800a120 <SSD1306_I2C_WriteMulti+0xf0>)
 800a09e:	2188      	movs	r1, #136	; 0x88
 800a0a0:	0049      	lsls	r1, r1, #1
 800a0a2:	468c      	mov	ip, r1
 800a0a4:	44bc      	add	ip, r7
 800a0a6:	4463      	add	r3, ip
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	da16      	bge.n	800a0dc <SSD1306_I2C_WriteMulti+0xac>
dt[i+1] = data[i];
 800a0ae:	2010      	movs	r0, #16
 800a0b0:	30ff      	adds	r0, #255	; 0xff
 800a0b2:	183b      	adds	r3, r7, r0
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	18d2      	adds	r2, r2, r3
 800a0ba:	183b      	adds	r3, r7, r0
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	7811      	ldrb	r1, [r2, #0]
 800a0c2:	4a18      	ldr	r2, [pc, #96]	; (800a124 <SSD1306_I2C_WriteMulti+0xf4>)
 800a0c4:	2488      	movs	r4, #136	; 0x88
 800a0c6:	0064      	lsls	r4, r4, #1
 800a0c8:	46a4      	mov	ip, r4
 800a0ca:	44bc      	add	ip, r7
 800a0cc:	4462      	add	r2, ip
 800a0ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800a0d0:	183b      	adds	r3, r7, r0
 800a0d2:	781a      	ldrb	r2, [r3, #0]
 800a0d4:	183b      	adds	r3, r7, r0
 800a0d6:	3201      	adds	r2, #1
 800a0d8:	701a      	strb	r2, [r3, #0]
 800a0da:	e7db      	b.n	800a094 <SSD1306_I2C_WriteMulti+0x64>
HAL_I2C_Master_Transmit(&I2C_PORT, address, dt, count+1, 10);
 800a0dc:	4b0e      	ldr	r3, [pc, #56]	; (800a118 <SSD1306_I2C_WriteMulti+0xe8>)
 800a0de:	2288      	movs	r2, #136	; 0x88
 800a0e0:	0052      	lsls	r2, r2, #1
 800a0e2:	4694      	mov	ip, r2
 800a0e4:	44bc      	add	ip, r7
 800a0e6:	4463      	add	r3, ip
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	b299      	uxth	r1, r3
 800a0ec:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <SSD1306_I2C_WriteMulti+0xf0>)
 800a0ee:	2288      	movs	r2, #136	; 0x88
 800a0f0:	0052      	lsls	r2, r2, #1
 800a0f2:	4694      	mov	ip, r2
 800a0f4:	44bc      	add	ip, r7
 800a0f6:	4463      	add	r3, ip
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	b29c      	uxth	r4, r3
 800a0fe:	230c      	movs	r3, #12
 800a100:	18fa      	adds	r2, r7, r3
 800a102:	4809      	ldr	r0, [pc, #36]	; (800a128 <SSD1306_I2C_WriteMulti+0xf8>)
 800a104:	230a      	movs	r3, #10
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	0023      	movs	r3, r4
 800a10a:	f7fa fd9d 	bl	8004c48 <HAL_I2C_Master_Transmit>
}
 800a10e:	46c0      	nop			; (mov r8, r8)
 800a110:	46bd      	mov	sp, r7
 800a112:	b045      	add	sp, #276	; 0x114
 800a114:	bd90      	pop	{r4, r7, pc}
 800a116:	46c0      	nop			; (mov r8, r8)
 800a118:	fffffef7 	.word	0xfffffef7
 800a11c:	fffffef6 	.word	0xfffffef6
 800a120:	fffffef4 	.word	0xfffffef4
 800a124:	fffffefc 	.word	0xfffffefc
 800a128:	2000028c 	.word	0x2000028c

0800a12c <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800a12c:	b590      	push	{r4, r7, lr}
 800a12e:	b087      	sub	sp, #28
 800a130:	af02      	add	r7, sp, #8
 800a132:	0004      	movs	r4, r0
 800a134:	0008      	movs	r0, r1
 800a136:	0011      	movs	r1, r2
 800a138:	1dfb      	adds	r3, r7, #7
 800a13a:	1c22      	adds	r2, r4, #0
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	1dbb      	adds	r3, r7, #6
 800a140:	1c02      	adds	r2, r0, #0
 800a142:	701a      	strb	r2, [r3, #0]
 800a144:	1d7b      	adds	r3, r7, #5
 800a146:	1c0a      	adds	r2, r1, #0
 800a148:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 800a14a:	200c      	movs	r0, #12
 800a14c:	183b      	adds	r3, r7, r0
 800a14e:	1dba      	adds	r2, r7, #6
 800a150:	7812      	ldrb	r2, [r2, #0]
 800a152:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 800a154:	183b      	adds	r3, r7, r0
 800a156:	1d7a      	adds	r2, r7, #5
 800a158:	7812      	ldrb	r2, [r2, #0]
 800a15a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&I2C_PORT, address, dt, 2, 10);
 800a15c:	1dfb      	adds	r3, r7, #7
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	b299      	uxth	r1, r3
 800a162:	183a      	adds	r2, r7, r0
 800a164:	4804      	ldr	r0, [pc, #16]	; (800a178 <SSD1306_I2C_Write+0x4c>)
 800a166:	230a      	movs	r3, #10
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	2302      	movs	r3, #2
 800a16c:	f7fa fd6c 	bl	8004c48 <HAL_I2C_Master_Transmit>
}
 800a170:	46c0      	nop			; (mov r8, r8)
 800a172:	46bd      	mov	sp, r7
 800a174:	b005      	add	sp, #20
 800a176:	bd90      	pop	{r4, r7, pc}
 800a178:	2000028c 	.word	0x2000028c

0800a17c <atoi>:
 800a17c:	b510      	push	{r4, lr}
 800a17e:	220a      	movs	r2, #10
 800a180:	2100      	movs	r1, #0
 800a182:	f001 fe91 	bl	800bea8 <strtol>
 800a186:	bd10      	pop	{r4, pc}

0800a188 <__errno>:
 800a188:	4b01      	ldr	r3, [pc, #4]	; (800a190 <__errno+0x8>)
 800a18a:	6818      	ldr	r0, [r3, #0]
 800a18c:	4770      	bx	lr
 800a18e:	46c0      	nop			; (mov r8, r8)
 800a190:	20000044 	.word	0x20000044

0800a194 <__libc_init_array>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	2600      	movs	r6, #0
 800a198:	4d0c      	ldr	r5, [pc, #48]	; (800a1cc <__libc_init_array+0x38>)
 800a19a:	4c0d      	ldr	r4, [pc, #52]	; (800a1d0 <__libc_init_array+0x3c>)
 800a19c:	1b64      	subs	r4, r4, r5
 800a19e:	10a4      	asrs	r4, r4, #2
 800a1a0:	42a6      	cmp	r6, r4
 800a1a2:	d109      	bne.n	800a1b8 <__libc_init_array+0x24>
 800a1a4:	2600      	movs	r6, #0
 800a1a6:	f003 fe1d 	bl	800dde4 <_init>
 800a1aa:	4d0a      	ldr	r5, [pc, #40]	; (800a1d4 <__libc_init_array+0x40>)
 800a1ac:	4c0a      	ldr	r4, [pc, #40]	; (800a1d8 <__libc_init_array+0x44>)
 800a1ae:	1b64      	subs	r4, r4, r5
 800a1b0:	10a4      	asrs	r4, r4, #2
 800a1b2:	42a6      	cmp	r6, r4
 800a1b4:	d105      	bne.n	800a1c2 <__libc_init_array+0x2e>
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	00b3      	lsls	r3, r6, #2
 800a1ba:	58eb      	ldr	r3, [r5, r3]
 800a1bc:	4798      	blx	r3
 800a1be:	3601      	adds	r6, #1
 800a1c0:	e7ee      	b.n	800a1a0 <__libc_init_array+0xc>
 800a1c2:	00b3      	lsls	r3, r6, #2
 800a1c4:	58eb      	ldr	r3, [r5, r3]
 800a1c6:	4798      	blx	r3
 800a1c8:	3601      	adds	r6, #1
 800a1ca:	e7f2      	b.n	800a1b2 <__libc_init_array+0x1e>
 800a1cc:	0800f4a8 	.word	0x0800f4a8
 800a1d0:	0800f4a8 	.word	0x0800f4a8
 800a1d4:	0800f4a8 	.word	0x0800f4a8
 800a1d8:	0800f4b8 	.word	0x0800f4b8

0800a1dc <malloc>:
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	4b03      	ldr	r3, [pc, #12]	; (800a1ec <malloc+0x10>)
 800a1e0:	0001      	movs	r1, r0
 800a1e2:	6818      	ldr	r0, [r3, #0]
 800a1e4:	f000 f860 	bl	800a2a8 <_malloc_r>
 800a1e8:	bd10      	pop	{r4, pc}
 800a1ea:	46c0      	nop			; (mov r8, r8)
 800a1ec:	20000044 	.word	0x20000044

0800a1f0 <memcpy>:
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	b510      	push	{r4, lr}
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d100      	bne.n	800a1fa <memcpy+0xa>
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	5ccc      	ldrb	r4, [r1, r3]
 800a1fc:	54c4      	strb	r4, [r0, r3]
 800a1fe:	3301      	adds	r3, #1
 800a200:	e7f8      	b.n	800a1f4 <memcpy+0x4>

0800a202 <memset>:
 800a202:	0003      	movs	r3, r0
 800a204:	1812      	adds	r2, r2, r0
 800a206:	4293      	cmp	r3, r2
 800a208:	d100      	bne.n	800a20c <memset+0xa>
 800a20a:	4770      	bx	lr
 800a20c:	7019      	strb	r1, [r3, #0]
 800a20e:	3301      	adds	r3, #1
 800a210:	e7f9      	b.n	800a206 <memset+0x4>
	...

0800a214 <_free_r>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	0005      	movs	r5, r0
 800a218:	2900      	cmp	r1, #0
 800a21a:	d010      	beq.n	800a23e <_free_r+0x2a>
 800a21c:	1f0c      	subs	r4, r1, #4
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	da00      	bge.n	800a226 <_free_r+0x12>
 800a224:	18e4      	adds	r4, r4, r3
 800a226:	0028      	movs	r0, r5
 800a228:	f003 f817 	bl	800d25a <__malloc_lock>
 800a22c:	4a1d      	ldr	r2, [pc, #116]	; (800a2a4 <_free_r+0x90>)
 800a22e:	6813      	ldr	r3, [r2, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d105      	bne.n	800a240 <_free_r+0x2c>
 800a234:	6063      	str	r3, [r4, #4]
 800a236:	6014      	str	r4, [r2, #0]
 800a238:	0028      	movs	r0, r5
 800a23a:	f003 f80f 	bl	800d25c <__malloc_unlock>
 800a23e:	bd70      	pop	{r4, r5, r6, pc}
 800a240:	42a3      	cmp	r3, r4
 800a242:	d909      	bls.n	800a258 <_free_r+0x44>
 800a244:	6821      	ldr	r1, [r4, #0]
 800a246:	1860      	adds	r0, r4, r1
 800a248:	4283      	cmp	r3, r0
 800a24a:	d1f3      	bne.n	800a234 <_free_r+0x20>
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	1841      	adds	r1, r0, r1
 800a252:	6021      	str	r1, [r4, #0]
 800a254:	e7ee      	b.n	800a234 <_free_r+0x20>
 800a256:	0013      	movs	r3, r2
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	2a00      	cmp	r2, #0
 800a25c:	d001      	beq.n	800a262 <_free_r+0x4e>
 800a25e:	42a2      	cmp	r2, r4
 800a260:	d9f9      	bls.n	800a256 <_free_r+0x42>
 800a262:	6819      	ldr	r1, [r3, #0]
 800a264:	1858      	adds	r0, r3, r1
 800a266:	42a0      	cmp	r0, r4
 800a268:	d10b      	bne.n	800a282 <_free_r+0x6e>
 800a26a:	6820      	ldr	r0, [r4, #0]
 800a26c:	1809      	adds	r1, r1, r0
 800a26e:	1858      	adds	r0, r3, r1
 800a270:	6019      	str	r1, [r3, #0]
 800a272:	4282      	cmp	r2, r0
 800a274:	d1e0      	bne.n	800a238 <_free_r+0x24>
 800a276:	6810      	ldr	r0, [r2, #0]
 800a278:	6852      	ldr	r2, [r2, #4]
 800a27a:	1841      	adds	r1, r0, r1
 800a27c:	6019      	str	r1, [r3, #0]
 800a27e:	605a      	str	r2, [r3, #4]
 800a280:	e7da      	b.n	800a238 <_free_r+0x24>
 800a282:	42a0      	cmp	r0, r4
 800a284:	d902      	bls.n	800a28c <_free_r+0x78>
 800a286:	230c      	movs	r3, #12
 800a288:	602b      	str	r3, [r5, #0]
 800a28a:	e7d5      	b.n	800a238 <_free_r+0x24>
 800a28c:	6821      	ldr	r1, [r4, #0]
 800a28e:	1860      	adds	r0, r4, r1
 800a290:	4282      	cmp	r2, r0
 800a292:	d103      	bne.n	800a29c <_free_r+0x88>
 800a294:	6810      	ldr	r0, [r2, #0]
 800a296:	6852      	ldr	r2, [r2, #4]
 800a298:	1841      	adds	r1, r0, r1
 800a29a:	6021      	str	r1, [r4, #0]
 800a29c:	6062      	str	r2, [r4, #4]
 800a29e:	605c      	str	r4, [r3, #4]
 800a2a0:	e7ca      	b.n	800a238 <_free_r+0x24>
 800a2a2:	46c0      	nop			; (mov r8, r8)
 800a2a4:	200028cc 	.word	0x200028cc

0800a2a8 <_malloc_r>:
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	b570      	push	{r4, r5, r6, lr}
 800a2ac:	1ccd      	adds	r5, r1, #3
 800a2ae:	439d      	bics	r5, r3
 800a2b0:	3508      	adds	r5, #8
 800a2b2:	0006      	movs	r6, r0
 800a2b4:	2d0c      	cmp	r5, #12
 800a2b6:	d21e      	bcs.n	800a2f6 <_malloc_r+0x4e>
 800a2b8:	250c      	movs	r5, #12
 800a2ba:	42a9      	cmp	r1, r5
 800a2bc:	d81d      	bhi.n	800a2fa <_malloc_r+0x52>
 800a2be:	0030      	movs	r0, r6
 800a2c0:	f002 ffcb 	bl	800d25a <__malloc_lock>
 800a2c4:	4a25      	ldr	r2, [pc, #148]	; (800a35c <_malloc_r+0xb4>)
 800a2c6:	6814      	ldr	r4, [r2, #0]
 800a2c8:	0021      	movs	r1, r4
 800a2ca:	2900      	cmp	r1, #0
 800a2cc:	d119      	bne.n	800a302 <_malloc_r+0x5a>
 800a2ce:	4c24      	ldr	r4, [pc, #144]	; (800a360 <_malloc_r+0xb8>)
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d103      	bne.n	800a2de <_malloc_r+0x36>
 800a2d6:	0030      	movs	r0, r6
 800a2d8:	f000 fea0 	bl	800b01c <_sbrk_r>
 800a2dc:	6020      	str	r0, [r4, #0]
 800a2de:	0029      	movs	r1, r5
 800a2e0:	0030      	movs	r0, r6
 800a2e2:	f000 fe9b 	bl	800b01c <_sbrk_r>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	d12b      	bne.n	800a342 <_malloc_r+0x9a>
 800a2ea:	230c      	movs	r3, #12
 800a2ec:	0030      	movs	r0, r6
 800a2ee:	6033      	str	r3, [r6, #0]
 800a2f0:	f002 ffb4 	bl	800d25c <__malloc_unlock>
 800a2f4:	e003      	b.n	800a2fe <_malloc_r+0x56>
 800a2f6:	2d00      	cmp	r5, #0
 800a2f8:	dadf      	bge.n	800a2ba <_malloc_r+0x12>
 800a2fa:	230c      	movs	r3, #12
 800a2fc:	6033      	str	r3, [r6, #0]
 800a2fe:	2000      	movs	r0, #0
 800a300:	bd70      	pop	{r4, r5, r6, pc}
 800a302:	680b      	ldr	r3, [r1, #0]
 800a304:	1b5b      	subs	r3, r3, r5
 800a306:	d419      	bmi.n	800a33c <_malloc_r+0x94>
 800a308:	2b0b      	cmp	r3, #11
 800a30a:	d903      	bls.n	800a314 <_malloc_r+0x6c>
 800a30c:	600b      	str	r3, [r1, #0]
 800a30e:	18cc      	adds	r4, r1, r3
 800a310:	6025      	str	r5, [r4, #0]
 800a312:	e003      	b.n	800a31c <_malloc_r+0x74>
 800a314:	684b      	ldr	r3, [r1, #4]
 800a316:	428c      	cmp	r4, r1
 800a318:	d10d      	bne.n	800a336 <_malloc_r+0x8e>
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	0030      	movs	r0, r6
 800a31e:	f002 ff9d 	bl	800d25c <__malloc_unlock>
 800a322:	0020      	movs	r0, r4
 800a324:	2207      	movs	r2, #7
 800a326:	300b      	adds	r0, #11
 800a328:	1d23      	adds	r3, r4, #4
 800a32a:	4390      	bics	r0, r2
 800a32c:	1ac3      	subs	r3, r0, r3
 800a32e:	d0e7      	beq.n	800a300 <_malloc_r+0x58>
 800a330:	425a      	negs	r2, r3
 800a332:	50e2      	str	r2, [r4, r3]
 800a334:	e7e4      	b.n	800a300 <_malloc_r+0x58>
 800a336:	6063      	str	r3, [r4, #4]
 800a338:	000c      	movs	r4, r1
 800a33a:	e7ef      	b.n	800a31c <_malloc_r+0x74>
 800a33c:	000c      	movs	r4, r1
 800a33e:	6849      	ldr	r1, [r1, #4]
 800a340:	e7c3      	b.n	800a2ca <_malloc_r+0x22>
 800a342:	2303      	movs	r3, #3
 800a344:	1cc4      	adds	r4, r0, #3
 800a346:	439c      	bics	r4, r3
 800a348:	42a0      	cmp	r0, r4
 800a34a:	d0e1      	beq.n	800a310 <_malloc_r+0x68>
 800a34c:	1a21      	subs	r1, r4, r0
 800a34e:	0030      	movs	r0, r6
 800a350:	f000 fe64 	bl	800b01c <_sbrk_r>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d1db      	bne.n	800a310 <_malloc_r+0x68>
 800a358:	e7c7      	b.n	800a2ea <_malloc_r+0x42>
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	200028cc 	.word	0x200028cc
 800a360:	200028d0 	.word	0x200028d0

0800a364 <__cvt>:
 800a364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a366:	b08b      	sub	sp, #44	; 0x2c
 800a368:	0014      	movs	r4, r2
 800a36a:	1e1d      	subs	r5, r3, #0
 800a36c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a36e:	da53      	bge.n	800a418 <__cvt+0xb4>
 800a370:	2480      	movs	r4, #128	; 0x80
 800a372:	0624      	lsls	r4, r4, #24
 800a374:	191b      	adds	r3, r3, r4
 800a376:	001d      	movs	r5, r3
 800a378:	0014      	movs	r4, r2
 800a37a:	232d      	movs	r3, #45	; 0x2d
 800a37c:	700b      	strb	r3, [r1, #0]
 800a37e:	2320      	movs	r3, #32
 800a380:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a382:	2203      	movs	r2, #3
 800a384:	439e      	bics	r6, r3
 800a386:	2e46      	cmp	r6, #70	; 0x46
 800a388:	d007      	beq.n	800a39a <__cvt+0x36>
 800a38a:	0033      	movs	r3, r6
 800a38c:	3b45      	subs	r3, #69	; 0x45
 800a38e:	4259      	negs	r1, r3
 800a390:	414b      	adcs	r3, r1
 800a392:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a394:	3a01      	subs	r2, #1
 800a396:	18cb      	adds	r3, r1, r3
 800a398:	9310      	str	r3, [sp, #64]	; 0x40
 800a39a:	ab09      	add	r3, sp, #36	; 0x24
 800a39c:	9304      	str	r3, [sp, #16]
 800a39e:	ab08      	add	r3, sp, #32
 800a3a0:	9303      	str	r3, [sp, #12]
 800a3a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3a4:	9200      	str	r2, [sp, #0]
 800a3a6:	9302      	str	r3, [sp, #8]
 800a3a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3aa:	0022      	movs	r2, r4
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	002b      	movs	r3, r5
 800a3b0:	f001 fe14 	bl	800bfdc <_dtoa_r>
 800a3b4:	0007      	movs	r7, r0
 800a3b6:	2e47      	cmp	r6, #71	; 0x47
 800a3b8:	d102      	bne.n	800a3c0 <__cvt+0x5c>
 800a3ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3bc:	07db      	lsls	r3, r3, #31
 800a3be:	d524      	bpl.n	800a40a <__cvt+0xa6>
 800a3c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3c2:	18fb      	adds	r3, r7, r3
 800a3c4:	9307      	str	r3, [sp, #28]
 800a3c6:	2e46      	cmp	r6, #70	; 0x46
 800a3c8:	d114      	bne.n	800a3f4 <__cvt+0x90>
 800a3ca:	783b      	ldrb	r3, [r7, #0]
 800a3cc:	2b30      	cmp	r3, #48	; 0x30
 800a3ce:	d10c      	bne.n	800a3ea <__cvt+0x86>
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	0020      	movs	r0, r4
 800a3d6:	0029      	movs	r1, r5
 800a3d8:	f7f6 f82e 	bl	8000438 <__aeabi_dcmpeq>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d104      	bne.n	800a3ea <__cvt+0x86>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3e4:	1a9b      	subs	r3, r3, r2
 800a3e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3e8:	6013      	str	r3, [r2, #0]
 800a3ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3ec:	9a07      	ldr	r2, [sp, #28]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	18d3      	adds	r3, r2, r3
 800a3f2:	9307      	str	r3, [sp, #28]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	0020      	movs	r0, r4
 800a3fa:	0029      	movs	r1, r5
 800a3fc:	f7f6 f81c 	bl	8000438 <__aeabi_dcmpeq>
 800a400:	2230      	movs	r2, #48	; 0x30
 800a402:	2800      	cmp	r0, #0
 800a404:	d00d      	beq.n	800a422 <__cvt+0xbe>
 800a406:	9b07      	ldr	r3, [sp, #28]
 800a408:	9309      	str	r3, [sp, #36]	; 0x24
 800a40a:	0038      	movs	r0, r7
 800a40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a410:	1bdb      	subs	r3, r3, r7
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	b00b      	add	sp, #44	; 0x2c
 800a416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a418:	2300      	movs	r3, #0
 800a41a:	e7af      	b.n	800a37c <__cvt+0x18>
 800a41c:	1c59      	adds	r1, r3, #1
 800a41e:	9109      	str	r1, [sp, #36]	; 0x24
 800a420:	701a      	strb	r2, [r3, #0]
 800a422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a424:	9907      	ldr	r1, [sp, #28]
 800a426:	428b      	cmp	r3, r1
 800a428:	d3f8      	bcc.n	800a41c <__cvt+0xb8>
 800a42a:	e7ee      	b.n	800a40a <__cvt+0xa6>

0800a42c <__exponent>:
 800a42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a42e:	1c83      	adds	r3, r0, #2
 800a430:	b085      	sub	sp, #20
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	0006      	movs	r6, r0
 800a436:	000c      	movs	r4, r1
 800a438:	7002      	strb	r2, [r0, #0]
 800a43a:	232b      	movs	r3, #43	; 0x2b
 800a43c:	2900      	cmp	r1, #0
 800a43e:	da01      	bge.n	800a444 <__exponent+0x18>
 800a440:	232d      	movs	r3, #45	; 0x2d
 800a442:	424c      	negs	r4, r1
 800a444:	7073      	strb	r3, [r6, #1]
 800a446:	2c09      	cmp	r4, #9
 800a448:	dd22      	ble.n	800a490 <__exponent+0x64>
 800a44a:	ab02      	add	r3, sp, #8
 800a44c:	1ddd      	adds	r5, r3, #7
 800a44e:	0020      	movs	r0, r4
 800a450:	210a      	movs	r1, #10
 800a452:	f7f5 ffdb 	bl	800040c <__aeabi_idivmod>
 800a456:	1e6f      	subs	r7, r5, #1
 800a458:	3130      	adds	r1, #48	; 0x30
 800a45a:	7039      	strb	r1, [r7, #0]
 800a45c:	0020      	movs	r0, r4
 800a45e:	210a      	movs	r1, #10
 800a460:	f7f5 feee 	bl	8000240 <__divsi3>
 800a464:	0004      	movs	r4, r0
 800a466:	2809      	cmp	r0, #9
 800a468:	dc0b      	bgt.n	800a482 <__exponent+0x56>
 800a46a:	3d02      	subs	r5, #2
 800a46c:	3430      	adds	r4, #48	; 0x30
 800a46e:	9b01      	ldr	r3, [sp, #4]
 800a470:	702c      	strb	r4, [r5, #0]
 800a472:	aa02      	add	r2, sp, #8
 800a474:	3207      	adds	r2, #7
 800a476:	0018      	movs	r0, r3
 800a478:	42aa      	cmp	r2, r5
 800a47a:	d804      	bhi.n	800a486 <__exponent+0x5a>
 800a47c:	1b80      	subs	r0, r0, r6
 800a47e:	b005      	add	sp, #20
 800a480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a482:	003d      	movs	r5, r7
 800a484:	e7e3      	b.n	800a44e <__exponent+0x22>
 800a486:	782a      	ldrb	r2, [r5, #0]
 800a488:	3501      	adds	r5, #1
 800a48a:	701a      	strb	r2, [r3, #0]
 800a48c:	3301      	adds	r3, #1
 800a48e:	e7f0      	b.n	800a472 <__exponent+0x46>
 800a490:	2330      	movs	r3, #48	; 0x30
 800a492:	18e4      	adds	r4, r4, r3
 800a494:	70b3      	strb	r3, [r6, #2]
 800a496:	1d30      	adds	r0, r6, #4
 800a498:	70f4      	strb	r4, [r6, #3]
 800a49a:	e7ef      	b.n	800a47c <__exponent+0x50>

0800a49c <_printf_float>:
 800a49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a49e:	b095      	sub	sp, #84	; 0x54
 800a4a0:	000c      	movs	r4, r1
 800a4a2:	920a      	str	r2, [sp, #40]	; 0x28
 800a4a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4a6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a4a8:	9009      	str	r0, [sp, #36]	; 0x24
 800a4aa:	f002 fead 	bl	800d208 <_localeconv_r>
 800a4ae:	6803      	ldr	r3, [r0, #0]
 800a4b0:	0018      	movs	r0, r3
 800a4b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a4b4:	f7f5 fe28 	bl	8000108 <strlen>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	9312      	str	r3, [sp, #72]	; 0x48
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	900e      	str	r0, [sp, #56]	; 0x38
 800a4c0:	930d      	str	r3, [sp, #52]	; 0x34
 800a4c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a4c4:	7e27      	ldrb	r7, [r4, #24]
 800a4c6:	682b      	ldr	r3, [r5, #0]
 800a4c8:	2207      	movs	r2, #7
 800a4ca:	05c9      	lsls	r1, r1, #23
 800a4cc:	d545      	bpl.n	800a55a <_printf_float+0xbe>
 800a4ce:	189b      	adds	r3, r3, r2
 800a4d0:	4393      	bics	r3, r2
 800a4d2:	001a      	movs	r2, r3
 800a4d4:	3208      	adds	r2, #8
 800a4d6:	602a      	str	r2, [r5, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	64a2      	str	r2, [r4, #72]	; 0x48
 800a4de:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a4e4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800a4e6:	006b      	lsls	r3, r5, #1
 800a4e8:	085b      	lsrs	r3, r3, #1
 800a4ea:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4ec:	4252      	negs	r2, r2
 800a4ee:	4bac      	ldr	r3, [pc, #688]	; (800a7a0 <_printf_float+0x304>)
 800a4f0:	0030      	movs	r0, r6
 800a4f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a4f4:	f7f7 fdf8 	bl	80020e8 <__aeabi_dcmpun>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d130      	bne.n	800a55e <_printf_float+0xc2>
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	4ba8      	ldr	r3, [pc, #672]	; (800a7a0 <_printf_float+0x304>)
 800a500:	4252      	negs	r2, r2
 800a502:	0030      	movs	r0, r6
 800a504:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a506:	f7f5 ffa7 	bl	8000458 <__aeabi_dcmple>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d127      	bne.n	800a55e <_printf_float+0xc2>
 800a50e:	2200      	movs	r2, #0
 800a510:	2300      	movs	r3, #0
 800a512:	0030      	movs	r0, r6
 800a514:	0029      	movs	r1, r5
 800a516:	f7f5 ff95 	bl	8000444 <__aeabi_dcmplt>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d003      	beq.n	800a526 <_printf_float+0x8a>
 800a51e:	0023      	movs	r3, r4
 800a520:	222d      	movs	r2, #45	; 0x2d
 800a522:	3343      	adds	r3, #67	; 0x43
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	4d9f      	ldr	r5, [pc, #636]	; (800a7a4 <_printf_float+0x308>)
 800a528:	2f47      	cmp	r7, #71	; 0x47
 800a52a:	d800      	bhi.n	800a52e <_printf_float+0x92>
 800a52c:	4d9e      	ldr	r5, [pc, #632]	; (800a7a8 <_printf_float+0x30c>)
 800a52e:	2303      	movs	r3, #3
 800a530:	2600      	movs	r6, #0
 800a532:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a534:	6123      	str	r3, [r4, #16]
 800a536:	3301      	adds	r3, #1
 800a538:	439a      	bics	r2, r3
 800a53a:	6022      	str	r2, [r4, #0]
 800a53c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a53e:	aa13      	add	r2, sp, #76	; 0x4c
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	0021      	movs	r1, r4
 800a544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a546:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a548:	f000 f9f4 	bl	800a934 <_printf_common>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d000      	beq.n	800a552 <_printf_float+0xb6>
 800a550:	e093      	b.n	800a67a <_printf_float+0x1de>
 800a552:	2001      	movs	r0, #1
 800a554:	4240      	negs	r0, r0
 800a556:	b015      	add	sp, #84	; 0x54
 800a558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a55a:	3307      	adds	r3, #7
 800a55c:	e7b8      	b.n	800a4d0 <_printf_float+0x34>
 800a55e:	0032      	movs	r2, r6
 800a560:	002b      	movs	r3, r5
 800a562:	0030      	movs	r0, r6
 800a564:	0029      	movs	r1, r5
 800a566:	f7f7 fdbf 	bl	80020e8 <__aeabi_dcmpun>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d004      	beq.n	800a578 <_printf_float+0xdc>
 800a56e:	4d8f      	ldr	r5, [pc, #572]	; (800a7ac <_printf_float+0x310>)
 800a570:	2f47      	cmp	r7, #71	; 0x47
 800a572:	d8dc      	bhi.n	800a52e <_printf_float+0x92>
 800a574:	4d8e      	ldr	r5, [pc, #568]	; (800a7b0 <_printf_float+0x314>)
 800a576:	e7da      	b.n	800a52e <_printf_float+0x92>
 800a578:	2380      	movs	r3, #128	; 0x80
 800a57a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a57c:	6862      	ldr	r2, [r4, #4]
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	430b      	orrs	r3, r1
 800a582:	1c51      	adds	r1, r2, #1
 800a584:	d143      	bne.n	800a60e <_printf_float+0x172>
 800a586:	3207      	adds	r2, #7
 800a588:	6062      	str	r2, [r4, #4]
 800a58a:	aa12      	add	r2, sp, #72	; 0x48
 800a58c:	2100      	movs	r1, #0
 800a58e:	9205      	str	r2, [sp, #20]
 800a590:	aa11      	add	r2, sp, #68	; 0x44
 800a592:	9203      	str	r2, [sp, #12]
 800a594:	2223      	movs	r2, #35	; 0x23
 800a596:	6023      	str	r3, [r4, #0]
 800a598:	9106      	str	r1, [sp, #24]
 800a59a:	9301      	str	r3, [sp, #4]
 800a59c:	a908      	add	r1, sp, #32
 800a59e:	6863      	ldr	r3, [r4, #4]
 800a5a0:	1852      	adds	r2, r2, r1
 800a5a2:	9202      	str	r2, [sp, #8]
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	0032      	movs	r2, r6
 800a5a8:	002b      	movs	r3, r5
 800a5aa:	9704      	str	r7, [sp, #16]
 800a5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ae:	f7ff fed9 	bl	800a364 <__cvt>
 800a5b2:	2320      	movs	r3, #32
 800a5b4:	003a      	movs	r2, r7
 800a5b6:	0005      	movs	r5, r0
 800a5b8:	439a      	bics	r2, r3
 800a5ba:	2a47      	cmp	r2, #71	; 0x47
 800a5bc:	d107      	bne.n	800a5ce <_printf_float+0x132>
 800a5be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5c0:	1cda      	adds	r2, r3, #3
 800a5c2:	db02      	blt.n	800a5ca <_printf_float+0x12e>
 800a5c4:	6862      	ldr	r2, [r4, #4]
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	dd45      	ble.n	800a656 <_printf_float+0x1ba>
 800a5ca:	3f02      	subs	r7, #2
 800a5cc:	b2ff      	uxtb	r7, r7
 800a5ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a5d0:	2f65      	cmp	r7, #101	; 0x65
 800a5d2:	d825      	bhi.n	800a620 <_printf_float+0x184>
 800a5d4:	0020      	movs	r0, r4
 800a5d6:	3901      	subs	r1, #1
 800a5d8:	003a      	movs	r2, r7
 800a5da:	3050      	adds	r0, #80	; 0x50
 800a5dc:	9111      	str	r1, [sp, #68]	; 0x44
 800a5de:	f7ff ff25 	bl	800a42c <__exponent>
 800a5e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5e4:	0006      	movs	r6, r0
 800a5e6:	1813      	adds	r3, r2, r0
 800a5e8:	6123      	str	r3, [r4, #16]
 800a5ea:	2a01      	cmp	r2, #1
 800a5ec:	dc02      	bgt.n	800a5f4 <_printf_float+0x158>
 800a5ee:	6822      	ldr	r2, [r4, #0]
 800a5f0:	07d2      	lsls	r2, r2, #31
 800a5f2:	d501      	bpl.n	800a5f8 <_printf_float+0x15c>
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	6123      	str	r3, [r4, #16]
 800a5f8:	2323      	movs	r3, #35	; 0x23
 800a5fa:	aa08      	add	r2, sp, #32
 800a5fc:	189b      	adds	r3, r3, r2
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d09b      	beq.n	800a53c <_printf_float+0xa0>
 800a604:	0023      	movs	r3, r4
 800a606:	222d      	movs	r2, #45	; 0x2d
 800a608:	3343      	adds	r3, #67	; 0x43
 800a60a:	701a      	strb	r2, [r3, #0]
 800a60c:	e796      	b.n	800a53c <_printf_float+0xa0>
 800a60e:	2f67      	cmp	r7, #103	; 0x67
 800a610:	d100      	bne.n	800a614 <_printf_float+0x178>
 800a612:	e176      	b.n	800a902 <_printf_float+0x466>
 800a614:	2f47      	cmp	r7, #71	; 0x47
 800a616:	d1b8      	bne.n	800a58a <_printf_float+0xee>
 800a618:	2a00      	cmp	r2, #0
 800a61a:	d1b6      	bne.n	800a58a <_printf_float+0xee>
 800a61c:	2201      	movs	r2, #1
 800a61e:	e7b3      	b.n	800a588 <_printf_float+0xec>
 800a620:	2f66      	cmp	r7, #102	; 0x66
 800a622:	d119      	bne.n	800a658 <_printf_float+0x1bc>
 800a624:	6863      	ldr	r3, [r4, #4]
 800a626:	2900      	cmp	r1, #0
 800a628:	dd0c      	ble.n	800a644 <_printf_float+0x1a8>
 800a62a:	6121      	str	r1, [r4, #16]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <_printf_float+0x19a>
 800a630:	6822      	ldr	r2, [r4, #0]
 800a632:	07d2      	lsls	r2, r2, #31
 800a634:	d502      	bpl.n	800a63c <_printf_float+0x1a0>
 800a636:	3301      	adds	r3, #1
 800a638:	185b      	adds	r3, r3, r1
 800a63a:	6123      	str	r3, [r4, #16]
 800a63c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a63e:	2600      	movs	r6, #0
 800a640:	65a3      	str	r3, [r4, #88]	; 0x58
 800a642:	e7d9      	b.n	800a5f8 <_printf_float+0x15c>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d103      	bne.n	800a650 <_printf_float+0x1b4>
 800a648:	2201      	movs	r2, #1
 800a64a:	6821      	ldr	r1, [r4, #0]
 800a64c:	4211      	tst	r1, r2
 800a64e:	d000      	beq.n	800a652 <_printf_float+0x1b6>
 800a650:	1c9a      	adds	r2, r3, #2
 800a652:	6122      	str	r2, [r4, #16]
 800a654:	e7f2      	b.n	800a63c <_printf_float+0x1a0>
 800a656:	2767      	movs	r7, #103	; 0x67
 800a658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a65a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a65c:	4293      	cmp	r3, r2
 800a65e:	db05      	blt.n	800a66c <_printf_float+0x1d0>
 800a660:	6822      	ldr	r2, [r4, #0]
 800a662:	6123      	str	r3, [r4, #16]
 800a664:	07d2      	lsls	r2, r2, #31
 800a666:	d5e9      	bpl.n	800a63c <_printf_float+0x1a0>
 800a668:	3301      	adds	r3, #1
 800a66a:	e7e6      	b.n	800a63a <_printf_float+0x19e>
 800a66c:	2101      	movs	r1, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	dc01      	bgt.n	800a676 <_printf_float+0x1da>
 800a672:	1849      	adds	r1, r1, r1
 800a674:	1ac9      	subs	r1, r1, r3
 800a676:	1852      	adds	r2, r2, r1
 800a678:	e7eb      	b.n	800a652 <_printf_float+0x1b6>
 800a67a:	6822      	ldr	r2, [r4, #0]
 800a67c:	0553      	lsls	r3, r2, #21
 800a67e:	d408      	bmi.n	800a692 <_printf_float+0x1f6>
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	002a      	movs	r2, r5
 800a684:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a686:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a688:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a68a:	47a8      	blx	r5
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d129      	bne.n	800a6e4 <_printf_float+0x248>
 800a690:	e75f      	b.n	800a552 <_printf_float+0xb6>
 800a692:	2f65      	cmp	r7, #101	; 0x65
 800a694:	d800      	bhi.n	800a698 <_printf_float+0x1fc>
 800a696:	e0e0      	b.n	800a85a <_printf_float+0x3be>
 800a698:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a69a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a69c:	2200      	movs	r2, #0
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f7f5 feca 	bl	8000438 <__aeabi_dcmpeq>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d034      	beq.n	800a712 <_printf_float+0x276>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	4a42      	ldr	r2, [pc, #264]	; (800a7b4 <_printf_float+0x318>)
 800a6ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a6b2:	47a8      	blx	r5
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d100      	bne.n	800a6ba <_printf_float+0x21e>
 800a6b8:	e74b      	b.n	800a552 <_printf_float+0xb6>
 800a6ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	db02      	blt.n	800a6c8 <_printf_float+0x22c>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	07db      	lsls	r3, r3, #31
 800a6c6:	d50d      	bpl.n	800a6e4 <_printf_float+0x248>
 800a6c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a6ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6d2:	47a8      	blx	r5
 800a6d4:	2500      	movs	r5, #0
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d100      	bne.n	800a6dc <_printf_float+0x240>
 800a6da:	e73a      	b.n	800a552 <_printf_float+0xb6>
 800a6dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	42ab      	cmp	r3, r5
 800a6e2:	dc0a      	bgt.n	800a6fa <_printf_float+0x25e>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	079b      	lsls	r3, r3, #30
 800a6e8:	d500      	bpl.n	800a6ec <_printf_float+0x250>
 800a6ea:	e108      	b.n	800a8fe <_printf_float+0x462>
 800a6ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6ee:	68e0      	ldr	r0, [r4, #12]
 800a6f0:	4298      	cmp	r0, r3
 800a6f2:	db00      	blt.n	800a6f6 <_printf_float+0x25a>
 800a6f4:	e72f      	b.n	800a556 <_printf_float+0xba>
 800a6f6:	0018      	movs	r0, r3
 800a6f8:	e72d      	b.n	800a556 <_printf_float+0xba>
 800a6fa:	0022      	movs	r2, r4
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	321a      	adds	r2, #26
 800a700:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a702:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a704:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a706:	47b0      	blx	r6
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d100      	bne.n	800a70e <_printf_float+0x272>
 800a70c:	e721      	b.n	800a552 <_printf_float+0xb6>
 800a70e:	3501      	adds	r5, #1
 800a710:	e7e4      	b.n	800a6dc <_printf_float+0x240>
 800a712:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a714:	2b00      	cmp	r3, #0
 800a716:	dc2d      	bgt.n	800a774 <_printf_float+0x2d8>
 800a718:	2301      	movs	r3, #1
 800a71a:	4a26      	ldr	r2, [pc, #152]	; (800a7b4 <_printf_float+0x318>)
 800a71c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a71e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a720:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a722:	47b0      	blx	r6
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d100      	bne.n	800a72a <_printf_float+0x28e>
 800a728:	e713      	b.n	800a552 <_printf_float+0xb6>
 800a72a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d105      	bne.n	800a73c <_printf_float+0x2a0>
 800a730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a732:	2b00      	cmp	r3, #0
 800a734:	d102      	bne.n	800a73c <_printf_float+0x2a0>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	07db      	lsls	r3, r3, #31
 800a73a:	d5d3      	bpl.n	800a6e4 <_printf_float+0x248>
 800a73c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a742:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a744:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a746:	47b0      	blx	r6
 800a748:	2600      	movs	r6, #0
 800a74a:	1c43      	adds	r3, r0, #1
 800a74c:	d100      	bne.n	800a750 <_printf_float+0x2b4>
 800a74e:	e700      	b.n	800a552 <_printf_float+0xb6>
 800a750:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a752:	425b      	negs	r3, r3
 800a754:	42b3      	cmp	r3, r6
 800a756:	dc01      	bgt.n	800a75c <_printf_float+0x2c0>
 800a758:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a75a:	e792      	b.n	800a682 <_printf_float+0x1e6>
 800a75c:	0022      	movs	r2, r4
 800a75e:	2301      	movs	r3, #1
 800a760:	321a      	adds	r2, #26
 800a762:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a764:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a766:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a768:	47b8      	blx	r7
 800a76a:	1c43      	adds	r3, r0, #1
 800a76c:	d100      	bne.n	800a770 <_printf_float+0x2d4>
 800a76e:	e6f0      	b.n	800a552 <_printf_float+0xb6>
 800a770:	3601      	adds	r6, #1
 800a772:	e7ed      	b.n	800a750 <_printf_float+0x2b4>
 800a774:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a776:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a778:	429f      	cmp	r7, r3
 800a77a:	dd00      	ble.n	800a77e <_printf_float+0x2e2>
 800a77c:	001f      	movs	r7, r3
 800a77e:	2f00      	cmp	r7, #0
 800a780:	dd08      	ble.n	800a794 <_printf_float+0x2f8>
 800a782:	003b      	movs	r3, r7
 800a784:	002a      	movs	r2, r5
 800a786:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a78a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a78c:	47b0      	blx	r6
 800a78e:	1c43      	adds	r3, r0, #1
 800a790:	d100      	bne.n	800a794 <_printf_float+0x2f8>
 800a792:	e6de      	b.n	800a552 <_printf_float+0xb6>
 800a794:	2300      	movs	r3, #0
 800a796:	930d      	str	r3, [sp, #52]	; 0x34
 800a798:	43fb      	mvns	r3, r7
 800a79a:	17db      	asrs	r3, r3, #31
 800a79c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a79e:	e018      	b.n	800a7d2 <_printf_float+0x336>
 800a7a0:	7fefffff 	.word	0x7fefffff
 800a7a4:	0800f1ee 	.word	0x0800f1ee
 800a7a8:	0800f1ea 	.word	0x0800f1ea
 800a7ac:	0800f1f6 	.word	0x0800f1f6
 800a7b0:	0800f1f2 	.word	0x0800f1f2
 800a7b4:	0800f1fa 	.word	0x0800f1fa
 800a7b8:	0022      	movs	r2, r4
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	321a      	adds	r2, #26
 800a7be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7c2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a7c4:	47b0      	blx	r6
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	d100      	bne.n	800a7cc <_printf_float+0x330>
 800a7ca:	e6c2      	b.n	800a552 <_printf_float+0xb6>
 800a7cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	930d      	str	r3, [sp, #52]	; 0x34
 800a7d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7d4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800a7d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7d8:	403b      	ands	r3, r7
 800a7da:	1af3      	subs	r3, r6, r3
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	dceb      	bgt.n	800a7b8 <_printf_float+0x31c>
 800a7e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7e4:	19ad      	adds	r5, r5, r6
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	db10      	blt.n	800a80c <_printf_float+0x370>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	07db      	lsls	r3, r3, #31
 800a7ee:	d40d      	bmi.n	800a80c <_printf_float+0x370>
 800a7f0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a7f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7f4:	1bbe      	subs	r6, r7, r6
 800a7f6:	1aff      	subs	r7, r7, r3
 800a7f8:	42b7      	cmp	r7, r6
 800a7fa:	dd00      	ble.n	800a7fe <_printf_float+0x362>
 800a7fc:	0037      	movs	r7, r6
 800a7fe:	2f00      	cmp	r7, #0
 800a800:	dc0d      	bgt.n	800a81e <_printf_float+0x382>
 800a802:	43fe      	mvns	r6, r7
 800a804:	17f3      	asrs	r3, r6, #31
 800a806:	2500      	movs	r5, #0
 800a808:	930c      	str	r3, [sp, #48]	; 0x30
 800a80a:	e01c      	b.n	800a846 <_printf_float+0x3aa>
 800a80c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a80e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a810:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a812:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a814:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a816:	47b8      	blx	r7
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d1e9      	bne.n	800a7f0 <_printf_float+0x354>
 800a81c:	e699      	b.n	800a552 <_printf_float+0xb6>
 800a81e:	003b      	movs	r3, r7
 800a820:	002a      	movs	r2, r5
 800a822:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a824:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a826:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a828:	47a8      	blx	r5
 800a82a:	1c43      	adds	r3, r0, #1
 800a82c:	d1e9      	bne.n	800a802 <_printf_float+0x366>
 800a82e:	e690      	b.n	800a552 <_printf_float+0xb6>
 800a830:	0022      	movs	r2, r4
 800a832:	2301      	movs	r3, #1
 800a834:	321a      	adds	r2, #26
 800a836:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a83a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a83c:	47b0      	blx	r6
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	d100      	bne.n	800a844 <_printf_float+0x3a8>
 800a842:	e686      	b.n	800a552 <_printf_float+0xb6>
 800a844:	3501      	adds	r5, #1
 800a846:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a84a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a84c:	1a9b      	subs	r3, r3, r2
 800a84e:	003a      	movs	r2, r7
 800a850:	400a      	ands	r2, r1
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	42ab      	cmp	r3, r5
 800a856:	dceb      	bgt.n	800a830 <_printf_float+0x394>
 800a858:	e744      	b.n	800a6e4 <_printf_float+0x248>
 800a85a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	dc02      	bgt.n	800a866 <_printf_float+0x3ca>
 800a860:	2301      	movs	r3, #1
 800a862:	421a      	tst	r2, r3
 800a864:	d032      	beq.n	800a8cc <_printf_float+0x430>
 800a866:	2301      	movs	r3, #1
 800a868:	002a      	movs	r2, r5
 800a86a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a86e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a870:	47b8      	blx	r7
 800a872:	1c43      	adds	r3, r0, #1
 800a874:	d100      	bne.n	800a878 <_printf_float+0x3dc>
 800a876:	e66c      	b.n	800a552 <_printf_float+0xb6>
 800a878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a87a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a87c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a87e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a880:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a882:	3501      	adds	r5, #1
 800a884:	47b8      	blx	r7
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	d100      	bne.n	800a88c <_printf_float+0x3f0>
 800a88a:	e662      	b.n	800a552 <_printf_float+0xb6>
 800a88c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a88e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a890:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a892:	2200      	movs	r2, #0
 800a894:	1e5f      	subs	r7, r3, #1
 800a896:	2300      	movs	r3, #0
 800a898:	f7f5 fdce 	bl	8000438 <__aeabi_dcmpeq>
 800a89c:	003b      	movs	r3, r7
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d014      	beq.n	800a8cc <_printf_float+0x430>
 800a8a2:	2500      	movs	r5, #0
 800a8a4:	e00a      	b.n	800a8bc <_printf_float+0x420>
 800a8a6:	0022      	movs	r2, r4
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	321a      	adds	r2, #26
 800a8ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a8b2:	47b8      	blx	r7
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d100      	bne.n	800a8ba <_printf_float+0x41e>
 800a8b8:	e64b      	b.n	800a552 <_printf_float+0xb6>
 800a8ba:	3501      	adds	r5, #1
 800a8bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	42ab      	cmp	r3, r5
 800a8c2:	dcf0      	bgt.n	800a8a6 <_printf_float+0x40a>
 800a8c4:	0022      	movs	r2, r4
 800a8c6:	0033      	movs	r3, r6
 800a8c8:	3250      	adds	r2, #80	; 0x50
 800a8ca:	e6db      	b.n	800a684 <_printf_float+0x1e8>
 800a8cc:	002a      	movs	r2, r5
 800a8ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a8d4:	47a8      	blx	r5
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d1f4      	bne.n	800a8c4 <_printf_float+0x428>
 800a8da:	e63a      	b.n	800a552 <_printf_float+0xb6>
 800a8dc:	0022      	movs	r2, r4
 800a8de:	2301      	movs	r3, #1
 800a8e0:	3219      	adds	r2, #25
 800a8e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8e6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a8e8:	47b0      	blx	r6
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	d100      	bne.n	800a8f0 <_printf_float+0x454>
 800a8ee:	e630      	b.n	800a552 <_printf_float+0xb6>
 800a8f0:	3501      	adds	r5, #1
 800a8f2:	68e3      	ldr	r3, [r4, #12]
 800a8f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8f6:	1a9b      	subs	r3, r3, r2
 800a8f8:	42ab      	cmp	r3, r5
 800a8fa:	dcef      	bgt.n	800a8dc <_printf_float+0x440>
 800a8fc:	e6f6      	b.n	800a6ec <_printf_float+0x250>
 800a8fe:	2500      	movs	r5, #0
 800a900:	e7f7      	b.n	800a8f2 <_printf_float+0x456>
 800a902:	2a00      	cmp	r2, #0
 800a904:	d100      	bne.n	800a908 <_printf_float+0x46c>
 800a906:	e689      	b.n	800a61c <_printf_float+0x180>
 800a908:	2100      	movs	r1, #0
 800a90a:	9106      	str	r1, [sp, #24]
 800a90c:	a912      	add	r1, sp, #72	; 0x48
 800a90e:	9105      	str	r1, [sp, #20]
 800a910:	a911      	add	r1, sp, #68	; 0x44
 800a912:	9103      	str	r1, [sp, #12]
 800a914:	2123      	movs	r1, #35	; 0x23
 800a916:	a808      	add	r0, sp, #32
 800a918:	1809      	adds	r1, r1, r0
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	9301      	str	r3, [sp, #4]
 800a91e:	9200      	str	r2, [sp, #0]
 800a920:	002b      	movs	r3, r5
 800a922:	9704      	str	r7, [sp, #16]
 800a924:	9102      	str	r1, [sp, #8]
 800a926:	0032      	movs	r2, r6
 800a928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a92a:	f7ff fd1b 	bl	800a364 <__cvt>
 800a92e:	0005      	movs	r5, r0
 800a930:	e645      	b.n	800a5be <_printf_float+0x122>
 800a932:	46c0      	nop			; (mov r8, r8)

0800a934 <_printf_common>:
 800a934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a936:	0015      	movs	r5, r2
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	688a      	ldr	r2, [r1, #8]
 800a93c:	690b      	ldr	r3, [r1, #16]
 800a93e:	9000      	str	r0, [sp, #0]
 800a940:	000c      	movs	r4, r1
 800a942:	4293      	cmp	r3, r2
 800a944:	da00      	bge.n	800a948 <_printf_common+0x14>
 800a946:	0013      	movs	r3, r2
 800a948:	0022      	movs	r2, r4
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	3243      	adds	r2, #67	; 0x43
 800a94e:	7812      	ldrb	r2, [r2, #0]
 800a950:	2a00      	cmp	r2, #0
 800a952:	d001      	beq.n	800a958 <_printf_common+0x24>
 800a954:	3301      	adds	r3, #1
 800a956:	602b      	str	r3, [r5, #0]
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	069b      	lsls	r3, r3, #26
 800a95c:	d502      	bpl.n	800a964 <_printf_common+0x30>
 800a95e:	682b      	ldr	r3, [r5, #0]
 800a960:	3302      	adds	r3, #2
 800a962:	602b      	str	r3, [r5, #0]
 800a964:	2706      	movs	r7, #6
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	401f      	ands	r7, r3
 800a96a:	d027      	beq.n	800a9bc <_printf_common+0x88>
 800a96c:	0023      	movs	r3, r4
 800a96e:	3343      	adds	r3, #67	; 0x43
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	1e5a      	subs	r2, r3, #1
 800a974:	4193      	sbcs	r3, r2
 800a976:	6822      	ldr	r2, [r4, #0]
 800a978:	0692      	lsls	r2, r2, #26
 800a97a:	d430      	bmi.n	800a9de <_printf_common+0xaa>
 800a97c:	0022      	movs	r2, r4
 800a97e:	9901      	ldr	r1, [sp, #4]
 800a980:	3243      	adds	r2, #67	; 0x43
 800a982:	9800      	ldr	r0, [sp, #0]
 800a984:	9e08      	ldr	r6, [sp, #32]
 800a986:	47b0      	blx	r6
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d025      	beq.n	800a9d8 <_printf_common+0xa4>
 800a98c:	2306      	movs	r3, #6
 800a98e:	6820      	ldr	r0, [r4, #0]
 800a990:	682a      	ldr	r2, [r5, #0]
 800a992:	68e1      	ldr	r1, [r4, #12]
 800a994:	4003      	ands	r3, r0
 800a996:	2500      	movs	r5, #0
 800a998:	2b04      	cmp	r3, #4
 800a99a:	d103      	bne.n	800a9a4 <_printf_common+0x70>
 800a99c:	1a8d      	subs	r5, r1, r2
 800a99e:	43eb      	mvns	r3, r5
 800a9a0:	17db      	asrs	r3, r3, #31
 800a9a2:	401d      	ands	r5, r3
 800a9a4:	68a3      	ldr	r3, [r4, #8]
 800a9a6:	6922      	ldr	r2, [r4, #16]
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	dd01      	ble.n	800a9b0 <_printf_common+0x7c>
 800a9ac:	1a9b      	subs	r3, r3, r2
 800a9ae:	18ed      	adds	r5, r5, r3
 800a9b0:	2700      	movs	r7, #0
 800a9b2:	42bd      	cmp	r5, r7
 800a9b4:	d120      	bne.n	800a9f8 <_printf_common+0xc4>
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	e010      	b.n	800a9dc <_printf_common+0xa8>
 800a9ba:	3701      	adds	r7, #1
 800a9bc:	68e3      	ldr	r3, [r4, #12]
 800a9be:	682a      	ldr	r2, [r5, #0]
 800a9c0:	1a9b      	subs	r3, r3, r2
 800a9c2:	42bb      	cmp	r3, r7
 800a9c4:	ddd2      	ble.n	800a96c <_printf_common+0x38>
 800a9c6:	0022      	movs	r2, r4
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	3219      	adds	r2, #25
 800a9cc:	9901      	ldr	r1, [sp, #4]
 800a9ce:	9800      	ldr	r0, [sp, #0]
 800a9d0:	9e08      	ldr	r6, [sp, #32]
 800a9d2:	47b0      	blx	r6
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d1f0      	bne.n	800a9ba <_printf_common+0x86>
 800a9d8:	2001      	movs	r0, #1
 800a9da:	4240      	negs	r0, r0
 800a9dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9de:	2030      	movs	r0, #48	; 0x30
 800a9e0:	18e1      	adds	r1, r4, r3
 800a9e2:	3143      	adds	r1, #67	; 0x43
 800a9e4:	7008      	strb	r0, [r1, #0]
 800a9e6:	0021      	movs	r1, r4
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	3145      	adds	r1, #69	; 0x45
 800a9ec:	7809      	ldrb	r1, [r1, #0]
 800a9ee:	18a2      	adds	r2, r4, r2
 800a9f0:	3243      	adds	r2, #67	; 0x43
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	7011      	strb	r1, [r2, #0]
 800a9f6:	e7c1      	b.n	800a97c <_printf_common+0x48>
 800a9f8:	0022      	movs	r2, r4
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	321a      	adds	r2, #26
 800a9fe:	9901      	ldr	r1, [sp, #4]
 800aa00:	9800      	ldr	r0, [sp, #0]
 800aa02:	9e08      	ldr	r6, [sp, #32]
 800aa04:	47b0      	blx	r6
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d0e6      	beq.n	800a9d8 <_printf_common+0xa4>
 800aa0a:	3701      	adds	r7, #1
 800aa0c:	e7d1      	b.n	800a9b2 <_printf_common+0x7e>
	...

0800aa10 <_printf_i>:
 800aa10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa12:	b089      	sub	sp, #36	; 0x24
 800aa14:	9204      	str	r2, [sp, #16]
 800aa16:	000a      	movs	r2, r1
 800aa18:	3243      	adds	r2, #67	; 0x43
 800aa1a:	9305      	str	r3, [sp, #20]
 800aa1c:	9003      	str	r0, [sp, #12]
 800aa1e:	9202      	str	r2, [sp, #8]
 800aa20:	7e0a      	ldrb	r2, [r1, #24]
 800aa22:	000c      	movs	r4, r1
 800aa24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa26:	2a6e      	cmp	r2, #110	; 0x6e
 800aa28:	d100      	bne.n	800aa2c <_printf_i+0x1c>
 800aa2a:	e086      	b.n	800ab3a <_printf_i+0x12a>
 800aa2c:	d81f      	bhi.n	800aa6e <_printf_i+0x5e>
 800aa2e:	2a63      	cmp	r2, #99	; 0x63
 800aa30:	d033      	beq.n	800aa9a <_printf_i+0x8a>
 800aa32:	d808      	bhi.n	800aa46 <_printf_i+0x36>
 800aa34:	2a00      	cmp	r2, #0
 800aa36:	d100      	bne.n	800aa3a <_printf_i+0x2a>
 800aa38:	e08c      	b.n	800ab54 <_printf_i+0x144>
 800aa3a:	2a58      	cmp	r2, #88	; 0x58
 800aa3c:	d04d      	beq.n	800aada <_printf_i+0xca>
 800aa3e:	0025      	movs	r5, r4
 800aa40:	3542      	adds	r5, #66	; 0x42
 800aa42:	702a      	strb	r2, [r5, #0]
 800aa44:	e030      	b.n	800aaa8 <_printf_i+0x98>
 800aa46:	2a64      	cmp	r2, #100	; 0x64
 800aa48:	d001      	beq.n	800aa4e <_printf_i+0x3e>
 800aa4a:	2a69      	cmp	r2, #105	; 0x69
 800aa4c:	d1f7      	bne.n	800aa3e <_printf_i+0x2e>
 800aa4e:	6819      	ldr	r1, [r3, #0]
 800aa50:	6825      	ldr	r5, [r4, #0]
 800aa52:	1d0a      	adds	r2, r1, #4
 800aa54:	0628      	lsls	r0, r5, #24
 800aa56:	d529      	bpl.n	800aaac <_printf_i+0x9c>
 800aa58:	6808      	ldr	r0, [r1, #0]
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	da03      	bge.n	800aa68 <_printf_i+0x58>
 800aa60:	232d      	movs	r3, #45	; 0x2d
 800aa62:	9a02      	ldr	r2, [sp, #8]
 800aa64:	4240      	negs	r0, r0
 800aa66:	7013      	strb	r3, [r2, #0]
 800aa68:	4e6b      	ldr	r6, [pc, #428]	; (800ac18 <_printf_i+0x208>)
 800aa6a:	270a      	movs	r7, #10
 800aa6c:	e04f      	b.n	800ab0e <_printf_i+0xfe>
 800aa6e:	2a73      	cmp	r2, #115	; 0x73
 800aa70:	d074      	beq.n	800ab5c <_printf_i+0x14c>
 800aa72:	d808      	bhi.n	800aa86 <_printf_i+0x76>
 800aa74:	2a6f      	cmp	r2, #111	; 0x6f
 800aa76:	d01f      	beq.n	800aab8 <_printf_i+0xa8>
 800aa78:	2a70      	cmp	r2, #112	; 0x70
 800aa7a:	d1e0      	bne.n	800aa3e <_printf_i+0x2e>
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	6809      	ldr	r1, [r1, #0]
 800aa80:	430a      	orrs	r2, r1
 800aa82:	6022      	str	r2, [r4, #0]
 800aa84:	e003      	b.n	800aa8e <_printf_i+0x7e>
 800aa86:	2a75      	cmp	r2, #117	; 0x75
 800aa88:	d016      	beq.n	800aab8 <_printf_i+0xa8>
 800aa8a:	2a78      	cmp	r2, #120	; 0x78
 800aa8c:	d1d7      	bne.n	800aa3e <_printf_i+0x2e>
 800aa8e:	0022      	movs	r2, r4
 800aa90:	2178      	movs	r1, #120	; 0x78
 800aa92:	3245      	adds	r2, #69	; 0x45
 800aa94:	7011      	strb	r1, [r2, #0]
 800aa96:	4e61      	ldr	r6, [pc, #388]	; (800ac1c <_printf_i+0x20c>)
 800aa98:	e022      	b.n	800aae0 <_printf_i+0xd0>
 800aa9a:	0025      	movs	r5, r4
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	3542      	adds	r5, #66	; 0x42
 800aaa0:	1d11      	adds	r1, r2, #4
 800aaa2:	6019      	str	r1, [r3, #0]
 800aaa4:	6813      	ldr	r3, [r2, #0]
 800aaa6:	702b      	strb	r3, [r5, #0]
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e065      	b.n	800ab78 <_printf_i+0x168>
 800aaac:	6808      	ldr	r0, [r1, #0]
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	0669      	lsls	r1, r5, #25
 800aab2:	d5d3      	bpl.n	800aa5c <_printf_i+0x4c>
 800aab4:	b200      	sxth	r0, r0
 800aab6:	e7d1      	b.n	800aa5c <_printf_i+0x4c>
 800aab8:	6819      	ldr	r1, [r3, #0]
 800aaba:	6825      	ldr	r5, [r4, #0]
 800aabc:	1d08      	adds	r0, r1, #4
 800aabe:	6018      	str	r0, [r3, #0]
 800aac0:	6808      	ldr	r0, [r1, #0]
 800aac2:	062e      	lsls	r6, r5, #24
 800aac4:	d505      	bpl.n	800aad2 <_printf_i+0xc2>
 800aac6:	4e54      	ldr	r6, [pc, #336]	; (800ac18 <_printf_i+0x208>)
 800aac8:	2708      	movs	r7, #8
 800aaca:	2a6f      	cmp	r2, #111	; 0x6f
 800aacc:	d01b      	beq.n	800ab06 <_printf_i+0xf6>
 800aace:	270a      	movs	r7, #10
 800aad0:	e019      	b.n	800ab06 <_printf_i+0xf6>
 800aad2:	066d      	lsls	r5, r5, #25
 800aad4:	d5f7      	bpl.n	800aac6 <_printf_i+0xb6>
 800aad6:	b280      	uxth	r0, r0
 800aad8:	e7f5      	b.n	800aac6 <_printf_i+0xb6>
 800aada:	3145      	adds	r1, #69	; 0x45
 800aadc:	4e4e      	ldr	r6, [pc, #312]	; (800ac18 <_printf_i+0x208>)
 800aade:	700a      	strb	r2, [r1, #0]
 800aae0:	6818      	ldr	r0, [r3, #0]
 800aae2:	6822      	ldr	r2, [r4, #0]
 800aae4:	1d01      	adds	r1, r0, #4
 800aae6:	6800      	ldr	r0, [r0, #0]
 800aae8:	6019      	str	r1, [r3, #0]
 800aaea:	0615      	lsls	r5, r2, #24
 800aaec:	d521      	bpl.n	800ab32 <_printf_i+0x122>
 800aaee:	07d3      	lsls	r3, r2, #31
 800aaf0:	d502      	bpl.n	800aaf8 <_printf_i+0xe8>
 800aaf2:	2320      	movs	r3, #32
 800aaf4:	431a      	orrs	r2, r3
 800aaf6:	6022      	str	r2, [r4, #0]
 800aaf8:	2710      	movs	r7, #16
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d103      	bne.n	800ab06 <_printf_i+0xf6>
 800aafe:	2320      	movs	r3, #32
 800ab00:	6822      	ldr	r2, [r4, #0]
 800ab02:	439a      	bics	r2, r3
 800ab04:	6022      	str	r2, [r4, #0]
 800ab06:	0023      	movs	r3, r4
 800ab08:	2200      	movs	r2, #0
 800ab0a:	3343      	adds	r3, #67	; 0x43
 800ab0c:	701a      	strb	r2, [r3, #0]
 800ab0e:	6863      	ldr	r3, [r4, #4]
 800ab10:	60a3      	str	r3, [r4, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	db58      	blt.n	800abc8 <_printf_i+0x1b8>
 800ab16:	2204      	movs	r2, #4
 800ab18:	6821      	ldr	r1, [r4, #0]
 800ab1a:	4391      	bics	r1, r2
 800ab1c:	6021      	str	r1, [r4, #0]
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d154      	bne.n	800abcc <_printf_i+0x1bc>
 800ab22:	9d02      	ldr	r5, [sp, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d05a      	beq.n	800abde <_printf_i+0x1ce>
 800ab28:	0025      	movs	r5, r4
 800ab2a:	7833      	ldrb	r3, [r6, #0]
 800ab2c:	3542      	adds	r5, #66	; 0x42
 800ab2e:	702b      	strb	r3, [r5, #0]
 800ab30:	e055      	b.n	800abde <_printf_i+0x1ce>
 800ab32:	0655      	lsls	r5, r2, #25
 800ab34:	d5db      	bpl.n	800aaee <_printf_i+0xde>
 800ab36:	b280      	uxth	r0, r0
 800ab38:	e7d9      	b.n	800aaee <_printf_i+0xde>
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	680d      	ldr	r5, [r1, #0]
 800ab3e:	1d10      	adds	r0, r2, #4
 800ab40:	6949      	ldr	r1, [r1, #20]
 800ab42:	6018      	str	r0, [r3, #0]
 800ab44:	6813      	ldr	r3, [r2, #0]
 800ab46:	062e      	lsls	r6, r5, #24
 800ab48:	d501      	bpl.n	800ab4e <_printf_i+0x13e>
 800ab4a:	6019      	str	r1, [r3, #0]
 800ab4c:	e002      	b.n	800ab54 <_printf_i+0x144>
 800ab4e:	066d      	lsls	r5, r5, #25
 800ab50:	d5fb      	bpl.n	800ab4a <_printf_i+0x13a>
 800ab52:	8019      	strh	r1, [r3, #0]
 800ab54:	2300      	movs	r3, #0
 800ab56:	9d02      	ldr	r5, [sp, #8]
 800ab58:	6123      	str	r3, [r4, #16]
 800ab5a:	e04f      	b.n	800abfc <_printf_i+0x1ec>
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	1d11      	adds	r1, r2, #4
 800ab60:	6019      	str	r1, [r3, #0]
 800ab62:	6815      	ldr	r5, [r2, #0]
 800ab64:	2100      	movs	r1, #0
 800ab66:	6862      	ldr	r2, [r4, #4]
 800ab68:	0028      	movs	r0, r5
 800ab6a:	f002 fb6b 	bl	800d244 <memchr>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d001      	beq.n	800ab76 <_printf_i+0x166>
 800ab72:	1b40      	subs	r0, r0, r5
 800ab74:	6060      	str	r0, [r4, #4]
 800ab76:	6863      	ldr	r3, [r4, #4]
 800ab78:	6123      	str	r3, [r4, #16]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	9a02      	ldr	r2, [sp, #8]
 800ab7e:	7013      	strb	r3, [r2, #0]
 800ab80:	e03c      	b.n	800abfc <_printf_i+0x1ec>
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	002a      	movs	r2, r5
 800ab86:	9904      	ldr	r1, [sp, #16]
 800ab88:	9803      	ldr	r0, [sp, #12]
 800ab8a:	9d05      	ldr	r5, [sp, #20]
 800ab8c:	47a8      	blx	r5
 800ab8e:	1c43      	adds	r3, r0, #1
 800ab90:	d03e      	beq.n	800ac10 <_printf_i+0x200>
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	079b      	lsls	r3, r3, #30
 800ab96:	d415      	bmi.n	800abc4 <_printf_i+0x1b4>
 800ab98:	9b07      	ldr	r3, [sp, #28]
 800ab9a:	68e0      	ldr	r0, [r4, #12]
 800ab9c:	4298      	cmp	r0, r3
 800ab9e:	da39      	bge.n	800ac14 <_printf_i+0x204>
 800aba0:	0018      	movs	r0, r3
 800aba2:	e037      	b.n	800ac14 <_printf_i+0x204>
 800aba4:	0022      	movs	r2, r4
 800aba6:	2301      	movs	r3, #1
 800aba8:	3219      	adds	r2, #25
 800abaa:	9904      	ldr	r1, [sp, #16]
 800abac:	9803      	ldr	r0, [sp, #12]
 800abae:	9e05      	ldr	r6, [sp, #20]
 800abb0:	47b0      	blx	r6
 800abb2:	1c43      	adds	r3, r0, #1
 800abb4:	d02c      	beq.n	800ac10 <_printf_i+0x200>
 800abb6:	3501      	adds	r5, #1
 800abb8:	68e3      	ldr	r3, [r4, #12]
 800abba:	9a07      	ldr	r2, [sp, #28]
 800abbc:	1a9b      	subs	r3, r3, r2
 800abbe:	42ab      	cmp	r3, r5
 800abc0:	dcf0      	bgt.n	800aba4 <_printf_i+0x194>
 800abc2:	e7e9      	b.n	800ab98 <_printf_i+0x188>
 800abc4:	2500      	movs	r5, #0
 800abc6:	e7f7      	b.n	800abb8 <_printf_i+0x1a8>
 800abc8:	2800      	cmp	r0, #0
 800abca:	d0ad      	beq.n	800ab28 <_printf_i+0x118>
 800abcc:	9d02      	ldr	r5, [sp, #8]
 800abce:	0039      	movs	r1, r7
 800abd0:	f7f5 fb32 	bl	8000238 <__aeabi_uidivmod>
 800abd4:	5c73      	ldrb	r3, [r6, r1]
 800abd6:	3d01      	subs	r5, #1
 800abd8:	702b      	strb	r3, [r5, #0]
 800abda:	2800      	cmp	r0, #0
 800abdc:	d1f7      	bne.n	800abce <_printf_i+0x1be>
 800abde:	2f08      	cmp	r7, #8
 800abe0:	d109      	bne.n	800abf6 <_printf_i+0x1e6>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	07db      	lsls	r3, r3, #31
 800abe6:	d506      	bpl.n	800abf6 <_printf_i+0x1e6>
 800abe8:	6863      	ldr	r3, [r4, #4]
 800abea:	6922      	ldr	r2, [r4, #16]
 800abec:	4293      	cmp	r3, r2
 800abee:	dc02      	bgt.n	800abf6 <_printf_i+0x1e6>
 800abf0:	2330      	movs	r3, #48	; 0x30
 800abf2:	3d01      	subs	r5, #1
 800abf4:	702b      	strb	r3, [r5, #0]
 800abf6:	9b02      	ldr	r3, [sp, #8]
 800abf8:	1b5b      	subs	r3, r3, r5
 800abfa:	6123      	str	r3, [r4, #16]
 800abfc:	9b05      	ldr	r3, [sp, #20]
 800abfe:	aa07      	add	r2, sp, #28
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	0021      	movs	r1, r4
 800ac04:	9b04      	ldr	r3, [sp, #16]
 800ac06:	9803      	ldr	r0, [sp, #12]
 800ac08:	f7ff fe94 	bl	800a934 <_printf_common>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d1b8      	bne.n	800ab82 <_printf_i+0x172>
 800ac10:	2001      	movs	r0, #1
 800ac12:	4240      	negs	r0, r0
 800ac14:	b009      	add	sp, #36	; 0x24
 800ac16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac18:	0800f1fc 	.word	0x0800f1fc
 800ac1c:	0800f20d 	.word	0x0800f20d

0800ac20 <_scanf_float>:
 800ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac22:	b08b      	sub	sp, #44	; 0x2c
 800ac24:	9002      	str	r0, [sp, #8]
 800ac26:	9200      	str	r2, [sp, #0]
 800ac28:	2000      	movs	r0, #0
 800ac2a:	22ae      	movs	r2, #174	; 0xae
 800ac2c:	9305      	str	r3, [sp, #20]
 800ac2e:	688b      	ldr	r3, [r1, #8]
 800ac30:	000e      	movs	r6, r1
 800ac32:	1e59      	subs	r1, r3, #1
 800ac34:	0052      	lsls	r2, r2, #1
 800ac36:	9004      	str	r0, [sp, #16]
 800ac38:	4291      	cmp	r1, r2
 800ac3a:	d905      	bls.n	800ac48 <_scanf_float+0x28>
 800ac3c:	3b5e      	subs	r3, #94	; 0x5e
 800ac3e:	3bff      	subs	r3, #255	; 0xff
 800ac40:	9304      	str	r3, [sp, #16]
 800ac42:	235e      	movs	r3, #94	; 0x5e
 800ac44:	33ff      	adds	r3, #255	; 0xff
 800ac46:	60b3      	str	r3, [r6, #8]
 800ac48:	23f0      	movs	r3, #240	; 0xf0
 800ac4a:	6832      	ldr	r2, [r6, #0]
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	6033      	str	r3, [r6, #0]
 800ac52:	0033      	movs	r3, r6
 800ac54:	2700      	movs	r7, #0
 800ac56:	331c      	adds	r3, #28
 800ac58:	001d      	movs	r5, r3
 800ac5a:	003c      	movs	r4, r7
 800ac5c:	9303      	str	r3, [sp, #12]
 800ac5e:	9708      	str	r7, [sp, #32]
 800ac60:	9707      	str	r7, [sp, #28]
 800ac62:	9701      	str	r7, [sp, #4]
 800ac64:	9706      	str	r7, [sp, #24]
 800ac66:	68b2      	ldr	r2, [r6, #8]
 800ac68:	2a00      	cmp	r2, #0
 800ac6a:	d013      	beq.n	800ac94 <_scanf_float+0x74>
 800ac6c:	9b00      	ldr	r3, [sp, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	9309      	str	r3, [sp, #36]	; 0x24
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	2b49      	cmp	r3, #73	; 0x49
 800ac76:	d100      	bne.n	800ac7a <_scanf_float+0x5a>
 800ac78:	e07c      	b.n	800ad74 <_scanf_float+0x154>
 800ac7a:	d854      	bhi.n	800ad26 <_scanf_float+0x106>
 800ac7c:	2b39      	cmp	r3, #57	; 0x39
 800ac7e:	d847      	bhi.n	800ad10 <_scanf_float+0xf0>
 800ac80:	2b31      	cmp	r3, #49	; 0x31
 800ac82:	d300      	bcc.n	800ac86 <_scanf_float+0x66>
 800ac84:	e094      	b.n	800adb0 <_scanf_float+0x190>
 800ac86:	2b2d      	cmp	r3, #45	; 0x2d
 800ac88:	d100      	bne.n	800ac8c <_scanf_float+0x6c>
 800ac8a:	e09c      	b.n	800adc6 <_scanf_float+0x1a6>
 800ac8c:	d817      	bhi.n	800acbe <_scanf_float+0x9e>
 800ac8e:	2b2b      	cmp	r3, #43	; 0x2b
 800ac90:	d100      	bne.n	800ac94 <_scanf_float+0x74>
 800ac92:	e098      	b.n	800adc6 <_scanf_float+0x1a6>
 800ac94:	9b01      	ldr	r3, [sp, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <_scanf_float+0x82>
 800ac9a:	6832      	ldr	r2, [r6, #0]
 800ac9c:	4b9b      	ldr	r3, [pc, #620]	; (800af0c <_scanf_float+0x2ec>)
 800ac9e:	4013      	ands	r3, r2
 800aca0:	6033      	str	r3, [r6, #0]
 800aca2:	3c01      	subs	r4, #1
 800aca4:	2c01      	cmp	r4, #1
 800aca6:	d900      	bls.n	800acaa <_scanf_float+0x8a>
 800aca8:	e0ee      	b.n	800ae88 <_scanf_float+0x268>
 800acaa:	24be      	movs	r4, #190	; 0xbe
 800acac:	0064      	lsls	r4, r4, #1
 800acae:	9b03      	ldr	r3, [sp, #12]
 800acb0:	429d      	cmp	r5, r3
 800acb2:	d900      	bls.n	800acb6 <_scanf_float+0x96>
 800acb4:	e0de      	b.n	800ae74 <_scanf_float+0x254>
 800acb6:	2701      	movs	r7, #1
 800acb8:	0038      	movs	r0, r7
 800acba:	b00b      	add	sp, #44	; 0x2c
 800acbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acbe:	2b2e      	cmp	r3, #46	; 0x2e
 800acc0:	d100      	bne.n	800acc4 <_scanf_float+0xa4>
 800acc2:	e0a2      	b.n	800ae0a <_scanf_float+0x1ea>
 800acc4:	2b30      	cmp	r3, #48	; 0x30
 800acc6:	d1e5      	bne.n	800ac94 <_scanf_float+0x74>
 800acc8:	6831      	ldr	r1, [r6, #0]
 800acca:	05c8      	lsls	r0, r1, #23
 800accc:	d570      	bpl.n	800adb0 <_scanf_float+0x190>
 800acce:	2380      	movs	r3, #128	; 0x80
 800acd0:	4399      	bics	r1, r3
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	6031      	str	r1, [r6, #0]
 800acd6:	3301      	adds	r3, #1
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	9b04      	ldr	r3, [sp, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d003      	beq.n	800ace8 <_scanf_float+0xc8>
 800ace0:	3b01      	subs	r3, #1
 800ace2:	3201      	adds	r2, #1
 800ace4:	9304      	str	r3, [sp, #16]
 800ace6:	60b2      	str	r2, [r6, #8]
 800ace8:	68b3      	ldr	r3, [r6, #8]
 800acea:	9a00      	ldr	r2, [sp, #0]
 800acec:	3b01      	subs	r3, #1
 800acee:	60b3      	str	r3, [r6, #8]
 800acf0:	6933      	ldr	r3, [r6, #16]
 800acf2:	3301      	adds	r3, #1
 800acf4:	6133      	str	r3, [r6, #16]
 800acf6:	9b00      	ldr	r3, [sp, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	9309      	str	r3, [sp, #36]	; 0x24
 800acfc:	3b01      	subs	r3, #1
 800acfe:	6053      	str	r3, [r2, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	dc00      	bgt.n	800ad06 <_scanf_float+0xe6>
 800ad04:	e0ac      	b.n	800ae60 <_scanf_float+0x240>
 800ad06:	6813      	ldr	r3, [r2, #0]
 800ad08:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	6013      	str	r3, [r2, #0]
 800ad0e:	e7aa      	b.n	800ac66 <_scanf_float+0x46>
 800ad10:	2b45      	cmp	r3, #69	; 0x45
 800ad12:	d100      	bne.n	800ad16 <_scanf_float+0xf6>
 800ad14:	e083      	b.n	800ae1e <_scanf_float+0x1fe>
 800ad16:	2b46      	cmp	r3, #70	; 0x46
 800ad18:	d06d      	beq.n	800adf6 <_scanf_float+0x1d6>
 800ad1a:	2b41      	cmp	r3, #65	; 0x41
 800ad1c:	d1ba      	bne.n	800ac94 <_scanf_float+0x74>
 800ad1e:	2c01      	cmp	r4, #1
 800ad20:	d1b8      	bne.n	800ac94 <_scanf_float+0x74>
 800ad22:	2402      	movs	r4, #2
 800ad24:	e04c      	b.n	800adc0 <_scanf_float+0x1a0>
 800ad26:	2b65      	cmp	r3, #101	; 0x65
 800ad28:	d079      	beq.n	800ae1e <_scanf_float+0x1fe>
 800ad2a:	d81b      	bhi.n	800ad64 <_scanf_float+0x144>
 800ad2c:	2b54      	cmp	r3, #84	; 0x54
 800ad2e:	d067      	beq.n	800ae00 <_scanf_float+0x1e0>
 800ad30:	d813      	bhi.n	800ad5a <_scanf_float+0x13a>
 800ad32:	2b4e      	cmp	r3, #78	; 0x4e
 800ad34:	d1ae      	bne.n	800ac94 <_scanf_float+0x74>
 800ad36:	2c00      	cmp	r4, #0
 800ad38:	d14c      	bne.n	800add4 <_scanf_float+0x1b4>
 800ad3a:	9a01      	ldr	r2, [sp, #4]
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	d14b      	bne.n	800add8 <_scanf_float+0x1b8>
 800ad40:	21e0      	movs	r1, #224	; 0xe0
 800ad42:	20e0      	movs	r0, #224	; 0xe0
 800ad44:	6832      	ldr	r2, [r6, #0]
 800ad46:	00c9      	lsls	r1, r1, #3
 800ad48:	4011      	ands	r1, r2
 800ad4a:	00c0      	lsls	r0, r0, #3
 800ad4c:	4281      	cmp	r1, r0
 800ad4e:	d143      	bne.n	800add8 <_scanf_float+0x1b8>
 800ad50:	496f      	ldr	r1, [pc, #444]	; (800af10 <_scanf_float+0x2f0>)
 800ad52:	3401      	adds	r4, #1
 800ad54:	400a      	ands	r2, r1
 800ad56:	6032      	str	r2, [r6, #0]
 800ad58:	e032      	b.n	800adc0 <_scanf_float+0x1a0>
 800ad5a:	2b59      	cmp	r3, #89	; 0x59
 800ad5c:	d023      	beq.n	800ada6 <_scanf_float+0x186>
 800ad5e:	2b61      	cmp	r3, #97	; 0x61
 800ad60:	d0dd      	beq.n	800ad1e <_scanf_float+0xfe>
 800ad62:	e797      	b.n	800ac94 <_scanf_float+0x74>
 800ad64:	2b6e      	cmp	r3, #110	; 0x6e
 800ad66:	d0e6      	beq.n	800ad36 <_scanf_float+0x116>
 800ad68:	d818      	bhi.n	800ad9c <_scanf_float+0x17c>
 800ad6a:	2b66      	cmp	r3, #102	; 0x66
 800ad6c:	d043      	beq.n	800adf6 <_scanf_float+0x1d6>
 800ad6e:	2b69      	cmp	r3, #105	; 0x69
 800ad70:	d000      	beq.n	800ad74 <_scanf_float+0x154>
 800ad72:	e78f      	b.n	800ac94 <_scanf_float+0x74>
 800ad74:	2f00      	cmp	r7, #0
 800ad76:	d137      	bne.n	800ade8 <_scanf_float+0x1c8>
 800ad78:	9a01      	ldr	r2, [sp, #4]
 800ad7a:	2a00      	cmp	r2, #0
 800ad7c:	d000      	beq.n	800ad80 <_scanf_float+0x160>
 800ad7e:	e78c      	b.n	800ac9a <_scanf_float+0x7a>
 800ad80:	21e0      	movs	r1, #224	; 0xe0
 800ad82:	20e0      	movs	r0, #224	; 0xe0
 800ad84:	6832      	ldr	r2, [r6, #0]
 800ad86:	00c9      	lsls	r1, r1, #3
 800ad88:	4011      	ands	r1, r2
 800ad8a:	00c0      	lsls	r0, r0, #3
 800ad8c:	4281      	cmp	r1, r0
 800ad8e:	d000      	beq.n	800ad92 <_scanf_float+0x172>
 800ad90:	e787      	b.n	800aca2 <_scanf_float+0x82>
 800ad92:	495f      	ldr	r1, [pc, #380]	; (800af10 <_scanf_float+0x2f0>)
 800ad94:	3701      	adds	r7, #1
 800ad96:	400a      	ands	r2, r1
 800ad98:	6032      	str	r2, [r6, #0]
 800ad9a:	e011      	b.n	800adc0 <_scanf_float+0x1a0>
 800ad9c:	2b74      	cmp	r3, #116	; 0x74
 800ad9e:	d02f      	beq.n	800ae00 <_scanf_float+0x1e0>
 800ada0:	2b79      	cmp	r3, #121	; 0x79
 800ada2:	d000      	beq.n	800ada6 <_scanf_float+0x186>
 800ada4:	e776      	b.n	800ac94 <_scanf_float+0x74>
 800ada6:	2f07      	cmp	r7, #7
 800ada8:	d000      	beq.n	800adac <_scanf_float+0x18c>
 800adaa:	e773      	b.n	800ac94 <_scanf_float+0x74>
 800adac:	2708      	movs	r7, #8
 800adae:	e007      	b.n	800adc0 <_scanf_float+0x1a0>
 800adb0:	19e2      	adds	r2, r4, r7
 800adb2:	2a00      	cmp	r2, #0
 800adb4:	d000      	beq.n	800adb8 <_scanf_float+0x198>
 800adb6:	e76d      	b.n	800ac94 <_scanf_float+0x74>
 800adb8:	4a56      	ldr	r2, [pc, #344]	; (800af14 <_scanf_float+0x2f4>)
 800adba:	6831      	ldr	r1, [r6, #0]
 800adbc:	400a      	ands	r2, r1
 800adbe:	6032      	str	r2, [r6, #0]
 800adc0:	702b      	strb	r3, [r5, #0]
 800adc2:	3501      	adds	r5, #1
 800adc4:	e790      	b.n	800ace8 <_scanf_float+0xc8>
 800adc6:	2180      	movs	r1, #128	; 0x80
 800adc8:	6832      	ldr	r2, [r6, #0]
 800adca:	420a      	tst	r2, r1
 800adcc:	d100      	bne.n	800add0 <_scanf_float+0x1b0>
 800adce:	e761      	b.n	800ac94 <_scanf_float+0x74>
 800add0:	438a      	bics	r2, r1
 800add2:	e7f4      	b.n	800adbe <_scanf_float+0x19e>
 800add4:	2c02      	cmp	r4, #2
 800add6:	d041      	beq.n	800ae5c <_scanf_float+0x23c>
 800add8:	2f01      	cmp	r7, #1
 800adda:	d002      	beq.n	800ade2 <_scanf_float+0x1c2>
 800addc:	2f04      	cmp	r7, #4
 800adde:	d000      	beq.n	800ade2 <_scanf_float+0x1c2>
 800ade0:	e758      	b.n	800ac94 <_scanf_float+0x74>
 800ade2:	3701      	adds	r7, #1
 800ade4:	b2ff      	uxtb	r7, r7
 800ade6:	e7eb      	b.n	800adc0 <_scanf_float+0x1a0>
 800ade8:	2102      	movs	r1, #2
 800adea:	1efa      	subs	r2, r7, #3
 800adec:	438a      	bics	r2, r1
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	2a00      	cmp	r2, #0
 800adf2:	d0f6      	beq.n	800ade2 <_scanf_float+0x1c2>
 800adf4:	e74e      	b.n	800ac94 <_scanf_float+0x74>
 800adf6:	2f02      	cmp	r7, #2
 800adf8:	d000      	beq.n	800adfc <_scanf_float+0x1dc>
 800adfa:	e74b      	b.n	800ac94 <_scanf_float+0x74>
 800adfc:	2703      	movs	r7, #3
 800adfe:	e7df      	b.n	800adc0 <_scanf_float+0x1a0>
 800ae00:	2f06      	cmp	r7, #6
 800ae02:	d000      	beq.n	800ae06 <_scanf_float+0x1e6>
 800ae04:	e746      	b.n	800ac94 <_scanf_float+0x74>
 800ae06:	2707      	movs	r7, #7
 800ae08:	e7da      	b.n	800adc0 <_scanf_float+0x1a0>
 800ae0a:	6832      	ldr	r2, [r6, #0]
 800ae0c:	0591      	lsls	r1, r2, #22
 800ae0e:	d400      	bmi.n	800ae12 <_scanf_float+0x1f2>
 800ae10:	e740      	b.n	800ac94 <_scanf_float+0x74>
 800ae12:	4941      	ldr	r1, [pc, #260]	; (800af18 <_scanf_float+0x2f8>)
 800ae14:	400a      	ands	r2, r1
 800ae16:	6032      	str	r2, [r6, #0]
 800ae18:	9a01      	ldr	r2, [sp, #4]
 800ae1a:	9206      	str	r2, [sp, #24]
 800ae1c:	e7d0      	b.n	800adc0 <_scanf_float+0x1a0>
 800ae1e:	21a0      	movs	r1, #160	; 0xa0
 800ae20:	2080      	movs	r0, #128	; 0x80
 800ae22:	6832      	ldr	r2, [r6, #0]
 800ae24:	00c9      	lsls	r1, r1, #3
 800ae26:	4011      	ands	r1, r2
 800ae28:	00c0      	lsls	r0, r0, #3
 800ae2a:	4281      	cmp	r1, r0
 800ae2c:	d006      	beq.n	800ae3c <_scanf_float+0x21c>
 800ae2e:	4202      	tst	r2, r0
 800ae30:	d100      	bne.n	800ae34 <_scanf_float+0x214>
 800ae32:	e72f      	b.n	800ac94 <_scanf_float+0x74>
 800ae34:	9901      	ldr	r1, [sp, #4]
 800ae36:	2900      	cmp	r1, #0
 800ae38:	d100      	bne.n	800ae3c <_scanf_float+0x21c>
 800ae3a:	e732      	b.n	800aca2 <_scanf_float+0x82>
 800ae3c:	0591      	lsls	r1, r2, #22
 800ae3e:	d404      	bmi.n	800ae4a <_scanf_float+0x22a>
 800ae40:	9901      	ldr	r1, [sp, #4]
 800ae42:	9806      	ldr	r0, [sp, #24]
 800ae44:	9508      	str	r5, [sp, #32]
 800ae46:	1a09      	subs	r1, r1, r0
 800ae48:	9107      	str	r1, [sp, #28]
 800ae4a:	4931      	ldr	r1, [pc, #196]	; (800af10 <_scanf_float+0x2f0>)
 800ae4c:	400a      	ands	r2, r1
 800ae4e:	21c0      	movs	r1, #192	; 0xc0
 800ae50:	0049      	lsls	r1, r1, #1
 800ae52:	430a      	orrs	r2, r1
 800ae54:	6032      	str	r2, [r6, #0]
 800ae56:	2200      	movs	r2, #0
 800ae58:	9201      	str	r2, [sp, #4]
 800ae5a:	e7b1      	b.n	800adc0 <_scanf_float+0x1a0>
 800ae5c:	2403      	movs	r4, #3
 800ae5e:	e7af      	b.n	800adc0 <_scanf_float+0x1a0>
 800ae60:	23c0      	movs	r3, #192	; 0xc0
 800ae62:	005b      	lsls	r3, r3, #1
 800ae64:	58f3      	ldr	r3, [r6, r3]
 800ae66:	9900      	ldr	r1, [sp, #0]
 800ae68:	9802      	ldr	r0, [sp, #8]
 800ae6a:	4798      	blx	r3
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d100      	bne.n	800ae72 <_scanf_float+0x252>
 800ae70:	e6f9      	b.n	800ac66 <_scanf_float+0x46>
 800ae72:	e70f      	b.n	800ac94 <_scanf_float+0x74>
 800ae74:	3d01      	subs	r5, #1
 800ae76:	5933      	ldr	r3, [r6, r4]
 800ae78:	7829      	ldrb	r1, [r5, #0]
 800ae7a:	9a00      	ldr	r2, [sp, #0]
 800ae7c:	9802      	ldr	r0, [sp, #8]
 800ae7e:	4798      	blx	r3
 800ae80:	6933      	ldr	r3, [r6, #16]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	6133      	str	r3, [r6, #16]
 800ae86:	e712      	b.n	800acae <_scanf_float+0x8e>
 800ae88:	1e7b      	subs	r3, r7, #1
 800ae8a:	2b06      	cmp	r3, #6
 800ae8c:	d826      	bhi.n	800aedc <_scanf_float+0x2bc>
 800ae8e:	2f02      	cmp	r7, #2
 800ae90:	d839      	bhi.n	800af06 <_scanf_float+0x2e6>
 800ae92:	24be      	movs	r4, #190	; 0xbe
 800ae94:	0064      	lsls	r4, r4, #1
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	429d      	cmp	r5, r3
 800ae9a:	d800      	bhi.n	800ae9e <_scanf_float+0x27e>
 800ae9c:	e70b      	b.n	800acb6 <_scanf_float+0x96>
 800ae9e:	3d01      	subs	r5, #1
 800aea0:	5933      	ldr	r3, [r6, r4]
 800aea2:	7829      	ldrb	r1, [r5, #0]
 800aea4:	9a00      	ldr	r2, [sp, #0]
 800aea6:	9802      	ldr	r0, [sp, #8]
 800aea8:	4798      	blx	r3
 800aeaa:	6933      	ldr	r3, [r6, #16]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	6133      	str	r3, [r6, #16]
 800aeb0:	e7f1      	b.n	800ae96 <_scanf_float+0x276>
 800aeb2:	9b04      	ldr	r3, [sp, #16]
 800aeb4:	9a00      	ldr	r2, [sp, #0]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	9304      	str	r3, [sp, #16]
 800aeba:	7819      	ldrb	r1, [r3, #0]
 800aebc:	23be      	movs	r3, #190	; 0xbe
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	58f3      	ldr	r3, [r6, r3]
 800aec2:	9802      	ldr	r0, [sp, #8]
 800aec4:	9309      	str	r3, [sp, #36]	; 0x24
 800aec6:	4798      	blx	r3
 800aec8:	6933      	ldr	r3, [r6, #16]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	6133      	str	r3, [r6, #16]
 800aece:	3c01      	subs	r4, #1
 800aed0:	b2e4      	uxtb	r4, r4
 800aed2:	2c02      	cmp	r4, #2
 800aed4:	d1ed      	bne.n	800aeb2 <_scanf_float+0x292>
 800aed6:	3f03      	subs	r7, #3
 800aed8:	b2ff      	uxtb	r7, r7
 800aeda:	1bed      	subs	r5, r5, r7
 800aedc:	6833      	ldr	r3, [r6, #0]
 800aede:	05da      	lsls	r2, r3, #23
 800aee0:	d537      	bpl.n	800af52 <_scanf_float+0x332>
 800aee2:	055b      	lsls	r3, r3, #21
 800aee4:	d51a      	bpl.n	800af1c <_scanf_float+0x2fc>
 800aee6:	24be      	movs	r4, #190	; 0xbe
 800aee8:	0064      	lsls	r4, r4, #1
 800aeea:	9b03      	ldr	r3, [sp, #12]
 800aeec:	429d      	cmp	r5, r3
 800aeee:	d800      	bhi.n	800aef2 <_scanf_float+0x2d2>
 800aef0:	e6e1      	b.n	800acb6 <_scanf_float+0x96>
 800aef2:	3d01      	subs	r5, #1
 800aef4:	5933      	ldr	r3, [r6, r4]
 800aef6:	7829      	ldrb	r1, [r5, #0]
 800aef8:	9a00      	ldr	r2, [sp, #0]
 800aefa:	9802      	ldr	r0, [sp, #8]
 800aefc:	4798      	blx	r3
 800aefe:	6933      	ldr	r3, [r6, #16]
 800af00:	3b01      	subs	r3, #1
 800af02:	6133      	str	r3, [r6, #16]
 800af04:	e7f1      	b.n	800aeea <_scanf_float+0x2ca>
 800af06:	003c      	movs	r4, r7
 800af08:	9504      	str	r5, [sp, #16]
 800af0a:	e7e0      	b.n	800aece <_scanf_float+0x2ae>
 800af0c:	fffffeff 	.word	0xfffffeff
 800af10:	fffff87f 	.word	0xfffff87f
 800af14:	fffffe7f 	.word	0xfffffe7f
 800af18:	fffffd7f 	.word	0xfffffd7f
 800af1c:	6933      	ldr	r3, [r6, #16]
 800af1e:	1e6c      	subs	r4, r5, #1
 800af20:	7821      	ldrb	r1, [r4, #0]
 800af22:	3b01      	subs	r3, #1
 800af24:	6133      	str	r3, [r6, #16]
 800af26:	2965      	cmp	r1, #101	; 0x65
 800af28:	d00c      	beq.n	800af44 <_scanf_float+0x324>
 800af2a:	2945      	cmp	r1, #69	; 0x45
 800af2c:	d00a      	beq.n	800af44 <_scanf_float+0x324>
 800af2e:	23be      	movs	r3, #190	; 0xbe
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	58f3      	ldr	r3, [r6, r3]
 800af34:	9a00      	ldr	r2, [sp, #0]
 800af36:	9802      	ldr	r0, [sp, #8]
 800af38:	4798      	blx	r3
 800af3a:	6933      	ldr	r3, [r6, #16]
 800af3c:	1eac      	subs	r4, r5, #2
 800af3e:	3b01      	subs	r3, #1
 800af40:	7821      	ldrb	r1, [r4, #0]
 800af42:	6133      	str	r3, [r6, #16]
 800af44:	23be      	movs	r3, #190	; 0xbe
 800af46:	005b      	lsls	r3, r3, #1
 800af48:	58f3      	ldr	r3, [r6, r3]
 800af4a:	9a00      	ldr	r2, [sp, #0]
 800af4c:	9802      	ldr	r0, [sp, #8]
 800af4e:	4798      	blx	r3
 800af50:	0025      	movs	r5, r4
 800af52:	2710      	movs	r7, #16
 800af54:	6833      	ldr	r3, [r6, #0]
 800af56:	401f      	ands	r7, r3
 800af58:	d15b      	bne.n	800b012 <_scanf_float+0x3f2>
 800af5a:	23c0      	movs	r3, #192	; 0xc0
 800af5c:	702f      	strb	r7, [r5, #0]
 800af5e:	6832      	ldr	r2, [r6, #0]
 800af60:	00db      	lsls	r3, r3, #3
 800af62:	4013      	ands	r3, r2
 800af64:	2280      	movs	r2, #128	; 0x80
 800af66:	00d2      	lsls	r2, r2, #3
 800af68:	4293      	cmp	r3, r2
 800af6a:	d11b      	bne.n	800afa4 <_scanf_float+0x384>
 800af6c:	9a06      	ldr	r2, [sp, #24]
 800af6e:	9b01      	ldr	r3, [sp, #4]
 800af70:	1a9b      	subs	r3, r3, r2
 800af72:	425a      	negs	r2, r3
 800af74:	2b00      	cmp	r3, #0
 800af76:	d122      	bne.n	800afbe <_scanf_float+0x39e>
 800af78:	2200      	movs	r2, #0
 800af7a:	9903      	ldr	r1, [sp, #12]
 800af7c:	9802      	ldr	r0, [sp, #8]
 800af7e:	f000 fef3 	bl	800bd68 <_strtod_r>
 800af82:	9b05      	ldr	r3, [sp, #20]
 800af84:	0004      	movs	r4, r0
 800af86:	6830      	ldr	r0, [r6, #0]
 800af88:	000d      	movs	r5, r1
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	0782      	lsls	r2, r0, #30
 800af8e:	d523      	bpl.n	800afd8 <_scanf_float+0x3b8>
 800af90:	1d1a      	adds	r2, r3, #4
 800af92:	9905      	ldr	r1, [sp, #20]
 800af94:	600a      	str	r2, [r1, #0]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	601c      	str	r4, [r3, #0]
 800af9a:	605d      	str	r5, [r3, #4]
 800af9c:	68f3      	ldr	r3, [r6, #12]
 800af9e:	3301      	adds	r3, #1
 800afa0:	60f3      	str	r3, [r6, #12]
 800afa2:	e689      	b.n	800acb8 <_scanf_float+0x98>
 800afa4:	9b07      	ldr	r3, [sp, #28]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0e6      	beq.n	800af78 <_scanf_float+0x358>
 800afaa:	9b08      	ldr	r3, [sp, #32]
 800afac:	003a      	movs	r2, r7
 800afae:	1c59      	adds	r1, r3, #1
 800afb0:	9802      	ldr	r0, [sp, #8]
 800afb2:	230a      	movs	r3, #10
 800afb4:	f000 ff68 	bl	800be88 <_strtol_r>
 800afb8:	9b07      	ldr	r3, [sp, #28]
 800afba:	9d08      	ldr	r5, [sp, #32]
 800afbc:	1ac2      	subs	r2, r0, r3
 800afbe:	0033      	movs	r3, r6
 800afc0:	3370      	adds	r3, #112	; 0x70
 800afc2:	33ff      	adds	r3, #255	; 0xff
 800afc4:	429d      	cmp	r5, r3
 800afc6:	d302      	bcc.n	800afce <_scanf_float+0x3ae>
 800afc8:	0035      	movs	r5, r6
 800afca:	356f      	adds	r5, #111	; 0x6f
 800afcc:	35ff      	adds	r5, #255	; 0xff
 800afce:	4912      	ldr	r1, [pc, #72]	; (800b018 <_scanf_float+0x3f8>)
 800afd0:	0028      	movs	r0, r5
 800afd2:	f000 f839 	bl	800b048 <siprintf>
 800afd6:	e7cf      	b.n	800af78 <_scanf_float+0x358>
 800afd8:	2104      	movs	r1, #4
 800afda:	4008      	ands	r0, r1
 800afdc:	1d1a      	adds	r2, r3, #4
 800afde:	9001      	str	r0, [sp, #4]
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d1d6      	bne.n	800af92 <_scanf_float+0x372>
 800afe4:	9905      	ldr	r1, [sp, #20]
 800afe6:	0020      	movs	r0, r4
 800afe8:	600a      	str	r2, [r1, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	0022      	movs	r2, r4
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	0029      	movs	r1, r5
 800aff2:	002b      	movs	r3, r5
 800aff4:	f7f7 f878 	bl	80020e8 <__aeabi_dcmpun>
 800aff8:	2800      	cmp	r0, #0
 800affa:	d005      	beq.n	800b008 <_scanf_float+0x3e8>
 800affc:	9801      	ldr	r0, [sp, #4]
 800affe:	f000 f81f 	bl	800b040 <nanf>
 800b002:	9b00      	ldr	r3, [sp, #0]
 800b004:	6018      	str	r0, [r3, #0]
 800b006:	e7c9      	b.n	800af9c <_scanf_float+0x37c>
 800b008:	0020      	movs	r0, r4
 800b00a:	0029      	movs	r1, r5
 800b00c:	f7f7 f92a 	bl	8002264 <__aeabi_d2f>
 800b010:	e7f7      	b.n	800b002 <_scanf_float+0x3e2>
 800b012:	2700      	movs	r7, #0
 800b014:	e650      	b.n	800acb8 <_scanf_float+0x98>
 800b016:	46c0      	nop			; (mov r8, r8)
 800b018:	0800f21e 	.word	0x0800f21e

0800b01c <_sbrk_r>:
 800b01c:	2300      	movs	r3, #0
 800b01e:	b570      	push	{r4, r5, r6, lr}
 800b020:	4c06      	ldr	r4, [pc, #24]	; (800b03c <_sbrk_r+0x20>)
 800b022:	0005      	movs	r5, r0
 800b024:	0008      	movs	r0, r1
 800b026:	6023      	str	r3, [r4, #0]
 800b028:	f7f8 fc1e 	bl	8003868 <_sbrk>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d103      	bne.n	800b038 <_sbrk_r+0x1c>
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d000      	beq.n	800b038 <_sbrk_r+0x1c>
 800b036:	602b      	str	r3, [r5, #0]
 800b038:	bd70      	pop	{r4, r5, r6, pc}
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	200028d8 	.word	0x200028d8

0800b040 <nanf>:
 800b040:	4800      	ldr	r0, [pc, #0]	; (800b044 <nanf+0x4>)
 800b042:	4770      	bx	lr
 800b044:	7fc00000 	.word	0x7fc00000

0800b048 <siprintf>:
 800b048:	b40e      	push	{r1, r2, r3}
 800b04a:	b500      	push	{lr}
 800b04c:	490b      	ldr	r1, [pc, #44]	; (800b07c <siprintf+0x34>)
 800b04e:	b09c      	sub	sp, #112	; 0x70
 800b050:	ab1d      	add	r3, sp, #116	; 0x74
 800b052:	9002      	str	r0, [sp, #8]
 800b054:	9006      	str	r0, [sp, #24]
 800b056:	9107      	str	r1, [sp, #28]
 800b058:	9104      	str	r1, [sp, #16]
 800b05a:	4809      	ldr	r0, [pc, #36]	; (800b080 <siprintf+0x38>)
 800b05c:	4909      	ldr	r1, [pc, #36]	; (800b084 <siprintf+0x3c>)
 800b05e:	cb04      	ldmia	r3!, {r2}
 800b060:	9105      	str	r1, [sp, #20]
 800b062:	6800      	ldr	r0, [r0, #0]
 800b064:	a902      	add	r1, sp, #8
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	f002 fd60 	bl	800db2c <_svfiprintf_r>
 800b06c:	2300      	movs	r3, #0
 800b06e:	9a02      	ldr	r2, [sp, #8]
 800b070:	7013      	strb	r3, [r2, #0]
 800b072:	b01c      	add	sp, #112	; 0x70
 800b074:	bc08      	pop	{r3}
 800b076:	b003      	add	sp, #12
 800b078:	4718      	bx	r3
 800b07a:	46c0      	nop			; (mov r8, r8)
 800b07c:	7fffffff 	.word	0x7fffffff
 800b080:	20000044 	.word	0x20000044
 800b084:	ffff0208 	.word	0xffff0208

0800b088 <strcat>:
 800b088:	0002      	movs	r2, r0
 800b08a:	b510      	push	{r4, lr}
 800b08c:	7813      	ldrb	r3, [r2, #0]
 800b08e:	1c54      	adds	r4, r2, #1
 800b090:	2b00      	cmp	r3, #0
 800b092:	d105      	bne.n	800b0a0 <strcat+0x18>
 800b094:	5ccc      	ldrb	r4, [r1, r3]
 800b096:	54d4      	strb	r4, [r2, r3]
 800b098:	3301      	adds	r3, #1
 800b09a:	2c00      	cmp	r4, #0
 800b09c:	d1fa      	bne.n	800b094 <strcat+0xc>
 800b09e:	bd10      	pop	{r4, pc}
 800b0a0:	0022      	movs	r2, r4
 800b0a2:	e7f3      	b.n	800b08c <strcat+0x4>

0800b0a4 <strcpy>:
 800b0a4:	0003      	movs	r3, r0
 800b0a6:	780a      	ldrb	r2, [r1, #0]
 800b0a8:	3101      	adds	r1, #1
 800b0aa:	701a      	strb	r2, [r3, #0]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	2a00      	cmp	r2, #0
 800b0b0:	d1f9      	bne.n	800b0a6 <strcpy+0x2>
 800b0b2:	4770      	bx	lr

0800b0b4 <strstr>:
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	7803      	ldrb	r3, [r0, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10f      	bne.n	800b0dc <strstr+0x28>
 800b0bc:	780b      	ldrb	r3, [r1, #0]
 800b0be:	425a      	negs	r2, r3
 800b0c0:	4153      	adcs	r3, r2
 800b0c2:	425b      	negs	r3, r3
 800b0c4:	4018      	ands	r0, r3
 800b0c6:	bd10      	pop	{r4, pc}
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	5cca      	ldrb	r2, [r1, r3]
 800b0cc:	2a00      	cmp	r2, #0
 800b0ce:	d0fa      	beq.n	800b0c6 <strstr+0x12>
 800b0d0:	5cc4      	ldrb	r4, [r0, r3]
 800b0d2:	4294      	cmp	r4, r2
 800b0d4:	d101      	bne.n	800b0da <strstr+0x26>
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	e7f7      	b.n	800b0ca <strstr+0x16>
 800b0da:	3001      	adds	r0, #1
 800b0dc:	7803      	ldrb	r3, [r0, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1f2      	bne.n	800b0c8 <strstr+0x14>
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	e7ef      	b.n	800b0c6 <strstr+0x12>
	...

0800b0e8 <sulp>:
 800b0e8:	b570      	push	{r4, r5, r6, lr}
 800b0ea:	0016      	movs	r6, r2
 800b0ec:	000d      	movs	r5, r1
 800b0ee:	f002 fb87 	bl	800d800 <__ulp>
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	d00d      	beq.n	800b112 <sulp+0x2a>
 800b0f6:	236b      	movs	r3, #107	; 0x6b
 800b0f8:	006a      	lsls	r2, r5, #1
 800b0fa:	0d52      	lsrs	r2, r2, #21
 800b0fc:	1a9b      	subs	r3, r3, r2
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	dd07      	ble.n	800b112 <sulp+0x2a>
 800b102:	2400      	movs	r4, #0
 800b104:	4a03      	ldr	r2, [pc, #12]	; (800b114 <sulp+0x2c>)
 800b106:	051b      	lsls	r3, r3, #20
 800b108:	189d      	adds	r5, r3, r2
 800b10a:	002b      	movs	r3, r5
 800b10c:	0022      	movs	r2, r4
 800b10e:	f7f6 fa31 	bl	8001574 <__aeabi_dmul>
 800b112:	bd70      	pop	{r4, r5, r6, pc}
 800b114:	3ff00000 	.word	0x3ff00000

0800b118 <_strtod_l>:
 800b118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b11a:	b0a7      	sub	sp, #156	; 0x9c
 800b11c:	9307      	str	r3, [sp, #28]
 800b11e:	2300      	movs	r3, #0
 800b120:	9004      	str	r0, [sp, #16]
 800b122:	9807      	ldr	r0, [sp, #28]
 800b124:	9322      	str	r3, [sp, #136]	; 0x88
 800b126:	9106      	str	r1, [sp, #24]
 800b128:	921d      	str	r2, [sp, #116]	; 0x74
 800b12a:	f002 f86b 	bl	800d204 <__localeconv_l>
 800b12e:	0005      	movs	r5, r0
 800b130:	6800      	ldr	r0, [r0, #0]
 800b132:	f7f4 ffe9 	bl	8000108 <strlen>
 800b136:	2600      	movs	r6, #0
 800b138:	2700      	movs	r7, #0
 800b13a:	9b06      	ldr	r3, [sp, #24]
 800b13c:	9005      	str	r0, [sp, #20]
 800b13e:	9321      	str	r3, [sp, #132]	; 0x84
 800b140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b142:	781a      	ldrb	r2, [r3, #0]
 800b144:	2a0d      	cmp	r2, #13
 800b146:	d839      	bhi.n	800b1bc <_strtod_l+0xa4>
 800b148:	2a09      	cmp	r2, #9
 800b14a:	d23d      	bcs.n	800b1c8 <_strtod_l+0xb0>
 800b14c:	2a00      	cmp	r2, #0
 800b14e:	d044      	beq.n	800b1da <_strtod_l+0xc2>
 800b150:	2300      	movs	r3, #0
 800b152:	9313      	str	r3, [sp, #76]	; 0x4c
 800b154:	2200      	movs	r2, #0
 800b156:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800b158:	920c      	str	r2, [sp, #48]	; 0x30
 800b15a:	7823      	ldrb	r3, [r4, #0]
 800b15c:	2b30      	cmp	r3, #48	; 0x30
 800b15e:	d000      	beq.n	800b162 <_strtod_l+0x4a>
 800b160:	e07e      	b.n	800b260 <_strtod_l+0x148>
 800b162:	7863      	ldrb	r3, [r4, #1]
 800b164:	2b58      	cmp	r3, #88	; 0x58
 800b166:	d002      	beq.n	800b16e <_strtod_l+0x56>
 800b168:	2b78      	cmp	r3, #120	; 0x78
 800b16a:	d000      	beq.n	800b16e <_strtod_l+0x56>
 800b16c:	e06e      	b.n	800b24c <_strtod_l+0x134>
 800b16e:	9b07      	ldr	r3, [sp, #28]
 800b170:	4a96      	ldr	r2, [pc, #600]	; (800b3cc <_strtod_l+0x2b4>)
 800b172:	9302      	str	r3, [sp, #8]
 800b174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b176:	a921      	add	r1, sp, #132	; 0x84
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	ab22      	add	r3, sp, #136	; 0x88
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	9804      	ldr	r0, [sp, #16]
 800b180:	ab23      	add	r3, sp, #140	; 0x8c
 800b182:	f001 fd54 	bl	800cc2e <__gethex>
 800b186:	2507      	movs	r5, #7
 800b188:	9005      	str	r0, [sp, #20]
 800b18a:	4005      	ands	r5, r0
 800b18c:	d005      	beq.n	800b19a <_strtod_l+0x82>
 800b18e:	2d06      	cmp	r5, #6
 800b190:	d12f      	bne.n	800b1f2 <_strtod_l+0xda>
 800b192:	2300      	movs	r3, #0
 800b194:	3401      	adds	r4, #1
 800b196:	9421      	str	r4, [sp, #132]	; 0x84
 800b198:	9313      	str	r3, [sp, #76]	; 0x4c
 800b19a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <_strtod_l+0x8e>
 800b1a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01d      	beq.n	800b1e8 <_strtod_l+0xd0>
 800b1ac:	2380      	movs	r3, #128	; 0x80
 800b1ae:	0032      	movs	r2, r6
 800b1b0:	061b      	lsls	r3, r3, #24
 800b1b2:	18fb      	adds	r3, r7, r3
 800b1b4:	0010      	movs	r0, r2
 800b1b6:	0019      	movs	r1, r3
 800b1b8:	b027      	add	sp, #156	; 0x9c
 800b1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1bc:	2a2b      	cmp	r2, #43	; 0x2b
 800b1be:	d016      	beq.n	800b1ee <_strtod_l+0xd6>
 800b1c0:	2a2d      	cmp	r2, #45	; 0x2d
 800b1c2:	d003      	beq.n	800b1cc <_strtod_l+0xb4>
 800b1c4:	2a20      	cmp	r2, #32
 800b1c6:	d1c3      	bne.n	800b150 <_strtod_l+0x38>
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	e7b8      	b.n	800b13e <_strtod_l+0x26>
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	9213      	str	r2, [sp, #76]	; 0x4c
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	9221      	str	r2, [sp, #132]	; 0x84
 800b1d4:	785b      	ldrb	r3, [r3, #1]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1bc      	bne.n	800b154 <_strtod_l+0x3c>
 800b1da:	9b06      	ldr	r3, [sp, #24]
 800b1dc:	9321      	str	r3, [sp, #132]	; 0x84
 800b1de:	2300      	movs	r3, #0
 800b1e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b1e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1db      	bne.n	800b1a0 <_strtod_l+0x88>
 800b1e8:	0032      	movs	r2, r6
 800b1ea:	003b      	movs	r3, r7
 800b1ec:	e7e2      	b.n	800b1b4 <_strtod_l+0x9c>
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	e7ed      	b.n	800b1ce <_strtod_l+0xb6>
 800b1f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	d007      	beq.n	800b208 <_strtod_l+0xf0>
 800b1f8:	2135      	movs	r1, #53	; 0x35
 800b1fa:	a824      	add	r0, sp, #144	; 0x90
 800b1fc:	f002 fbed 	bl	800d9da <__copybits>
 800b200:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b202:	9804      	ldr	r0, [sp, #16]
 800b204:	f002 f863 	bl	800d2ce <_Bfree>
 800b208:	1e68      	subs	r0, r5, #1
 800b20a:	2804      	cmp	r0, #4
 800b20c:	d806      	bhi.n	800b21c <_strtod_l+0x104>
 800b20e:	f7f4 ff83 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b212:	030c      	.short	0x030c
 800b214:	1917      	.short	0x1917
 800b216:	0c          	.byte	0x0c
 800b217:	00          	.byte	0x00
 800b218:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b21a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800b21c:	9b05      	ldr	r3, [sp, #20]
 800b21e:	071b      	lsls	r3, r3, #28
 800b220:	d5bb      	bpl.n	800b19a <_strtod_l+0x82>
 800b222:	2380      	movs	r3, #128	; 0x80
 800b224:	061b      	lsls	r3, r3, #24
 800b226:	431f      	orrs	r7, r3
 800b228:	e7b7      	b.n	800b19a <_strtod_l+0x82>
 800b22a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b22c:	4a68      	ldr	r2, [pc, #416]	; (800b3d0 <_strtod_l+0x2b8>)
 800b22e:	4969      	ldr	r1, [pc, #420]	; (800b3d4 <_strtod_l+0x2bc>)
 800b230:	401a      	ands	r2, r3
 800b232:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b234:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b236:	185b      	adds	r3, r3, r1
 800b238:	051b      	lsls	r3, r3, #20
 800b23a:	431a      	orrs	r2, r3
 800b23c:	0017      	movs	r7, r2
 800b23e:	e7ed      	b.n	800b21c <_strtod_l+0x104>
 800b240:	4f65      	ldr	r7, [pc, #404]	; (800b3d8 <_strtod_l+0x2c0>)
 800b242:	e7eb      	b.n	800b21c <_strtod_l+0x104>
 800b244:	2601      	movs	r6, #1
 800b246:	4f65      	ldr	r7, [pc, #404]	; (800b3dc <_strtod_l+0x2c4>)
 800b248:	4276      	negs	r6, r6
 800b24a:	e7e7      	b.n	800b21c <_strtod_l+0x104>
 800b24c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b24e:	1c5a      	adds	r2, r3, #1
 800b250:	9221      	str	r2, [sp, #132]	; 0x84
 800b252:	785b      	ldrb	r3, [r3, #1]
 800b254:	2b30      	cmp	r3, #48	; 0x30
 800b256:	d0f9      	beq.n	800b24c <_strtod_l+0x134>
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d09e      	beq.n	800b19a <_strtod_l+0x82>
 800b25c:	2301      	movs	r3, #1
 800b25e:	930c      	str	r3, [sp, #48]	; 0x30
 800b260:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b262:	220a      	movs	r2, #10
 800b264:	9312      	str	r3, [sp, #72]	; 0x48
 800b266:	2300      	movs	r3, #0
 800b268:	930b      	str	r3, [sp, #44]	; 0x2c
 800b26a:	9308      	str	r3, [sp, #32]
 800b26c:	930a      	str	r3, [sp, #40]	; 0x28
 800b26e:	9821      	ldr	r0, [sp, #132]	; 0x84
 800b270:	7804      	ldrb	r4, [r0, #0]
 800b272:	0023      	movs	r3, r4
 800b274:	3b30      	subs	r3, #48	; 0x30
 800b276:	b2d9      	uxtb	r1, r3
 800b278:	2909      	cmp	r1, #9
 800b27a:	d934      	bls.n	800b2e6 <_strtod_l+0x1ce>
 800b27c:	9a05      	ldr	r2, [sp, #20]
 800b27e:	6829      	ldr	r1, [r5, #0]
 800b280:	f002 fd52 	bl	800dd28 <strncmp>
 800b284:	2800      	cmp	r0, #0
 800b286:	d040      	beq.n	800b30a <_strtod_l+0x1f2>
 800b288:	2000      	movs	r0, #0
 800b28a:	0023      	movs	r3, r4
 800b28c:	4684      	mov	ip, r0
 800b28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b290:	9007      	str	r0, [sp, #28]
 800b292:	9205      	str	r2, [sp, #20]
 800b294:	2220      	movs	r2, #32
 800b296:	0019      	movs	r1, r3
 800b298:	4391      	bics	r1, r2
 800b29a:	000a      	movs	r2, r1
 800b29c:	2100      	movs	r1, #0
 800b29e:	2a45      	cmp	r2, #69	; 0x45
 800b2a0:	d000      	beq.n	800b2a4 <_strtod_l+0x18c>
 800b2a2:	e0bf      	b.n	800b424 <_strtod_l+0x30c>
 800b2a4:	9b05      	ldr	r3, [sp, #20]
 800b2a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2a8:	4303      	orrs	r3, r0
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	428b      	cmp	r3, r1
 800b2ae:	d094      	beq.n	800b1da <_strtod_l+0xc2>
 800b2b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2b2:	9306      	str	r3, [sp, #24]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	9321      	str	r3, [sp, #132]	; 0x84
 800b2b8:	9b06      	ldr	r3, [sp, #24]
 800b2ba:	785b      	ldrb	r3, [r3, #1]
 800b2bc:	2b2b      	cmp	r3, #43	; 0x2b
 800b2be:	d100      	bne.n	800b2c2 <_strtod_l+0x1aa>
 800b2c0:	e082      	b.n	800b3c8 <_strtod_l+0x2b0>
 800b2c2:	000c      	movs	r4, r1
 800b2c4:	2b2d      	cmp	r3, #45	; 0x2d
 800b2c6:	d105      	bne.n	800b2d4 <_strtod_l+0x1bc>
 800b2c8:	2401      	movs	r4, #1
 800b2ca:	9b06      	ldr	r3, [sp, #24]
 800b2cc:	3302      	adds	r3, #2
 800b2ce:	9321      	str	r3, [sp, #132]	; 0x84
 800b2d0:	9b06      	ldr	r3, [sp, #24]
 800b2d2:	789b      	ldrb	r3, [r3, #2]
 800b2d4:	001a      	movs	r2, r3
 800b2d6:	3a30      	subs	r2, #48	; 0x30
 800b2d8:	2a09      	cmp	r2, #9
 800b2da:	d800      	bhi.n	800b2de <_strtod_l+0x1c6>
 800b2dc:	e084      	b.n	800b3e8 <_strtod_l+0x2d0>
 800b2de:	9a06      	ldr	r2, [sp, #24]
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	9221      	str	r2, [sp, #132]	; 0x84
 800b2e4:	e09e      	b.n	800b424 <_strtod_l+0x30c>
 800b2e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b2e8:	2908      	cmp	r1, #8
 800b2ea:	dc09      	bgt.n	800b300 <_strtod_l+0x1e8>
 800b2ec:	9908      	ldr	r1, [sp, #32]
 800b2ee:	4351      	muls	r1, r2
 800b2f0:	18cb      	adds	r3, r1, r3
 800b2f2:	9308      	str	r3, [sp, #32]
 800b2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b2fc:	9021      	str	r0, [sp, #132]	; 0x84
 800b2fe:	e7b6      	b.n	800b26e <_strtod_l+0x156>
 800b300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b302:	4351      	muls	r1, r2
 800b304:	18cb      	adds	r3, r1, r3
 800b306:	930b      	str	r3, [sp, #44]	; 0x2c
 800b308:	e7f4      	b.n	800b2f4 <_strtod_l+0x1dc>
 800b30a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b30c:	9b05      	ldr	r3, [sp, #20]
 800b30e:	4694      	mov	ip, r2
 800b310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b312:	4463      	add	r3, ip
 800b314:	9321      	str	r3, [sp, #132]	; 0x84
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	2a00      	cmp	r2, #0
 800b31a:	d036      	beq.n	800b38a <_strtod_l+0x272>
 800b31c:	4684      	mov	ip, r0
 800b31e:	9205      	str	r2, [sp, #20]
 800b320:	001a      	movs	r2, r3
 800b322:	3a30      	subs	r2, #48	; 0x30
 800b324:	2a09      	cmp	r2, #9
 800b326:	d912      	bls.n	800b34e <_strtod_l+0x236>
 800b328:	2201      	movs	r2, #1
 800b32a:	9207      	str	r2, [sp, #28]
 800b32c:	e7b2      	b.n	800b294 <_strtod_l+0x17c>
 800b32e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b330:	3001      	adds	r0, #1
 800b332:	1c5a      	adds	r2, r3, #1
 800b334:	9221      	str	r2, [sp, #132]	; 0x84
 800b336:	785b      	ldrb	r3, [r3, #1]
 800b338:	2b30      	cmp	r3, #48	; 0x30
 800b33a:	d0f8      	beq.n	800b32e <_strtod_l+0x216>
 800b33c:	001a      	movs	r2, r3
 800b33e:	3a31      	subs	r2, #49	; 0x31
 800b340:	2a08      	cmp	r2, #8
 800b342:	d83c      	bhi.n	800b3be <_strtod_l+0x2a6>
 800b344:	4684      	mov	ip, r0
 800b346:	2000      	movs	r0, #0
 800b348:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b34a:	9005      	str	r0, [sp, #20]
 800b34c:	9212      	str	r2, [sp, #72]	; 0x48
 800b34e:	3b30      	subs	r3, #48	; 0x30
 800b350:	1c42      	adds	r2, r0, #1
 800b352:	2b00      	cmp	r3, #0
 800b354:	d013      	beq.n	800b37e <_strtod_l+0x266>
 800b356:	210a      	movs	r1, #10
 800b358:	4494      	add	ip, r2
 800b35a:	9a05      	ldr	r2, [sp, #20]
 800b35c:	1885      	adds	r5, r0, r2
 800b35e:	42aa      	cmp	r2, r5
 800b360:	d115      	bne.n	800b38e <_strtod_l+0x276>
 800b362:	9905      	ldr	r1, [sp, #20]
 800b364:	9a05      	ldr	r2, [sp, #20]
 800b366:	3101      	adds	r1, #1
 800b368:	1809      	adds	r1, r1, r0
 800b36a:	1812      	adds	r2, r2, r0
 800b36c:	9105      	str	r1, [sp, #20]
 800b36e:	2a08      	cmp	r2, #8
 800b370:	dc1b      	bgt.n	800b3aa <_strtod_l+0x292>
 800b372:	220a      	movs	r2, #10
 800b374:	9908      	ldr	r1, [sp, #32]
 800b376:	434a      	muls	r2, r1
 800b378:	189b      	adds	r3, r3, r2
 800b37a:	2200      	movs	r2, #0
 800b37c:	9308      	str	r3, [sp, #32]
 800b37e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b380:	0010      	movs	r0, r2
 800b382:	1c59      	adds	r1, r3, #1
 800b384:	9121      	str	r1, [sp, #132]	; 0x84
 800b386:	785b      	ldrb	r3, [r3, #1]
 800b388:	e7ca      	b.n	800b320 <_strtod_l+0x208>
 800b38a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b38c:	e7d4      	b.n	800b338 <_strtod_l+0x220>
 800b38e:	1c54      	adds	r4, r2, #1
 800b390:	2a08      	cmp	r2, #8
 800b392:	dc04      	bgt.n	800b39e <_strtod_l+0x286>
 800b394:	9a08      	ldr	r2, [sp, #32]
 800b396:	434a      	muls	r2, r1
 800b398:	9208      	str	r2, [sp, #32]
 800b39a:	0022      	movs	r2, r4
 800b39c:	e7df      	b.n	800b35e <_strtod_l+0x246>
 800b39e:	2c10      	cmp	r4, #16
 800b3a0:	dcfb      	bgt.n	800b39a <_strtod_l+0x282>
 800b3a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3a4:	434a      	muls	r2, r1
 800b3a6:	920b      	str	r2, [sp, #44]	; 0x2c
 800b3a8:	e7f7      	b.n	800b39a <_strtod_l+0x282>
 800b3aa:	9905      	ldr	r1, [sp, #20]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2910      	cmp	r1, #16
 800b3b0:	dce5      	bgt.n	800b37e <_strtod_l+0x266>
 800b3b2:	210a      	movs	r1, #10
 800b3b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3b6:	4341      	muls	r1, r0
 800b3b8:	185b      	adds	r3, r3, r1
 800b3ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3bc:	e7df      	b.n	800b37e <_strtod_l+0x266>
 800b3be:	2200      	movs	r2, #0
 800b3c0:	4694      	mov	ip, r2
 800b3c2:	9205      	str	r2, [sp, #20]
 800b3c4:	3201      	adds	r2, #1
 800b3c6:	e7b0      	b.n	800b32a <_strtod_l+0x212>
 800b3c8:	000c      	movs	r4, r1
 800b3ca:	e77e      	b.n	800b2ca <_strtod_l+0x1b2>
 800b3cc:	0800f224 	.word	0x0800f224
 800b3d0:	ffefffff 	.word	0xffefffff
 800b3d4:	00000433 	.word	0x00000433
 800b3d8:	7ff00000 	.word	0x7ff00000
 800b3dc:	7fffffff 	.word	0x7fffffff
 800b3e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3e2:	1c5a      	adds	r2, r3, #1
 800b3e4:	9221      	str	r2, [sp, #132]	; 0x84
 800b3e6:	785b      	ldrb	r3, [r3, #1]
 800b3e8:	2b30      	cmp	r3, #48	; 0x30
 800b3ea:	d0f9      	beq.n	800b3e0 <_strtod_l+0x2c8>
 800b3ec:	001a      	movs	r2, r3
 800b3ee:	3a31      	subs	r2, #49	; 0x31
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	2a08      	cmp	r2, #8
 800b3f4:	d816      	bhi.n	800b424 <_strtod_l+0x30c>
 800b3f6:	3b30      	subs	r3, #48	; 0x30
 800b3f8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800b3fa:	930e      	str	r3, [sp, #56]	; 0x38
 800b3fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3fe:	1c59      	adds	r1, r3, #1
 800b400:	9121      	str	r1, [sp, #132]	; 0x84
 800b402:	785b      	ldrb	r3, [r3, #1]
 800b404:	001a      	movs	r2, r3
 800b406:	3a30      	subs	r2, #48	; 0x30
 800b408:	2a09      	cmp	r2, #9
 800b40a:	d932      	bls.n	800b472 <_strtod_l+0x35a>
 800b40c:	1b4a      	subs	r2, r1, r5
 800b40e:	4dad      	ldr	r5, [pc, #692]	; (800b6c4 <_strtod_l+0x5ac>)
 800b410:	0029      	movs	r1, r5
 800b412:	2a08      	cmp	r2, #8
 800b414:	dc03      	bgt.n	800b41e <_strtod_l+0x306>
 800b416:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b418:	42a9      	cmp	r1, r5
 800b41a:	dd00      	ble.n	800b41e <_strtod_l+0x306>
 800b41c:	0029      	movs	r1, r5
 800b41e:	2c00      	cmp	r4, #0
 800b420:	d000      	beq.n	800b424 <_strtod_l+0x30c>
 800b422:	4249      	negs	r1, r1
 800b424:	9a05      	ldr	r2, [sp, #20]
 800b426:	2a00      	cmp	r2, #0
 800b428:	d149      	bne.n	800b4be <_strtod_l+0x3a6>
 800b42a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b42c:	4310      	orrs	r0, r2
 800b42e:	d000      	beq.n	800b432 <_strtod_l+0x31a>
 800b430:	e6b3      	b.n	800b19a <_strtod_l+0x82>
 800b432:	9a07      	ldr	r2, [sp, #28]
 800b434:	2a00      	cmp	r2, #0
 800b436:	d000      	beq.n	800b43a <_strtod_l+0x322>
 800b438:	e6cf      	b.n	800b1da <_strtod_l+0xc2>
 800b43a:	2b4e      	cmp	r3, #78	; 0x4e
 800b43c:	d025      	beq.n	800b48a <_strtod_l+0x372>
 800b43e:	dc1f      	bgt.n	800b480 <_strtod_l+0x368>
 800b440:	2b49      	cmp	r3, #73	; 0x49
 800b442:	d000      	beq.n	800b446 <_strtod_l+0x32e>
 800b444:	e6c9      	b.n	800b1da <_strtod_l+0xc2>
 800b446:	49a0      	ldr	r1, [pc, #640]	; (800b6c8 <_strtod_l+0x5b0>)
 800b448:	a821      	add	r0, sp, #132	; 0x84
 800b44a:	f001 fe2d 	bl	800d0a8 <__match>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d100      	bne.n	800b454 <_strtod_l+0x33c>
 800b452:	e6c2      	b.n	800b1da <_strtod_l+0xc2>
 800b454:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b456:	499d      	ldr	r1, [pc, #628]	; (800b6cc <_strtod_l+0x5b4>)
 800b458:	3b01      	subs	r3, #1
 800b45a:	a821      	add	r0, sp, #132	; 0x84
 800b45c:	9321      	str	r3, [sp, #132]	; 0x84
 800b45e:	f001 fe23 	bl	800d0a8 <__match>
 800b462:	2800      	cmp	r0, #0
 800b464:	d102      	bne.n	800b46c <_strtod_l+0x354>
 800b466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b468:	3301      	adds	r3, #1
 800b46a:	9321      	str	r3, [sp, #132]	; 0x84
 800b46c:	4f98      	ldr	r7, [pc, #608]	; (800b6d0 <_strtod_l+0x5b8>)
 800b46e:	2600      	movs	r6, #0
 800b470:	e693      	b.n	800b19a <_strtod_l+0x82>
 800b472:	220a      	movs	r2, #10
 800b474:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b476:	434a      	muls	r2, r1
 800b478:	18d2      	adds	r2, r2, r3
 800b47a:	3a30      	subs	r2, #48	; 0x30
 800b47c:	920e      	str	r2, [sp, #56]	; 0x38
 800b47e:	e7bd      	b.n	800b3fc <_strtod_l+0x2e4>
 800b480:	2b69      	cmp	r3, #105	; 0x69
 800b482:	d0e0      	beq.n	800b446 <_strtod_l+0x32e>
 800b484:	2b6e      	cmp	r3, #110	; 0x6e
 800b486:	d000      	beq.n	800b48a <_strtod_l+0x372>
 800b488:	e6a7      	b.n	800b1da <_strtod_l+0xc2>
 800b48a:	4992      	ldr	r1, [pc, #584]	; (800b6d4 <_strtod_l+0x5bc>)
 800b48c:	a821      	add	r0, sp, #132	; 0x84
 800b48e:	f001 fe0b 	bl	800d0a8 <__match>
 800b492:	2800      	cmp	r0, #0
 800b494:	d100      	bne.n	800b498 <_strtod_l+0x380>
 800b496:	e6a0      	b.n	800b1da <_strtod_l+0xc2>
 800b498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	2b28      	cmp	r3, #40	; 0x28
 800b49e:	d10c      	bne.n	800b4ba <_strtod_l+0x3a2>
 800b4a0:	aa24      	add	r2, sp, #144	; 0x90
 800b4a2:	498d      	ldr	r1, [pc, #564]	; (800b6d8 <_strtod_l+0x5c0>)
 800b4a4:	a821      	add	r0, sp, #132	; 0x84
 800b4a6:	f001 fe13 	bl	800d0d0 <__hexnan>
 800b4aa:	2805      	cmp	r0, #5
 800b4ac:	d105      	bne.n	800b4ba <_strtod_l+0x3a2>
 800b4ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b4b0:	4a87      	ldr	r2, [pc, #540]	; (800b6d0 <_strtod_l+0x5b8>)
 800b4b2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b4b4:	431a      	orrs	r2, r3
 800b4b6:	0017      	movs	r7, r2
 800b4b8:	e66f      	b.n	800b19a <_strtod_l+0x82>
 800b4ba:	4f88      	ldr	r7, [pc, #544]	; (800b6dc <_strtod_l+0x5c4>)
 800b4bc:	e7d7      	b.n	800b46e <_strtod_l+0x356>
 800b4be:	4663      	mov	r3, ip
 800b4c0:	1acb      	subs	r3, r1, r3
 800b4c2:	9307      	str	r3, [sp, #28]
 800b4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <_strtod_l+0x3b6>
 800b4ca:	9b05      	ldr	r3, [sp, #20]
 800b4cc:	930a      	str	r3, [sp, #40]	; 0x28
 800b4ce:	9c05      	ldr	r4, [sp, #20]
 800b4d0:	2c10      	cmp	r4, #16
 800b4d2:	dd00      	ble.n	800b4d6 <_strtod_l+0x3be>
 800b4d4:	2410      	movs	r4, #16
 800b4d6:	9808      	ldr	r0, [sp, #32]
 800b4d8:	f7f6 fe92 	bl	8002200 <__aeabi_ui2d>
 800b4dc:	9b05      	ldr	r3, [sp, #20]
 800b4de:	0006      	movs	r6, r0
 800b4e0:	000f      	movs	r7, r1
 800b4e2:	2b09      	cmp	r3, #9
 800b4e4:	dc15      	bgt.n	800b512 <_strtod_l+0x3fa>
 800b4e6:	9b07      	ldr	r3, [sp, #28]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d100      	bne.n	800b4ee <_strtod_l+0x3d6>
 800b4ec:	e655      	b.n	800b19a <_strtod_l+0x82>
 800b4ee:	9b07      	ldr	r3, [sp, #28]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dc00      	bgt.n	800b4f6 <_strtod_l+0x3de>
 800b4f4:	e07d      	b.n	800b5f2 <_strtod_l+0x4da>
 800b4f6:	2b16      	cmp	r3, #22
 800b4f8:	dc62      	bgt.n	800b5c0 <_strtod_l+0x4a8>
 800b4fa:	00dc      	lsls	r4, r3, #3
 800b4fc:	4b78      	ldr	r3, [pc, #480]	; (800b6e0 <_strtod_l+0x5c8>)
 800b4fe:	0032      	movs	r2, r6
 800b500:	1919      	adds	r1, r3, r4
 800b502:	003b      	movs	r3, r7
 800b504:	6808      	ldr	r0, [r1, #0]
 800b506:	6849      	ldr	r1, [r1, #4]
 800b508:	f7f6 f834 	bl	8001574 <__aeabi_dmul>
 800b50c:	0006      	movs	r6, r0
 800b50e:	000f      	movs	r7, r1
 800b510:	e643      	b.n	800b19a <_strtod_l+0x82>
 800b512:	0022      	movs	r2, r4
 800b514:	4b72      	ldr	r3, [pc, #456]	; (800b6e0 <_strtod_l+0x5c8>)
 800b516:	3a09      	subs	r2, #9
 800b518:	00d2      	lsls	r2, r2, #3
 800b51a:	189b      	adds	r3, r3, r2
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	f7f6 f828 	bl	8001574 <__aeabi_dmul>
 800b524:	0006      	movs	r6, r0
 800b526:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b528:	000f      	movs	r7, r1
 800b52a:	f7f6 fe69 	bl	8002200 <__aeabi_ui2d>
 800b52e:	000b      	movs	r3, r1
 800b530:	0002      	movs	r2, r0
 800b532:	0039      	movs	r1, r7
 800b534:	0030      	movs	r0, r6
 800b536:	f7f5 f8f7 	bl	8000728 <__aeabi_dadd>
 800b53a:	9b05      	ldr	r3, [sp, #20]
 800b53c:	0006      	movs	r6, r0
 800b53e:	000f      	movs	r7, r1
 800b540:	2b0f      	cmp	r3, #15
 800b542:	ddd0      	ble.n	800b4e6 <_strtod_l+0x3ce>
 800b544:	9b05      	ldr	r3, [sp, #20]
 800b546:	1b1c      	subs	r4, r3, r4
 800b548:	9b07      	ldr	r3, [sp, #28]
 800b54a:	18e4      	adds	r4, r4, r3
 800b54c:	2c00      	cmp	r4, #0
 800b54e:	dc00      	bgt.n	800b552 <_strtod_l+0x43a>
 800b550:	e094      	b.n	800b67c <_strtod_l+0x564>
 800b552:	230f      	movs	r3, #15
 800b554:	4023      	ands	r3, r4
 800b556:	d00a      	beq.n	800b56e <_strtod_l+0x456>
 800b558:	4961      	ldr	r1, [pc, #388]	; (800b6e0 <_strtod_l+0x5c8>)
 800b55a:	00db      	lsls	r3, r3, #3
 800b55c:	18c9      	adds	r1, r1, r3
 800b55e:	0032      	movs	r2, r6
 800b560:	6808      	ldr	r0, [r1, #0]
 800b562:	6849      	ldr	r1, [r1, #4]
 800b564:	003b      	movs	r3, r7
 800b566:	f7f6 f805 	bl	8001574 <__aeabi_dmul>
 800b56a:	0006      	movs	r6, r0
 800b56c:	000f      	movs	r7, r1
 800b56e:	230f      	movs	r3, #15
 800b570:	439c      	bics	r4, r3
 800b572:	d06e      	beq.n	800b652 <_strtod_l+0x53a>
 800b574:	3326      	adds	r3, #38	; 0x26
 800b576:	33ff      	adds	r3, #255	; 0xff
 800b578:	429c      	cmp	r4, r3
 800b57a:	dd48      	ble.n	800b60e <_strtod_l+0x4f6>
 800b57c:	2400      	movs	r4, #0
 800b57e:	9405      	str	r4, [sp, #20]
 800b580:	940b      	str	r4, [sp, #44]	; 0x2c
 800b582:	940a      	str	r4, [sp, #40]	; 0x28
 800b584:	2322      	movs	r3, #34	; 0x22
 800b586:	2600      	movs	r6, #0
 800b588:	9a04      	ldr	r2, [sp, #16]
 800b58a:	4f51      	ldr	r7, [pc, #324]	; (800b6d0 <_strtod_l+0x5b8>)
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b590:	42b3      	cmp	r3, r6
 800b592:	d100      	bne.n	800b596 <_strtod_l+0x47e>
 800b594:	e601      	b.n	800b19a <_strtod_l+0x82>
 800b596:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b598:	9804      	ldr	r0, [sp, #16]
 800b59a:	f001 fe98 	bl	800d2ce <_Bfree>
 800b59e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b5a0:	9804      	ldr	r0, [sp, #16]
 800b5a2:	f001 fe94 	bl	800d2ce <_Bfree>
 800b5a6:	9905      	ldr	r1, [sp, #20]
 800b5a8:	9804      	ldr	r0, [sp, #16]
 800b5aa:	f001 fe90 	bl	800d2ce <_Bfree>
 800b5ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5b0:	9804      	ldr	r0, [sp, #16]
 800b5b2:	f001 fe8c 	bl	800d2ce <_Bfree>
 800b5b6:	0021      	movs	r1, r4
 800b5b8:	9804      	ldr	r0, [sp, #16]
 800b5ba:	f001 fe88 	bl	800d2ce <_Bfree>
 800b5be:	e5ec      	b.n	800b19a <_strtod_l+0x82>
 800b5c0:	2325      	movs	r3, #37	; 0x25
 800b5c2:	9a05      	ldr	r2, [sp, #20]
 800b5c4:	1a9b      	subs	r3, r3, r2
 800b5c6:	9a07      	ldr	r2, [sp, #28]
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	dbbb      	blt.n	800b544 <_strtod_l+0x42c>
 800b5cc:	230f      	movs	r3, #15
 800b5ce:	9a05      	ldr	r2, [sp, #20]
 800b5d0:	4c43      	ldr	r4, [pc, #268]	; (800b6e0 <_strtod_l+0x5c8>)
 800b5d2:	1a9d      	subs	r5, r3, r2
 800b5d4:	00e9      	lsls	r1, r5, #3
 800b5d6:	1861      	adds	r1, r4, r1
 800b5d8:	0032      	movs	r2, r6
 800b5da:	6808      	ldr	r0, [r1, #0]
 800b5dc:	6849      	ldr	r1, [r1, #4]
 800b5de:	003b      	movs	r3, r7
 800b5e0:	f7f5 ffc8 	bl	8001574 <__aeabi_dmul>
 800b5e4:	9b07      	ldr	r3, [sp, #28]
 800b5e6:	1b5e      	subs	r6, r3, r5
 800b5e8:	00f6      	lsls	r6, r6, #3
 800b5ea:	19a6      	adds	r6, r4, r6
 800b5ec:	6832      	ldr	r2, [r6, #0]
 800b5ee:	6873      	ldr	r3, [r6, #4]
 800b5f0:	e78a      	b.n	800b508 <_strtod_l+0x3f0>
 800b5f2:	9b07      	ldr	r3, [sp, #28]
 800b5f4:	3316      	adds	r3, #22
 800b5f6:	dba5      	blt.n	800b544 <_strtod_l+0x42c>
 800b5f8:	9b07      	ldr	r3, [sp, #28]
 800b5fa:	0030      	movs	r0, r6
 800b5fc:	00da      	lsls	r2, r3, #3
 800b5fe:	4b38      	ldr	r3, [pc, #224]	; (800b6e0 <_strtod_l+0x5c8>)
 800b600:	0039      	movs	r1, r7
 800b602:	1a9b      	subs	r3, r3, r2
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	f7f5 fbaa 	bl	8000d60 <__aeabi_ddiv>
 800b60c:	e77e      	b.n	800b50c <_strtod_l+0x3f4>
 800b60e:	2300      	movs	r3, #0
 800b610:	0030      	movs	r0, r6
 800b612:	0039      	movs	r1, r7
 800b614:	001d      	movs	r5, r3
 800b616:	1124      	asrs	r4, r4, #4
 800b618:	2c01      	cmp	r4, #1
 800b61a:	dc1d      	bgt.n	800b658 <_strtod_l+0x540>
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <_strtod_l+0x50c>
 800b620:	0006      	movs	r6, r0
 800b622:	000f      	movs	r7, r1
 800b624:	4b2f      	ldr	r3, [pc, #188]	; (800b6e4 <_strtod_l+0x5cc>)
 800b626:	00ed      	lsls	r5, r5, #3
 800b628:	18ff      	adds	r7, r7, r3
 800b62a:	4b2f      	ldr	r3, [pc, #188]	; (800b6e8 <_strtod_l+0x5d0>)
 800b62c:	0032      	movs	r2, r6
 800b62e:	195d      	adds	r5, r3, r5
 800b630:	6828      	ldr	r0, [r5, #0]
 800b632:	6869      	ldr	r1, [r5, #4]
 800b634:	003b      	movs	r3, r7
 800b636:	f7f5 ff9d 	bl	8001574 <__aeabi_dmul>
 800b63a:	4b25      	ldr	r3, [pc, #148]	; (800b6d0 <_strtod_l+0x5b8>)
 800b63c:	4a2b      	ldr	r2, [pc, #172]	; (800b6ec <_strtod_l+0x5d4>)
 800b63e:	0006      	movs	r6, r0
 800b640:	400b      	ands	r3, r1
 800b642:	4293      	cmp	r3, r2
 800b644:	d89a      	bhi.n	800b57c <_strtod_l+0x464>
 800b646:	4a2a      	ldr	r2, [pc, #168]	; (800b6f0 <_strtod_l+0x5d8>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d913      	bls.n	800b674 <_strtod_l+0x55c>
 800b64c:	2601      	movs	r6, #1
 800b64e:	4f29      	ldr	r7, [pc, #164]	; (800b6f4 <_strtod_l+0x5dc>)
 800b650:	4276      	negs	r6, r6
 800b652:	2300      	movs	r3, #0
 800b654:	9306      	str	r3, [sp, #24]
 800b656:	e07b      	b.n	800b750 <_strtod_l+0x638>
 800b658:	2201      	movs	r2, #1
 800b65a:	4214      	tst	r4, r2
 800b65c:	d007      	beq.n	800b66e <_strtod_l+0x556>
 800b65e:	4a22      	ldr	r2, [pc, #136]	; (800b6e8 <_strtod_l+0x5d0>)
 800b660:	00eb      	lsls	r3, r5, #3
 800b662:	189b      	adds	r3, r3, r2
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	f7f5 ff84 	bl	8001574 <__aeabi_dmul>
 800b66c:	2301      	movs	r3, #1
 800b66e:	3501      	adds	r5, #1
 800b670:	1064      	asrs	r4, r4, #1
 800b672:	e7d1      	b.n	800b618 <_strtod_l+0x500>
 800b674:	23d4      	movs	r3, #212	; 0xd4
 800b676:	049b      	lsls	r3, r3, #18
 800b678:	18cf      	adds	r7, r1, r3
 800b67a:	e7ea      	b.n	800b652 <_strtod_l+0x53a>
 800b67c:	2c00      	cmp	r4, #0
 800b67e:	d0e8      	beq.n	800b652 <_strtod_l+0x53a>
 800b680:	230f      	movs	r3, #15
 800b682:	4264      	negs	r4, r4
 800b684:	4023      	ands	r3, r4
 800b686:	d00a      	beq.n	800b69e <_strtod_l+0x586>
 800b688:	4a15      	ldr	r2, [pc, #84]	; (800b6e0 <_strtod_l+0x5c8>)
 800b68a:	00db      	lsls	r3, r3, #3
 800b68c:	18d3      	adds	r3, r2, r3
 800b68e:	0030      	movs	r0, r6
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	0039      	movs	r1, r7
 800b696:	f7f5 fb63 	bl	8000d60 <__aeabi_ddiv>
 800b69a:	0006      	movs	r6, r0
 800b69c:	000f      	movs	r7, r1
 800b69e:	1124      	asrs	r4, r4, #4
 800b6a0:	d0d7      	beq.n	800b652 <_strtod_l+0x53a>
 800b6a2:	2c1f      	cmp	r4, #31
 800b6a4:	dd28      	ble.n	800b6f8 <_strtod_l+0x5e0>
 800b6a6:	2400      	movs	r4, #0
 800b6a8:	9405      	str	r4, [sp, #20]
 800b6aa:	940b      	str	r4, [sp, #44]	; 0x2c
 800b6ac:	940a      	str	r4, [sp, #40]	; 0x28
 800b6ae:	2322      	movs	r3, #34	; 0x22
 800b6b0:	9a04      	ldr	r2, [sp, #16]
 800b6b2:	2600      	movs	r6, #0
 800b6b4:	6013      	str	r3, [r2, #0]
 800b6b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6b8:	2700      	movs	r7, #0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d000      	beq.n	800b6c0 <_strtod_l+0x5a8>
 800b6be:	e76a      	b.n	800b596 <_strtod_l+0x47e>
 800b6c0:	e56b      	b.n	800b19a <_strtod_l+0x82>
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	00004e1f 	.word	0x00004e1f
 800b6c8:	0800f1ef 	.word	0x0800f1ef
 800b6cc:	0800f27b 	.word	0x0800f27b
 800b6d0:	7ff00000 	.word	0x7ff00000
 800b6d4:	0800f1f7 	.word	0x0800f1f7
 800b6d8:	0800f238 	.word	0x0800f238
 800b6dc:	fff80000 	.word	0xfff80000
 800b6e0:	0800f2b8 	.word	0x0800f2b8
 800b6e4:	fcb00000 	.word	0xfcb00000
 800b6e8:	0800f290 	.word	0x0800f290
 800b6ec:	7ca00000 	.word	0x7ca00000
 800b6f0:	7c900000 	.word	0x7c900000
 800b6f4:	7fefffff 	.word	0x7fefffff
 800b6f8:	2310      	movs	r3, #16
 800b6fa:	4023      	ands	r3, r4
 800b6fc:	9306      	str	r3, [sp, #24]
 800b6fe:	d001      	beq.n	800b704 <_strtod_l+0x5ec>
 800b700:	236a      	movs	r3, #106	; 0x6a
 800b702:	9306      	str	r3, [sp, #24]
 800b704:	2300      	movs	r3, #0
 800b706:	0030      	movs	r0, r6
 800b708:	0039      	movs	r1, r7
 800b70a:	001d      	movs	r5, r3
 800b70c:	2c00      	cmp	r4, #0
 800b70e:	dd00      	ble.n	800b712 <_strtod_l+0x5fa>
 800b710:	e10e      	b.n	800b930 <_strtod_l+0x818>
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <_strtod_l+0x602>
 800b716:	0006      	movs	r6, r0
 800b718:	000f      	movs	r7, r1
 800b71a:	9b06      	ldr	r3, [sp, #24]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00f      	beq.n	800b740 <_strtod_l+0x628>
 800b720:	236b      	movs	r3, #107	; 0x6b
 800b722:	0079      	lsls	r1, r7, #1
 800b724:	0d49      	lsrs	r1, r1, #21
 800b726:	003a      	movs	r2, r7
 800b728:	1a5b      	subs	r3, r3, r1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dd08      	ble.n	800b740 <_strtod_l+0x628>
 800b72e:	2b1f      	cmp	r3, #31
 800b730:	dc00      	bgt.n	800b734 <_strtod_l+0x61c>
 800b732:	e112      	b.n	800b95a <_strtod_l+0x842>
 800b734:	2600      	movs	r6, #0
 800b736:	2b34      	cmp	r3, #52	; 0x34
 800b738:	dc00      	bgt.n	800b73c <_strtod_l+0x624>
 800b73a:	e107      	b.n	800b94c <_strtod_l+0x834>
 800b73c:	27dc      	movs	r7, #220	; 0xdc
 800b73e:	04bf      	lsls	r7, r7, #18
 800b740:	2200      	movs	r2, #0
 800b742:	2300      	movs	r3, #0
 800b744:	0030      	movs	r0, r6
 800b746:	0039      	movs	r1, r7
 800b748:	f7f4 fe76 	bl	8000438 <__aeabi_dcmpeq>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d1aa      	bne.n	800b6a6 <_strtod_l+0x58e>
 800b750:	9b08      	ldr	r3, [sp, #32]
 800b752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b758:	9b05      	ldr	r3, [sp, #20]
 800b75a:	9804      	ldr	r0, [sp, #16]
 800b75c:	f001 fe0e 	bl	800d37c <__s2b>
 800b760:	900b      	str	r0, [sp, #44]	; 0x2c
 800b762:	2800      	cmp	r0, #0
 800b764:	d100      	bne.n	800b768 <_strtod_l+0x650>
 800b766:	e709      	b.n	800b57c <_strtod_l+0x464>
 800b768:	9b07      	ldr	r3, [sp, #28]
 800b76a:	9a07      	ldr	r2, [sp, #28]
 800b76c:	17db      	asrs	r3, r3, #31
 800b76e:	4252      	negs	r2, r2
 800b770:	4013      	ands	r3, r2
 800b772:	9315      	str	r3, [sp, #84]	; 0x54
 800b774:	9b07      	ldr	r3, [sp, #28]
 800b776:	2400      	movs	r4, #0
 800b778:	43db      	mvns	r3, r3
 800b77a:	9a07      	ldr	r2, [sp, #28]
 800b77c:	17db      	asrs	r3, r3, #31
 800b77e:	401a      	ands	r2, r3
 800b780:	921c      	str	r2, [sp, #112]	; 0x70
 800b782:	9405      	str	r4, [sp, #20]
 800b784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b786:	9804      	ldr	r0, [sp, #16]
 800b788:	6859      	ldr	r1, [r3, #4]
 800b78a:	f001 fd68 	bl	800d25e <_Balloc>
 800b78e:	900a      	str	r0, [sp, #40]	; 0x28
 800b790:	2800      	cmp	r0, #0
 800b792:	d100      	bne.n	800b796 <_strtod_l+0x67e>
 800b794:	e6f6      	b.n	800b584 <_strtod_l+0x46c>
 800b796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b798:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	310c      	adds	r1, #12
 800b79e:	1c9a      	adds	r2, r3, #2
 800b7a0:	0092      	lsls	r2, r2, #2
 800b7a2:	300c      	adds	r0, #12
 800b7a4:	9308      	str	r3, [sp, #32]
 800b7a6:	f7fe fd23 	bl	800a1f0 <memcpy>
 800b7aa:	ab24      	add	r3, sp, #144	; 0x90
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	ab23      	add	r3, sp, #140	; 0x8c
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	0032      	movs	r2, r6
 800b7b4:	003b      	movs	r3, r7
 800b7b6:	9804      	ldr	r0, [sp, #16]
 800b7b8:	960e      	str	r6, [sp, #56]	; 0x38
 800b7ba:	970f      	str	r7, [sp, #60]	; 0x3c
 800b7bc:	f002 f892 	bl	800d8e4 <__d2b>
 800b7c0:	9022      	str	r0, [sp, #136]	; 0x88
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d100      	bne.n	800b7c8 <_strtod_l+0x6b0>
 800b7c6:	e6dd      	b.n	800b584 <_strtod_l+0x46c>
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	9804      	ldr	r0, [sp, #16]
 800b7cc:	f001 fe5d 	bl	800d48a <__i2b>
 800b7d0:	9005      	str	r0, [sp, #20]
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d100      	bne.n	800b7d8 <_strtod_l+0x6c0>
 800b7d6:	e6d5      	b.n	800b584 <_strtod_l+0x46c>
 800b7d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	da00      	bge.n	800b7e0 <_strtod_l+0x6c8>
 800b7de:	e0c1      	b.n	800b964 <_strtod_l+0x84c>
 800b7e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b7e2:	189d      	adds	r5, r3, r2
 800b7e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b7e6:	4694      	mov	ip, r2
 800b7e8:	9906      	ldr	r1, [sp, #24]
 800b7ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b7ec:	1a5b      	subs	r3, r3, r1
 800b7ee:	2136      	movs	r1, #54	; 0x36
 800b7f0:	189b      	adds	r3, r3, r2
 800b7f2:	1a8a      	subs	r2, r1, r2
 800b7f4:	49b2      	ldr	r1, [pc, #712]	; (800bac0 <_strtod_l+0x9a8>)
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	2001      	movs	r0, #1
 800b7fa:	428b      	cmp	r3, r1
 800b7fc:	db00      	blt.n	800b800 <_strtod_l+0x6e8>
 800b7fe:	e0bd      	b.n	800b97c <_strtod_l+0x864>
 800b800:	1ac9      	subs	r1, r1, r3
 800b802:	1a52      	subs	r2, r2, r1
 800b804:	291f      	cmp	r1, #31
 800b806:	dd00      	ble.n	800b80a <_strtod_l+0x6f2>
 800b808:	e0b1      	b.n	800b96e <_strtod_l+0x856>
 800b80a:	4088      	lsls	r0, r1
 800b80c:	2300      	movs	r3, #0
 800b80e:	9014      	str	r0, [sp, #80]	; 0x50
 800b810:	9310      	str	r3, [sp, #64]	; 0x40
 800b812:	18ab      	adds	r3, r5, r2
 800b814:	9308      	str	r3, [sp, #32]
 800b816:	0013      	movs	r3, r2
 800b818:	9a06      	ldr	r2, [sp, #24]
 800b81a:	4463      	add	r3, ip
 800b81c:	18d3      	adds	r3, r2, r3
 800b81e:	9a08      	ldr	r2, [sp, #32]
 800b820:	930c      	str	r3, [sp, #48]	; 0x30
 800b822:	002b      	movs	r3, r5
 800b824:	4295      	cmp	r5, r2
 800b826:	dd00      	ble.n	800b82a <_strtod_l+0x712>
 800b828:	0013      	movs	r3, r2
 800b82a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b82c:	4293      	cmp	r3, r2
 800b82e:	dd00      	ble.n	800b832 <_strtod_l+0x71a>
 800b830:	0013      	movs	r3, r2
 800b832:	2b00      	cmp	r3, #0
 800b834:	dd06      	ble.n	800b844 <_strtod_l+0x72c>
 800b836:	9a08      	ldr	r2, [sp, #32]
 800b838:	1aed      	subs	r5, r5, r3
 800b83a:	1ad2      	subs	r2, r2, r3
 800b83c:	9208      	str	r2, [sp, #32]
 800b83e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b840:	1ad2      	subs	r2, r2, r3
 800b842:	920c      	str	r2, [sp, #48]	; 0x30
 800b844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b846:	2b00      	cmp	r3, #0
 800b848:	d017      	beq.n	800b87a <_strtod_l+0x762>
 800b84a:	001a      	movs	r2, r3
 800b84c:	9905      	ldr	r1, [sp, #20]
 800b84e:	9804      	ldr	r0, [sp, #16]
 800b850:	f001 feb4 	bl	800d5bc <__pow5mult>
 800b854:	9005      	str	r0, [sp, #20]
 800b856:	2800      	cmp	r0, #0
 800b858:	d100      	bne.n	800b85c <_strtod_l+0x744>
 800b85a:	e693      	b.n	800b584 <_strtod_l+0x46c>
 800b85c:	0001      	movs	r1, r0
 800b85e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b860:	9804      	ldr	r0, [sp, #16]
 800b862:	f001 fe1b 	bl	800d49c <__multiply>
 800b866:	9012      	str	r0, [sp, #72]	; 0x48
 800b868:	2800      	cmp	r0, #0
 800b86a:	d100      	bne.n	800b86e <_strtod_l+0x756>
 800b86c:	e68a      	b.n	800b584 <_strtod_l+0x46c>
 800b86e:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b870:	9804      	ldr	r0, [sp, #16]
 800b872:	f001 fd2c 	bl	800d2ce <_Bfree>
 800b876:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b878:	9322      	str	r3, [sp, #136]	; 0x88
 800b87a:	9b08      	ldr	r3, [sp, #32]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dd00      	ble.n	800b882 <_strtod_l+0x76a>
 800b880:	e07f      	b.n	800b982 <_strtod_l+0x86a>
 800b882:	9b07      	ldr	r3, [sp, #28]
 800b884:	2b00      	cmp	r3, #0
 800b886:	dd08      	ble.n	800b89a <_strtod_l+0x782>
 800b888:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b88a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b88c:	9804      	ldr	r0, [sp, #16]
 800b88e:	f001 fe95 	bl	800d5bc <__pow5mult>
 800b892:	900a      	str	r0, [sp, #40]	; 0x28
 800b894:	2800      	cmp	r0, #0
 800b896:	d100      	bne.n	800b89a <_strtod_l+0x782>
 800b898:	e674      	b.n	800b584 <_strtod_l+0x46c>
 800b89a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	dd08      	ble.n	800b8b2 <_strtod_l+0x79a>
 800b8a0:	001a      	movs	r2, r3
 800b8a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b8a4:	9804      	ldr	r0, [sp, #16]
 800b8a6:	f001 fedb 	bl	800d660 <__lshift>
 800b8aa:	900a      	str	r0, [sp, #40]	; 0x28
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d100      	bne.n	800b8b2 <_strtod_l+0x79a>
 800b8b0:	e668      	b.n	800b584 <_strtod_l+0x46c>
 800b8b2:	2d00      	cmp	r5, #0
 800b8b4:	dd08      	ble.n	800b8c8 <_strtod_l+0x7b0>
 800b8b6:	002a      	movs	r2, r5
 800b8b8:	9905      	ldr	r1, [sp, #20]
 800b8ba:	9804      	ldr	r0, [sp, #16]
 800b8bc:	f001 fed0 	bl	800d660 <__lshift>
 800b8c0:	9005      	str	r0, [sp, #20]
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d100      	bne.n	800b8c8 <_strtod_l+0x7b0>
 800b8c6:	e65d      	b.n	800b584 <_strtod_l+0x46c>
 800b8c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b8cc:	9804      	ldr	r0, [sp, #16]
 800b8ce:	f001 ff33 	bl	800d738 <__mdiff>
 800b8d2:	1e04      	subs	r4, r0, #0
 800b8d4:	d100      	bne.n	800b8d8 <_strtod_l+0x7c0>
 800b8d6:	e655      	b.n	800b584 <_strtod_l+0x46c>
 800b8d8:	2500      	movs	r5, #0
 800b8da:	68c3      	ldr	r3, [r0, #12]
 800b8dc:	9905      	ldr	r1, [sp, #20]
 800b8de:	60c5      	str	r5, [r0, #12]
 800b8e0:	9312      	str	r3, [sp, #72]	; 0x48
 800b8e2:	f001 ff0f 	bl	800d704 <__mcmp>
 800b8e6:	42a8      	cmp	r0, r5
 800b8e8:	da55      	bge.n	800b996 <_strtod_l+0x87e>
 800b8ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8ec:	42ab      	cmp	r3, r5
 800b8ee:	d11b      	bne.n	800b928 <_strtod_l+0x810>
 800b8f0:	42ae      	cmp	r6, r5
 800b8f2:	d119      	bne.n	800b928 <_strtod_l+0x810>
 800b8f4:	033b      	lsls	r3, r7, #12
 800b8f6:	42ab      	cmp	r3, r5
 800b8f8:	d116      	bne.n	800b928 <_strtod_l+0x810>
 800b8fa:	22d6      	movs	r2, #214	; 0xd6
 800b8fc:	4b71      	ldr	r3, [pc, #452]	; (800bac4 <_strtod_l+0x9ac>)
 800b8fe:	04d2      	lsls	r2, r2, #19
 800b900:	403b      	ands	r3, r7
 800b902:	4293      	cmp	r3, r2
 800b904:	d910      	bls.n	800b928 <_strtod_l+0x810>
 800b906:	6963      	ldr	r3, [r4, #20]
 800b908:	42ab      	cmp	r3, r5
 800b90a:	d102      	bne.n	800b912 <_strtod_l+0x7fa>
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	dd0a      	ble.n	800b928 <_strtod_l+0x810>
 800b912:	0021      	movs	r1, r4
 800b914:	2201      	movs	r2, #1
 800b916:	9804      	ldr	r0, [sp, #16]
 800b918:	f001 fea2 	bl	800d660 <__lshift>
 800b91c:	9905      	ldr	r1, [sp, #20]
 800b91e:	0004      	movs	r4, r0
 800b920:	f001 fef0 	bl	800d704 <__mcmp>
 800b924:	2800      	cmp	r0, #0
 800b926:	dc6b      	bgt.n	800ba00 <_strtod_l+0x8e8>
 800b928:	9b06      	ldr	r3, [sp, #24]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d178      	bne.n	800ba20 <_strtod_l+0x908>
 800b92e:	e632      	b.n	800b596 <_strtod_l+0x47e>
 800b930:	2201      	movs	r2, #1
 800b932:	4214      	tst	r4, r2
 800b934:	d007      	beq.n	800b946 <_strtod_l+0x82e>
 800b936:	4a64      	ldr	r2, [pc, #400]	; (800bac8 <_strtod_l+0x9b0>)
 800b938:	00eb      	lsls	r3, r5, #3
 800b93a:	18d3      	adds	r3, r2, r3
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f7f5 fe18 	bl	8001574 <__aeabi_dmul>
 800b944:	2301      	movs	r3, #1
 800b946:	3501      	adds	r5, #1
 800b948:	1064      	asrs	r4, r4, #1
 800b94a:	e6df      	b.n	800b70c <_strtod_l+0x5f4>
 800b94c:	2101      	movs	r1, #1
 800b94e:	3b20      	subs	r3, #32
 800b950:	4249      	negs	r1, r1
 800b952:	4099      	lsls	r1, r3
 800b954:	400a      	ands	r2, r1
 800b956:	0017      	movs	r7, r2
 800b958:	e6f2      	b.n	800b740 <_strtod_l+0x628>
 800b95a:	2201      	movs	r2, #1
 800b95c:	4252      	negs	r2, r2
 800b95e:	409a      	lsls	r2, r3
 800b960:	4016      	ands	r6, r2
 800b962:	e6ed      	b.n	800b740 <_strtod_l+0x628>
 800b964:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b966:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b968:	1ad2      	subs	r2, r2, r3
 800b96a:	4694      	mov	ip, r2
 800b96c:	e73c      	b.n	800b7e8 <_strtod_l+0x6d0>
 800b96e:	4957      	ldr	r1, [pc, #348]	; (800bacc <_strtod_l+0x9b4>)
 800b970:	1acb      	subs	r3, r1, r3
 800b972:	0001      	movs	r1, r0
 800b974:	4099      	lsls	r1, r3
 800b976:	9110      	str	r1, [sp, #64]	; 0x40
 800b978:	9014      	str	r0, [sp, #80]	; 0x50
 800b97a:	e74a      	b.n	800b812 <_strtod_l+0x6fa>
 800b97c:	2300      	movs	r3, #0
 800b97e:	9310      	str	r3, [sp, #64]	; 0x40
 800b980:	e7fa      	b.n	800b978 <_strtod_l+0x860>
 800b982:	9a08      	ldr	r2, [sp, #32]
 800b984:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b986:	9804      	ldr	r0, [sp, #16]
 800b988:	f001 fe6a 	bl	800d660 <__lshift>
 800b98c:	9022      	str	r0, [sp, #136]	; 0x88
 800b98e:	2800      	cmp	r0, #0
 800b990:	d000      	beq.n	800b994 <_strtod_l+0x87c>
 800b992:	e776      	b.n	800b882 <_strtod_l+0x76a>
 800b994:	e5f6      	b.n	800b584 <_strtod_l+0x46c>
 800b996:	970c      	str	r7, [sp, #48]	; 0x30
 800b998:	2800      	cmp	r0, #0
 800b99a:	d000      	beq.n	800b99e <_strtod_l+0x886>
 800b99c:	e0a0      	b.n	800bae0 <_strtod_l+0x9c8>
 800b99e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9a0:	033b      	lsls	r3, r7, #12
 800b9a2:	0b1b      	lsrs	r3, r3, #12
 800b9a4:	2a00      	cmp	r2, #0
 800b9a6:	d027      	beq.n	800b9f8 <_strtod_l+0x8e0>
 800b9a8:	4a49      	ldr	r2, [pc, #292]	; (800bad0 <_strtod_l+0x9b8>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d157      	bne.n	800ba5e <_strtod_l+0x946>
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	9b06      	ldr	r3, [sp, #24]
 800b9b2:	4252      	negs	r2, r2
 800b9b4:	0031      	movs	r1, r6
 800b9b6:	0010      	movs	r0, r2
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00b      	beq.n	800b9d4 <_strtod_l+0x8bc>
 800b9bc:	25d4      	movs	r5, #212	; 0xd4
 800b9be:	4b41      	ldr	r3, [pc, #260]	; (800bac4 <_strtod_l+0x9ac>)
 800b9c0:	04ed      	lsls	r5, r5, #19
 800b9c2:	403b      	ands	r3, r7
 800b9c4:	0010      	movs	r0, r2
 800b9c6:	42ab      	cmp	r3, r5
 800b9c8:	d804      	bhi.n	800b9d4 <_strtod_l+0x8bc>
 800b9ca:	306c      	adds	r0, #108	; 0x6c
 800b9cc:	0d1b      	lsrs	r3, r3, #20
 800b9ce:	1ac3      	subs	r3, r0, r3
 800b9d0:	409a      	lsls	r2, r3
 800b9d2:	0010      	movs	r0, r2
 800b9d4:	4281      	cmp	r1, r0
 800b9d6:	d142      	bne.n	800ba5e <_strtod_l+0x946>
 800b9d8:	4b3e      	ldr	r3, [pc, #248]	; (800bad4 <_strtod_l+0x9bc>)
 800b9da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d102      	bne.n	800b9e6 <_strtod_l+0x8ce>
 800b9e0:	1c4b      	adds	r3, r1, #1
 800b9e2:	d100      	bne.n	800b9e6 <_strtod_l+0x8ce>
 800b9e4:	e5ce      	b.n	800b584 <_strtod_l+0x46c>
 800b9e6:	4b37      	ldr	r3, [pc, #220]	; (800bac4 <_strtod_l+0x9ac>)
 800b9e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9ea:	2600      	movs	r6, #0
 800b9ec:	401a      	ands	r2, r3
 800b9ee:	0013      	movs	r3, r2
 800b9f0:	2280      	movs	r2, #128	; 0x80
 800b9f2:	0352      	lsls	r2, r2, #13
 800b9f4:	189f      	adds	r7, r3, r2
 800b9f6:	e797      	b.n	800b928 <_strtod_l+0x810>
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d130      	bne.n	800ba5e <_strtod_l+0x946>
 800b9fc:	2e00      	cmp	r6, #0
 800b9fe:	d12e      	bne.n	800ba5e <_strtod_l+0x946>
 800ba00:	9906      	ldr	r1, [sp, #24]
 800ba02:	003b      	movs	r3, r7
 800ba04:	4a2f      	ldr	r2, [pc, #188]	; (800bac4 <_strtod_l+0x9ac>)
 800ba06:	2900      	cmp	r1, #0
 800ba08:	d020      	beq.n	800ba4c <_strtod_l+0x934>
 800ba0a:	0011      	movs	r1, r2
 800ba0c:	20d6      	movs	r0, #214	; 0xd6
 800ba0e:	4039      	ands	r1, r7
 800ba10:	04c0      	lsls	r0, r0, #19
 800ba12:	4281      	cmp	r1, r0
 800ba14:	dc1a      	bgt.n	800ba4c <_strtod_l+0x934>
 800ba16:	23dc      	movs	r3, #220	; 0xdc
 800ba18:	049b      	lsls	r3, r3, #18
 800ba1a:	4299      	cmp	r1, r3
 800ba1c:	dc00      	bgt.n	800ba20 <_strtod_l+0x908>
 800ba1e:	e646      	b.n	800b6ae <_strtod_l+0x596>
 800ba20:	4b2d      	ldr	r3, [pc, #180]	; (800bad8 <_strtod_l+0x9c0>)
 800ba22:	0030      	movs	r0, r6
 800ba24:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba26:	2300      	movs	r3, #0
 800ba28:	931a      	str	r3, [sp, #104]	; 0x68
 800ba2a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ba2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba2e:	0039      	movs	r1, r7
 800ba30:	f7f5 fda0 	bl	8001574 <__aeabi_dmul>
 800ba34:	0006      	movs	r6, r0
 800ba36:	000f      	movs	r7, r1
 800ba38:	1e0b      	subs	r3, r1, #0
 800ba3a:	d000      	beq.n	800ba3e <_strtod_l+0x926>
 800ba3c:	e5ab      	b.n	800b596 <_strtod_l+0x47e>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d000      	beq.n	800ba44 <_strtod_l+0x92c>
 800ba42:	e5a8      	b.n	800b596 <_strtod_l+0x47e>
 800ba44:	9a04      	ldr	r2, [sp, #16]
 800ba46:	3322      	adds	r3, #34	; 0x22
 800ba48:	6013      	str	r3, [r2, #0]
 800ba4a:	e5a4      	b.n	800b596 <_strtod_l+0x47e>
 800ba4c:	2601      	movs	r6, #1
 800ba4e:	4013      	ands	r3, r2
 800ba50:	4a22      	ldr	r2, [pc, #136]	; (800badc <_strtod_l+0x9c4>)
 800ba52:	4276      	negs	r6, r6
 800ba54:	189b      	adds	r3, r3, r2
 800ba56:	4a1e      	ldr	r2, [pc, #120]	; (800bad0 <_strtod_l+0x9b8>)
 800ba58:	431a      	orrs	r2, r3
 800ba5a:	0017      	movs	r7, r2
 800ba5c:	e764      	b.n	800b928 <_strtod_l+0x810>
 800ba5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d015      	beq.n	800ba90 <_strtod_l+0x978>
 800ba64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba68:	4213      	tst	r3, r2
 800ba6a:	d100      	bne.n	800ba6e <_strtod_l+0x956>
 800ba6c:	e75c      	b.n	800b928 <_strtod_l+0x810>
 800ba6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba70:	9a06      	ldr	r2, [sp, #24]
 800ba72:	0030      	movs	r0, r6
 800ba74:	0039      	movs	r1, r7
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00f      	beq.n	800ba9a <_strtod_l+0x982>
 800ba7a:	f7ff fb35 	bl	800b0e8 <sulp>
 800ba7e:	0002      	movs	r2, r0
 800ba80:	000b      	movs	r3, r1
 800ba82:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba86:	f7f4 fe4f 	bl	8000728 <__aeabi_dadd>
 800ba8a:	0006      	movs	r6, r0
 800ba8c:	000f      	movs	r7, r1
 800ba8e:	e74b      	b.n	800b928 <_strtod_l+0x810>
 800ba90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba92:	4233      	tst	r3, r6
 800ba94:	d100      	bne.n	800ba98 <_strtod_l+0x980>
 800ba96:	e747      	b.n	800b928 <_strtod_l+0x810>
 800ba98:	e7e9      	b.n	800ba6e <_strtod_l+0x956>
 800ba9a:	f7ff fb25 	bl	800b0e8 <sulp>
 800ba9e:	0002      	movs	r2, r0
 800baa0:	000b      	movs	r3, r1
 800baa2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800baa4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800baa6:	f7f5 ffd7 	bl	8001a58 <__aeabi_dsub>
 800baaa:	2200      	movs	r2, #0
 800baac:	2300      	movs	r3, #0
 800baae:	0006      	movs	r6, r0
 800bab0:	000f      	movs	r7, r1
 800bab2:	f7f4 fcc1 	bl	8000438 <__aeabi_dcmpeq>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d000      	beq.n	800babc <_strtod_l+0x9a4>
 800baba:	e5f8      	b.n	800b6ae <_strtod_l+0x596>
 800babc:	e734      	b.n	800b928 <_strtod_l+0x810>
 800babe:	46c0      	nop			; (mov r8, r8)
 800bac0:	fffffc02 	.word	0xfffffc02
 800bac4:	7ff00000 	.word	0x7ff00000
 800bac8:	0800f250 	.word	0x0800f250
 800bacc:	fffffbe2 	.word	0xfffffbe2
 800bad0:	000fffff 	.word	0x000fffff
 800bad4:	7fefffff 	.word	0x7fefffff
 800bad8:	39500000 	.word	0x39500000
 800badc:	fff00000 	.word	0xfff00000
 800bae0:	9905      	ldr	r1, [sp, #20]
 800bae2:	0020      	movs	r0, r4
 800bae4:	f001 ff52 	bl	800d98c <__ratio>
 800bae8:	2380      	movs	r3, #128	; 0x80
 800baea:	2200      	movs	r2, #0
 800baec:	05db      	lsls	r3, r3, #23
 800baee:	9008      	str	r0, [sp, #32]
 800baf0:	9109      	str	r1, [sp, #36]	; 0x24
 800baf2:	f7f4 fcb1 	bl	8000458 <__aeabi_dcmple>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d100      	bne.n	800bafc <_strtod_l+0x9e4>
 800bafa:	e07f      	b.n	800bbfc <_strtod_l+0xae4>
 800bafc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d04b      	beq.n	800bb9a <_strtod_l+0xa82>
 800bb02:	2200      	movs	r2, #0
 800bb04:	4b8a      	ldr	r3, [pc, #552]	; (800bd30 <_strtod_l+0xc18>)
 800bb06:	9210      	str	r2, [sp, #64]	; 0x40
 800bb08:	9311      	str	r3, [sp, #68]	; 0x44
 800bb0a:	4b89      	ldr	r3, [pc, #548]	; (800bd30 <_strtod_l+0xc18>)
 800bb0c:	9308      	str	r3, [sp, #32]
 800bb0e:	4a89      	ldr	r2, [pc, #548]	; (800bd34 <_strtod_l+0xc1c>)
 800bb10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb12:	4013      	ands	r3, r2
 800bb14:	9314      	str	r3, [sp, #80]	; 0x50
 800bb16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb18:	4b87      	ldr	r3, [pc, #540]	; (800bd38 <_strtod_l+0xc20>)
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d000      	beq.n	800bb20 <_strtod_l+0xa08>
 800bb1e:	e0ba      	b.n	800bc96 <_strtod_l+0xb7e>
 800bb20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb24:	921a      	str	r2, [sp, #104]	; 0x68
 800bb26:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb28:	4a84      	ldr	r2, [pc, #528]	; (800bd3c <_strtod_l+0xc24>)
 800bb2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb2c:	4694      	mov	ip, r2
 800bb2e:	4463      	add	r3, ip
 800bb30:	001f      	movs	r7, r3
 800bb32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb36:	0030      	movs	r0, r6
 800bb38:	0039      	movs	r1, r7
 800bb3a:	920c      	str	r2, [sp, #48]	; 0x30
 800bb3c:	930d      	str	r3, [sp, #52]	; 0x34
 800bb3e:	f001 fe5f 	bl	800d800 <__ulp>
 800bb42:	0002      	movs	r2, r0
 800bb44:	000b      	movs	r3, r1
 800bb46:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bb48:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb4a:	f7f5 fd13 	bl	8001574 <__aeabi_dmul>
 800bb4e:	0032      	movs	r2, r6
 800bb50:	003b      	movs	r3, r7
 800bb52:	f7f4 fde9 	bl	8000728 <__aeabi_dadd>
 800bb56:	4a77      	ldr	r2, [pc, #476]	; (800bd34 <_strtod_l+0xc1c>)
 800bb58:	4b79      	ldr	r3, [pc, #484]	; (800bd40 <_strtod_l+0xc28>)
 800bb5a:	0006      	movs	r6, r0
 800bb5c:	400a      	ands	r2, r1
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d964      	bls.n	800bc2c <_strtod_l+0xb14>
 800bb62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb64:	4a77      	ldr	r2, [pc, #476]	; (800bd44 <_strtod_l+0xc2c>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d103      	bne.n	800bb72 <_strtod_l+0xa5a>
 800bb6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	d100      	bne.n	800bb72 <_strtod_l+0xa5a>
 800bb70:	e508      	b.n	800b584 <_strtod_l+0x46c>
 800bb72:	2601      	movs	r6, #1
 800bb74:	4f73      	ldr	r7, [pc, #460]	; (800bd44 <_strtod_l+0xc2c>)
 800bb76:	4276      	negs	r6, r6
 800bb78:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bb7a:	9804      	ldr	r0, [sp, #16]
 800bb7c:	f001 fba7 	bl	800d2ce <_Bfree>
 800bb80:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb82:	9804      	ldr	r0, [sp, #16]
 800bb84:	f001 fba3 	bl	800d2ce <_Bfree>
 800bb88:	9905      	ldr	r1, [sp, #20]
 800bb8a:	9804      	ldr	r0, [sp, #16]
 800bb8c:	f001 fb9f 	bl	800d2ce <_Bfree>
 800bb90:	0021      	movs	r1, r4
 800bb92:	9804      	ldr	r0, [sp, #16]
 800bb94:	f001 fb9b 	bl	800d2ce <_Bfree>
 800bb98:	e5f4      	b.n	800b784 <_strtod_l+0x66c>
 800bb9a:	2e00      	cmp	r6, #0
 800bb9c:	d11e      	bne.n	800bbdc <_strtod_l+0xac4>
 800bb9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bba0:	031b      	lsls	r3, r3, #12
 800bba2:	d121      	bne.n	800bbe8 <_strtod_l+0xad0>
 800bba4:	9808      	ldr	r0, [sp, #32]
 800bba6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bba8:	2200      	movs	r2, #0
 800bbaa:	4b61      	ldr	r3, [pc, #388]	; (800bd30 <_strtod_l+0xc18>)
 800bbac:	f7f4 fc4a 	bl	8000444 <__aeabi_dcmplt>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d11f      	bne.n	800bbf4 <_strtod_l+0xadc>
 800bbb4:	9808      	ldr	r0, [sp, #32]
 800bbb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbb8:	2200      	movs	r2, #0
 800bbba:	4b63      	ldr	r3, [pc, #396]	; (800bd48 <_strtod_l+0xc30>)
 800bbbc:	f7f5 fcda 	bl	8001574 <__aeabi_dmul>
 800bbc0:	0005      	movs	r5, r0
 800bbc2:	9108      	str	r1, [sp, #32]
 800bbc4:	2280      	movs	r2, #128	; 0x80
 800bbc6:	0612      	lsls	r2, r2, #24
 800bbc8:	4694      	mov	ip, r2
 800bbca:	9b08      	ldr	r3, [sp, #32]
 800bbcc:	951e      	str	r5, [sp, #120]	; 0x78
 800bbce:	4463      	add	r3, ip
 800bbd0:	931f      	str	r3, [sp, #124]	; 0x7c
 800bbd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bbd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bbd6:	9210      	str	r2, [sp, #64]	; 0x40
 800bbd8:	9311      	str	r3, [sp, #68]	; 0x44
 800bbda:	e798      	b.n	800bb0e <_strtod_l+0x9f6>
 800bbdc:	2e01      	cmp	r6, #1
 800bbde:	d103      	bne.n	800bbe8 <_strtod_l+0xad0>
 800bbe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d100      	bne.n	800bbe8 <_strtod_l+0xad0>
 800bbe6:	e562      	b.n	800b6ae <_strtod_l+0x596>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4b58      	ldr	r3, [pc, #352]	; (800bd4c <_strtod_l+0xc34>)
 800bbec:	2500      	movs	r5, #0
 800bbee:	9210      	str	r2, [sp, #64]	; 0x40
 800bbf0:	9311      	str	r3, [sp, #68]	; 0x44
 800bbf2:	e78a      	b.n	800bb0a <_strtod_l+0x9f2>
 800bbf4:	4b54      	ldr	r3, [pc, #336]	; (800bd48 <_strtod_l+0xc30>)
 800bbf6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800bbf8:	9308      	str	r3, [sp, #32]
 800bbfa:	e7e3      	b.n	800bbc4 <_strtod_l+0xaac>
 800bbfc:	4b52      	ldr	r3, [pc, #328]	; (800bd48 <_strtod_l+0xc30>)
 800bbfe:	9808      	ldr	r0, [sp, #32]
 800bc00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc02:	2200      	movs	r2, #0
 800bc04:	f7f5 fcb6 	bl	8001574 <__aeabi_dmul>
 800bc08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc0a:	0005      	movs	r5, r0
 800bc0c:	9108      	str	r1, [sp, #32]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d107      	bne.n	800bc22 <_strtod_l+0xb0a>
 800bc12:	2380      	movs	r3, #128	; 0x80
 800bc14:	061b      	lsls	r3, r3, #24
 800bc16:	18cb      	adds	r3, r1, r3
 800bc18:	9016      	str	r0, [sp, #88]	; 0x58
 800bc1a:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc20:	e7d9      	b.n	800bbd6 <_strtod_l+0xabe>
 800bc22:	0002      	movs	r2, r0
 800bc24:	9b08      	ldr	r3, [sp, #32]
 800bc26:	9216      	str	r2, [sp, #88]	; 0x58
 800bc28:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc2a:	e7f7      	b.n	800bc1c <_strtod_l+0xb04>
 800bc2c:	23d4      	movs	r3, #212	; 0xd4
 800bc2e:	049b      	lsls	r3, r3, #18
 800bc30:	18cf      	adds	r7, r1, r3
 800bc32:	9b06      	ldr	r3, [sp, #24]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d19f      	bne.n	800bb78 <_strtod_l+0xa60>
 800bc38:	4b3e      	ldr	r3, [pc, #248]	; (800bd34 <_strtod_l+0xc1c>)
 800bc3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc3c:	970c      	str	r7, [sp, #48]	; 0x30
 800bc3e:	403b      	ands	r3, r7
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d199      	bne.n	800bb78 <_strtod_l+0xa60>
 800bc44:	9908      	ldr	r1, [sp, #32]
 800bc46:	0028      	movs	r0, r5
 800bc48:	f7f6 fa6a 	bl	8002120 <__aeabi_d2iz>
 800bc4c:	f7f6 fa9e 	bl	800218c <__aeabi_i2d>
 800bc50:	000b      	movs	r3, r1
 800bc52:	0002      	movs	r2, r0
 800bc54:	9908      	ldr	r1, [sp, #32]
 800bc56:	0028      	movs	r0, r5
 800bc58:	f7f5 fefe 	bl	8001a58 <__aeabi_dsub>
 800bc5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc5e:	9008      	str	r0, [sp, #32]
 800bc60:	9109      	str	r1, [sp, #36]	; 0x24
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d104      	bne.n	800bc70 <_strtod_l+0xb58>
 800bc66:	2e00      	cmp	r6, #0
 800bc68:	d102      	bne.n	800bc70 <_strtod_l+0xb58>
 800bc6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc6c:	031b      	lsls	r3, r3, #12
 800bc6e:	d058      	beq.n	800bd22 <_strtod_l+0xc0a>
 800bc70:	9808      	ldr	r0, [sp, #32]
 800bc72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc74:	4a36      	ldr	r2, [pc, #216]	; (800bd50 <_strtod_l+0xc38>)
 800bc76:	4b37      	ldr	r3, [pc, #220]	; (800bd54 <_strtod_l+0xc3c>)
 800bc78:	f7f4 fbe4 	bl	8000444 <__aeabi_dcmplt>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d000      	beq.n	800bc82 <_strtod_l+0xb6a>
 800bc80:	e489      	b.n	800b596 <_strtod_l+0x47e>
 800bc82:	9808      	ldr	r0, [sp, #32]
 800bc84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc86:	4a34      	ldr	r2, [pc, #208]	; (800bd58 <_strtod_l+0xc40>)
 800bc88:	4b2f      	ldr	r3, [pc, #188]	; (800bd48 <_strtod_l+0xc30>)
 800bc8a:	f7f4 fbef 	bl	800046c <__aeabi_dcmpgt>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d100      	bne.n	800bc94 <_strtod_l+0xb7c>
 800bc92:	e771      	b.n	800bb78 <_strtod_l+0xa60>
 800bc94:	e47f      	b.n	800b596 <_strtod_l+0x47e>
 800bc96:	9b06      	ldr	r3, [sp, #24]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d02a      	beq.n	800bcf2 <_strtod_l+0xbda>
 800bc9c:	23d4      	movs	r3, #212	; 0xd4
 800bc9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bca0:	04db      	lsls	r3, r3, #19
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d825      	bhi.n	800bcf2 <_strtod_l+0xbda>
 800bca6:	4a2d      	ldr	r2, [pc, #180]	; (800bd5c <_strtod_l+0xc44>)
 800bca8:	4b2d      	ldr	r3, [pc, #180]	; (800bd60 <_strtod_l+0xc48>)
 800bcaa:	0028      	movs	r0, r5
 800bcac:	9908      	ldr	r1, [sp, #32]
 800bcae:	f7f4 fbd3 	bl	8000458 <__aeabi_dcmple>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d016      	beq.n	800bce4 <_strtod_l+0xbcc>
 800bcb6:	0028      	movs	r0, r5
 800bcb8:	9908      	ldr	r1, [sp, #32]
 800bcba:	f7f4 fc35 	bl	8000528 <__aeabi_d2uiz>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d100      	bne.n	800bcc4 <_strtod_l+0xbac>
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f7f6 fa9c 	bl	8002200 <__aeabi_ui2d>
 800bcc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcca:	0005      	movs	r5, r0
 800bccc:	9108      	str	r1, [sp, #32]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d122      	bne.n	800bd18 <_strtod_l+0xc00>
 800bcd2:	2380      	movs	r3, #128	; 0x80
 800bcd4:	061b      	lsls	r3, r3, #24
 800bcd6:	18cb      	adds	r3, r1, r3
 800bcd8:	9018      	str	r0, [sp, #96]	; 0x60
 800bcda:	9319      	str	r3, [sp, #100]	; 0x64
 800bcdc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bcde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bce0:	9210      	str	r2, [sp, #64]	; 0x40
 800bce2:	9311      	str	r3, [sp, #68]	; 0x44
 800bce4:	22d6      	movs	r2, #214	; 0xd6
 800bce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bce8:	04d2      	lsls	r2, r2, #19
 800bcea:	189b      	adds	r3, r3, r2
 800bcec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcee:	1a9b      	subs	r3, r3, r2
 800bcf0:	9311      	str	r3, [sp, #68]	; 0x44
 800bcf2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bcf4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bcf6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800bcf8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800bcfa:	f001 fd81 	bl	800d800 <__ulp>
 800bcfe:	0002      	movs	r2, r0
 800bd00:	000b      	movs	r3, r1
 800bd02:	0030      	movs	r0, r6
 800bd04:	0039      	movs	r1, r7
 800bd06:	f7f5 fc35 	bl	8001574 <__aeabi_dmul>
 800bd0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd0e:	f7f4 fd0b 	bl	8000728 <__aeabi_dadd>
 800bd12:	0006      	movs	r6, r0
 800bd14:	000f      	movs	r7, r1
 800bd16:	e78c      	b.n	800bc32 <_strtod_l+0xb1a>
 800bd18:	0002      	movs	r2, r0
 800bd1a:	9b08      	ldr	r3, [sp, #32]
 800bd1c:	9218      	str	r2, [sp, #96]	; 0x60
 800bd1e:	9319      	str	r3, [sp, #100]	; 0x64
 800bd20:	e7dc      	b.n	800bcdc <_strtod_l+0xbc4>
 800bd22:	4a0b      	ldr	r2, [pc, #44]	; (800bd50 <_strtod_l+0xc38>)
 800bd24:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <_strtod_l+0xc4c>)
 800bd26:	9808      	ldr	r0, [sp, #32]
 800bd28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd2a:	f7f4 fb8b 	bl	8000444 <__aeabi_dcmplt>
 800bd2e:	e7ae      	b.n	800bc8e <_strtod_l+0xb76>
 800bd30:	3ff00000 	.word	0x3ff00000
 800bd34:	7ff00000 	.word	0x7ff00000
 800bd38:	7fe00000 	.word	0x7fe00000
 800bd3c:	fcb00000 	.word	0xfcb00000
 800bd40:	7c9fffff 	.word	0x7c9fffff
 800bd44:	7fefffff 	.word	0x7fefffff
 800bd48:	3fe00000 	.word	0x3fe00000
 800bd4c:	bff00000 	.word	0xbff00000
 800bd50:	94a03595 	.word	0x94a03595
 800bd54:	3fdfffff 	.word	0x3fdfffff
 800bd58:	35afe535 	.word	0x35afe535
 800bd5c:	ffc00000 	.word	0xffc00000
 800bd60:	41dfffff 	.word	0x41dfffff
 800bd64:	3fcfffff 	.word	0x3fcfffff

0800bd68 <_strtod_r>:
 800bd68:	4b04      	ldr	r3, [pc, #16]	; (800bd7c <_strtod_r+0x14>)
 800bd6a:	b510      	push	{r4, lr}
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d100      	bne.n	800bd76 <_strtod_r+0xe>
 800bd74:	4b02      	ldr	r3, [pc, #8]	; (800bd80 <_strtod_r+0x18>)
 800bd76:	f7ff f9cf 	bl	800b118 <_strtod_l>
 800bd7a:	bd10      	pop	{r4, pc}
 800bd7c:	20000044 	.word	0x20000044
 800bd80:	200000a8 	.word	0x200000a8

0800bd84 <_strtol_l.isra.0>:
 800bd84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd86:	001f      	movs	r7, r3
 800bd88:	000e      	movs	r6, r1
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	9005      	str	r0, [sp, #20]
 800bd8e:	9101      	str	r1, [sp, #4]
 800bd90:	9202      	str	r2, [sp, #8]
 800bd92:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bd94:	7834      	ldrb	r4, [r6, #0]
 800bd96:	f001 fa32 	bl	800d1fe <__locale_ctype_ptr_l>
 800bd9a:	2208      	movs	r2, #8
 800bd9c:	1900      	adds	r0, r0, r4
 800bd9e:	7843      	ldrb	r3, [r0, #1]
 800bda0:	1c75      	adds	r5, r6, #1
 800bda2:	4013      	ands	r3, r2
 800bda4:	d136      	bne.n	800be14 <_strtol_l.isra.0+0x90>
 800bda6:	2c2d      	cmp	r4, #45	; 0x2d
 800bda8:	d136      	bne.n	800be18 <_strtol_l.isra.0+0x94>
 800bdaa:	1cb5      	adds	r5, r6, #2
 800bdac:	7874      	ldrb	r4, [r6, #1]
 800bdae:	2601      	movs	r6, #1
 800bdb0:	2f00      	cmp	r7, #0
 800bdb2:	d062      	beq.n	800be7a <_strtol_l.isra.0+0xf6>
 800bdb4:	2f10      	cmp	r7, #16
 800bdb6:	d109      	bne.n	800bdcc <_strtol_l.isra.0+0x48>
 800bdb8:	2c30      	cmp	r4, #48	; 0x30
 800bdba:	d107      	bne.n	800bdcc <_strtol_l.isra.0+0x48>
 800bdbc:	2220      	movs	r2, #32
 800bdbe:	782b      	ldrb	r3, [r5, #0]
 800bdc0:	4393      	bics	r3, r2
 800bdc2:	2b58      	cmp	r3, #88	; 0x58
 800bdc4:	d154      	bne.n	800be70 <_strtol_l.isra.0+0xec>
 800bdc6:	2710      	movs	r7, #16
 800bdc8:	786c      	ldrb	r4, [r5, #1]
 800bdca:	3502      	adds	r5, #2
 800bdcc:	4b2d      	ldr	r3, [pc, #180]	; (800be84 <_strtol_l.isra.0+0x100>)
 800bdce:	0039      	movs	r1, r7
 800bdd0:	18f3      	adds	r3, r6, r3
 800bdd2:	0018      	movs	r0, r3
 800bdd4:	9303      	str	r3, [sp, #12]
 800bdd6:	f7f4 fa2f 	bl	8000238 <__aeabi_uidivmod>
 800bdda:	9104      	str	r1, [sp, #16]
 800bddc:	2101      	movs	r1, #1
 800bdde:	2300      	movs	r3, #0
 800bde0:	4249      	negs	r1, r1
 800bde2:	0002      	movs	r2, r0
 800bde4:	468c      	mov	ip, r1
 800bde6:	0018      	movs	r0, r3
 800bde8:	0021      	movs	r1, r4
 800bdea:	3930      	subs	r1, #48	; 0x30
 800bdec:	2909      	cmp	r1, #9
 800bdee:	d81a      	bhi.n	800be26 <_strtol_l.isra.0+0xa2>
 800bdf0:	000c      	movs	r4, r1
 800bdf2:	42a7      	cmp	r7, r4
 800bdf4:	dd23      	ble.n	800be3e <_strtol_l.isra.0+0xba>
 800bdf6:	1c59      	adds	r1, r3, #1
 800bdf8:	d009      	beq.n	800be0e <_strtol_l.isra.0+0x8a>
 800bdfa:	4663      	mov	r3, ip
 800bdfc:	4282      	cmp	r2, r0
 800bdfe:	d306      	bcc.n	800be0e <_strtol_l.isra.0+0x8a>
 800be00:	d102      	bne.n	800be08 <_strtol_l.isra.0+0x84>
 800be02:	9904      	ldr	r1, [sp, #16]
 800be04:	42a1      	cmp	r1, r4
 800be06:	db02      	blt.n	800be0e <_strtol_l.isra.0+0x8a>
 800be08:	2301      	movs	r3, #1
 800be0a:	4378      	muls	r0, r7
 800be0c:	1820      	adds	r0, r4, r0
 800be0e:	782c      	ldrb	r4, [r5, #0]
 800be10:	3501      	adds	r5, #1
 800be12:	e7e9      	b.n	800bde8 <_strtol_l.isra.0+0x64>
 800be14:	002e      	movs	r6, r5
 800be16:	e7bc      	b.n	800bd92 <_strtol_l.isra.0+0xe>
 800be18:	2c2b      	cmp	r4, #43	; 0x2b
 800be1a:	d001      	beq.n	800be20 <_strtol_l.isra.0+0x9c>
 800be1c:	001e      	movs	r6, r3
 800be1e:	e7c7      	b.n	800bdb0 <_strtol_l.isra.0+0x2c>
 800be20:	1cb5      	adds	r5, r6, #2
 800be22:	7874      	ldrb	r4, [r6, #1]
 800be24:	e7fa      	b.n	800be1c <_strtol_l.isra.0+0x98>
 800be26:	0021      	movs	r1, r4
 800be28:	3941      	subs	r1, #65	; 0x41
 800be2a:	2919      	cmp	r1, #25
 800be2c:	d801      	bhi.n	800be32 <_strtol_l.isra.0+0xae>
 800be2e:	3c37      	subs	r4, #55	; 0x37
 800be30:	e7df      	b.n	800bdf2 <_strtol_l.isra.0+0x6e>
 800be32:	0021      	movs	r1, r4
 800be34:	3961      	subs	r1, #97	; 0x61
 800be36:	2919      	cmp	r1, #25
 800be38:	d801      	bhi.n	800be3e <_strtol_l.isra.0+0xba>
 800be3a:	3c57      	subs	r4, #87	; 0x57
 800be3c:	e7d9      	b.n	800bdf2 <_strtol_l.isra.0+0x6e>
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	d108      	bne.n	800be54 <_strtol_l.isra.0+0xd0>
 800be42:	9a05      	ldr	r2, [sp, #20]
 800be44:	3323      	adds	r3, #35	; 0x23
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	9b02      	ldr	r3, [sp, #8]
 800be4a:	9803      	ldr	r0, [sp, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d109      	bne.n	800be64 <_strtol_l.isra.0+0xe0>
 800be50:	b007      	add	sp, #28
 800be52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be54:	2e00      	cmp	r6, #0
 800be56:	d000      	beq.n	800be5a <_strtol_l.isra.0+0xd6>
 800be58:	4240      	negs	r0, r0
 800be5a:	9a02      	ldr	r2, [sp, #8]
 800be5c:	2a00      	cmp	r2, #0
 800be5e:	d0f7      	beq.n	800be50 <_strtol_l.isra.0+0xcc>
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <_strtol_l.isra.0+0xe4>
 800be64:	1e6b      	subs	r3, r5, #1
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	9b02      	ldr	r3, [sp, #8]
 800be6a:	9a01      	ldr	r2, [sp, #4]
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	e7ef      	b.n	800be50 <_strtol_l.isra.0+0xcc>
 800be70:	2430      	movs	r4, #48	; 0x30
 800be72:	2f00      	cmp	r7, #0
 800be74:	d1aa      	bne.n	800bdcc <_strtol_l.isra.0+0x48>
 800be76:	2708      	movs	r7, #8
 800be78:	e7a8      	b.n	800bdcc <_strtol_l.isra.0+0x48>
 800be7a:	2c30      	cmp	r4, #48	; 0x30
 800be7c:	d09e      	beq.n	800bdbc <_strtol_l.isra.0+0x38>
 800be7e:	270a      	movs	r7, #10
 800be80:	e7a4      	b.n	800bdcc <_strtol_l.isra.0+0x48>
 800be82:	46c0      	nop			; (mov r8, r8)
 800be84:	7fffffff 	.word	0x7fffffff

0800be88 <_strtol_r>:
 800be88:	b513      	push	{r0, r1, r4, lr}
 800be8a:	4c05      	ldr	r4, [pc, #20]	; (800bea0 <_strtol_r+0x18>)
 800be8c:	6824      	ldr	r4, [r4, #0]
 800be8e:	6a24      	ldr	r4, [r4, #32]
 800be90:	2c00      	cmp	r4, #0
 800be92:	d100      	bne.n	800be96 <_strtol_r+0xe>
 800be94:	4c03      	ldr	r4, [pc, #12]	; (800bea4 <_strtol_r+0x1c>)
 800be96:	9400      	str	r4, [sp, #0]
 800be98:	f7ff ff74 	bl	800bd84 <_strtol_l.isra.0>
 800be9c:	bd16      	pop	{r1, r2, r4, pc}
 800be9e:	46c0      	nop			; (mov r8, r8)
 800bea0:	20000044 	.word	0x20000044
 800bea4:	200000a8 	.word	0x200000a8

0800bea8 <strtol>:
 800bea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beaa:	0013      	movs	r3, r2
 800beac:	4a06      	ldr	r2, [pc, #24]	; (800bec8 <strtol+0x20>)
 800beae:	0005      	movs	r5, r0
 800beb0:	6810      	ldr	r0, [r2, #0]
 800beb2:	6a04      	ldr	r4, [r0, #32]
 800beb4:	2c00      	cmp	r4, #0
 800beb6:	d100      	bne.n	800beba <strtol+0x12>
 800beb8:	4c04      	ldr	r4, [pc, #16]	; (800becc <strtol+0x24>)
 800beba:	000a      	movs	r2, r1
 800bebc:	9400      	str	r4, [sp, #0]
 800bebe:	0029      	movs	r1, r5
 800bec0:	f7ff ff60 	bl	800bd84 <_strtol_l.isra.0>
 800bec4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800bec6:	46c0      	nop			; (mov r8, r8)
 800bec8:	20000044 	.word	0x20000044
 800becc:	200000a8 	.word	0x200000a8

0800bed0 <quorem>:
 800bed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bed2:	6903      	ldr	r3, [r0, #16]
 800bed4:	690c      	ldr	r4, [r1, #16]
 800bed6:	b089      	sub	sp, #36	; 0x24
 800bed8:	0007      	movs	r7, r0
 800beda:	9105      	str	r1, [sp, #20]
 800bedc:	2600      	movs	r6, #0
 800bede:	42a3      	cmp	r3, r4
 800bee0:	db65      	blt.n	800bfae <quorem+0xde>
 800bee2:	000b      	movs	r3, r1
 800bee4:	3c01      	subs	r4, #1
 800bee6:	3314      	adds	r3, #20
 800bee8:	00a5      	lsls	r5, r4, #2
 800beea:	9303      	str	r3, [sp, #12]
 800beec:	195b      	adds	r3, r3, r5
 800beee:	9304      	str	r3, [sp, #16]
 800bef0:	0003      	movs	r3, r0
 800bef2:	3314      	adds	r3, #20
 800bef4:	9302      	str	r3, [sp, #8]
 800bef6:	195d      	adds	r5, r3, r5
 800bef8:	9b04      	ldr	r3, [sp, #16]
 800befa:	6828      	ldr	r0, [r5, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	1c59      	adds	r1, r3, #1
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	f7f4 f913 	bl	800012c <__udivsi3>
 800bf06:	9001      	str	r0, [sp, #4]
 800bf08:	42b0      	cmp	r0, r6
 800bf0a:	d029      	beq.n	800bf60 <quorem+0x90>
 800bf0c:	9b03      	ldr	r3, [sp, #12]
 800bf0e:	9802      	ldr	r0, [sp, #8]
 800bf10:	469c      	mov	ip, r3
 800bf12:	9606      	str	r6, [sp, #24]
 800bf14:	4662      	mov	r2, ip
 800bf16:	ca08      	ldmia	r2!, {r3}
 800bf18:	4694      	mov	ip, r2
 800bf1a:	9a01      	ldr	r2, [sp, #4]
 800bf1c:	b299      	uxth	r1, r3
 800bf1e:	4351      	muls	r1, r2
 800bf20:	0c1b      	lsrs	r3, r3, #16
 800bf22:	4353      	muls	r3, r2
 800bf24:	1989      	adds	r1, r1, r6
 800bf26:	0c0a      	lsrs	r2, r1, #16
 800bf28:	189b      	adds	r3, r3, r2
 800bf2a:	9307      	str	r3, [sp, #28]
 800bf2c:	0c1e      	lsrs	r6, r3, #16
 800bf2e:	6803      	ldr	r3, [r0, #0]
 800bf30:	b289      	uxth	r1, r1
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	9b06      	ldr	r3, [sp, #24]
 800bf36:	18d2      	adds	r2, r2, r3
 800bf38:	6803      	ldr	r3, [r0, #0]
 800bf3a:	1a52      	subs	r2, r2, r1
 800bf3c:	0c19      	lsrs	r1, r3, #16
 800bf3e:	466b      	mov	r3, sp
 800bf40:	8b9b      	ldrh	r3, [r3, #28]
 800bf42:	1acb      	subs	r3, r1, r3
 800bf44:	1411      	asrs	r1, r2, #16
 800bf46:	185b      	adds	r3, r3, r1
 800bf48:	1419      	asrs	r1, r3, #16
 800bf4a:	b292      	uxth	r2, r2
 800bf4c:	041b      	lsls	r3, r3, #16
 800bf4e:	431a      	orrs	r2, r3
 800bf50:	9b04      	ldr	r3, [sp, #16]
 800bf52:	9106      	str	r1, [sp, #24]
 800bf54:	c004      	stmia	r0!, {r2}
 800bf56:	4563      	cmp	r3, ip
 800bf58:	d2dc      	bcs.n	800bf14 <quorem+0x44>
 800bf5a:	682b      	ldr	r3, [r5, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d02d      	beq.n	800bfbc <quorem+0xec>
 800bf60:	9905      	ldr	r1, [sp, #20]
 800bf62:	0038      	movs	r0, r7
 800bf64:	f001 fbce 	bl	800d704 <__mcmp>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	db1f      	blt.n	800bfac <quorem+0xdc>
 800bf6c:	2500      	movs	r5, #0
 800bf6e:	9b01      	ldr	r3, [sp, #4]
 800bf70:	9802      	ldr	r0, [sp, #8]
 800bf72:	3301      	adds	r3, #1
 800bf74:	9903      	ldr	r1, [sp, #12]
 800bf76:	9301      	str	r3, [sp, #4]
 800bf78:	6802      	ldr	r2, [r0, #0]
 800bf7a:	c908      	ldmia	r1!, {r3}
 800bf7c:	b292      	uxth	r2, r2
 800bf7e:	1955      	adds	r5, r2, r5
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	1aaa      	subs	r2, r5, r2
 800bf84:	6805      	ldr	r5, [r0, #0]
 800bf86:	0c1b      	lsrs	r3, r3, #16
 800bf88:	0c2d      	lsrs	r5, r5, #16
 800bf8a:	1aeb      	subs	r3, r5, r3
 800bf8c:	1415      	asrs	r5, r2, #16
 800bf8e:	195b      	adds	r3, r3, r5
 800bf90:	141d      	asrs	r5, r3, #16
 800bf92:	b292      	uxth	r2, r2
 800bf94:	041b      	lsls	r3, r3, #16
 800bf96:	4313      	orrs	r3, r2
 800bf98:	c008      	stmia	r0!, {r3}
 800bf9a:	9b04      	ldr	r3, [sp, #16]
 800bf9c:	428b      	cmp	r3, r1
 800bf9e:	d2eb      	bcs.n	800bf78 <quorem+0xa8>
 800bfa0:	9a02      	ldr	r2, [sp, #8]
 800bfa2:	00a3      	lsls	r3, r4, #2
 800bfa4:	18d3      	adds	r3, r2, r3
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	2a00      	cmp	r2, #0
 800bfaa:	d011      	beq.n	800bfd0 <quorem+0x100>
 800bfac:	9e01      	ldr	r6, [sp, #4]
 800bfae:	0030      	movs	r0, r6
 800bfb0:	b009      	add	sp, #36	; 0x24
 800bfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb4:	682b      	ldr	r3, [r5, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d104      	bne.n	800bfc4 <quorem+0xf4>
 800bfba:	3c01      	subs	r4, #1
 800bfbc:	9b02      	ldr	r3, [sp, #8]
 800bfbe:	3d04      	subs	r5, #4
 800bfc0:	42ab      	cmp	r3, r5
 800bfc2:	d3f7      	bcc.n	800bfb4 <quorem+0xe4>
 800bfc4:	613c      	str	r4, [r7, #16]
 800bfc6:	e7cb      	b.n	800bf60 <quorem+0x90>
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	2a00      	cmp	r2, #0
 800bfcc:	d104      	bne.n	800bfd8 <quorem+0x108>
 800bfce:	3c01      	subs	r4, #1
 800bfd0:	9a02      	ldr	r2, [sp, #8]
 800bfd2:	3b04      	subs	r3, #4
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d3f7      	bcc.n	800bfc8 <quorem+0xf8>
 800bfd8:	613c      	str	r4, [r7, #16]
 800bfda:	e7e7      	b.n	800bfac <quorem+0xdc>

0800bfdc <_dtoa_r>:
 800bfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfde:	0016      	movs	r6, r2
 800bfe0:	001f      	movs	r7, r3
 800bfe2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bfe4:	b09b      	sub	sp, #108	; 0x6c
 800bfe6:	9002      	str	r0, [sp, #8]
 800bfe8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800bfea:	9606      	str	r6, [sp, #24]
 800bfec:	9707      	str	r7, [sp, #28]
 800bfee:	2c00      	cmp	r4, #0
 800bff0:	d108      	bne.n	800c004 <_dtoa_r+0x28>
 800bff2:	2010      	movs	r0, #16
 800bff4:	f7fe f8f2 	bl	800a1dc <malloc>
 800bff8:	9b02      	ldr	r3, [sp, #8]
 800bffa:	6258      	str	r0, [r3, #36]	; 0x24
 800bffc:	6044      	str	r4, [r0, #4]
 800bffe:	6084      	str	r4, [r0, #8]
 800c000:	6004      	str	r4, [r0, #0]
 800c002:	60c4      	str	r4, [r0, #12]
 800c004:	9b02      	ldr	r3, [sp, #8]
 800c006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c008:	6819      	ldr	r1, [r3, #0]
 800c00a:	2900      	cmp	r1, #0
 800c00c:	d00b      	beq.n	800c026 <_dtoa_r+0x4a>
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	2301      	movs	r3, #1
 800c012:	4093      	lsls	r3, r2
 800c014:	604a      	str	r2, [r1, #4]
 800c016:	608b      	str	r3, [r1, #8]
 800c018:	9802      	ldr	r0, [sp, #8]
 800c01a:	f001 f958 	bl	800d2ce <_Bfree>
 800c01e:	2200      	movs	r2, #0
 800c020:	9b02      	ldr	r3, [sp, #8]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	2f00      	cmp	r7, #0
 800c028:	da20      	bge.n	800c06c <_dtoa_r+0x90>
 800c02a:	2301      	movs	r3, #1
 800c02c:	602b      	str	r3, [r5, #0]
 800c02e:	007b      	lsls	r3, r7, #1
 800c030:	085b      	lsrs	r3, r3, #1
 800c032:	9307      	str	r3, [sp, #28]
 800c034:	9c07      	ldr	r4, [sp, #28]
 800c036:	4bb2      	ldr	r3, [pc, #712]	; (800c300 <_dtoa_r+0x324>)
 800c038:	0022      	movs	r2, r4
 800c03a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c03c:	401a      	ands	r2, r3
 800c03e:	429a      	cmp	r2, r3
 800c040:	d117      	bne.n	800c072 <_dtoa_r+0x96>
 800c042:	4bb0      	ldr	r3, [pc, #704]	; (800c304 <_dtoa_r+0x328>)
 800c044:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c046:	6013      	str	r3, [r2, #0]
 800c048:	9b06      	ldr	r3, [sp, #24]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d103      	bne.n	800c056 <_dtoa_r+0x7a>
 800c04e:	0324      	lsls	r4, r4, #12
 800c050:	d101      	bne.n	800c056 <_dtoa_r+0x7a>
 800c052:	f000 fd87 	bl	800cb64 <_dtoa_r+0xb88>
 800c056:	4bac      	ldr	r3, [pc, #688]	; (800c308 <_dtoa_r+0x32c>)
 800c058:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c05a:	9308      	str	r3, [sp, #32]
 800c05c:	2a00      	cmp	r2, #0
 800c05e:	d002      	beq.n	800c066 <_dtoa_r+0x8a>
 800c060:	4baa      	ldr	r3, [pc, #680]	; (800c30c <_dtoa_r+0x330>)
 800c062:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c064:	6013      	str	r3, [r2, #0]
 800c066:	9808      	ldr	r0, [sp, #32]
 800c068:	b01b      	add	sp, #108	; 0x6c
 800c06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c06c:	2300      	movs	r3, #0
 800c06e:	602b      	str	r3, [r5, #0]
 800c070:	e7e0      	b.n	800c034 <_dtoa_r+0x58>
 800c072:	9e06      	ldr	r6, [sp, #24]
 800c074:	9f07      	ldr	r7, [sp, #28]
 800c076:	2200      	movs	r2, #0
 800c078:	2300      	movs	r3, #0
 800c07a:	0030      	movs	r0, r6
 800c07c:	0039      	movs	r1, r7
 800c07e:	f7f4 f9db 	bl	8000438 <__aeabi_dcmpeq>
 800c082:	1e05      	subs	r5, r0, #0
 800c084:	d00b      	beq.n	800c09e <_dtoa_r+0xc2>
 800c086:	2301      	movs	r3, #1
 800c088:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c08a:	6013      	str	r3, [r2, #0]
 800c08c:	4ba0      	ldr	r3, [pc, #640]	; (800c310 <_dtoa_r+0x334>)
 800c08e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c090:	9308      	str	r3, [sp, #32]
 800c092:	2a00      	cmp	r2, #0
 800c094:	d0e7      	beq.n	800c066 <_dtoa_r+0x8a>
 800c096:	4a9f      	ldr	r2, [pc, #636]	; (800c314 <_dtoa_r+0x338>)
 800c098:	9924      	ldr	r1, [sp, #144]	; 0x90
 800c09a:	600a      	str	r2, [r1, #0]
 800c09c:	e7e3      	b.n	800c066 <_dtoa_r+0x8a>
 800c09e:	ab18      	add	r3, sp, #96	; 0x60
 800c0a0:	9301      	str	r3, [sp, #4]
 800c0a2:	ab19      	add	r3, sp, #100	; 0x64
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	0032      	movs	r2, r6
 800c0a8:	003b      	movs	r3, r7
 800c0aa:	9802      	ldr	r0, [sp, #8]
 800c0ac:	f001 fc1a 	bl	800d8e4 <__d2b>
 800c0b0:	0063      	lsls	r3, r4, #1
 800c0b2:	9003      	str	r0, [sp, #12]
 800c0b4:	0d5b      	lsrs	r3, r3, #21
 800c0b6:	d074      	beq.n	800c1a2 <_dtoa_r+0x1c6>
 800c0b8:	033a      	lsls	r2, r7, #12
 800c0ba:	4c97      	ldr	r4, [pc, #604]	; (800c318 <_dtoa_r+0x33c>)
 800c0bc:	0b12      	lsrs	r2, r2, #12
 800c0be:	4314      	orrs	r4, r2
 800c0c0:	0021      	movs	r1, r4
 800c0c2:	4a96      	ldr	r2, [pc, #600]	; (800c31c <_dtoa_r+0x340>)
 800c0c4:	0030      	movs	r0, r6
 800c0c6:	9516      	str	r5, [sp, #88]	; 0x58
 800c0c8:	189e      	adds	r6, r3, r2
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	4b94      	ldr	r3, [pc, #592]	; (800c320 <_dtoa_r+0x344>)
 800c0ce:	f7f5 fcc3 	bl	8001a58 <__aeabi_dsub>
 800c0d2:	4a94      	ldr	r2, [pc, #592]	; (800c324 <_dtoa_r+0x348>)
 800c0d4:	4b94      	ldr	r3, [pc, #592]	; (800c328 <_dtoa_r+0x34c>)
 800c0d6:	f7f5 fa4d 	bl	8001574 <__aeabi_dmul>
 800c0da:	4a94      	ldr	r2, [pc, #592]	; (800c32c <_dtoa_r+0x350>)
 800c0dc:	4b94      	ldr	r3, [pc, #592]	; (800c330 <_dtoa_r+0x354>)
 800c0de:	f7f4 fb23 	bl	8000728 <__aeabi_dadd>
 800c0e2:	0004      	movs	r4, r0
 800c0e4:	0030      	movs	r0, r6
 800c0e6:	000d      	movs	r5, r1
 800c0e8:	f7f6 f850 	bl	800218c <__aeabi_i2d>
 800c0ec:	4a91      	ldr	r2, [pc, #580]	; (800c334 <_dtoa_r+0x358>)
 800c0ee:	4b92      	ldr	r3, [pc, #584]	; (800c338 <_dtoa_r+0x35c>)
 800c0f0:	f7f5 fa40 	bl	8001574 <__aeabi_dmul>
 800c0f4:	0002      	movs	r2, r0
 800c0f6:	000b      	movs	r3, r1
 800c0f8:	0020      	movs	r0, r4
 800c0fa:	0029      	movs	r1, r5
 800c0fc:	f7f4 fb14 	bl	8000728 <__aeabi_dadd>
 800c100:	0004      	movs	r4, r0
 800c102:	000d      	movs	r5, r1
 800c104:	f7f6 f80c 	bl	8002120 <__aeabi_d2iz>
 800c108:	2200      	movs	r2, #0
 800c10a:	0007      	movs	r7, r0
 800c10c:	2300      	movs	r3, #0
 800c10e:	0020      	movs	r0, r4
 800c110:	0029      	movs	r1, r5
 800c112:	f7f4 f997 	bl	8000444 <__aeabi_dcmplt>
 800c116:	2800      	cmp	r0, #0
 800c118:	d009      	beq.n	800c12e <_dtoa_r+0x152>
 800c11a:	0038      	movs	r0, r7
 800c11c:	f7f6 f836 	bl	800218c <__aeabi_i2d>
 800c120:	002b      	movs	r3, r5
 800c122:	0022      	movs	r2, r4
 800c124:	f7f4 f988 	bl	8000438 <__aeabi_dcmpeq>
 800c128:	4243      	negs	r3, r0
 800c12a:	4158      	adcs	r0, r3
 800c12c:	1a3f      	subs	r7, r7, r0
 800c12e:	2301      	movs	r3, #1
 800c130:	9314      	str	r3, [sp, #80]	; 0x50
 800c132:	2f16      	cmp	r7, #22
 800c134:	d80d      	bhi.n	800c152 <_dtoa_r+0x176>
 800c136:	4981      	ldr	r1, [pc, #516]	; (800c33c <_dtoa_r+0x360>)
 800c138:	00fb      	lsls	r3, r7, #3
 800c13a:	18c9      	adds	r1, r1, r3
 800c13c:	6808      	ldr	r0, [r1, #0]
 800c13e:	6849      	ldr	r1, [r1, #4]
 800c140:	9a06      	ldr	r2, [sp, #24]
 800c142:	9b07      	ldr	r3, [sp, #28]
 800c144:	f7f4 f992 	bl	800046c <__aeabi_dcmpgt>
 800c148:	2800      	cmp	r0, #0
 800c14a:	d046      	beq.n	800c1da <_dtoa_r+0x1fe>
 800c14c:	2300      	movs	r3, #0
 800c14e:	3f01      	subs	r7, #1
 800c150:	9314      	str	r3, [sp, #80]	; 0x50
 800c152:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c154:	1b9e      	subs	r6, r3, r6
 800c156:	2300      	movs	r3, #0
 800c158:	930a      	str	r3, [sp, #40]	; 0x28
 800c15a:	0033      	movs	r3, r6
 800c15c:	3b01      	subs	r3, #1
 800c15e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c160:	d504      	bpl.n	800c16c <_dtoa_r+0x190>
 800c162:	2301      	movs	r3, #1
 800c164:	1b9b      	subs	r3, r3, r6
 800c166:	930a      	str	r3, [sp, #40]	; 0x28
 800c168:	2300      	movs	r3, #0
 800c16a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c16c:	2f00      	cmp	r7, #0
 800c16e:	db36      	blt.n	800c1de <_dtoa_r+0x202>
 800c170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c172:	9711      	str	r7, [sp, #68]	; 0x44
 800c174:	19db      	adds	r3, r3, r7
 800c176:	930b      	str	r3, [sp, #44]	; 0x2c
 800c178:	2300      	movs	r3, #0
 800c17a:	9304      	str	r3, [sp, #16]
 800c17c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c17e:	2401      	movs	r4, #1
 800c180:	2b09      	cmp	r3, #9
 800c182:	d900      	bls.n	800c186 <_dtoa_r+0x1aa>
 800c184:	e084      	b.n	800c290 <_dtoa_r+0x2b4>
 800c186:	2b05      	cmp	r3, #5
 800c188:	dd02      	ble.n	800c190 <_dtoa_r+0x1b4>
 800c18a:	2400      	movs	r4, #0
 800c18c:	3b04      	subs	r3, #4
 800c18e:	9320      	str	r3, [sp, #128]	; 0x80
 800c190:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c192:	1e98      	subs	r0, r3, #2
 800c194:	2803      	cmp	r0, #3
 800c196:	d900      	bls.n	800c19a <_dtoa_r+0x1be>
 800c198:	e084      	b.n	800c2a4 <_dtoa_r+0x2c8>
 800c19a:	f7f3 ffbd 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c19e:	7775      	.short	0x7775
 800c1a0:	6a28      	.short	0x6a28
 800c1a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c1a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c1a6:	189e      	adds	r6, r3, r2
 800c1a8:	4b65      	ldr	r3, [pc, #404]	; (800c340 <_dtoa_r+0x364>)
 800c1aa:	18f2      	adds	r2, r6, r3
 800c1ac:	2a20      	cmp	r2, #32
 800c1ae:	dd0f      	ble.n	800c1d0 <_dtoa_r+0x1f4>
 800c1b0:	2340      	movs	r3, #64	; 0x40
 800c1b2:	1a9b      	subs	r3, r3, r2
 800c1b4:	409c      	lsls	r4, r3
 800c1b6:	4b63      	ldr	r3, [pc, #396]	; (800c344 <_dtoa_r+0x368>)
 800c1b8:	9806      	ldr	r0, [sp, #24]
 800c1ba:	18f3      	adds	r3, r6, r3
 800c1bc:	40d8      	lsrs	r0, r3
 800c1be:	4320      	orrs	r0, r4
 800c1c0:	f7f6 f81e 	bl	8002200 <__aeabi_ui2d>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	4c60      	ldr	r4, [pc, #384]	; (800c348 <_dtoa_r+0x36c>)
 800c1c8:	3e01      	subs	r6, #1
 800c1ca:	1909      	adds	r1, r1, r4
 800c1cc:	9316      	str	r3, [sp, #88]	; 0x58
 800c1ce:	e77c      	b.n	800c0ca <_dtoa_r+0xee>
 800c1d0:	2320      	movs	r3, #32
 800c1d2:	9806      	ldr	r0, [sp, #24]
 800c1d4:	1a9b      	subs	r3, r3, r2
 800c1d6:	4098      	lsls	r0, r3
 800c1d8:	e7f2      	b.n	800c1c0 <_dtoa_r+0x1e4>
 800c1da:	9014      	str	r0, [sp, #80]	; 0x50
 800c1dc:	e7b9      	b.n	800c152 <_dtoa_r+0x176>
 800c1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e0:	1bdb      	subs	r3, r3, r7
 800c1e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c1e4:	427b      	negs	r3, r7
 800c1e6:	9304      	str	r3, [sp, #16]
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	9311      	str	r3, [sp, #68]	; 0x44
 800c1ec:	e7c6      	b.n	800c17c <_dtoa_r+0x1a0>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	930d      	str	r3, [sp, #52]	; 0x34
 800c1f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	dd59      	ble.n	800c2ac <_dtoa_r+0x2d0>
 800c1f8:	930c      	str	r3, [sp, #48]	; 0x30
 800c1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c1fc:	9a02      	ldr	r2, [sp, #8]
 800c1fe:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800c200:	2200      	movs	r2, #0
 800c202:	606a      	str	r2, [r5, #4]
 800c204:	3204      	adds	r2, #4
 800c206:	0010      	movs	r0, r2
 800c208:	3014      	adds	r0, #20
 800c20a:	6869      	ldr	r1, [r5, #4]
 800c20c:	4298      	cmp	r0, r3
 800c20e:	d952      	bls.n	800c2b6 <_dtoa_r+0x2da>
 800c210:	9802      	ldr	r0, [sp, #8]
 800c212:	f001 f824 	bl	800d25e <_Balloc>
 800c216:	9b02      	ldr	r3, [sp, #8]
 800c218:	6028      	str	r0, [r5, #0]
 800c21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	9308      	str	r3, [sp, #32]
 800c220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c222:	2b0e      	cmp	r3, #14
 800c224:	d900      	bls.n	800c228 <_dtoa_r+0x24c>
 800c226:	e10a      	b.n	800c43e <_dtoa_r+0x462>
 800c228:	2c00      	cmp	r4, #0
 800c22a:	d100      	bne.n	800c22e <_dtoa_r+0x252>
 800c22c:	e107      	b.n	800c43e <_dtoa_r+0x462>
 800c22e:	9b06      	ldr	r3, [sp, #24]
 800c230:	9c07      	ldr	r4, [sp, #28]
 800c232:	9312      	str	r3, [sp, #72]	; 0x48
 800c234:	9413      	str	r4, [sp, #76]	; 0x4c
 800c236:	2f00      	cmp	r7, #0
 800c238:	dc00      	bgt.n	800c23c <_dtoa_r+0x260>
 800c23a:	e089      	b.n	800c350 <_dtoa_r+0x374>
 800c23c:	210f      	movs	r1, #15
 800c23e:	003a      	movs	r2, r7
 800c240:	4b3e      	ldr	r3, [pc, #248]	; (800c33c <_dtoa_r+0x360>)
 800c242:	400a      	ands	r2, r1
 800c244:	00d2      	lsls	r2, r2, #3
 800c246:	189b      	adds	r3, r3, r2
 800c248:	681d      	ldr	r5, [r3, #0]
 800c24a:	685e      	ldr	r6, [r3, #4]
 800c24c:	2302      	movs	r3, #2
 800c24e:	113c      	asrs	r4, r7, #4
 800c250:	930e      	str	r3, [sp, #56]	; 0x38
 800c252:	06e3      	lsls	r3, r4, #27
 800c254:	d50b      	bpl.n	800c26e <_dtoa_r+0x292>
 800c256:	4b3d      	ldr	r3, [pc, #244]	; (800c34c <_dtoa_r+0x370>)
 800c258:	400c      	ands	r4, r1
 800c25a:	6a1a      	ldr	r2, [r3, #32]
 800c25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c260:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c262:	f7f4 fd7d 	bl	8000d60 <__aeabi_ddiv>
 800c266:	2303      	movs	r3, #3
 800c268:	9006      	str	r0, [sp, #24]
 800c26a:	9107      	str	r1, [sp, #28]
 800c26c:	930e      	str	r3, [sp, #56]	; 0x38
 800c26e:	2300      	movs	r3, #0
 800c270:	e03a      	b.n	800c2e8 <_dtoa_r+0x30c>
 800c272:	2301      	movs	r3, #1
 800c274:	930d      	str	r3, [sp, #52]	; 0x34
 800c276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c278:	18fb      	adds	r3, r7, r3
 800c27a:	930c      	str	r3, [sp, #48]	; 0x30
 800c27c:	3301      	adds	r3, #1
 800c27e:	9309      	str	r3, [sp, #36]	; 0x24
 800c280:	2b00      	cmp	r3, #0
 800c282:	dcbb      	bgt.n	800c1fc <_dtoa_r+0x220>
 800c284:	2301      	movs	r3, #1
 800c286:	e7b9      	b.n	800c1fc <_dtoa_r+0x220>
 800c288:	2300      	movs	r3, #0
 800c28a:	e7b1      	b.n	800c1f0 <_dtoa_r+0x214>
 800c28c:	2300      	movs	r3, #0
 800c28e:	e7f1      	b.n	800c274 <_dtoa_r+0x298>
 800c290:	2300      	movs	r3, #0
 800c292:	940d      	str	r4, [sp, #52]	; 0x34
 800c294:	9320      	str	r3, [sp, #128]	; 0x80
 800c296:	3b01      	subs	r3, #1
 800c298:	2200      	movs	r2, #0
 800c29a:	930c      	str	r3, [sp, #48]	; 0x30
 800c29c:	9309      	str	r3, [sp, #36]	; 0x24
 800c29e:	3313      	adds	r3, #19
 800c2a0:	9221      	str	r2, [sp, #132]	; 0x84
 800c2a2:	e7ab      	b.n	800c1fc <_dtoa_r+0x220>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	930d      	str	r3, [sp, #52]	; 0x34
 800c2a8:	3b02      	subs	r3, #2
 800c2aa:	e7f5      	b.n	800c298 <_dtoa_r+0x2bc>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c2b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c2b2:	001a      	movs	r2, r3
 800c2b4:	e7f4      	b.n	800c2a0 <_dtoa_r+0x2c4>
 800c2b6:	3101      	adds	r1, #1
 800c2b8:	6069      	str	r1, [r5, #4]
 800c2ba:	0052      	lsls	r2, r2, #1
 800c2bc:	e7a3      	b.n	800c206 <_dtoa_r+0x22a>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	421c      	tst	r4, r3
 800c2c2:	d00e      	beq.n	800c2e2 <_dtoa_r+0x306>
 800c2c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2c6:	4a21      	ldr	r2, [pc, #132]	; (800c34c <_dtoa_r+0x370>)
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	930e      	str	r3, [sp, #56]	; 0x38
 800c2cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2ce:	0028      	movs	r0, r5
 800c2d0:	00db      	lsls	r3, r3, #3
 800c2d2:	189b      	adds	r3, r3, r2
 800c2d4:	0031      	movs	r1, r6
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	f7f5 f94b 	bl	8001574 <__aeabi_dmul>
 800c2de:	0005      	movs	r5, r0
 800c2e0:	000e      	movs	r6, r1
 800c2e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2e4:	1064      	asrs	r4, r4, #1
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	9310      	str	r3, [sp, #64]	; 0x40
 800c2ea:	2c00      	cmp	r4, #0
 800c2ec:	d1e7      	bne.n	800c2be <_dtoa_r+0x2e2>
 800c2ee:	9806      	ldr	r0, [sp, #24]
 800c2f0:	9907      	ldr	r1, [sp, #28]
 800c2f2:	002a      	movs	r2, r5
 800c2f4:	0033      	movs	r3, r6
 800c2f6:	f7f4 fd33 	bl	8000d60 <__aeabi_ddiv>
 800c2fa:	9006      	str	r0, [sp, #24]
 800c2fc:	9107      	str	r1, [sp, #28]
 800c2fe:	e042      	b.n	800c386 <_dtoa_r+0x3aa>
 800c300:	7ff00000 	.word	0x7ff00000
 800c304:	0000270f 	.word	0x0000270f
 800c308:	0800f281 	.word	0x0800f281
 800c30c:	0800f284 	.word	0x0800f284
 800c310:	0800f1fa 	.word	0x0800f1fa
 800c314:	0800f1fb 	.word	0x0800f1fb
 800c318:	3ff00000 	.word	0x3ff00000
 800c31c:	fffffc01 	.word	0xfffffc01
 800c320:	3ff80000 	.word	0x3ff80000
 800c324:	636f4361 	.word	0x636f4361
 800c328:	3fd287a7 	.word	0x3fd287a7
 800c32c:	8b60c8b3 	.word	0x8b60c8b3
 800c330:	3fc68a28 	.word	0x3fc68a28
 800c334:	509f79fb 	.word	0x509f79fb
 800c338:	3fd34413 	.word	0x3fd34413
 800c33c:	0800f2b8 	.word	0x0800f2b8
 800c340:	00000432 	.word	0x00000432
 800c344:	00000412 	.word	0x00000412
 800c348:	fe100000 	.word	0xfe100000
 800c34c:	0800f290 	.word	0x0800f290
 800c350:	2302      	movs	r3, #2
 800c352:	930e      	str	r3, [sp, #56]	; 0x38
 800c354:	2f00      	cmp	r7, #0
 800c356:	d016      	beq.n	800c386 <_dtoa_r+0x3aa>
 800c358:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c35a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c35c:	427c      	negs	r4, r7
 800c35e:	330d      	adds	r3, #13
 800c360:	4023      	ands	r3, r4
 800c362:	4ace      	ldr	r2, [pc, #824]	; (800c69c <_dtoa_r+0x6c0>)
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	18d3      	adds	r3, r2, r3
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	f7f5 f902 	bl	8001574 <__aeabi_dmul>
 800c370:	2300      	movs	r3, #0
 800c372:	2601      	movs	r6, #1
 800c374:	001d      	movs	r5, r3
 800c376:	9006      	str	r0, [sp, #24]
 800c378:	9107      	str	r1, [sp, #28]
 800c37a:	1124      	asrs	r4, r4, #4
 800c37c:	2c00      	cmp	r4, #0
 800c37e:	d000      	beq.n	800c382 <_dtoa_r+0x3a6>
 800c380:	e08c      	b.n	800c49c <_dtoa_r+0x4c0>
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1b9      	bne.n	800c2fa <_dtoa_r+0x31e>
 800c386:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d100      	bne.n	800c38e <_dtoa_r+0x3b2>
 800c38c:	e096      	b.n	800c4bc <_dtoa_r+0x4e0>
 800c38e:	9c06      	ldr	r4, [sp, #24]
 800c390:	9d07      	ldr	r5, [sp, #28]
 800c392:	2200      	movs	r2, #0
 800c394:	4bc2      	ldr	r3, [pc, #776]	; (800c6a0 <_dtoa_r+0x6c4>)
 800c396:	0020      	movs	r0, r4
 800c398:	0029      	movs	r1, r5
 800c39a:	f7f4 f853 	bl	8000444 <__aeabi_dcmplt>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d100      	bne.n	800c3a4 <_dtoa_r+0x3c8>
 800c3a2:	e08b      	b.n	800c4bc <_dtoa_r+0x4e0>
 800c3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d100      	bne.n	800c3ac <_dtoa_r+0x3d0>
 800c3aa:	e087      	b.n	800c4bc <_dtoa_r+0x4e0>
 800c3ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dd41      	ble.n	800c436 <_dtoa_r+0x45a>
 800c3b2:	4bbc      	ldr	r3, [pc, #752]	; (800c6a4 <_dtoa_r+0x6c8>)
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	0020      	movs	r0, r4
 800c3b8:	0029      	movs	r1, r5
 800c3ba:	f7f5 f8db 	bl	8001574 <__aeabi_dmul>
 800c3be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3c0:	9006      	str	r0, [sp, #24]
 800c3c2:	9107      	str	r1, [sp, #28]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	930e      	str	r3, [sp, #56]	; 0x38
 800c3c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3ca:	1e7e      	subs	r6, r7, #1
 800c3cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c3ce:	9310      	str	r3, [sp, #64]	; 0x40
 800c3d0:	f7f5 fedc 	bl	800218c <__aeabi_i2d>
 800c3d4:	9a06      	ldr	r2, [sp, #24]
 800c3d6:	9b07      	ldr	r3, [sp, #28]
 800c3d8:	f7f5 f8cc 	bl	8001574 <__aeabi_dmul>
 800c3dc:	2200      	movs	r2, #0
 800c3de:	4bb2      	ldr	r3, [pc, #712]	; (800c6a8 <_dtoa_r+0x6cc>)
 800c3e0:	f7f4 f9a2 	bl	8000728 <__aeabi_dadd>
 800c3e4:	4ab1      	ldr	r2, [pc, #708]	; (800c6ac <_dtoa_r+0x6d0>)
 800c3e6:	900e      	str	r0, [sp, #56]	; 0x38
 800c3e8:	910f      	str	r1, [sp, #60]	; 0x3c
 800c3ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800c3ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c3ee:	4694      	mov	ip, r2
 800c3f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3f2:	4463      	add	r3, ip
 800c3f4:	9315      	str	r3, [sp, #84]	; 0x54
 800c3f6:	001d      	movs	r5, r3
 800c3f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d161      	bne.n	800c4c2 <_dtoa_r+0x4e6>
 800c3fe:	9806      	ldr	r0, [sp, #24]
 800c400:	9907      	ldr	r1, [sp, #28]
 800c402:	2200      	movs	r2, #0
 800c404:	4baa      	ldr	r3, [pc, #680]	; (800c6b0 <_dtoa_r+0x6d4>)
 800c406:	f7f5 fb27 	bl	8001a58 <__aeabi_dsub>
 800c40a:	0022      	movs	r2, r4
 800c40c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c40e:	9006      	str	r0, [sp, #24]
 800c410:	9107      	str	r1, [sp, #28]
 800c412:	f7f4 f82b 	bl	800046c <__aeabi_dcmpgt>
 800c416:	2800      	cmp	r0, #0
 800c418:	d000      	beq.n	800c41c <_dtoa_r+0x440>
 800c41a:	e2a8      	b.n	800c96e <_dtoa_r+0x992>
 800c41c:	48a5      	ldr	r0, [pc, #660]	; (800c6b4 <_dtoa_r+0x6d8>)
 800c41e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c420:	4684      	mov	ip, r0
 800c422:	4461      	add	r1, ip
 800c424:	000b      	movs	r3, r1
 800c426:	9806      	ldr	r0, [sp, #24]
 800c428:	9907      	ldr	r1, [sp, #28]
 800c42a:	0022      	movs	r2, r4
 800c42c:	f7f4 f80a 	bl	8000444 <__aeabi_dcmplt>
 800c430:	2800      	cmp	r0, #0
 800c432:	d000      	beq.n	800c436 <_dtoa_r+0x45a>
 800c434:	e295      	b.n	800c962 <_dtoa_r+0x986>
 800c436:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c438:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c43a:	9306      	str	r3, [sp, #24]
 800c43c:	9407      	str	r4, [sp, #28]
 800c43e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c440:	2b00      	cmp	r3, #0
 800c442:	da00      	bge.n	800c446 <_dtoa_r+0x46a>
 800c444:	e15c      	b.n	800c700 <_dtoa_r+0x724>
 800c446:	2f0e      	cmp	r7, #14
 800c448:	dd00      	ble.n	800c44c <_dtoa_r+0x470>
 800c44a:	e159      	b.n	800c700 <_dtoa_r+0x724>
 800c44c:	4b93      	ldr	r3, [pc, #588]	; (800c69c <_dtoa_r+0x6c0>)
 800c44e:	00fa      	lsls	r2, r7, #3
 800c450:	189b      	adds	r3, r3, r2
 800c452:	685c      	ldr	r4, [r3, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	9304      	str	r3, [sp, #16]
 800c458:	9405      	str	r4, [sp, #20]
 800c45a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	db00      	blt.n	800c462 <_dtoa_r+0x486>
 800c460:	e0d8      	b.n	800c614 <_dtoa_r+0x638>
 800c462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c464:	2b00      	cmp	r3, #0
 800c466:	dd00      	ble.n	800c46a <_dtoa_r+0x48e>
 800c468:	e0d4      	b.n	800c614 <_dtoa_r+0x638>
 800c46a:	d000      	beq.n	800c46e <_dtoa_r+0x492>
 800c46c:	e27d      	b.n	800c96a <_dtoa_r+0x98e>
 800c46e:	9804      	ldr	r0, [sp, #16]
 800c470:	9905      	ldr	r1, [sp, #20]
 800c472:	2200      	movs	r2, #0
 800c474:	4b8e      	ldr	r3, [pc, #568]	; (800c6b0 <_dtoa_r+0x6d4>)
 800c476:	f7f5 f87d 	bl	8001574 <__aeabi_dmul>
 800c47a:	9a06      	ldr	r2, [sp, #24]
 800c47c:	9b07      	ldr	r3, [sp, #28]
 800c47e:	f7f3 ffff 	bl	8000480 <__aeabi_dcmpge>
 800c482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c484:	9304      	str	r3, [sp, #16]
 800c486:	001e      	movs	r6, r3
 800c488:	2800      	cmp	r0, #0
 800c48a:	d000      	beq.n	800c48e <_dtoa_r+0x4b2>
 800c48c:	e24f      	b.n	800c92e <_dtoa_r+0x952>
 800c48e:	9b08      	ldr	r3, [sp, #32]
 800c490:	9a08      	ldr	r2, [sp, #32]
 800c492:	1c5d      	adds	r5, r3, #1
 800c494:	2331      	movs	r3, #49	; 0x31
 800c496:	3701      	adds	r7, #1
 800c498:	7013      	strb	r3, [r2, #0]
 800c49a:	e24b      	b.n	800c934 <_dtoa_r+0x958>
 800c49c:	4234      	tst	r4, r6
 800c49e:	d00a      	beq.n	800c4b6 <_dtoa_r+0x4da>
 800c4a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4a2:	4a85      	ldr	r2, [pc, #532]	; (800c6b8 <_dtoa_r+0x6dc>)
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	930e      	str	r3, [sp, #56]	; 0x38
 800c4a8:	00eb      	lsls	r3, r5, #3
 800c4aa:	189b      	adds	r3, r3, r2
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	f7f5 f860 	bl	8001574 <__aeabi_dmul>
 800c4b4:	0033      	movs	r3, r6
 800c4b6:	1064      	asrs	r4, r4, #1
 800c4b8:	3501      	adds	r5, #1
 800c4ba:	e75f      	b.n	800c37c <_dtoa_r+0x3a0>
 800c4bc:	003e      	movs	r6, r7
 800c4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4c0:	e784      	b.n	800c3cc <_dtoa_r+0x3f0>
 800c4c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c4c6:	1e5a      	subs	r2, r3, #1
 800c4c8:	4b74      	ldr	r3, [pc, #464]	; (800c69c <_dtoa_r+0x6c0>)
 800c4ca:	00d2      	lsls	r2, r2, #3
 800c4cc:	189b      	adds	r3, r3, r2
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	d049      	beq.n	800c56a <_dtoa_r+0x58e>
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	4978      	ldr	r1, [pc, #480]	; (800c6bc <_dtoa_r+0x6e0>)
 800c4da:	f7f4 fc41 	bl	8000d60 <__aeabi_ddiv>
 800c4de:	002b      	movs	r3, r5
 800c4e0:	0022      	movs	r2, r4
 800c4e2:	f7f5 fab9 	bl	8001a58 <__aeabi_dsub>
 800c4e6:	9b08      	ldr	r3, [sp, #32]
 800c4e8:	900e      	str	r0, [sp, #56]	; 0x38
 800c4ea:	910f      	str	r1, [sp, #60]	; 0x3c
 800c4ec:	9315      	str	r3, [sp, #84]	; 0x54
 800c4ee:	9806      	ldr	r0, [sp, #24]
 800c4f0:	9907      	ldr	r1, [sp, #28]
 800c4f2:	f7f5 fe15 	bl	8002120 <__aeabi_d2iz>
 800c4f6:	0004      	movs	r4, r0
 800c4f8:	f7f5 fe48 	bl	800218c <__aeabi_i2d>
 800c4fc:	0002      	movs	r2, r0
 800c4fe:	000b      	movs	r3, r1
 800c500:	9806      	ldr	r0, [sp, #24]
 800c502:	9907      	ldr	r1, [sp, #28]
 800c504:	f7f5 faa8 	bl	8001a58 <__aeabi_dsub>
 800c508:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c50a:	3430      	adds	r4, #48	; 0x30
 800c50c:	1c5d      	adds	r5, r3, #1
 800c50e:	701c      	strb	r4, [r3, #0]
 800c510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c514:	9006      	str	r0, [sp, #24]
 800c516:	9107      	str	r1, [sp, #28]
 800c518:	f7f3 ff94 	bl	8000444 <__aeabi_dcmplt>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d16c      	bne.n	800c5fa <_dtoa_r+0x61e>
 800c520:	9a06      	ldr	r2, [sp, #24]
 800c522:	9b07      	ldr	r3, [sp, #28]
 800c524:	2000      	movs	r0, #0
 800c526:	495e      	ldr	r1, [pc, #376]	; (800c6a0 <_dtoa_r+0x6c4>)
 800c528:	f7f5 fa96 	bl	8001a58 <__aeabi_dsub>
 800c52c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c52e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c530:	f7f3 ff88 	bl	8000444 <__aeabi_dcmplt>
 800c534:	2800      	cmp	r0, #0
 800c536:	d000      	beq.n	800c53a <_dtoa_r+0x55e>
 800c538:	e0c3      	b.n	800c6c2 <_dtoa_r+0x6e6>
 800c53a:	9b08      	ldr	r3, [sp, #32]
 800c53c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c53e:	1aeb      	subs	r3, r5, r3
 800c540:	429a      	cmp	r2, r3
 800c542:	dc00      	bgt.n	800c546 <_dtoa_r+0x56a>
 800c544:	e777      	b.n	800c436 <_dtoa_r+0x45a>
 800c546:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c548:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c54a:	2200      	movs	r2, #0
 800c54c:	4b55      	ldr	r3, [pc, #340]	; (800c6a4 <_dtoa_r+0x6c8>)
 800c54e:	f7f5 f811 	bl	8001574 <__aeabi_dmul>
 800c552:	2200      	movs	r2, #0
 800c554:	900e      	str	r0, [sp, #56]	; 0x38
 800c556:	910f      	str	r1, [sp, #60]	; 0x3c
 800c558:	9806      	ldr	r0, [sp, #24]
 800c55a:	9907      	ldr	r1, [sp, #28]
 800c55c:	4b51      	ldr	r3, [pc, #324]	; (800c6a4 <_dtoa_r+0x6c8>)
 800c55e:	f7f5 f809 	bl	8001574 <__aeabi_dmul>
 800c562:	9515      	str	r5, [sp, #84]	; 0x54
 800c564:	9006      	str	r0, [sp, #24]
 800c566:	9107      	str	r1, [sp, #28]
 800c568:	e7c1      	b.n	800c4ee <_dtoa_r+0x512>
 800c56a:	0020      	movs	r0, r4
 800c56c:	0029      	movs	r1, r5
 800c56e:	f7f5 f801 	bl	8001574 <__aeabi_dmul>
 800c572:	9c08      	ldr	r4, [sp, #32]
 800c574:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c576:	0023      	movs	r3, r4
 800c578:	4694      	mov	ip, r2
 800c57a:	900e      	str	r0, [sp, #56]	; 0x38
 800c57c:	910f      	str	r1, [sp, #60]	; 0x3c
 800c57e:	4463      	add	r3, ip
 800c580:	9315      	str	r3, [sp, #84]	; 0x54
 800c582:	9806      	ldr	r0, [sp, #24]
 800c584:	9907      	ldr	r1, [sp, #28]
 800c586:	f7f5 fdcb 	bl	8002120 <__aeabi_d2iz>
 800c58a:	0005      	movs	r5, r0
 800c58c:	f7f5 fdfe 	bl	800218c <__aeabi_i2d>
 800c590:	000b      	movs	r3, r1
 800c592:	0002      	movs	r2, r0
 800c594:	9806      	ldr	r0, [sp, #24]
 800c596:	9907      	ldr	r1, [sp, #28]
 800c598:	f7f5 fa5e 	bl	8001a58 <__aeabi_dsub>
 800c59c:	3530      	adds	r5, #48	; 0x30
 800c59e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5a0:	7025      	strb	r5, [r4, #0]
 800c5a2:	3401      	adds	r4, #1
 800c5a4:	9006      	str	r0, [sp, #24]
 800c5a6:	9107      	str	r1, [sp, #28]
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d12a      	bne.n	800c602 <_dtoa_r+0x626>
 800c5ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c5ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c5b0:	9a08      	ldr	r2, [sp, #32]
 800c5b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5b4:	4694      	mov	ip, r2
 800c5b6:	4463      	add	r3, ip
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	001d      	movs	r5, r3
 800c5bc:	4b3f      	ldr	r3, [pc, #252]	; (800c6bc <_dtoa_r+0x6e0>)
 800c5be:	f7f4 f8b3 	bl	8000728 <__aeabi_dadd>
 800c5c2:	0002      	movs	r2, r0
 800c5c4:	000b      	movs	r3, r1
 800c5c6:	9806      	ldr	r0, [sp, #24]
 800c5c8:	9907      	ldr	r1, [sp, #28]
 800c5ca:	f7f3 ff4f 	bl	800046c <__aeabi_dcmpgt>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d000      	beq.n	800c5d4 <_dtoa_r+0x5f8>
 800c5d2:	e076      	b.n	800c6c2 <_dtoa_r+0x6e6>
 800c5d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5d8:	2000      	movs	r0, #0
 800c5da:	4938      	ldr	r1, [pc, #224]	; (800c6bc <_dtoa_r+0x6e0>)
 800c5dc:	f7f5 fa3c 	bl	8001a58 <__aeabi_dsub>
 800c5e0:	0002      	movs	r2, r0
 800c5e2:	000b      	movs	r3, r1
 800c5e4:	9806      	ldr	r0, [sp, #24]
 800c5e6:	9907      	ldr	r1, [sp, #28]
 800c5e8:	f7f3 ff2c 	bl	8000444 <__aeabi_dcmplt>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d100      	bne.n	800c5f2 <_dtoa_r+0x616>
 800c5f0:	e721      	b.n	800c436 <_dtoa_r+0x45a>
 800c5f2:	1e6b      	subs	r3, r5, #1
 800c5f4:	781a      	ldrb	r2, [r3, #0]
 800c5f6:	2a30      	cmp	r2, #48	; 0x30
 800c5f8:	d001      	beq.n	800c5fe <_dtoa_r+0x622>
 800c5fa:	0037      	movs	r7, r6
 800c5fc:	e03f      	b.n	800c67e <_dtoa_r+0x6a2>
 800c5fe:	001d      	movs	r5, r3
 800c600:	e7f7      	b.n	800c5f2 <_dtoa_r+0x616>
 800c602:	9806      	ldr	r0, [sp, #24]
 800c604:	9907      	ldr	r1, [sp, #28]
 800c606:	2200      	movs	r2, #0
 800c608:	4b26      	ldr	r3, [pc, #152]	; (800c6a4 <_dtoa_r+0x6c8>)
 800c60a:	f7f4 ffb3 	bl	8001574 <__aeabi_dmul>
 800c60e:	9006      	str	r0, [sp, #24]
 800c610:	9107      	str	r1, [sp, #28]
 800c612:	e7b6      	b.n	800c582 <_dtoa_r+0x5a6>
 800c614:	9e08      	ldr	r6, [sp, #32]
 800c616:	9a04      	ldr	r2, [sp, #16]
 800c618:	9b05      	ldr	r3, [sp, #20]
 800c61a:	9806      	ldr	r0, [sp, #24]
 800c61c:	9907      	ldr	r1, [sp, #28]
 800c61e:	f7f4 fb9f 	bl	8000d60 <__aeabi_ddiv>
 800c622:	f7f5 fd7d 	bl	8002120 <__aeabi_d2iz>
 800c626:	0004      	movs	r4, r0
 800c628:	f7f5 fdb0 	bl	800218c <__aeabi_i2d>
 800c62c:	9a04      	ldr	r2, [sp, #16]
 800c62e:	9b05      	ldr	r3, [sp, #20]
 800c630:	f7f4 ffa0 	bl	8001574 <__aeabi_dmul>
 800c634:	0002      	movs	r2, r0
 800c636:	000b      	movs	r3, r1
 800c638:	9806      	ldr	r0, [sp, #24]
 800c63a:	9907      	ldr	r1, [sp, #28]
 800c63c:	f7f5 fa0c 	bl	8001a58 <__aeabi_dsub>
 800c640:	0023      	movs	r3, r4
 800c642:	3330      	adds	r3, #48	; 0x30
 800c644:	7033      	strb	r3, [r6, #0]
 800c646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c648:	9b08      	ldr	r3, [sp, #32]
 800c64a:	1c75      	adds	r5, r6, #1
 800c64c:	1aeb      	subs	r3, r5, r3
 800c64e:	429a      	cmp	r2, r3
 800c650:	d148      	bne.n	800c6e4 <_dtoa_r+0x708>
 800c652:	0002      	movs	r2, r0
 800c654:	000b      	movs	r3, r1
 800c656:	f7f4 f867 	bl	8000728 <__aeabi_dadd>
 800c65a:	9a04      	ldr	r2, [sp, #16]
 800c65c:	9b05      	ldr	r3, [sp, #20]
 800c65e:	9006      	str	r0, [sp, #24]
 800c660:	9107      	str	r1, [sp, #28]
 800c662:	f7f3 ff03 	bl	800046c <__aeabi_dcmpgt>
 800c666:	2800      	cmp	r0, #0
 800c668:	d12a      	bne.n	800c6c0 <_dtoa_r+0x6e4>
 800c66a:	9a04      	ldr	r2, [sp, #16]
 800c66c:	9b05      	ldr	r3, [sp, #20]
 800c66e:	9806      	ldr	r0, [sp, #24]
 800c670:	9907      	ldr	r1, [sp, #28]
 800c672:	f7f3 fee1 	bl	8000438 <__aeabi_dcmpeq>
 800c676:	2800      	cmp	r0, #0
 800c678:	d001      	beq.n	800c67e <_dtoa_r+0x6a2>
 800c67a:	07e3      	lsls	r3, r4, #31
 800c67c:	d420      	bmi.n	800c6c0 <_dtoa_r+0x6e4>
 800c67e:	9903      	ldr	r1, [sp, #12]
 800c680:	9802      	ldr	r0, [sp, #8]
 800c682:	f000 fe24 	bl	800d2ce <_Bfree>
 800c686:	2300      	movs	r3, #0
 800c688:	702b      	strb	r3, [r5, #0]
 800c68a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c68c:	3701      	adds	r7, #1
 800c68e:	601f      	str	r7, [r3, #0]
 800c690:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c692:	2b00      	cmp	r3, #0
 800c694:	d100      	bne.n	800c698 <_dtoa_r+0x6bc>
 800c696:	e4e6      	b.n	800c066 <_dtoa_r+0x8a>
 800c698:	601d      	str	r5, [r3, #0]
 800c69a:	e4e4      	b.n	800c066 <_dtoa_r+0x8a>
 800c69c:	0800f2b8 	.word	0x0800f2b8
 800c6a0:	3ff00000 	.word	0x3ff00000
 800c6a4:	40240000 	.word	0x40240000
 800c6a8:	401c0000 	.word	0x401c0000
 800c6ac:	fcc00000 	.word	0xfcc00000
 800c6b0:	40140000 	.word	0x40140000
 800c6b4:	7cc00000 	.word	0x7cc00000
 800c6b8:	0800f290 	.word	0x0800f290
 800c6bc:	3fe00000 	.word	0x3fe00000
 800c6c0:	003e      	movs	r6, r7
 800c6c2:	1e6b      	subs	r3, r5, #1
 800c6c4:	781a      	ldrb	r2, [r3, #0]
 800c6c6:	2a39      	cmp	r2, #57	; 0x39
 800c6c8:	d106      	bne.n	800c6d8 <_dtoa_r+0x6fc>
 800c6ca:	9a08      	ldr	r2, [sp, #32]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d107      	bne.n	800c6e0 <_dtoa_r+0x704>
 800c6d0:	2330      	movs	r3, #48	; 0x30
 800c6d2:	7013      	strb	r3, [r2, #0]
 800c6d4:	0013      	movs	r3, r2
 800c6d6:	3601      	adds	r6, #1
 800c6d8:	781a      	ldrb	r2, [r3, #0]
 800c6da:	3201      	adds	r2, #1
 800c6dc:	701a      	strb	r2, [r3, #0]
 800c6de:	e78c      	b.n	800c5fa <_dtoa_r+0x61e>
 800c6e0:	001d      	movs	r5, r3
 800c6e2:	e7ee      	b.n	800c6c2 <_dtoa_r+0x6e6>
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4ba4      	ldr	r3, [pc, #656]	; (800c978 <_dtoa_r+0x99c>)
 800c6e8:	f7f4 ff44 	bl	8001574 <__aeabi_dmul>
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	9006      	str	r0, [sp, #24]
 800c6f2:	9107      	str	r1, [sp, #28]
 800c6f4:	002e      	movs	r6, r5
 800c6f6:	f7f3 fe9f 	bl	8000438 <__aeabi_dcmpeq>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d08b      	beq.n	800c616 <_dtoa_r+0x63a>
 800c6fe:	e7be      	b.n	800c67e <_dtoa_r+0x6a2>
 800c700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c702:	2a00      	cmp	r2, #0
 800c704:	d100      	bne.n	800c708 <_dtoa_r+0x72c>
 800c706:	e0da      	b.n	800c8be <_dtoa_r+0x8e2>
 800c708:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c70a:	2a01      	cmp	r2, #1
 800c70c:	dd00      	ble.n	800c710 <_dtoa_r+0x734>
 800c70e:	e0bd      	b.n	800c88c <_dtoa_r+0x8b0>
 800c710:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c712:	2a00      	cmp	r2, #0
 800c714:	d100      	bne.n	800c718 <_dtoa_r+0x73c>
 800c716:	e0b5      	b.n	800c884 <_dtoa_r+0x8a8>
 800c718:	4a98      	ldr	r2, [pc, #608]	; (800c97c <_dtoa_r+0x9a0>)
 800c71a:	189b      	adds	r3, r3, r2
 800c71c:	9d04      	ldr	r5, [sp, #16]
 800c71e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c722:	2101      	movs	r1, #1
 800c724:	18d2      	adds	r2, r2, r3
 800c726:	920a      	str	r2, [sp, #40]	; 0x28
 800c728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c72a:	9802      	ldr	r0, [sp, #8]
 800c72c:	18d3      	adds	r3, r2, r3
 800c72e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c730:	f000 feab 	bl	800d48a <__i2b>
 800c734:	0006      	movs	r6, r0
 800c736:	2c00      	cmp	r4, #0
 800c738:	dd0e      	ble.n	800c758 <_dtoa_r+0x77c>
 800c73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	dd0b      	ble.n	800c758 <_dtoa_r+0x77c>
 800c740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c742:	0023      	movs	r3, r4
 800c744:	4294      	cmp	r4, r2
 800c746:	dd00      	ble.n	800c74a <_dtoa_r+0x76e>
 800c748:	0013      	movs	r3, r2
 800c74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c74c:	1ae4      	subs	r4, r4, r3
 800c74e:	1ad2      	subs	r2, r2, r3
 800c750:	920a      	str	r2, [sp, #40]	; 0x28
 800c752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	930b      	str	r3, [sp, #44]	; 0x2c
 800c758:	9b04      	ldr	r3, [sp, #16]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d01f      	beq.n	800c79e <_dtoa_r+0x7c2>
 800c75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c760:	2b00      	cmp	r3, #0
 800c762:	d100      	bne.n	800c766 <_dtoa_r+0x78a>
 800c764:	e0af      	b.n	800c8c6 <_dtoa_r+0x8ea>
 800c766:	2d00      	cmp	r5, #0
 800c768:	d011      	beq.n	800c78e <_dtoa_r+0x7b2>
 800c76a:	0031      	movs	r1, r6
 800c76c:	002a      	movs	r2, r5
 800c76e:	9802      	ldr	r0, [sp, #8]
 800c770:	f000 ff24 	bl	800d5bc <__pow5mult>
 800c774:	9a03      	ldr	r2, [sp, #12]
 800c776:	0001      	movs	r1, r0
 800c778:	0006      	movs	r6, r0
 800c77a:	9802      	ldr	r0, [sp, #8]
 800c77c:	f000 fe8e 	bl	800d49c <__multiply>
 800c780:	9903      	ldr	r1, [sp, #12]
 800c782:	9010      	str	r0, [sp, #64]	; 0x40
 800c784:	9802      	ldr	r0, [sp, #8]
 800c786:	f000 fda2 	bl	800d2ce <_Bfree>
 800c78a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c78c:	9303      	str	r3, [sp, #12]
 800c78e:	9b04      	ldr	r3, [sp, #16]
 800c790:	1b5a      	subs	r2, r3, r5
 800c792:	d004      	beq.n	800c79e <_dtoa_r+0x7c2>
 800c794:	9903      	ldr	r1, [sp, #12]
 800c796:	9802      	ldr	r0, [sp, #8]
 800c798:	f000 ff10 	bl	800d5bc <__pow5mult>
 800c79c:	9003      	str	r0, [sp, #12]
 800c79e:	2101      	movs	r1, #1
 800c7a0:	9802      	ldr	r0, [sp, #8]
 800c7a2:	f000 fe72 	bl	800d48a <__i2b>
 800c7a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7a8:	9004      	str	r0, [sp, #16]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d100      	bne.n	800c7b0 <_dtoa_r+0x7d4>
 800c7ae:	e1e3      	b.n	800cb78 <_dtoa_r+0xb9c>
 800c7b0:	001a      	movs	r2, r3
 800c7b2:	0001      	movs	r1, r0
 800c7b4:	9802      	ldr	r0, [sp, #8]
 800c7b6:	f000 ff01 	bl	800d5bc <__pow5mult>
 800c7ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c7bc:	9004      	str	r0, [sp, #16]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	dd00      	ble.n	800c7c4 <_dtoa_r+0x7e8>
 800c7c2:	e082      	b.n	800c8ca <_dtoa_r+0x8ee>
 800c7c4:	2500      	movs	r5, #0
 800c7c6:	9b06      	ldr	r3, [sp, #24]
 800c7c8:	42ab      	cmp	r3, r5
 800c7ca:	d10e      	bne.n	800c7ea <_dtoa_r+0x80e>
 800c7cc:	9b07      	ldr	r3, [sp, #28]
 800c7ce:	031b      	lsls	r3, r3, #12
 800c7d0:	42ab      	cmp	r3, r5
 800c7d2:	d10a      	bne.n	800c7ea <_dtoa_r+0x80e>
 800c7d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7d6:	9a07      	ldr	r2, [sp, #28]
 800c7d8:	4213      	tst	r3, r2
 800c7da:	d006      	beq.n	800c7ea <_dtoa_r+0x80e>
 800c7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7de:	3501      	adds	r5, #1
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c7e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7ec:	2001      	movs	r0, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d16c      	bne.n	800c8cc <_dtoa_r+0x8f0>
 800c7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7f4:	1818      	adds	r0, r3, r0
 800c7f6:	231f      	movs	r3, #31
 800c7f8:	4018      	ands	r0, r3
 800c7fa:	d07e      	beq.n	800c8fa <_dtoa_r+0x91e>
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	1a1b      	subs	r3, r3, r0
 800c800:	2b04      	cmp	r3, #4
 800c802:	dd70      	ble.n	800c8e6 <_dtoa_r+0x90a>
 800c804:	231c      	movs	r3, #28
 800c806:	1a18      	subs	r0, r3, r0
 800c808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c80a:	1824      	adds	r4, r4, r0
 800c80c:	181b      	adds	r3, r3, r0
 800c80e:	930a      	str	r3, [sp, #40]	; 0x28
 800c810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c812:	181b      	adds	r3, r3, r0
 800c814:	930b      	str	r3, [sp, #44]	; 0x2c
 800c816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c818:	2b00      	cmp	r3, #0
 800c81a:	dd05      	ble.n	800c828 <_dtoa_r+0x84c>
 800c81c:	001a      	movs	r2, r3
 800c81e:	9903      	ldr	r1, [sp, #12]
 800c820:	9802      	ldr	r0, [sp, #8]
 800c822:	f000 ff1d 	bl	800d660 <__lshift>
 800c826:	9003      	str	r0, [sp, #12]
 800c828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	dd05      	ble.n	800c83a <_dtoa_r+0x85e>
 800c82e:	001a      	movs	r2, r3
 800c830:	9904      	ldr	r1, [sp, #16]
 800c832:	9802      	ldr	r0, [sp, #8]
 800c834:	f000 ff14 	bl	800d660 <__lshift>
 800c838:	9004      	str	r0, [sp, #16]
 800c83a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d05e      	beq.n	800c8fe <_dtoa_r+0x922>
 800c840:	9904      	ldr	r1, [sp, #16]
 800c842:	9803      	ldr	r0, [sp, #12]
 800c844:	f000 ff5e 	bl	800d704 <__mcmp>
 800c848:	2800      	cmp	r0, #0
 800c84a:	da58      	bge.n	800c8fe <_dtoa_r+0x922>
 800c84c:	2300      	movs	r3, #0
 800c84e:	220a      	movs	r2, #10
 800c850:	9903      	ldr	r1, [sp, #12]
 800c852:	9802      	ldr	r0, [sp, #8]
 800c854:	f000 fd54 	bl	800d300 <__multadd>
 800c858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c85a:	3f01      	subs	r7, #1
 800c85c:	9003      	str	r0, [sp, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d100      	bne.n	800c864 <_dtoa_r+0x888>
 800c862:	e190      	b.n	800cb86 <_dtoa_r+0xbaa>
 800c864:	2300      	movs	r3, #0
 800c866:	0031      	movs	r1, r6
 800c868:	220a      	movs	r2, #10
 800c86a:	9802      	ldr	r0, [sp, #8]
 800c86c:	f000 fd48 	bl	800d300 <__multadd>
 800c870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c872:	0006      	movs	r6, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	dd00      	ble.n	800c87a <_dtoa_r+0x89e>
 800c878:	e088      	b.n	800c98c <_dtoa_r+0x9b0>
 800c87a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	dc00      	bgt.n	800c882 <_dtoa_r+0x8a6>
 800c880:	e084      	b.n	800c98c <_dtoa_r+0x9b0>
 800c882:	e044      	b.n	800c90e <_dtoa_r+0x932>
 800c884:	2336      	movs	r3, #54	; 0x36
 800c886:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c888:	1a9b      	subs	r3, r3, r2
 800c88a:	e747      	b.n	800c71c <_dtoa_r+0x740>
 800c88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c88e:	1e5d      	subs	r5, r3, #1
 800c890:	9b04      	ldr	r3, [sp, #16]
 800c892:	42ab      	cmp	r3, r5
 800c894:	db08      	blt.n	800c8a8 <_dtoa_r+0x8cc>
 800c896:	1b5d      	subs	r5, r3, r5
 800c898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	da0c      	bge.n	800c8b8 <_dtoa_r+0x8dc>
 800c89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8a2:	1a9c      	subs	r4, r3, r2
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	e73b      	b.n	800c720 <_dtoa_r+0x744>
 800c8a8:	9b04      	ldr	r3, [sp, #16]
 800c8aa:	9504      	str	r5, [sp, #16]
 800c8ac:	1aea      	subs	r2, r5, r3
 800c8ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8b0:	2500      	movs	r5, #0
 800c8b2:	189b      	adds	r3, r3, r2
 800c8b4:	9311      	str	r3, [sp, #68]	; 0x44
 800c8b6:	e7ef      	b.n	800c898 <_dtoa_r+0x8bc>
 800c8b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8bc:	e730      	b.n	800c720 <_dtoa_r+0x744>
 800c8be:	9d04      	ldr	r5, [sp, #16]
 800c8c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c8c2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800c8c4:	e737      	b.n	800c736 <_dtoa_r+0x75a>
 800c8c6:	9a04      	ldr	r2, [sp, #16]
 800c8c8:	e764      	b.n	800c794 <_dtoa_r+0x7b8>
 800c8ca:	2500      	movs	r5, #0
 800c8cc:	9b04      	ldr	r3, [sp, #16]
 800c8ce:	9a04      	ldr	r2, [sp, #16]
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	9310      	str	r3, [sp, #64]	; 0x40
 800c8d4:	3303      	adds	r3, #3
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	18d3      	adds	r3, r2, r3
 800c8da:	6858      	ldr	r0, [r3, #4]
 800c8dc:	f000 fd8c 	bl	800d3f8 <__hi0bits>
 800c8e0:	2320      	movs	r3, #32
 800c8e2:	1a18      	subs	r0, r3, r0
 800c8e4:	e785      	b.n	800c7f2 <_dtoa_r+0x816>
 800c8e6:	2b04      	cmp	r3, #4
 800c8e8:	d095      	beq.n	800c816 <_dtoa_r+0x83a>
 800c8ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8ec:	331c      	adds	r3, #28
 800c8ee:	18d2      	adds	r2, r2, r3
 800c8f0:	920a      	str	r2, [sp, #40]	; 0x28
 800c8f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8f4:	18e4      	adds	r4, r4, r3
 800c8f6:	18d3      	adds	r3, r2, r3
 800c8f8:	e78c      	b.n	800c814 <_dtoa_r+0x838>
 800c8fa:	0003      	movs	r3, r0
 800c8fc:	e7f5      	b.n	800c8ea <_dtoa_r+0x90e>
 800c8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c900:	2b00      	cmp	r3, #0
 800c902:	dc3d      	bgt.n	800c980 <_dtoa_r+0x9a4>
 800c904:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c906:	2b02      	cmp	r3, #2
 800c908:	dd3a      	ble.n	800c980 <_dtoa_r+0x9a4>
 800c90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c90c:	930c      	str	r3, [sp, #48]	; 0x30
 800c90e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10c      	bne.n	800c92e <_dtoa_r+0x952>
 800c914:	9904      	ldr	r1, [sp, #16]
 800c916:	2205      	movs	r2, #5
 800c918:	9802      	ldr	r0, [sp, #8]
 800c91a:	f000 fcf1 	bl	800d300 <__multadd>
 800c91e:	9004      	str	r0, [sp, #16]
 800c920:	0001      	movs	r1, r0
 800c922:	9803      	ldr	r0, [sp, #12]
 800c924:	f000 feee 	bl	800d704 <__mcmp>
 800c928:	2800      	cmp	r0, #0
 800c92a:	dd00      	ble.n	800c92e <_dtoa_r+0x952>
 800c92c:	e5af      	b.n	800c48e <_dtoa_r+0x4b2>
 800c92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c930:	9d08      	ldr	r5, [sp, #32]
 800c932:	43df      	mvns	r7, r3
 800c934:	2300      	movs	r3, #0
 800c936:	9309      	str	r3, [sp, #36]	; 0x24
 800c938:	9904      	ldr	r1, [sp, #16]
 800c93a:	9802      	ldr	r0, [sp, #8]
 800c93c:	f000 fcc7 	bl	800d2ce <_Bfree>
 800c940:	2e00      	cmp	r6, #0
 800c942:	d100      	bne.n	800c946 <_dtoa_r+0x96a>
 800c944:	e69b      	b.n	800c67e <_dtoa_r+0x6a2>
 800c946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d005      	beq.n	800c958 <_dtoa_r+0x97c>
 800c94c:	42b3      	cmp	r3, r6
 800c94e:	d003      	beq.n	800c958 <_dtoa_r+0x97c>
 800c950:	0019      	movs	r1, r3
 800c952:	9802      	ldr	r0, [sp, #8]
 800c954:	f000 fcbb 	bl	800d2ce <_Bfree>
 800c958:	0031      	movs	r1, r6
 800c95a:	9802      	ldr	r0, [sp, #8]
 800c95c:	f000 fcb7 	bl	800d2ce <_Bfree>
 800c960:	e68d      	b.n	800c67e <_dtoa_r+0x6a2>
 800c962:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c964:	9304      	str	r3, [sp, #16]
 800c966:	001e      	movs	r6, r3
 800c968:	e7e1      	b.n	800c92e <_dtoa_r+0x952>
 800c96a:	2300      	movs	r3, #0
 800c96c:	e7fa      	b.n	800c964 <_dtoa_r+0x988>
 800c96e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c970:	0037      	movs	r7, r6
 800c972:	9304      	str	r3, [sp, #16]
 800c974:	001e      	movs	r6, r3
 800c976:	e58a      	b.n	800c48e <_dtoa_r+0x4b2>
 800c978:	40240000 	.word	0x40240000
 800c97c:	00000433 	.word	0x00000433
 800c980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c982:	2b00      	cmp	r3, #0
 800c984:	d100      	bne.n	800c988 <_dtoa_r+0x9ac>
 800c986:	e0b2      	b.n	800caee <_dtoa_r+0xb12>
 800c988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c98a:	930c      	str	r3, [sp, #48]	; 0x30
 800c98c:	2c00      	cmp	r4, #0
 800c98e:	dd05      	ble.n	800c99c <_dtoa_r+0x9c0>
 800c990:	0031      	movs	r1, r6
 800c992:	0022      	movs	r2, r4
 800c994:	9802      	ldr	r0, [sp, #8]
 800c996:	f000 fe63 	bl	800d660 <__lshift>
 800c99a:	0006      	movs	r6, r0
 800c99c:	0030      	movs	r0, r6
 800c99e:	2d00      	cmp	r5, #0
 800c9a0:	d011      	beq.n	800c9c6 <_dtoa_r+0x9ea>
 800c9a2:	6871      	ldr	r1, [r6, #4]
 800c9a4:	9802      	ldr	r0, [sp, #8]
 800c9a6:	f000 fc5a 	bl	800d25e <_Balloc>
 800c9aa:	0031      	movs	r1, r6
 800c9ac:	0004      	movs	r4, r0
 800c9ae:	6933      	ldr	r3, [r6, #16]
 800c9b0:	310c      	adds	r1, #12
 800c9b2:	1c9a      	adds	r2, r3, #2
 800c9b4:	0092      	lsls	r2, r2, #2
 800c9b6:	300c      	adds	r0, #12
 800c9b8:	f7fd fc1a 	bl	800a1f0 <memcpy>
 800c9bc:	2201      	movs	r2, #1
 800c9be:	0021      	movs	r1, r4
 800c9c0:	9802      	ldr	r0, [sp, #8]
 800c9c2:	f000 fe4d 	bl	800d660 <__lshift>
 800c9c6:	9609      	str	r6, [sp, #36]	; 0x24
 800c9c8:	0006      	movs	r6, r0
 800c9ca:	9b08      	ldr	r3, [sp, #32]
 800c9cc:	930a      	str	r3, [sp, #40]	; 0x28
 800c9ce:	9904      	ldr	r1, [sp, #16]
 800c9d0:	9803      	ldr	r0, [sp, #12]
 800c9d2:	f7ff fa7d 	bl	800bed0 <quorem>
 800c9d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9d8:	900d      	str	r0, [sp, #52]	; 0x34
 800c9da:	0004      	movs	r4, r0
 800c9dc:	9803      	ldr	r0, [sp, #12]
 800c9de:	f000 fe91 	bl	800d704 <__mcmp>
 800c9e2:	0032      	movs	r2, r6
 800c9e4:	9010      	str	r0, [sp, #64]	; 0x40
 800c9e6:	9904      	ldr	r1, [sp, #16]
 800c9e8:	9802      	ldr	r0, [sp, #8]
 800c9ea:	f000 fea5 	bl	800d738 <__mdiff>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9f2:	68c3      	ldr	r3, [r0, #12]
 800c9f4:	3430      	adds	r4, #48	; 0x30
 800c9f6:	0005      	movs	r5, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d104      	bne.n	800ca06 <_dtoa_r+0xa2a>
 800c9fc:	0001      	movs	r1, r0
 800c9fe:	9803      	ldr	r0, [sp, #12]
 800ca00:	f000 fe80 	bl	800d704 <__mcmp>
 800ca04:	900b      	str	r0, [sp, #44]	; 0x2c
 800ca06:	0029      	movs	r1, r5
 800ca08:	9802      	ldr	r0, [sp, #8]
 800ca0a:	f000 fc60 	bl	800d2ce <_Bfree>
 800ca0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ca12:	4313      	orrs	r3, r2
 800ca14:	d10e      	bne.n	800ca34 <_dtoa_r+0xa58>
 800ca16:	9a06      	ldr	r2, [sp, #24]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	4213      	tst	r3, r2
 800ca1c:	d10a      	bne.n	800ca34 <_dtoa_r+0xa58>
 800ca1e:	2c39      	cmp	r4, #57	; 0x39
 800ca20:	d026      	beq.n	800ca70 <_dtoa_r+0xa94>
 800ca22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	dd01      	ble.n	800ca2c <_dtoa_r+0xa50>
 800ca28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ca2a:	3431      	adds	r4, #49	; 0x31
 800ca2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca2e:	1c5d      	adds	r5, r3, #1
 800ca30:	701c      	strb	r4, [r3, #0]
 800ca32:	e781      	b.n	800c938 <_dtoa_r+0x95c>
 800ca34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	db07      	blt.n	800ca4a <_dtoa_r+0xa6e>
 800ca3a:	001d      	movs	r5, r3
 800ca3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ca3e:	431d      	orrs	r5, r3
 800ca40:	d122      	bne.n	800ca88 <_dtoa_r+0xaac>
 800ca42:	2301      	movs	r3, #1
 800ca44:	9a06      	ldr	r2, [sp, #24]
 800ca46:	4213      	tst	r3, r2
 800ca48:	d11e      	bne.n	800ca88 <_dtoa_r+0xaac>
 800ca4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	dded      	ble.n	800ca2c <_dtoa_r+0xa50>
 800ca50:	9903      	ldr	r1, [sp, #12]
 800ca52:	2201      	movs	r2, #1
 800ca54:	9802      	ldr	r0, [sp, #8]
 800ca56:	f000 fe03 	bl	800d660 <__lshift>
 800ca5a:	9904      	ldr	r1, [sp, #16]
 800ca5c:	9003      	str	r0, [sp, #12]
 800ca5e:	f000 fe51 	bl	800d704 <__mcmp>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	dc02      	bgt.n	800ca6c <_dtoa_r+0xa90>
 800ca66:	d1e1      	bne.n	800ca2c <_dtoa_r+0xa50>
 800ca68:	07e3      	lsls	r3, r4, #31
 800ca6a:	d5df      	bpl.n	800ca2c <_dtoa_r+0xa50>
 800ca6c:	2c39      	cmp	r4, #57	; 0x39
 800ca6e:	d1db      	bne.n	800ca28 <_dtoa_r+0xa4c>
 800ca70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca74:	1c5d      	adds	r5, r3, #1
 800ca76:	2339      	movs	r3, #57	; 0x39
 800ca78:	7013      	strb	r3, [r2, #0]
 800ca7a:	1e6b      	subs	r3, r5, #1
 800ca7c:	781a      	ldrb	r2, [r3, #0]
 800ca7e:	2a39      	cmp	r2, #57	; 0x39
 800ca80:	d067      	beq.n	800cb52 <_dtoa_r+0xb76>
 800ca82:	3201      	adds	r2, #1
 800ca84:	701a      	strb	r2, [r3, #0]
 800ca86:	e757      	b.n	800c938 <_dtoa_r+0x95c>
 800ca88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca8a:	1c5d      	adds	r5, r3, #1
 800ca8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	dd04      	ble.n	800ca9c <_dtoa_r+0xac0>
 800ca92:	2c39      	cmp	r4, #57	; 0x39
 800ca94:	d0ec      	beq.n	800ca70 <_dtoa_r+0xa94>
 800ca96:	3401      	adds	r4, #1
 800ca98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca9a:	e7c9      	b.n	800ca30 <_dtoa_r+0xa54>
 800ca9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800caa0:	701c      	strb	r4, [r3, #0]
 800caa2:	9b08      	ldr	r3, [sp, #32]
 800caa4:	1aeb      	subs	r3, r5, r3
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d03e      	beq.n	800cb28 <_dtoa_r+0xb4c>
 800caaa:	2300      	movs	r3, #0
 800caac:	220a      	movs	r2, #10
 800caae:	9903      	ldr	r1, [sp, #12]
 800cab0:	9802      	ldr	r0, [sp, #8]
 800cab2:	f000 fc25 	bl	800d300 <__multadd>
 800cab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab8:	9003      	str	r0, [sp, #12]
 800caba:	42b3      	cmp	r3, r6
 800cabc:	d109      	bne.n	800cad2 <_dtoa_r+0xaf6>
 800cabe:	2300      	movs	r3, #0
 800cac0:	220a      	movs	r2, #10
 800cac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cac4:	9802      	ldr	r0, [sp, #8]
 800cac6:	f000 fc1b 	bl	800d300 <__multadd>
 800caca:	9009      	str	r0, [sp, #36]	; 0x24
 800cacc:	0006      	movs	r6, r0
 800cace:	950a      	str	r5, [sp, #40]	; 0x28
 800cad0:	e77d      	b.n	800c9ce <_dtoa_r+0x9f2>
 800cad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cad4:	2300      	movs	r3, #0
 800cad6:	220a      	movs	r2, #10
 800cad8:	9802      	ldr	r0, [sp, #8]
 800cada:	f000 fc11 	bl	800d300 <__multadd>
 800cade:	2300      	movs	r3, #0
 800cae0:	9009      	str	r0, [sp, #36]	; 0x24
 800cae2:	220a      	movs	r2, #10
 800cae4:	0031      	movs	r1, r6
 800cae6:	9802      	ldr	r0, [sp, #8]
 800cae8:	f000 fc0a 	bl	800d300 <__multadd>
 800caec:	e7ee      	b.n	800cacc <_dtoa_r+0xaf0>
 800caee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caf0:	930c      	str	r3, [sp, #48]	; 0x30
 800caf2:	9b08      	ldr	r3, [sp, #32]
 800caf4:	9306      	str	r3, [sp, #24]
 800caf6:	9904      	ldr	r1, [sp, #16]
 800caf8:	9803      	ldr	r0, [sp, #12]
 800cafa:	f7ff f9e9 	bl	800bed0 <quorem>
 800cafe:	9b06      	ldr	r3, [sp, #24]
 800cb00:	3030      	adds	r0, #48	; 0x30
 800cb02:	1c5d      	adds	r5, r3, #1
 800cb04:	7018      	strb	r0, [r3, #0]
 800cb06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb08:	9b08      	ldr	r3, [sp, #32]
 800cb0a:	0004      	movs	r4, r0
 800cb0c:	1aeb      	subs	r3, r5, r3
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	dd08      	ble.n	800cb24 <_dtoa_r+0xb48>
 800cb12:	2300      	movs	r3, #0
 800cb14:	220a      	movs	r2, #10
 800cb16:	9903      	ldr	r1, [sp, #12]
 800cb18:	9802      	ldr	r0, [sp, #8]
 800cb1a:	f000 fbf1 	bl	800d300 <__multadd>
 800cb1e:	9506      	str	r5, [sp, #24]
 800cb20:	9003      	str	r0, [sp, #12]
 800cb22:	e7e8      	b.n	800caf6 <_dtoa_r+0xb1a>
 800cb24:	2300      	movs	r3, #0
 800cb26:	9309      	str	r3, [sp, #36]	; 0x24
 800cb28:	9903      	ldr	r1, [sp, #12]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	9802      	ldr	r0, [sp, #8]
 800cb2e:	f000 fd97 	bl	800d660 <__lshift>
 800cb32:	9904      	ldr	r1, [sp, #16]
 800cb34:	9003      	str	r0, [sp, #12]
 800cb36:	f000 fde5 	bl	800d704 <__mcmp>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	dc9d      	bgt.n	800ca7a <_dtoa_r+0xa9e>
 800cb3e:	d101      	bne.n	800cb44 <_dtoa_r+0xb68>
 800cb40:	07e3      	lsls	r3, r4, #31
 800cb42:	d49a      	bmi.n	800ca7a <_dtoa_r+0xa9e>
 800cb44:	1e6b      	subs	r3, r5, #1
 800cb46:	781a      	ldrb	r2, [r3, #0]
 800cb48:	2a30      	cmp	r2, #48	; 0x30
 800cb4a:	d000      	beq.n	800cb4e <_dtoa_r+0xb72>
 800cb4c:	e6f4      	b.n	800c938 <_dtoa_r+0x95c>
 800cb4e:	001d      	movs	r5, r3
 800cb50:	e7f8      	b.n	800cb44 <_dtoa_r+0xb68>
 800cb52:	9a08      	ldr	r2, [sp, #32]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d103      	bne.n	800cb60 <_dtoa_r+0xb84>
 800cb58:	2331      	movs	r3, #49	; 0x31
 800cb5a:	3701      	adds	r7, #1
 800cb5c:	7013      	strb	r3, [r2, #0]
 800cb5e:	e6eb      	b.n	800c938 <_dtoa_r+0x95c>
 800cb60:	001d      	movs	r5, r3
 800cb62:	e78a      	b.n	800ca7a <_dtoa_r+0xa9e>
 800cb64:	4b0b      	ldr	r3, [pc, #44]	; (800cb94 <_dtoa_r+0xbb8>)
 800cb66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb68:	9308      	str	r3, [sp, #32]
 800cb6a:	4b0b      	ldr	r3, [pc, #44]	; (800cb98 <_dtoa_r+0xbbc>)
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	d001      	beq.n	800cb74 <_dtoa_r+0xb98>
 800cb70:	f7ff fa77 	bl	800c062 <_dtoa_r+0x86>
 800cb74:	f7ff fa77 	bl	800c066 <_dtoa_r+0x8a>
 800cb78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	dc00      	bgt.n	800cb80 <_dtoa_r+0xba4>
 800cb7e:	e621      	b.n	800c7c4 <_dtoa_r+0x7e8>
 800cb80:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800cb82:	2001      	movs	r0, #1
 800cb84:	e635      	b.n	800c7f2 <_dtoa_r+0x816>
 800cb86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	dcb2      	bgt.n	800caf2 <_dtoa_r+0xb16>
 800cb8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	ddaf      	ble.n	800caf2 <_dtoa_r+0xb16>
 800cb92:	e6bc      	b.n	800c90e <_dtoa_r+0x932>
 800cb94:	0800f278 	.word	0x0800f278
 800cb98:	0800f280 	.word	0x0800f280

0800cb9c <rshift>:
 800cb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb9e:	0004      	movs	r4, r0
 800cba0:	6905      	ldr	r5, [r0, #16]
 800cba2:	3414      	adds	r4, #20
 800cba4:	114b      	asrs	r3, r1, #5
 800cba6:	0026      	movs	r6, r4
 800cba8:	429d      	cmp	r5, r3
 800cbaa:	dd14      	ble.n	800cbd6 <rshift+0x3a>
 800cbac:	221f      	movs	r2, #31
 800cbae:	00ad      	lsls	r5, r5, #2
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	4011      	ands	r1, r2
 800cbb4:	1965      	adds	r5, r4, r5
 800cbb6:	18e3      	adds	r3, r4, r3
 800cbb8:	0022      	movs	r2, r4
 800cbba:	2900      	cmp	r1, #0
 800cbbc:	d01e      	beq.n	800cbfc <rshift+0x60>
 800cbbe:	cb04      	ldmia	r3!, {r2}
 800cbc0:	2720      	movs	r7, #32
 800cbc2:	40ca      	lsrs	r2, r1
 800cbc4:	46a4      	mov	ip, r4
 800cbc6:	1a7f      	subs	r7, r7, r1
 800cbc8:	4666      	mov	r6, ip
 800cbca:	429d      	cmp	r5, r3
 800cbcc:	d80b      	bhi.n	800cbe6 <rshift+0x4a>
 800cbce:	6032      	str	r2, [r6, #0]
 800cbd0:	2a00      	cmp	r2, #0
 800cbd2:	d000      	beq.n	800cbd6 <rshift+0x3a>
 800cbd4:	3604      	adds	r6, #4
 800cbd6:	1b33      	subs	r3, r6, r4
 800cbd8:	109b      	asrs	r3, r3, #2
 800cbda:	6103      	str	r3, [r0, #16]
 800cbdc:	42a6      	cmp	r6, r4
 800cbde:	d101      	bne.n	800cbe4 <rshift+0x48>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	6143      	str	r3, [r0, #20]
 800cbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbe6:	681e      	ldr	r6, [r3, #0]
 800cbe8:	40be      	lsls	r6, r7
 800cbea:	4332      	orrs	r2, r6
 800cbec:	4666      	mov	r6, ip
 800cbee:	c604      	stmia	r6!, {r2}
 800cbf0:	cb04      	ldmia	r3!, {r2}
 800cbf2:	46b4      	mov	ip, r6
 800cbf4:	40ca      	lsrs	r2, r1
 800cbf6:	e7e7      	b.n	800cbc8 <rshift+0x2c>
 800cbf8:	cb02      	ldmia	r3!, {r1}
 800cbfa:	c202      	stmia	r2!, {r1}
 800cbfc:	0016      	movs	r6, r2
 800cbfe:	429d      	cmp	r5, r3
 800cc00:	d8fa      	bhi.n	800cbf8 <rshift+0x5c>
 800cc02:	e7e8      	b.n	800cbd6 <rshift+0x3a>

0800cc04 <__hexdig_fun>:
 800cc04:	0003      	movs	r3, r0
 800cc06:	3b30      	subs	r3, #48	; 0x30
 800cc08:	2b09      	cmp	r3, #9
 800cc0a:	d803      	bhi.n	800cc14 <__hexdig_fun+0x10>
 800cc0c:	3820      	subs	r0, #32
 800cc0e:	b2c3      	uxtb	r3, r0
 800cc10:	0018      	movs	r0, r3
 800cc12:	4770      	bx	lr
 800cc14:	0003      	movs	r3, r0
 800cc16:	3b61      	subs	r3, #97	; 0x61
 800cc18:	2b05      	cmp	r3, #5
 800cc1a:	d801      	bhi.n	800cc20 <__hexdig_fun+0x1c>
 800cc1c:	3847      	subs	r0, #71	; 0x47
 800cc1e:	e7f6      	b.n	800cc0e <__hexdig_fun+0xa>
 800cc20:	0002      	movs	r2, r0
 800cc22:	3a41      	subs	r2, #65	; 0x41
 800cc24:	2300      	movs	r3, #0
 800cc26:	2a05      	cmp	r2, #5
 800cc28:	d8f2      	bhi.n	800cc10 <__hexdig_fun+0xc>
 800cc2a:	3827      	subs	r0, #39	; 0x27
 800cc2c:	e7ef      	b.n	800cc0e <__hexdig_fun+0xa>

0800cc2e <__gethex>:
 800cc2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc30:	b08d      	sub	sp, #52	; 0x34
 800cc32:	9005      	str	r0, [sp, #20]
 800cc34:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cc36:	9109      	str	r1, [sp, #36]	; 0x24
 800cc38:	9202      	str	r2, [sp, #8]
 800cc3a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc3c:	f000 fae2 	bl	800d204 <__localeconv_l>
 800cc40:	6803      	ldr	r3, [r0, #0]
 800cc42:	0018      	movs	r0, r3
 800cc44:	9307      	str	r3, [sp, #28]
 800cc46:	f7f3 fa5f 	bl	8000108 <strlen>
 800cc4a:	2202      	movs	r2, #2
 800cc4c:	9b07      	ldr	r3, [sp, #28]
 800cc4e:	4252      	negs	r2, r2
 800cc50:	181b      	adds	r3, r3, r0
 800cc52:	3b01      	subs	r3, #1
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	9004      	str	r0, [sp, #16]
 800cc58:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc5c:	6819      	ldr	r1, [r3, #0]
 800cc5e:	1c8b      	adds	r3, r1, #2
 800cc60:	1a52      	subs	r2, r2, r1
 800cc62:	18d1      	adds	r1, r2, r3
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	9108      	str	r1, [sp, #32]
 800cc68:	9901      	ldr	r1, [sp, #4]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	7808      	ldrb	r0, [r1, #0]
 800cc6e:	2830      	cmp	r0, #48	; 0x30
 800cc70:	d0f7      	beq.n	800cc62 <__gethex+0x34>
 800cc72:	f7ff ffc7 	bl	800cc04 <__hexdig_fun>
 800cc76:	1e07      	subs	r7, r0, #0
 800cc78:	d000      	beq.n	800cc7c <__gethex+0x4e>
 800cc7a:	e06f      	b.n	800cd5c <__gethex+0x12e>
 800cc7c:	9a04      	ldr	r2, [sp, #16]
 800cc7e:	9907      	ldr	r1, [sp, #28]
 800cc80:	9801      	ldr	r0, [sp, #4]
 800cc82:	f001 f851 	bl	800dd28 <strncmp>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d000      	beq.n	800cc8c <__gethex+0x5e>
 800cc8a:	e06d      	b.n	800cd68 <__gethex+0x13a>
 800cc8c:	9b01      	ldr	r3, [sp, #4]
 800cc8e:	9a04      	ldr	r2, [sp, #16]
 800cc90:	189c      	adds	r4, r3, r2
 800cc92:	7820      	ldrb	r0, [r4, #0]
 800cc94:	f7ff ffb6 	bl	800cc04 <__hexdig_fun>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d069      	beq.n	800cd70 <__gethex+0x142>
 800cc9c:	9401      	str	r4, [sp, #4]
 800cc9e:	9b01      	ldr	r3, [sp, #4]
 800cca0:	7818      	ldrb	r0, [r3, #0]
 800cca2:	2830      	cmp	r0, #48	; 0x30
 800cca4:	d009      	beq.n	800ccba <__gethex+0x8c>
 800cca6:	f7ff ffad 	bl	800cc04 <__hexdig_fun>
 800ccaa:	4243      	negs	r3, r0
 800ccac:	4143      	adcs	r3, r0
 800ccae:	9303      	str	r3, [sp, #12]
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	0026      	movs	r6, r4
 800ccb4:	9308      	str	r3, [sp, #32]
 800ccb6:	9c01      	ldr	r4, [sp, #4]
 800ccb8:	e004      	b.n	800ccc4 <__gethex+0x96>
 800ccba:	9b01      	ldr	r3, [sp, #4]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	9301      	str	r3, [sp, #4]
 800ccc0:	e7ed      	b.n	800cc9e <__gethex+0x70>
 800ccc2:	3401      	adds	r4, #1
 800ccc4:	7820      	ldrb	r0, [r4, #0]
 800ccc6:	f7ff ff9d 	bl	800cc04 <__hexdig_fun>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	d1f9      	bne.n	800ccc2 <__gethex+0x94>
 800ccce:	9a04      	ldr	r2, [sp, #16]
 800ccd0:	9907      	ldr	r1, [sp, #28]
 800ccd2:	0020      	movs	r0, r4
 800ccd4:	f001 f828 	bl	800dd28 <strncmp>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d109      	bne.n	800ccf0 <__gethex+0xc2>
 800ccdc:	2e00      	cmp	r6, #0
 800ccde:	d10a      	bne.n	800ccf6 <__gethex+0xc8>
 800cce0:	9b04      	ldr	r3, [sp, #16]
 800cce2:	18e4      	adds	r4, r4, r3
 800cce4:	0026      	movs	r6, r4
 800cce6:	7820      	ldrb	r0, [r4, #0]
 800cce8:	f7ff ff8c 	bl	800cc04 <__hexdig_fun>
 800ccec:	2800      	cmp	r0, #0
 800ccee:	d139      	bne.n	800cd64 <__gethex+0x136>
 800ccf0:	2700      	movs	r7, #0
 800ccf2:	42be      	cmp	r6, r7
 800ccf4:	d001      	beq.n	800ccfa <__gethex+0xcc>
 800ccf6:	1b37      	subs	r7, r6, r4
 800ccf8:	00bf      	lsls	r7, r7, #2
 800ccfa:	7823      	ldrb	r3, [r4, #0]
 800ccfc:	2b50      	cmp	r3, #80	; 0x50
 800ccfe:	d001      	beq.n	800cd04 <__gethex+0xd6>
 800cd00:	2b70      	cmp	r3, #112	; 0x70
 800cd02:	d142      	bne.n	800cd8a <__gethex+0x15c>
 800cd04:	7863      	ldrb	r3, [r4, #1]
 800cd06:	2b2b      	cmp	r3, #43	; 0x2b
 800cd08:	d034      	beq.n	800cd74 <__gethex+0x146>
 800cd0a:	2b2d      	cmp	r3, #45	; 0x2d
 800cd0c:	d036      	beq.n	800cd7c <__gethex+0x14e>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	1c66      	adds	r6, r4, #1
 800cd12:	9306      	str	r3, [sp, #24]
 800cd14:	7830      	ldrb	r0, [r6, #0]
 800cd16:	f7ff ff75 	bl	800cc04 <__hexdig_fun>
 800cd1a:	1e43      	subs	r3, r0, #1
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	2b18      	cmp	r3, #24
 800cd20:	d833      	bhi.n	800cd8a <__gethex+0x15c>
 800cd22:	3810      	subs	r0, #16
 800cd24:	0005      	movs	r5, r0
 800cd26:	3601      	adds	r6, #1
 800cd28:	7830      	ldrb	r0, [r6, #0]
 800cd2a:	f7ff ff6b 	bl	800cc04 <__hexdig_fun>
 800cd2e:	1e43      	subs	r3, r0, #1
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	2b18      	cmp	r3, #24
 800cd34:	d924      	bls.n	800cd80 <__gethex+0x152>
 800cd36:	9b06      	ldr	r3, [sp, #24]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d000      	beq.n	800cd3e <__gethex+0x110>
 800cd3c:	426d      	negs	r5, r5
 800cd3e:	197f      	adds	r7, r7, r5
 800cd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd42:	601e      	str	r6, [r3, #0]
 800cd44:	9b03      	ldr	r3, [sp, #12]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d021      	beq.n	800cd8e <__gethex+0x160>
 800cd4a:	9b08      	ldr	r3, [sp, #32]
 800cd4c:	2606      	movs	r6, #6
 800cd4e:	425a      	negs	r2, r3
 800cd50:	4153      	adcs	r3, r2
 800cd52:	425b      	negs	r3, r3
 800cd54:	401e      	ands	r6, r3
 800cd56:	0030      	movs	r0, r6
 800cd58:	b00d      	add	sp, #52	; 0x34
 800cd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	9303      	str	r3, [sp, #12]
 800cd60:	001e      	movs	r6, r3
 800cd62:	e7a8      	b.n	800ccb6 <__gethex+0x88>
 800cd64:	3401      	adds	r4, #1
 800cd66:	e7be      	b.n	800cce6 <__gethex+0xb8>
 800cd68:	9c01      	ldr	r4, [sp, #4]
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	9303      	str	r3, [sp, #12]
 800cd6e:	e7c4      	b.n	800ccfa <__gethex+0xcc>
 800cd70:	0007      	movs	r7, r0
 800cd72:	e7fa      	b.n	800cd6a <__gethex+0x13c>
 800cd74:	2300      	movs	r3, #0
 800cd76:	9306      	str	r3, [sp, #24]
 800cd78:	1ca6      	adds	r6, r4, #2
 800cd7a:	e7cb      	b.n	800cd14 <__gethex+0xe6>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e7fa      	b.n	800cd76 <__gethex+0x148>
 800cd80:	230a      	movs	r3, #10
 800cd82:	435d      	muls	r5, r3
 800cd84:	182d      	adds	r5, r5, r0
 800cd86:	3d10      	subs	r5, #16
 800cd88:	e7cd      	b.n	800cd26 <__gethex+0xf8>
 800cd8a:	0026      	movs	r6, r4
 800cd8c:	e7d8      	b.n	800cd40 <__gethex+0x112>
 800cd8e:	9b01      	ldr	r3, [sp, #4]
 800cd90:	9903      	ldr	r1, [sp, #12]
 800cd92:	1ae3      	subs	r3, r4, r3
 800cd94:	3b01      	subs	r3, #1
 800cd96:	2b07      	cmp	r3, #7
 800cd98:	dc47      	bgt.n	800ce2a <__gethex+0x1fc>
 800cd9a:	9805      	ldr	r0, [sp, #20]
 800cd9c:	f000 fa5f 	bl	800d25e <_Balloc>
 800cda0:	0003      	movs	r3, r0
 800cda2:	3314      	adds	r3, #20
 800cda4:	9303      	str	r3, [sp, #12]
 800cda6:	9308      	str	r3, [sp, #32]
 800cda8:	2300      	movs	r3, #0
 800cdaa:	0005      	movs	r5, r0
 800cdac:	001e      	movs	r6, r3
 800cdae:	9306      	str	r3, [sp, #24]
 800cdb0:	9b01      	ldr	r3, [sp, #4]
 800cdb2:	42a3      	cmp	r3, r4
 800cdb4:	d33c      	bcc.n	800ce30 <__gethex+0x202>
 800cdb6:	9c08      	ldr	r4, [sp, #32]
 800cdb8:	9b03      	ldr	r3, [sp, #12]
 800cdba:	c440      	stmia	r4!, {r6}
 800cdbc:	1ae4      	subs	r4, r4, r3
 800cdbe:	10a4      	asrs	r4, r4, #2
 800cdc0:	612c      	str	r4, [r5, #16]
 800cdc2:	0030      	movs	r0, r6
 800cdc4:	f000 fb18 	bl	800d3f8 <__hi0bits>
 800cdc8:	9b02      	ldr	r3, [sp, #8]
 800cdca:	0164      	lsls	r4, r4, #5
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	1a26      	subs	r6, r4, r0
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	429e      	cmp	r6, r3
 800cdd4:	dd5f      	ble.n	800ce96 <__gethex+0x268>
 800cdd6:	1af6      	subs	r6, r6, r3
 800cdd8:	0031      	movs	r1, r6
 800cdda:	0028      	movs	r0, r5
 800cddc:	f000 fe13 	bl	800da06 <__any_on>
 800cde0:	1e04      	subs	r4, r0, #0
 800cde2:	d00f      	beq.n	800ce04 <__gethex+0x1d6>
 800cde4:	2401      	movs	r4, #1
 800cde6:	211f      	movs	r1, #31
 800cde8:	0020      	movs	r0, r4
 800cdea:	1e73      	subs	r3, r6, #1
 800cdec:	4019      	ands	r1, r3
 800cdee:	4088      	lsls	r0, r1
 800cdf0:	0001      	movs	r1, r0
 800cdf2:	115a      	asrs	r2, r3, #5
 800cdf4:	9803      	ldr	r0, [sp, #12]
 800cdf6:	0092      	lsls	r2, r2, #2
 800cdf8:	5812      	ldr	r2, [r2, r0]
 800cdfa:	420a      	tst	r2, r1
 800cdfc:	d002      	beq.n	800ce04 <__gethex+0x1d6>
 800cdfe:	42a3      	cmp	r3, r4
 800ce00:	dc41      	bgt.n	800ce86 <__gethex+0x258>
 800ce02:	2402      	movs	r4, #2
 800ce04:	0031      	movs	r1, r6
 800ce06:	0028      	movs	r0, r5
 800ce08:	f7ff fec8 	bl	800cb9c <rshift>
 800ce0c:	19bf      	adds	r7, r7, r6
 800ce0e:	9b02      	ldr	r3, [sp, #8]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	9304      	str	r3, [sp, #16]
 800ce14:	42bb      	cmp	r3, r7
 800ce16:	da4e      	bge.n	800ceb6 <__gethex+0x288>
 800ce18:	0029      	movs	r1, r5
 800ce1a:	9805      	ldr	r0, [sp, #20]
 800ce1c:	f000 fa57 	bl	800d2ce <_Bfree>
 800ce20:	2300      	movs	r3, #0
 800ce22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce24:	26a3      	movs	r6, #163	; 0xa3
 800ce26:	6013      	str	r3, [r2, #0]
 800ce28:	e795      	b.n	800cd56 <__gethex+0x128>
 800ce2a:	3101      	adds	r1, #1
 800ce2c:	105b      	asrs	r3, r3, #1
 800ce2e:	e7b2      	b.n	800cd96 <__gethex+0x168>
 800ce30:	1e63      	subs	r3, r4, #1
 800ce32:	9309      	str	r3, [sp, #36]	; 0x24
 800ce34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d015      	beq.n	800ce68 <__gethex+0x23a>
 800ce3c:	9b06      	ldr	r3, [sp, #24]
 800ce3e:	2b20      	cmp	r3, #32
 800ce40:	d105      	bne.n	800ce4e <__gethex+0x220>
 800ce42:	9b08      	ldr	r3, [sp, #32]
 800ce44:	601e      	str	r6, [r3, #0]
 800ce46:	2600      	movs	r6, #0
 800ce48:	3304      	adds	r3, #4
 800ce4a:	9308      	str	r3, [sp, #32]
 800ce4c:	9606      	str	r6, [sp, #24]
 800ce4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce50:	7818      	ldrb	r0, [r3, #0]
 800ce52:	f7ff fed7 	bl	800cc04 <__hexdig_fun>
 800ce56:	230f      	movs	r3, #15
 800ce58:	4018      	ands	r0, r3
 800ce5a:	9b06      	ldr	r3, [sp, #24]
 800ce5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ce5e:	4098      	lsls	r0, r3
 800ce60:	3304      	adds	r3, #4
 800ce62:	4306      	orrs	r6, r0
 800ce64:	9306      	str	r3, [sp, #24]
 800ce66:	e7a3      	b.n	800cdb0 <__gethex+0x182>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	9a04      	ldr	r2, [sp, #16]
 800ce6c:	1a9c      	subs	r4, r3, r2
 800ce6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce70:	191c      	adds	r4, r3, r4
 800ce72:	9b01      	ldr	r3, [sp, #4]
 800ce74:	429c      	cmp	r4, r3
 800ce76:	d3e1      	bcc.n	800ce3c <__gethex+0x20e>
 800ce78:	9907      	ldr	r1, [sp, #28]
 800ce7a:	0020      	movs	r0, r4
 800ce7c:	f000 ff54 	bl	800dd28 <strncmp>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d1db      	bne.n	800ce3c <__gethex+0x20e>
 800ce84:	e794      	b.n	800cdb0 <__gethex+0x182>
 800ce86:	1eb1      	subs	r1, r6, #2
 800ce88:	0028      	movs	r0, r5
 800ce8a:	f000 fdbc 	bl	800da06 <__any_on>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d0b7      	beq.n	800ce02 <__gethex+0x1d4>
 800ce92:	2403      	movs	r4, #3
 800ce94:	e7b6      	b.n	800ce04 <__gethex+0x1d6>
 800ce96:	9b01      	ldr	r3, [sp, #4]
 800ce98:	2400      	movs	r4, #0
 800ce9a:	429e      	cmp	r6, r3
 800ce9c:	dab7      	bge.n	800ce0e <__gethex+0x1e0>
 800ce9e:	1b9e      	subs	r6, r3, r6
 800cea0:	0029      	movs	r1, r5
 800cea2:	0032      	movs	r2, r6
 800cea4:	9805      	ldr	r0, [sp, #20]
 800cea6:	f000 fbdb 	bl	800d660 <__lshift>
 800ceaa:	0003      	movs	r3, r0
 800ceac:	3314      	adds	r3, #20
 800ceae:	0005      	movs	r5, r0
 800ceb0:	1bbf      	subs	r7, r7, r6
 800ceb2:	9303      	str	r3, [sp, #12]
 800ceb4:	e7ab      	b.n	800ce0e <__gethex+0x1e0>
 800ceb6:	9b02      	ldr	r3, [sp, #8]
 800ceb8:	685e      	ldr	r6, [r3, #4]
 800ceba:	42be      	cmp	r6, r7
 800cebc:	dd6b      	ble.n	800cf96 <__gethex+0x368>
 800cebe:	9b01      	ldr	r3, [sp, #4]
 800cec0:	1bf6      	subs	r6, r6, r7
 800cec2:	42b3      	cmp	r3, r6
 800cec4:	dc32      	bgt.n	800cf2c <__gethex+0x2fe>
 800cec6:	9b02      	ldr	r3, [sp, #8]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d026      	beq.n	800cf1c <__gethex+0x2ee>
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d028      	beq.n	800cf24 <__gethex+0x2f6>
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d119      	bne.n	800cf0a <__gethex+0x2dc>
 800ced6:	9b01      	ldr	r3, [sp, #4]
 800ced8:	42b3      	cmp	r3, r6
 800ceda:	d116      	bne.n	800cf0a <__gethex+0x2dc>
 800cedc:	2b01      	cmp	r3, #1
 800cede:	dc0d      	bgt.n	800cefc <__gethex+0x2ce>
 800cee0:	9b02      	ldr	r3, [sp, #8]
 800cee2:	2662      	movs	r6, #98	; 0x62
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	9301      	str	r3, [sp, #4]
 800cee8:	9a01      	ldr	r2, [sp, #4]
 800ceea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	2301      	movs	r3, #1
 800cef0:	9a03      	ldr	r2, [sp, #12]
 800cef2:	612b      	str	r3, [r5, #16]
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cef8:	601d      	str	r5, [r3, #0]
 800cefa:	e72c      	b.n	800cd56 <__gethex+0x128>
 800cefc:	9901      	ldr	r1, [sp, #4]
 800cefe:	0028      	movs	r0, r5
 800cf00:	3901      	subs	r1, #1
 800cf02:	f000 fd80 	bl	800da06 <__any_on>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d1ea      	bne.n	800cee0 <__gethex+0x2b2>
 800cf0a:	0029      	movs	r1, r5
 800cf0c:	9805      	ldr	r0, [sp, #20]
 800cf0e:	f000 f9de 	bl	800d2ce <_Bfree>
 800cf12:	2300      	movs	r3, #0
 800cf14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf16:	2650      	movs	r6, #80	; 0x50
 800cf18:	6013      	str	r3, [r2, #0]
 800cf1a:	e71c      	b.n	800cd56 <__gethex+0x128>
 800cf1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d0de      	beq.n	800cee0 <__gethex+0x2b2>
 800cf22:	e7f2      	b.n	800cf0a <__gethex+0x2dc>
 800cf24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1da      	bne.n	800cee0 <__gethex+0x2b2>
 800cf2a:	e7ee      	b.n	800cf0a <__gethex+0x2dc>
 800cf2c:	1e77      	subs	r7, r6, #1
 800cf2e:	2c00      	cmp	r4, #0
 800cf30:	d12f      	bne.n	800cf92 <__gethex+0x364>
 800cf32:	2f00      	cmp	r7, #0
 800cf34:	d004      	beq.n	800cf40 <__gethex+0x312>
 800cf36:	0039      	movs	r1, r7
 800cf38:	0028      	movs	r0, r5
 800cf3a:	f000 fd64 	bl	800da06 <__any_on>
 800cf3e:	0004      	movs	r4, r0
 800cf40:	231f      	movs	r3, #31
 800cf42:	117a      	asrs	r2, r7, #5
 800cf44:	401f      	ands	r7, r3
 800cf46:	3b1e      	subs	r3, #30
 800cf48:	40bb      	lsls	r3, r7
 800cf4a:	9903      	ldr	r1, [sp, #12]
 800cf4c:	0092      	lsls	r2, r2, #2
 800cf4e:	5852      	ldr	r2, [r2, r1]
 800cf50:	421a      	tst	r2, r3
 800cf52:	d001      	beq.n	800cf58 <__gethex+0x32a>
 800cf54:	2302      	movs	r3, #2
 800cf56:	431c      	orrs	r4, r3
 800cf58:	9b01      	ldr	r3, [sp, #4]
 800cf5a:	0031      	movs	r1, r6
 800cf5c:	1b9b      	subs	r3, r3, r6
 800cf5e:	2602      	movs	r6, #2
 800cf60:	0028      	movs	r0, r5
 800cf62:	9301      	str	r3, [sp, #4]
 800cf64:	f7ff fe1a 	bl	800cb9c <rshift>
 800cf68:	9b02      	ldr	r3, [sp, #8]
 800cf6a:	685f      	ldr	r7, [r3, #4]
 800cf6c:	2c00      	cmp	r4, #0
 800cf6e:	d040      	beq.n	800cff2 <__gethex+0x3c4>
 800cf70:	9b02      	ldr	r3, [sp, #8]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	d010      	beq.n	800cf9a <__gethex+0x36c>
 800cf78:	2b03      	cmp	r3, #3
 800cf7a:	d012      	beq.n	800cfa2 <__gethex+0x374>
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d106      	bne.n	800cf8e <__gethex+0x360>
 800cf80:	07a2      	lsls	r2, r4, #30
 800cf82:	d504      	bpl.n	800cf8e <__gethex+0x360>
 800cf84:	9a03      	ldr	r2, [sp, #12]
 800cf86:	6812      	ldr	r2, [r2, #0]
 800cf88:	4314      	orrs	r4, r2
 800cf8a:	421c      	tst	r4, r3
 800cf8c:	d10c      	bne.n	800cfa8 <__gethex+0x37a>
 800cf8e:	2310      	movs	r3, #16
 800cf90:	e02e      	b.n	800cff0 <__gethex+0x3c2>
 800cf92:	2401      	movs	r4, #1
 800cf94:	e7d4      	b.n	800cf40 <__gethex+0x312>
 800cf96:	2601      	movs	r6, #1
 800cf98:	e7e8      	b.n	800cf6c <__gethex+0x33e>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cf9e:	1a9b      	subs	r3, r3, r2
 800cfa0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cfa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d0f2      	beq.n	800cf8e <__gethex+0x360>
 800cfa8:	692c      	ldr	r4, [r5, #16]
 800cfaa:	00a3      	lsls	r3, r4, #2
 800cfac:	9304      	str	r3, [sp, #16]
 800cfae:	002b      	movs	r3, r5
 800cfb0:	00a2      	lsls	r2, r4, #2
 800cfb2:	3314      	adds	r3, #20
 800cfb4:	1899      	adds	r1, r3, r2
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	4694      	mov	ip, r2
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	1c50      	adds	r0, r2, #1
 800cfbe:	d01d      	beq.n	800cffc <__gethex+0x3ce>
 800cfc0:	3201      	adds	r2, #1
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	002b      	movs	r3, r5
 800cfc6:	3314      	adds	r3, #20
 800cfc8:	2e02      	cmp	r6, #2
 800cfca:	d13a      	bne.n	800d042 <__gethex+0x414>
 800cfcc:	9a02      	ldr	r2, [sp, #8]
 800cfce:	9901      	ldr	r1, [sp, #4]
 800cfd0:	6812      	ldr	r2, [r2, #0]
 800cfd2:	3a01      	subs	r2, #1
 800cfd4:	428a      	cmp	r2, r1
 800cfd6:	d10a      	bne.n	800cfee <__gethex+0x3c0>
 800cfd8:	114a      	asrs	r2, r1, #5
 800cfda:	211f      	movs	r1, #31
 800cfdc:	9801      	ldr	r0, [sp, #4]
 800cfde:	0092      	lsls	r2, r2, #2
 800cfe0:	4001      	ands	r1, r0
 800cfe2:	2001      	movs	r0, #1
 800cfe4:	0004      	movs	r4, r0
 800cfe6:	408c      	lsls	r4, r1
 800cfe8:	58d3      	ldr	r3, [r2, r3]
 800cfea:	4223      	tst	r3, r4
 800cfec:	d148      	bne.n	800d080 <__gethex+0x452>
 800cfee:	2320      	movs	r3, #32
 800cff0:	431e      	orrs	r6, r3
 800cff2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cff4:	601d      	str	r5, [r3, #0]
 800cff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cff8:	601f      	str	r7, [r3, #0]
 800cffa:	e6ac      	b.n	800cd56 <__gethex+0x128>
 800cffc:	4662      	mov	r2, ip
 800cffe:	c304      	stmia	r3!, {r2}
 800d000:	4299      	cmp	r1, r3
 800d002:	d8da      	bhi.n	800cfba <__gethex+0x38c>
 800d004:	68ab      	ldr	r3, [r5, #8]
 800d006:	429c      	cmp	r4, r3
 800d008:	db12      	blt.n	800d030 <__gethex+0x402>
 800d00a:	686b      	ldr	r3, [r5, #4]
 800d00c:	9805      	ldr	r0, [sp, #20]
 800d00e:	1c59      	adds	r1, r3, #1
 800d010:	f000 f925 	bl	800d25e <_Balloc>
 800d014:	0029      	movs	r1, r5
 800d016:	692b      	ldr	r3, [r5, #16]
 800d018:	9003      	str	r0, [sp, #12]
 800d01a:	1c9a      	adds	r2, r3, #2
 800d01c:	0092      	lsls	r2, r2, #2
 800d01e:	310c      	adds	r1, #12
 800d020:	300c      	adds	r0, #12
 800d022:	f7fd f8e5 	bl	800a1f0 <memcpy>
 800d026:	0029      	movs	r1, r5
 800d028:	9805      	ldr	r0, [sp, #20]
 800d02a:	f000 f950 	bl	800d2ce <_Bfree>
 800d02e:	9d03      	ldr	r5, [sp, #12]
 800d030:	692b      	ldr	r3, [r5, #16]
 800d032:	1c5a      	adds	r2, r3, #1
 800d034:	612a      	str	r2, [r5, #16]
 800d036:	2201      	movs	r2, #1
 800d038:	3304      	adds	r3, #4
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	18eb      	adds	r3, r5, r3
 800d03e:	605a      	str	r2, [r3, #4]
 800d040:	e7c0      	b.n	800cfc4 <__gethex+0x396>
 800d042:	692a      	ldr	r2, [r5, #16]
 800d044:	42a2      	cmp	r2, r4
 800d046:	dd0a      	ble.n	800d05e <__gethex+0x430>
 800d048:	2101      	movs	r1, #1
 800d04a:	0028      	movs	r0, r5
 800d04c:	f7ff fda6 	bl	800cb9c <rshift>
 800d050:	9b02      	ldr	r3, [sp, #8]
 800d052:	3701      	adds	r7, #1
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	2601      	movs	r6, #1
 800d058:	42bb      	cmp	r3, r7
 800d05a:	dac8      	bge.n	800cfee <__gethex+0x3c0>
 800d05c:	e6dc      	b.n	800ce18 <__gethex+0x1ea>
 800d05e:	241f      	movs	r4, #31
 800d060:	9a01      	ldr	r2, [sp, #4]
 800d062:	2601      	movs	r6, #1
 800d064:	4022      	ands	r2, r4
 800d066:	1e14      	subs	r4, r2, #0
 800d068:	d0c1      	beq.n	800cfee <__gethex+0x3c0>
 800d06a:	9a04      	ldr	r2, [sp, #16]
 800d06c:	189b      	adds	r3, r3, r2
 800d06e:	3b04      	subs	r3, #4
 800d070:	6818      	ldr	r0, [r3, #0]
 800d072:	f000 f9c1 	bl	800d3f8 <__hi0bits>
 800d076:	2120      	movs	r1, #32
 800d078:	1b0c      	subs	r4, r1, r4
 800d07a:	42a0      	cmp	r0, r4
 800d07c:	dbe4      	blt.n	800d048 <__gethex+0x41a>
 800d07e:	e7b6      	b.n	800cfee <__gethex+0x3c0>
 800d080:	0006      	movs	r6, r0
 800d082:	e7b4      	b.n	800cfee <__gethex+0x3c0>

0800d084 <L_shift>:
 800d084:	2308      	movs	r3, #8
 800d086:	b570      	push	{r4, r5, r6, lr}
 800d088:	2520      	movs	r5, #32
 800d08a:	1a9a      	subs	r2, r3, r2
 800d08c:	0092      	lsls	r2, r2, #2
 800d08e:	1aad      	subs	r5, r5, r2
 800d090:	6843      	ldr	r3, [r0, #4]
 800d092:	6806      	ldr	r6, [r0, #0]
 800d094:	001c      	movs	r4, r3
 800d096:	40ac      	lsls	r4, r5
 800d098:	40d3      	lsrs	r3, r2
 800d09a:	4334      	orrs	r4, r6
 800d09c:	6004      	str	r4, [r0, #0]
 800d09e:	6043      	str	r3, [r0, #4]
 800d0a0:	3004      	adds	r0, #4
 800d0a2:	4288      	cmp	r0, r1
 800d0a4:	d3f4      	bcc.n	800d090 <L_shift+0xc>
 800d0a6:	bd70      	pop	{r4, r5, r6, pc}

0800d0a8 <__match>:
 800d0a8:	b530      	push	{r4, r5, lr}
 800d0aa:	6803      	ldr	r3, [r0, #0]
 800d0ac:	780c      	ldrb	r4, [r1, #0]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	2c00      	cmp	r4, #0
 800d0b2:	d102      	bne.n	800d0ba <__match+0x12>
 800d0b4:	6003      	str	r3, [r0, #0]
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	bd30      	pop	{r4, r5, pc}
 800d0ba:	781a      	ldrb	r2, [r3, #0]
 800d0bc:	0015      	movs	r5, r2
 800d0be:	3d41      	subs	r5, #65	; 0x41
 800d0c0:	2d19      	cmp	r5, #25
 800d0c2:	d800      	bhi.n	800d0c6 <__match+0x1e>
 800d0c4:	3220      	adds	r2, #32
 800d0c6:	3101      	adds	r1, #1
 800d0c8:	42a2      	cmp	r2, r4
 800d0ca:	d0ef      	beq.n	800d0ac <__match+0x4>
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	e7f3      	b.n	800d0b8 <__match+0x10>

0800d0d0 <__hexnan>:
 800d0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0d2:	b08b      	sub	sp, #44	; 0x2c
 800d0d4:	9201      	str	r2, [sp, #4]
 800d0d6:	680a      	ldr	r2, [r1, #0]
 800d0d8:	9901      	ldr	r1, [sp, #4]
 800d0da:	1153      	asrs	r3, r2, #5
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	18cb      	adds	r3, r1, r3
 800d0e0:	9304      	str	r3, [sp, #16]
 800d0e2:	231f      	movs	r3, #31
 800d0e4:	401a      	ands	r2, r3
 800d0e6:	9008      	str	r0, [sp, #32]
 800d0e8:	9206      	str	r2, [sp, #24]
 800d0ea:	d002      	beq.n	800d0f2 <__hexnan+0x22>
 800d0ec:	9b04      	ldr	r3, [sp, #16]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	9304      	str	r3, [sp, #16]
 800d0f2:	9b04      	ldr	r3, [sp, #16]
 800d0f4:	2500      	movs	r5, #0
 800d0f6:	1f1e      	subs	r6, r3, #4
 800d0f8:	0037      	movs	r7, r6
 800d0fa:	0034      	movs	r4, r6
 800d0fc:	9b08      	ldr	r3, [sp, #32]
 800d0fe:	6035      	str	r5, [r6, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	9507      	str	r5, [sp, #28]
 800d104:	9305      	str	r3, [sp, #20]
 800d106:	9502      	str	r5, [sp, #8]
 800d108:	9b05      	ldr	r3, [sp, #20]
 800d10a:	3301      	adds	r3, #1
 800d10c:	9309      	str	r3, [sp, #36]	; 0x24
 800d10e:	9b05      	ldr	r3, [sp, #20]
 800d110:	785b      	ldrb	r3, [r3, #1]
 800d112:	9303      	str	r3, [sp, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d028      	beq.n	800d16a <__hexnan+0x9a>
 800d118:	9803      	ldr	r0, [sp, #12]
 800d11a:	f7ff fd73 	bl	800cc04 <__hexdig_fun>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d145      	bne.n	800d1ae <__hexnan+0xde>
 800d122:	9b03      	ldr	r3, [sp, #12]
 800d124:	2b20      	cmp	r3, #32
 800d126:	d819      	bhi.n	800d15c <__hexnan+0x8c>
 800d128:	9b02      	ldr	r3, [sp, #8]
 800d12a:	9a07      	ldr	r2, [sp, #28]
 800d12c:	4293      	cmp	r3, r2
 800d12e:	dd12      	ble.n	800d156 <__hexnan+0x86>
 800d130:	42bc      	cmp	r4, r7
 800d132:	d206      	bcs.n	800d142 <__hexnan+0x72>
 800d134:	2d07      	cmp	r5, #7
 800d136:	dc04      	bgt.n	800d142 <__hexnan+0x72>
 800d138:	002a      	movs	r2, r5
 800d13a:	0039      	movs	r1, r7
 800d13c:	0020      	movs	r0, r4
 800d13e:	f7ff ffa1 	bl	800d084 <L_shift>
 800d142:	9b01      	ldr	r3, [sp, #4]
 800d144:	2508      	movs	r5, #8
 800d146:	429c      	cmp	r4, r3
 800d148:	d905      	bls.n	800d156 <__hexnan+0x86>
 800d14a:	1f27      	subs	r7, r4, #4
 800d14c:	2500      	movs	r5, #0
 800d14e:	003c      	movs	r4, r7
 800d150:	9b02      	ldr	r3, [sp, #8]
 800d152:	603d      	str	r5, [r7, #0]
 800d154:	9307      	str	r3, [sp, #28]
 800d156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d158:	9305      	str	r3, [sp, #20]
 800d15a:	e7d5      	b.n	800d108 <__hexnan+0x38>
 800d15c:	9b03      	ldr	r3, [sp, #12]
 800d15e:	2b29      	cmp	r3, #41	; 0x29
 800d160:	d14a      	bne.n	800d1f8 <__hexnan+0x128>
 800d162:	9b05      	ldr	r3, [sp, #20]
 800d164:	9a08      	ldr	r2, [sp, #32]
 800d166:	3302      	adds	r3, #2
 800d168:	6013      	str	r3, [r2, #0]
 800d16a:	9b02      	ldr	r3, [sp, #8]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d043      	beq.n	800d1f8 <__hexnan+0x128>
 800d170:	42bc      	cmp	r4, r7
 800d172:	d206      	bcs.n	800d182 <__hexnan+0xb2>
 800d174:	2d07      	cmp	r5, #7
 800d176:	dc04      	bgt.n	800d182 <__hexnan+0xb2>
 800d178:	002a      	movs	r2, r5
 800d17a:	0039      	movs	r1, r7
 800d17c:	0020      	movs	r0, r4
 800d17e:	f7ff ff81 	bl	800d084 <L_shift>
 800d182:	9b01      	ldr	r3, [sp, #4]
 800d184:	429c      	cmp	r4, r3
 800d186:	d926      	bls.n	800d1d6 <__hexnan+0x106>
 800d188:	cc04      	ldmia	r4!, {r2}
 800d18a:	601a      	str	r2, [r3, #0]
 800d18c:	3304      	adds	r3, #4
 800d18e:	42a6      	cmp	r6, r4
 800d190:	d2fa      	bcs.n	800d188 <__hexnan+0xb8>
 800d192:	2200      	movs	r2, #0
 800d194:	c304      	stmia	r3!, {r2}
 800d196:	429e      	cmp	r6, r3
 800d198:	d2fc      	bcs.n	800d194 <__hexnan+0xc4>
 800d19a:	6833      	ldr	r3, [r6, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d104      	bne.n	800d1aa <__hexnan+0xda>
 800d1a0:	9b01      	ldr	r3, [sp, #4]
 800d1a2:	429e      	cmp	r6, r3
 800d1a4:	d126      	bne.n	800d1f4 <__hexnan+0x124>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	6033      	str	r3, [r6, #0]
 800d1aa:	2005      	movs	r0, #5
 800d1ac:	e025      	b.n	800d1fa <__hexnan+0x12a>
 800d1ae:	9b02      	ldr	r3, [sp, #8]
 800d1b0:	3501      	adds	r5, #1
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	9302      	str	r3, [sp, #8]
 800d1b6:	2d08      	cmp	r5, #8
 800d1b8:	dd06      	ble.n	800d1c8 <__hexnan+0xf8>
 800d1ba:	9b01      	ldr	r3, [sp, #4]
 800d1bc:	429c      	cmp	r4, r3
 800d1be:	d9ca      	bls.n	800d156 <__hexnan+0x86>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	2501      	movs	r5, #1
 800d1c4:	3c04      	subs	r4, #4
 800d1c6:	6023      	str	r3, [r4, #0]
 800d1c8:	220f      	movs	r2, #15
 800d1ca:	6823      	ldr	r3, [r4, #0]
 800d1cc:	4010      	ands	r0, r2
 800d1ce:	011b      	lsls	r3, r3, #4
 800d1d0:	4318      	orrs	r0, r3
 800d1d2:	6020      	str	r0, [r4, #0]
 800d1d4:	e7bf      	b.n	800d156 <__hexnan+0x86>
 800d1d6:	9b06      	ldr	r3, [sp, #24]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d0de      	beq.n	800d19a <__hexnan+0xca>
 800d1dc:	2120      	movs	r1, #32
 800d1de:	9a06      	ldr	r2, [sp, #24]
 800d1e0:	9b04      	ldr	r3, [sp, #16]
 800d1e2:	1a89      	subs	r1, r1, r2
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	4252      	negs	r2, r2
 800d1e8:	40ca      	lsrs	r2, r1
 800d1ea:	3b04      	subs	r3, #4
 800d1ec:	6819      	ldr	r1, [r3, #0]
 800d1ee:	400a      	ands	r2, r1
 800d1f0:	601a      	str	r2, [r3, #0]
 800d1f2:	e7d2      	b.n	800d19a <__hexnan+0xca>
 800d1f4:	3e04      	subs	r6, #4
 800d1f6:	e7d0      	b.n	800d19a <__hexnan+0xca>
 800d1f8:	2004      	movs	r0, #4
 800d1fa:	b00b      	add	sp, #44	; 0x2c
 800d1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1fe <__locale_ctype_ptr_l>:
 800d1fe:	30ec      	adds	r0, #236	; 0xec
 800d200:	6800      	ldr	r0, [r0, #0]
 800d202:	4770      	bx	lr

0800d204 <__localeconv_l>:
 800d204:	30f0      	adds	r0, #240	; 0xf0
 800d206:	4770      	bx	lr

0800d208 <_localeconv_r>:
 800d208:	4b03      	ldr	r3, [pc, #12]	; (800d218 <_localeconv_r+0x10>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6a18      	ldr	r0, [r3, #32]
 800d20e:	2800      	cmp	r0, #0
 800d210:	d100      	bne.n	800d214 <_localeconv_r+0xc>
 800d212:	4802      	ldr	r0, [pc, #8]	; (800d21c <_localeconv_r+0x14>)
 800d214:	30f0      	adds	r0, #240	; 0xf0
 800d216:	4770      	bx	lr
 800d218:	20000044 	.word	0x20000044
 800d21c:	200000a8 	.word	0x200000a8

0800d220 <__ascii_mbtowc>:
 800d220:	b082      	sub	sp, #8
 800d222:	2900      	cmp	r1, #0
 800d224:	d100      	bne.n	800d228 <__ascii_mbtowc+0x8>
 800d226:	a901      	add	r1, sp, #4
 800d228:	1e10      	subs	r0, r2, #0
 800d22a:	d006      	beq.n	800d23a <__ascii_mbtowc+0x1a>
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d006      	beq.n	800d23e <__ascii_mbtowc+0x1e>
 800d230:	7813      	ldrb	r3, [r2, #0]
 800d232:	600b      	str	r3, [r1, #0]
 800d234:	7810      	ldrb	r0, [r2, #0]
 800d236:	1e43      	subs	r3, r0, #1
 800d238:	4198      	sbcs	r0, r3
 800d23a:	b002      	add	sp, #8
 800d23c:	4770      	bx	lr
 800d23e:	2002      	movs	r0, #2
 800d240:	4240      	negs	r0, r0
 800d242:	e7fa      	b.n	800d23a <__ascii_mbtowc+0x1a>

0800d244 <memchr>:
 800d244:	b2c9      	uxtb	r1, r1
 800d246:	1882      	adds	r2, r0, r2
 800d248:	4290      	cmp	r0, r2
 800d24a:	d101      	bne.n	800d250 <memchr+0xc>
 800d24c:	2000      	movs	r0, #0
 800d24e:	4770      	bx	lr
 800d250:	7803      	ldrb	r3, [r0, #0]
 800d252:	428b      	cmp	r3, r1
 800d254:	d0fb      	beq.n	800d24e <memchr+0xa>
 800d256:	3001      	adds	r0, #1
 800d258:	e7f6      	b.n	800d248 <memchr+0x4>

0800d25a <__malloc_lock>:
 800d25a:	4770      	bx	lr

0800d25c <__malloc_unlock>:
 800d25c:	4770      	bx	lr

0800d25e <_Balloc>:
 800d25e:	b570      	push	{r4, r5, r6, lr}
 800d260:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d262:	0004      	movs	r4, r0
 800d264:	000d      	movs	r5, r1
 800d266:	2e00      	cmp	r6, #0
 800d268:	d107      	bne.n	800d27a <_Balloc+0x1c>
 800d26a:	2010      	movs	r0, #16
 800d26c:	f7fc ffb6 	bl	800a1dc <malloc>
 800d270:	6260      	str	r0, [r4, #36]	; 0x24
 800d272:	6046      	str	r6, [r0, #4]
 800d274:	6086      	str	r6, [r0, #8]
 800d276:	6006      	str	r6, [r0, #0]
 800d278:	60c6      	str	r6, [r0, #12]
 800d27a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d27c:	68f3      	ldr	r3, [r6, #12]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d013      	beq.n	800d2aa <_Balloc+0x4c>
 800d282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d284:	00aa      	lsls	r2, r5, #2
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	189b      	adds	r3, r3, r2
 800d28a:	6818      	ldr	r0, [r3, #0]
 800d28c:	2800      	cmp	r0, #0
 800d28e:	d118      	bne.n	800d2c2 <_Balloc+0x64>
 800d290:	2101      	movs	r1, #1
 800d292:	000e      	movs	r6, r1
 800d294:	40ae      	lsls	r6, r5
 800d296:	1d72      	adds	r2, r6, #5
 800d298:	0092      	lsls	r2, r2, #2
 800d29a:	0020      	movs	r0, r4
 800d29c:	f000 fbd5 	bl	800da4a <_calloc_r>
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	d00c      	beq.n	800d2be <_Balloc+0x60>
 800d2a4:	6045      	str	r5, [r0, #4]
 800d2a6:	6086      	str	r6, [r0, #8]
 800d2a8:	e00d      	b.n	800d2c6 <_Balloc+0x68>
 800d2aa:	2221      	movs	r2, #33	; 0x21
 800d2ac:	2104      	movs	r1, #4
 800d2ae:	0020      	movs	r0, r4
 800d2b0:	f000 fbcb 	bl	800da4a <_calloc_r>
 800d2b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2b6:	60f0      	str	r0, [r6, #12]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1e1      	bne.n	800d282 <_Balloc+0x24>
 800d2be:	2000      	movs	r0, #0
 800d2c0:	bd70      	pop	{r4, r5, r6, pc}
 800d2c2:	6802      	ldr	r2, [r0, #0]
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	6103      	str	r3, [r0, #16]
 800d2ca:	60c3      	str	r3, [r0, #12]
 800d2cc:	e7f8      	b.n	800d2c0 <_Balloc+0x62>

0800d2ce <_Bfree>:
 800d2ce:	b570      	push	{r4, r5, r6, lr}
 800d2d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d2d2:	0006      	movs	r6, r0
 800d2d4:	000d      	movs	r5, r1
 800d2d6:	2c00      	cmp	r4, #0
 800d2d8:	d107      	bne.n	800d2ea <_Bfree+0x1c>
 800d2da:	2010      	movs	r0, #16
 800d2dc:	f7fc ff7e 	bl	800a1dc <malloc>
 800d2e0:	6270      	str	r0, [r6, #36]	; 0x24
 800d2e2:	6044      	str	r4, [r0, #4]
 800d2e4:	6084      	str	r4, [r0, #8]
 800d2e6:	6004      	str	r4, [r0, #0]
 800d2e8:	60c4      	str	r4, [r0, #12]
 800d2ea:	2d00      	cmp	r5, #0
 800d2ec:	d007      	beq.n	800d2fe <_Bfree+0x30>
 800d2ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d2f0:	686a      	ldr	r2, [r5, #4]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	0092      	lsls	r2, r2, #2
 800d2f6:	189b      	adds	r3, r3, r2
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	602a      	str	r2, [r5, #0]
 800d2fc:	601d      	str	r5, [r3, #0]
 800d2fe:	bd70      	pop	{r4, r5, r6, pc}

0800d300 <__multadd>:
 800d300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d302:	001e      	movs	r6, r3
 800d304:	2314      	movs	r3, #20
 800d306:	469c      	mov	ip, r3
 800d308:	0007      	movs	r7, r0
 800d30a:	000c      	movs	r4, r1
 800d30c:	2000      	movs	r0, #0
 800d30e:	690d      	ldr	r5, [r1, #16]
 800d310:	448c      	add	ip, r1
 800d312:	4663      	mov	r3, ip
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	3001      	adds	r0, #1
 800d318:	b299      	uxth	r1, r3
 800d31a:	4663      	mov	r3, ip
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4351      	muls	r1, r2
 800d320:	0c1b      	lsrs	r3, r3, #16
 800d322:	4353      	muls	r3, r2
 800d324:	1989      	adds	r1, r1, r6
 800d326:	0c0e      	lsrs	r6, r1, #16
 800d328:	199b      	adds	r3, r3, r6
 800d32a:	b289      	uxth	r1, r1
 800d32c:	0c1e      	lsrs	r6, r3, #16
 800d32e:	041b      	lsls	r3, r3, #16
 800d330:	185b      	adds	r3, r3, r1
 800d332:	4661      	mov	r1, ip
 800d334:	c108      	stmia	r1!, {r3}
 800d336:	468c      	mov	ip, r1
 800d338:	4285      	cmp	r5, r0
 800d33a:	dcea      	bgt.n	800d312 <__multadd+0x12>
 800d33c:	2e00      	cmp	r6, #0
 800d33e:	d01b      	beq.n	800d378 <__multadd+0x78>
 800d340:	68a3      	ldr	r3, [r4, #8]
 800d342:	42ab      	cmp	r3, r5
 800d344:	dc12      	bgt.n	800d36c <__multadd+0x6c>
 800d346:	6863      	ldr	r3, [r4, #4]
 800d348:	0038      	movs	r0, r7
 800d34a:	1c59      	adds	r1, r3, #1
 800d34c:	f7ff ff87 	bl	800d25e <_Balloc>
 800d350:	0021      	movs	r1, r4
 800d352:	6923      	ldr	r3, [r4, #16]
 800d354:	9001      	str	r0, [sp, #4]
 800d356:	1c9a      	adds	r2, r3, #2
 800d358:	0092      	lsls	r2, r2, #2
 800d35a:	310c      	adds	r1, #12
 800d35c:	300c      	adds	r0, #12
 800d35e:	f7fc ff47 	bl	800a1f0 <memcpy>
 800d362:	0021      	movs	r1, r4
 800d364:	0038      	movs	r0, r7
 800d366:	f7ff ffb2 	bl	800d2ce <_Bfree>
 800d36a:	9c01      	ldr	r4, [sp, #4]
 800d36c:	1d2b      	adds	r3, r5, #4
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	18e3      	adds	r3, r4, r3
 800d372:	3501      	adds	r5, #1
 800d374:	605e      	str	r6, [r3, #4]
 800d376:	6125      	str	r5, [r4, #16]
 800d378:	0020      	movs	r0, r4
 800d37a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800d37c <__s2b>:
 800d37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d37e:	0006      	movs	r6, r0
 800d380:	0018      	movs	r0, r3
 800d382:	000c      	movs	r4, r1
 800d384:	3008      	adds	r0, #8
 800d386:	2109      	movs	r1, #9
 800d388:	9301      	str	r3, [sp, #4]
 800d38a:	0015      	movs	r5, r2
 800d38c:	f7f2 ff58 	bl	8000240 <__divsi3>
 800d390:	2301      	movs	r3, #1
 800d392:	2100      	movs	r1, #0
 800d394:	4283      	cmp	r3, r0
 800d396:	db1f      	blt.n	800d3d8 <__s2b+0x5c>
 800d398:	0030      	movs	r0, r6
 800d39a:	f7ff ff60 	bl	800d25e <_Balloc>
 800d39e:	9b08      	ldr	r3, [sp, #32]
 800d3a0:	6143      	str	r3, [r0, #20]
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	6103      	str	r3, [r0, #16]
 800d3a6:	2d09      	cmp	r5, #9
 800d3a8:	dd19      	ble.n	800d3de <__s2b+0x62>
 800d3aa:	0023      	movs	r3, r4
 800d3ac:	3309      	adds	r3, #9
 800d3ae:	001f      	movs	r7, r3
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	1964      	adds	r4, r4, r5
 800d3b4:	783b      	ldrb	r3, [r7, #0]
 800d3b6:	0001      	movs	r1, r0
 800d3b8:	3b30      	subs	r3, #48	; 0x30
 800d3ba:	220a      	movs	r2, #10
 800d3bc:	0030      	movs	r0, r6
 800d3be:	3701      	adds	r7, #1
 800d3c0:	f7ff ff9e 	bl	800d300 <__multadd>
 800d3c4:	42a7      	cmp	r7, r4
 800d3c6:	d1f5      	bne.n	800d3b4 <__s2b+0x38>
 800d3c8:	9b00      	ldr	r3, [sp, #0]
 800d3ca:	195c      	adds	r4, r3, r5
 800d3cc:	3c08      	subs	r4, #8
 800d3ce:	002f      	movs	r7, r5
 800d3d0:	9b01      	ldr	r3, [sp, #4]
 800d3d2:	429f      	cmp	r7, r3
 800d3d4:	db06      	blt.n	800d3e4 <__s2b+0x68>
 800d3d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	3101      	adds	r1, #1
 800d3dc:	e7da      	b.n	800d394 <__s2b+0x18>
 800d3de:	340a      	adds	r4, #10
 800d3e0:	2509      	movs	r5, #9
 800d3e2:	e7f4      	b.n	800d3ce <__s2b+0x52>
 800d3e4:	1b63      	subs	r3, r4, r5
 800d3e6:	5ddb      	ldrb	r3, [r3, r7]
 800d3e8:	0001      	movs	r1, r0
 800d3ea:	3b30      	subs	r3, #48	; 0x30
 800d3ec:	220a      	movs	r2, #10
 800d3ee:	0030      	movs	r0, r6
 800d3f0:	f7ff ff86 	bl	800d300 <__multadd>
 800d3f4:	3701      	adds	r7, #1
 800d3f6:	e7eb      	b.n	800d3d0 <__s2b+0x54>

0800d3f8 <__hi0bits>:
 800d3f8:	0003      	movs	r3, r0
 800d3fa:	0c02      	lsrs	r2, r0, #16
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	4282      	cmp	r2, r0
 800d400:	d101      	bne.n	800d406 <__hi0bits+0xe>
 800d402:	041b      	lsls	r3, r3, #16
 800d404:	3010      	adds	r0, #16
 800d406:	0e1a      	lsrs	r2, r3, #24
 800d408:	d101      	bne.n	800d40e <__hi0bits+0x16>
 800d40a:	3008      	adds	r0, #8
 800d40c:	021b      	lsls	r3, r3, #8
 800d40e:	0f1a      	lsrs	r2, r3, #28
 800d410:	d101      	bne.n	800d416 <__hi0bits+0x1e>
 800d412:	3004      	adds	r0, #4
 800d414:	011b      	lsls	r3, r3, #4
 800d416:	0f9a      	lsrs	r2, r3, #30
 800d418:	d101      	bne.n	800d41e <__hi0bits+0x26>
 800d41a:	3002      	adds	r0, #2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	2b00      	cmp	r3, #0
 800d420:	db03      	blt.n	800d42a <__hi0bits+0x32>
 800d422:	3001      	adds	r0, #1
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	d400      	bmi.n	800d42a <__hi0bits+0x32>
 800d428:	2020      	movs	r0, #32
 800d42a:	4770      	bx	lr

0800d42c <__lo0bits>:
 800d42c:	2207      	movs	r2, #7
 800d42e:	6803      	ldr	r3, [r0, #0]
 800d430:	b510      	push	{r4, lr}
 800d432:	0001      	movs	r1, r0
 800d434:	401a      	ands	r2, r3
 800d436:	d00d      	beq.n	800d454 <__lo0bits+0x28>
 800d438:	2401      	movs	r4, #1
 800d43a:	2000      	movs	r0, #0
 800d43c:	4223      	tst	r3, r4
 800d43e:	d105      	bne.n	800d44c <__lo0bits+0x20>
 800d440:	3002      	adds	r0, #2
 800d442:	4203      	tst	r3, r0
 800d444:	d003      	beq.n	800d44e <__lo0bits+0x22>
 800d446:	40e3      	lsrs	r3, r4
 800d448:	0020      	movs	r0, r4
 800d44a:	600b      	str	r3, [r1, #0]
 800d44c:	bd10      	pop	{r4, pc}
 800d44e:	089b      	lsrs	r3, r3, #2
 800d450:	600b      	str	r3, [r1, #0]
 800d452:	e7fb      	b.n	800d44c <__lo0bits+0x20>
 800d454:	b29c      	uxth	r4, r3
 800d456:	0010      	movs	r0, r2
 800d458:	2c00      	cmp	r4, #0
 800d45a:	d101      	bne.n	800d460 <__lo0bits+0x34>
 800d45c:	2010      	movs	r0, #16
 800d45e:	0c1b      	lsrs	r3, r3, #16
 800d460:	b2da      	uxtb	r2, r3
 800d462:	2a00      	cmp	r2, #0
 800d464:	d101      	bne.n	800d46a <__lo0bits+0x3e>
 800d466:	3008      	adds	r0, #8
 800d468:	0a1b      	lsrs	r3, r3, #8
 800d46a:	071a      	lsls	r2, r3, #28
 800d46c:	d101      	bne.n	800d472 <__lo0bits+0x46>
 800d46e:	3004      	adds	r0, #4
 800d470:	091b      	lsrs	r3, r3, #4
 800d472:	079a      	lsls	r2, r3, #30
 800d474:	d101      	bne.n	800d47a <__lo0bits+0x4e>
 800d476:	3002      	adds	r0, #2
 800d478:	089b      	lsrs	r3, r3, #2
 800d47a:	07da      	lsls	r2, r3, #31
 800d47c:	d4e8      	bmi.n	800d450 <__lo0bits+0x24>
 800d47e:	085b      	lsrs	r3, r3, #1
 800d480:	d001      	beq.n	800d486 <__lo0bits+0x5a>
 800d482:	3001      	adds	r0, #1
 800d484:	e7e4      	b.n	800d450 <__lo0bits+0x24>
 800d486:	2020      	movs	r0, #32
 800d488:	e7e0      	b.n	800d44c <__lo0bits+0x20>

0800d48a <__i2b>:
 800d48a:	b510      	push	{r4, lr}
 800d48c:	000c      	movs	r4, r1
 800d48e:	2101      	movs	r1, #1
 800d490:	f7ff fee5 	bl	800d25e <_Balloc>
 800d494:	2301      	movs	r3, #1
 800d496:	6144      	str	r4, [r0, #20]
 800d498:	6103      	str	r3, [r0, #16]
 800d49a:	bd10      	pop	{r4, pc}

0800d49c <__multiply>:
 800d49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d49e:	690b      	ldr	r3, [r1, #16]
 800d4a0:	0014      	movs	r4, r2
 800d4a2:	6912      	ldr	r2, [r2, #16]
 800d4a4:	b089      	sub	sp, #36	; 0x24
 800d4a6:	000d      	movs	r5, r1
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	da01      	bge.n	800d4b0 <__multiply+0x14>
 800d4ac:	0025      	movs	r5, r4
 800d4ae:	000c      	movs	r4, r1
 800d4b0:	692f      	ldr	r7, [r5, #16]
 800d4b2:	6926      	ldr	r6, [r4, #16]
 800d4b4:	6869      	ldr	r1, [r5, #4]
 800d4b6:	19bb      	adds	r3, r7, r6
 800d4b8:	9302      	str	r3, [sp, #8]
 800d4ba:	68ab      	ldr	r3, [r5, #8]
 800d4bc:	19ba      	adds	r2, r7, r6
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	da00      	bge.n	800d4c4 <__multiply+0x28>
 800d4c2:	3101      	adds	r1, #1
 800d4c4:	f7ff fecb 	bl	800d25e <_Balloc>
 800d4c8:	0002      	movs	r2, r0
 800d4ca:	19bb      	adds	r3, r7, r6
 800d4cc:	3214      	adds	r2, #20
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	18d3      	adds	r3, r2, r3
 800d4d2:	469c      	mov	ip, r3
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	0013      	movs	r3, r2
 800d4d8:	9004      	str	r0, [sp, #16]
 800d4da:	4563      	cmp	r3, ip
 800d4dc:	d31d      	bcc.n	800d51a <__multiply+0x7e>
 800d4de:	3514      	adds	r5, #20
 800d4e0:	00bf      	lsls	r7, r7, #2
 800d4e2:	19eb      	adds	r3, r5, r7
 800d4e4:	3414      	adds	r4, #20
 800d4e6:	00b6      	lsls	r6, r6, #2
 800d4e8:	9305      	str	r3, [sp, #20]
 800d4ea:	19a3      	adds	r3, r4, r6
 800d4ec:	9503      	str	r5, [sp, #12]
 800d4ee:	9401      	str	r4, [sp, #4]
 800d4f0:	9307      	str	r3, [sp, #28]
 800d4f2:	9b07      	ldr	r3, [sp, #28]
 800d4f4:	9901      	ldr	r1, [sp, #4]
 800d4f6:	4299      	cmp	r1, r3
 800d4f8:	d311      	bcc.n	800d51e <__multiply+0x82>
 800d4fa:	9b02      	ldr	r3, [sp, #8]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	dd06      	ble.n	800d50e <__multiply+0x72>
 800d500:	2304      	movs	r3, #4
 800d502:	425b      	negs	r3, r3
 800d504:	449c      	add	ip, r3
 800d506:	4663      	mov	r3, ip
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d051      	beq.n	800d5b2 <__multiply+0x116>
 800d50e:	9b04      	ldr	r3, [sp, #16]
 800d510:	9a02      	ldr	r2, [sp, #8]
 800d512:	0018      	movs	r0, r3
 800d514:	611a      	str	r2, [r3, #16]
 800d516:	b009      	add	sp, #36	; 0x24
 800d518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d51a:	c302      	stmia	r3!, {r1}
 800d51c:	e7dd      	b.n	800d4da <__multiply+0x3e>
 800d51e:	9b01      	ldr	r3, [sp, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	b298      	uxth	r0, r3
 800d524:	2800      	cmp	r0, #0
 800d526:	d01c      	beq.n	800d562 <__multiply+0xc6>
 800d528:	0015      	movs	r5, r2
 800d52a:	2600      	movs	r6, #0
 800d52c:	9f03      	ldr	r7, [sp, #12]
 800d52e:	cf02      	ldmia	r7!, {r1}
 800d530:	682c      	ldr	r4, [r5, #0]
 800d532:	b28b      	uxth	r3, r1
 800d534:	4343      	muls	r3, r0
 800d536:	0c09      	lsrs	r1, r1, #16
 800d538:	4341      	muls	r1, r0
 800d53a:	b2a4      	uxth	r4, r4
 800d53c:	191b      	adds	r3, r3, r4
 800d53e:	199b      	adds	r3, r3, r6
 800d540:	000e      	movs	r6, r1
 800d542:	6829      	ldr	r1, [r5, #0]
 800d544:	9506      	str	r5, [sp, #24]
 800d546:	0c09      	lsrs	r1, r1, #16
 800d548:	1871      	adds	r1, r6, r1
 800d54a:	0c1e      	lsrs	r6, r3, #16
 800d54c:	1989      	adds	r1, r1, r6
 800d54e:	0c0e      	lsrs	r6, r1, #16
 800d550:	b29b      	uxth	r3, r3
 800d552:	0409      	lsls	r1, r1, #16
 800d554:	430b      	orrs	r3, r1
 800d556:	c508      	stmia	r5!, {r3}
 800d558:	9b05      	ldr	r3, [sp, #20]
 800d55a:	42bb      	cmp	r3, r7
 800d55c:	d8e7      	bhi.n	800d52e <__multiply+0x92>
 800d55e:	9b06      	ldr	r3, [sp, #24]
 800d560:	605e      	str	r6, [r3, #4]
 800d562:	9b01      	ldr	r3, [sp, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	0c1d      	lsrs	r5, r3, #16
 800d568:	d01e      	beq.n	800d5a8 <__multiply+0x10c>
 800d56a:	0010      	movs	r0, r2
 800d56c:	2700      	movs	r7, #0
 800d56e:	6813      	ldr	r3, [r2, #0]
 800d570:	9e03      	ldr	r6, [sp, #12]
 800d572:	6831      	ldr	r1, [r6, #0]
 800d574:	6804      	ldr	r4, [r0, #0]
 800d576:	b289      	uxth	r1, r1
 800d578:	4369      	muls	r1, r5
 800d57a:	0c24      	lsrs	r4, r4, #16
 800d57c:	1909      	adds	r1, r1, r4
 800d57e:	19c9      	adds	r1, r1, r7
 800d580:	040f      	lsls	r7, r1, #16
 800d582:	b29b      	uxth	r3, r3
 800d584:	433b      	orrs	r3, r7
 800d586:	6003      	str	r3, [r0, #0]
 800d588:	ce80      	ldmia	r6!, {r7}
 800d58a:	6843      	ldr	r3, [r0, #4]
 800d58c:	0c3f      	lsrs	r7, r7, #16
 800d58e:	436f      	muls	r7, r5
 800d590:	b29b      	uxth	r3, r3
 800d592:	18fb      	adds	r3, r7, r3
 800d594:	0c09      	lsrs	r1, r1, #16
 800d596:	185b      	adds	r3, r3, r1
 800d598:	9905      	ldr	r1, [sp, #20]
 800d59a:	9006      	str	r0, [sp, #24]
 800d59c:	0c1f      	lsrs	r7, r3, #16
 800d59e:	3004      	adds	r0, #4
 800d5a0:	42b1      	cmp	r1, r6
 800d5a2:	d8e6      	bhi.n	800d572 <__multiply+0xd6>
 800d5a4:	9906      	ldr	r1, [sp, #24]
 800d5a6:	604b      	str	r3, [r1, #4]
 800d5a8:	9b01      	ldr	r3, [sp, #4]
 800d5aa:	3204      	adds	r2, #4
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	9301      	str	r3, [sp, #4]
 800d5b0:	e79f      	b.n	800d4f2 <__multiply+0x56>
 800d5b2:	9b02      	ldr	r3, [sp, #8]
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	9302      	str	r3, [sp, #8]
 800d5b8:	e79f      	b.n	800d4fa <__multiply+0x5e>
	...

0800d5bc <__pow5mult>:
 800d5bc:	2303      	movs	r3, #3
 800d5be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5c0:	4013      	ands	r3, r2
 800d5c2:	0005      	movs	r5, r0
 800d5c4:	000e      	movs	r6, r1
 800d5c6:	0014      	movs	r4, r2
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d008      	beq.n	800d5de <__pow5mult+0x22>
 800d5cc:	4922      	ldr	r1, [pc, #136]	; (800d658 <__pow5mult+0x9c>)
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	009a      	lsls	r2, r3, #2
 800d5d2:	5852      	ldr	r2, [r2, r1]
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	0031      	movs	r1, r6
 800d5d8:	f7ff fe92 	bl	800d300 <__multadd>
 800d5dc:	0006      	movs	r6, r0
 800d5de:	10a3      	asrs	r3, r4, #2
 800d5e0:	9301      	str	r3, [sp, #4]
 800d5e2:	d036      	beq.n	800d652 <__pow5mult+0x96>
 800d5e4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800d5e6:	2c00      	cmp	r4, #0
 800d5e8:	d107      	bne.n	800d5fa <__pow5mult+0x3e>
 800d5ea:	2010      	movs	r0, #16
 800d5ec:	f7fc fdf6 	bl	800a1dc <malloc>
 800d5f0:	6268      	str	r0, [r5, #36]	; 0x24
 800d5f2:	6044      	str	r4, [r0, #4]
 800d5f4:	6084      	str	r4, [r0, #8]
 800d5f6:	6004      	str	r4, [r0, #0]
 800d5f8:	60c4      	str	r4, [r0, #12]
 800d5fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800d5fc:	68bc      	ldr	r4, [r7, #8]
 800d5fe:	2c00      	cmp	r4, #0
 800d600:	d107      	bne.n	800d612 <__pow5mult+0x56>
 800d602:	4916      	ldr	r1, [pc, #88]	; (800d65c <__pow5mult+0xa0>)
 800d604:	0028      	movs	r0, r5
 800d606:	f7ff ff40 	bl	800d48a <__i2b>
 800d60a:	2300      	movs	r3, #0
 800d60c:	0004      	movs	r4, r0
 800d60e:	60b8      	str	r0, [r7, #8]
 800d610:	6003      	str	r3, [r0, #0]
 800d612:	2201      	movs	r2, #1
 800d614:	9b01      	ldr	r3, [sp, #4]
 800d616:	4213      	tst	r3, r2
 800d618:	d00a      	beq.n	800d630 <__pow5mult+0x74>
 800d61a:	0031      	movs	r1, r6
 800d61c:	0022      	movs	r2, r4
 800d61e:	0028      	movs	r0, r5
 800d620:	f7ff ff3c 	bl	800d49c <__multiply>
 800d624:	0007      	movs	r7, r0
 800d626:	0031      	movs	r1, r6
 800d628:	0028      	movs	r0, r5
 800d62a:	f7ff fe50 	bl	800d2ce <_Bfree>
 800d62e:	003e      	movs	r6, r7
 800d630:	9b01      	ldr	r3, [sp, #4]
 800d632:	105b      	asrs	r3, r3, #1
 800d634:	9301      	str	r3, [sp, #4]
 800d636:	d00c      	beq.n	800d652 <__pow5mult+0x96>
 800d638:	6820      	ldr	r0, [r4, #0]
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d107      	bne.n	800d64e <__pow5mult+0x92>
 800d63e:	0022      	movs	r2, r4
 800d640:	0021      	movs	r1, r4
 800d642:	0028      	movs	r0, r5
 800d644:	f7ff ff2a 	bl	800d49c <__multiply>
 800d648:	2300      	movs	r3, #0
 800d64a:	6020      	str	r0, [r4, #0]
 800d64c:	6003      	str	r3, [r0, #0]
 800d64e:	0004      	movs	r4, r0
 800d650:	e7df      	b.n	800d612 <__pow5mult+0x56>
 800d652:	0030      	movs	r0, r6
 800d654:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d656:	46c0      	nop			; (mov r8, r8)
 800d658:	0800f380 	.word	0x0800f380
 800d65c:	00000271 	.word	0x00000271

0800d660 <__lshift>:
 800d660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d662:	000d      	movs	r5, r1
 800d664:	0017      	movs	r7, r2
 800d666:	692b      	ldr	r3, [r5, #16]
 800d668:	1154      	asrs	r4, r2, #5
 800d66a:	b085      	sub	sp, #20
 800d66c:	18e3      	adds	r3, r4, r3
 800d66e:	9301      	str	r3, [sp, #4]
 800d670:	3301      	adds	r3, #1
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	6849      	ldr	r1, [r1, #4]
 800d676:	68ab      	ldr	r3, [r5, #8]
 800d678:	9002      	str	r0, [sp, #8]
 800d67a:	9a00      	ldr	r2, [sp, #0]
 800d67c:	4293      	cmp	r3, r2
 800d67e:	db35      	blt.n	800d6ec <__lshift+0x8c>
 800d680:	9802      	ldr	r0, [sp, #8]
 800d682:	f7ff fdec 	bl	800d25e <_Balloc>
 800d686:	2300      	movs	r3, #0
 800d688:	0002      	movs	r2, r0
 800d68a:	0006      	movs	r6, r0
 800d68c:	0019      	movs	r1, r3
 800d68e:	3214      	adds	r2, #20
 800d690:	42a3      	cmp	r3, r4
 800d692:	db2e      	blt.n	800d6f2 <__lshift+0x92>
 800d694:	43e3      	mvns	r3, r4
 800d696:	17db      	asrs	r3, r3, #31
 800d698:	401c      	ands	r4, r3
 800d69a:	002b      	movs	r3, r5
 800d69c:	00a4      	lsls	r4, r4, #2
 800d69e:	1914      	adds	r4, r2, r4
 800d6a0:	692a      	ldr	r2, [r5, #16]
 800d6a2:	3314      	adds	r3, #20
 800d6a4:	0092      	lsls	r2, r2, #2
 800d6a6:	189a      	adds	r2, r3, r2
 800d6a8:	4694      	mov	ip, r2
 800d6aa:	221f      	movs	r2, #31
 800d6ac:	4017      	ands	r7, r2
 800d6ae:	d024      	beq.n	800d6fa <__lshift+0x9a>
 800d6b0:	3201      	adds	r2, #1
 800d6b2:	1bd2      	subs	r2, r2, r7
 800d6b4:	9203      	str	r2, [sp, #12]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	6819      	ldr	r1, [r3, #0]
 800d6ba:	0020      	movs	r0, r4
 800d6bc:	40b9      	lsls	r1, r7
 800d6be:	430a      	orrs	r2, r1
 800d6c0:	c404      	stmia	r4!, {r2}
 800d6c2:	cb04      	ldmia	r3!, {r2}
 800d6c4:	9903      	ldr	r1, [sp, #12]
 800d6c6:	40ca      	lsrs	r2, r1
 800d6c8:	459c      	cmp	ip, r3
 800d6ca:	d8f5      	bhi.n	800d6b8 <__lshift+0x58>
 800d6cc:	6042      	str	r2, [r0, #4]
 800d6ce:	2a00      	cmp	r2, #0
 800d6d0:	d002      	beq.n	800d6d8 <__lshift+0x78>
 800d6d2:	9b01      	ldr	r3, [sp, #4]
 800d6d4:	3302      	adds	r3, #2
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	9b00      	ldr	r3, [sp, #0]
 800d6da:	9802      	ldr	r0, [sp, #8]
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	6133      	str	r3, [r6, #16]
 800d6e0:	0029      	movs	r1, r5
 800d6e2:	f7ff fdf4 	bl	800d2ce <_Bfree>
 800d6e6:	0030      	movs	r0, r6
 800d6e8:	b005      	add	sp, #20
 800d6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ec:	3101      	adds	r1, #1
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	e7c3      	b.n	800d67a <__lshift+0x1a>
 800d6f2:	0098      	lsls	r0, r3, #2
 800d6f4:	5011      	str	r1, [r2, r0]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	e7ca      	b.n	800d690 <__lshift+0x30>
 800d6fa:	cb04      	ldmia	r3!, {r2}
 800d6fc:	c404      	stmia	r4!, {r2}
 800d6fe:	459c      	cmp	ip, r3
 800d700:	d8fb      	bhi.n	800d6fa <__lshift+0x9a>
 800d702:	e7e9      	b.n	800d6d8 <__lshift+0x78>

0800d704 <__mcmp>:
 800d704:	690a      	ldr	r2, [r1, #16]
 800d706:	6903      	ldr	r3, [r0, #16]
 800d708:	b530      	push	{r4, r5, lr}
 800d70a:	1a9b      	subs	r3, r3, r2
 800d70c:	d10d      	bne.n	800d72a <__mcmp+0x26>
 800d70e:	0092      	lsls	r2, r2, #2
 800d710:	3014      	adds	r0, #20
 800d712:	3114      	adds	r1, #20
 800d714:	1884      	adds	r4, r0, r2
 800d716:	1889      	adds	r1, r1, r2
 800d718:	3c04      	subs	r4, #4
 800d71a:	3904      	subs	r1, #4
 800d71c:	6825      	ldr	r5, [r4, #0]
 800d71e:	680a      	ldr	r2, [r1, #0]
 800d720:	4295      	cmp	r5, r2
 800d722:	d004      	beq.n	800d72e <__mcmp+0x2a>
 800d724:	2301      	movs	r3, #1
 800d726:	4295      	cmp	r5, r2
 800d728:	d304      	bcc.n	800d734 <__mcmp+0x30>
 800d72a:	0018      	movs	r0, r3
 800d72c:	bd30      	pop	{r4, r5, pc}
 800d72e:	42a0      	cmp	r0, r4
 800d730:	d3f2      	bcc.n	800d718 <__mcmp+0x14>
 800d732:	e7fa      	b.n	800d72a <__mcmp+0x26>
 800d734:	425b      	negs	r3, r3
 800d736:	e7f8      	b.n	800d72a <__mcmp+0x26>

0800d738 <__mdiff>:
 800d738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d73a:	000d      	movs	r5, r1
 800d73c:	b085      	sub	sp, #20
 800d73e:	0007      	movs	r7, r0
 800d740:	0011      	movs	r1, r2
 800d742:	0028      	movs	r0, r5
 800d744:	0014      	movs	r4, r2
 800d746:	f7ff ffdd 	bl	800d704 <__mcmp>
 800d74a:	1e06      	subs	r6, r0, #0
 800d74c:	d108      	bne.n	800d760 <__mdiff+0x28>
 800d74e:	0001      	movs	r1, r0
 800d750:	0038      	movs	r0, r7
 800d752:	f7ff fd84 	bl	800d25e <_Balloc>
 800d756:	2301      	movs	r3, #1
 800d758:	6146      	str	r6, [r0, #20]
 800d75a:	6103      	str	r3, [r0, #16]
 800d75c:	b005      	add	sp, #20
 800d75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d760:	2301      	movs	r3, #1
 800d762:	9301      	str	r3, [sp, #4]
 800d764:	2800      	cmp	r0, #0
 800d766:	db04      	blt.n	800d772 <__mdiff+0x3a>
 800d768:	0023      	movs	r3, r4
 800d76a:	002c      	movs	r4, r5
 800d76c:	001d      	movs	r5, r3
 800d76e:	2300      	movs	r3, #0
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	6861      	ldr	r1, [r4, #4]
 800d774:	0038      	movs	r0, r7
 800d776:	f7ff fd72 	bl	800d25e <_Balloc>
 800d77a:	002f      	movs	r7, r5
 800d77c:	2200      	movs	r2, #0
 800d77e:	9b01      	ldr	r3, [sp, #4]
 800d780:	6926      	ldr	r6, [r4, #16]
 800d782:	60c3      	str	r3, [r0, #12]
 800d784:	3414      	adds	r4, #20
 800d786:	00b3      	lsls	r3, r6, #2
 800d788:	18e3      	adds	r3, r4, r3
 800d78a:	9302      	str	r3, [sp, #8]
 800d78c:	692b      	ldr	r3, [r5, #16]
 800d78e:	3714      	adds	r7, #20
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	18fb      	adds	r3, r7, r3
 800d794:	9303      	str	r3, [sp, #12]
 800d796:	0003      	movs	r3, r0
 800d798:	4694      	mov	ip, r2
 800d79a:	3314      	adds	r3, #20
 800d79c:	cc20      	ldmia	r4!, {r5}
 800d79e:	cf04      	ldmia	r7!, {r2}
 800d7a0:	9201      	str	r2, [sp, #4]
 800d7a2:	b2aa      	uxth	r2, r5
 800d7a4:	4494      	add	ip, r2
 800d7a6:	466a      	mov	r2, sp
 800d7a8:	4661      	mov	r1, ip
 800d7aa:	8892      	ldrh	r2, [r2, #4]
 800d7ac:	0c2d      	lsrs	r5, r5, #16
 800d7ae:	1a8a      	subs	r2, r1, r2
 800d7b0:	9901      	ldr	r1, [sp, #4]
 800d7b2:	0c09      	lsrs	r1, r1, #16
 800d7b4:	1a69      	subs	r1, r5, r1
 800d7b6:	1415      	asrs	r5, r2, #16
 800d7b8:	1949      	adds	r1, r1, r5
 800d7ba:	140d      	asrs	r5, r1, #16
 800d7bc:	b292      	uxth	r2, r2
 800d7be:	0409      	lsls	r1, r1, #16
 800d7c0:	430a      	orrs	r2, r1
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	9a03      	ldr	r2, [sp, #12]
 800d7c6:	46ac      	mov	ip, r5
 800d7c8:	3304      	adds	r3, #4
 800d7ca:	42ba      	cmp	r2, r7
 800d7cc:	d8e6      	bhi.n	800d79c <__mdiff+0x64>
 800d7ce:	9902      	ldr	r1, [sp, #8]
 800d7d0:	001a      	movs	r2, r3
 800d7d2:	428c      	cmp	r4, r1
 800d7d4:	d305      	bcc.n	800d7e2 <__mdiff+0xaa>
 800d7d6:	3a04      	subs	r2, #4
 800d7d8:	6813      	ldr	r3, [r2, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00e      	beq.n	800d7fc <__mdiff+0xc4>
 800d7de:	6106      	str	r6, [r0, #16]
 800d7e0:	e7bc      	b.n	800d75c <__mdiff+0x24>
 800d7e2:	cc04      	ldmia	r4!, {r2}
 800d7e4:	b291      	uxth	r1, r2
 800d7e6:	4461      	add	r1, ip
 800d7e8:	140d      	asrs	r5, r1, #16
 800d7ea:	0c12      	lsrs	r2, r2, #16
 800d7ec:	1952      	adds	r2, r2, r5
 800d7ee:	1415      	asrs	r5, r2, #16
 800d7f0:	b289      	uxth	r1, r1
 800d7f2:	0412      	lsls	r2, r2, #16
 800d7f4:	430a      	orrs	r2, r1
 800d7f6:	46ac      	mov	ip, r5
 800d7f8:	c304      	stmia	r3!, {r2}
 800d7fa:	e7e8      	b.n	800d7ce <__mdiff+0x96>
 800d7fc:	3e01      	subs	r6, #1
 800d7fe:	e7ea      	b.n	800d7d6 <__mdiff+0x9e>

0800d800 <__ulp>:
 800d800:	000b      	movs	r3, r1
 800d802:	4910      	ldr	r1, [pc, #64]	; (800d844 <__ulp+0x44>)
 800d804:	b510      	push	{r4, lr}
 800d806:	4019      	ands	r1, r3
 800d808:	4b0f      	ldr	r3, [pc, #60]	; (800d848 <__ulp+0x48>)
 800d80a:	18c9      	adds	r1, r1, r3
 800d80c:	2900      	cmp	r1, #0
 800d80e:	dd04      	ble.n	800d81a <__ulp+0x1a>
 800d810:	2200      	movs	r2, #0
 800d812:	000b      	movs	r3, r1
 800d814:	0010      	movs	r0, r2
 800d816:	0019      	movs	r1, r3
 800d818:	bd10      	pop	{r4, pc}
 800d81a:	4249      	negs	r1, r1
 800d81c:	1509      	asrs	r1, r1, #20
 800d81e:	2200      	movs	r2, #0
 800d820:	2300      	movs	r3, #0
 800d822:	2913      	cmp	r1, #19
 800d824:	dc04      	bgt.n	800d830 <__ulp+0x30>
 800d826:	2080      	movs	r0, #128	; 0x80
 800d828:	0300      	lsls	r0, r0, #12
 800d82a:	4108      	asrs	r0, r1
 800d82c:	0003      	movs	r3, r0
 800d82e:	e7f1      	b.n	800d814 <__ulp+0x14>
 800d830:	3914      	subs	r1, #20
 800d832:	2001      	movs	r0, #1
 800d834:	291e      	cmp	r1, #30
 800d836:	dc02      	bgt.n	800d83e <__ulp+0x3e>
 800d838:	241f      	movs	r4, #31
 800d83a:	1a61      	subs	r1, r4, r1
 800d83c:	4088      	lsls	r0, r1
 800d83e:	0002      	movs	r2, r0
 800d840:	e7e8      	b.n	800d814 <__ulp+0x14>
 800d842:	46c0      	nop			; (mov r8, r8)
 800d844:	7ff00000 	.word	0x7ff00000
 800d848:	fcc00000 	.word	0xfcc00000

0800d84c <__b2d>:
 800d84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d84e:	0006      	movs	r6, r0
 800d850:	6903      	ldr	r3, [r0, #16]
 800d852:	3614      	adds	r6, #20
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	18f3      	adds	r3, r6, r3
 800d858:	1f1d      	subs	r5, r3, #4
 800d85a:	682c      	ldr	r4, [r5, #0]
 800d85c:	000f      	movs	r7, r1
 800d85e:	0020      	movs	r0, r4
 800d860:	9301      	str	r3, [sp, #4]
 800d862:	f7ff fdc9 	bl	800d3f8 <__hi0bits>
 800d866:	2320      	movs	r3, #32
 800d868:	1a1b      	subs	r3, r3, r0
 800d86a:	603b      	str	r3, [r7, #0]
 800d86c:	491c      	ldr	r1, [pc, #112]	; (800d8e0 <__b2d+0x94>)
 800d86e:	280a      	cmp	r0, #10
 800d870:	dc16      	bgt.n	800d8a0 <__b2d+0x54>
 800d872:	230b      	movs	r3, #11
 800d874:	0027      	movs	r7, r4
 800d876:	1a1b      	subs	r3, r3, r0
 800d878:	40df      	lsrs	r7, r3
 800d87a:	4339      	orrs	r1, r7
 800d87c:	469c      	mov	ip, r3
 800d87e:	000b      	movs	r3, r1
 800d880:	2100      	movs	r1, #0
 800d882:	42ae      	cmp	r6, r5
 800d884:	d202      	bcs.n	800d88c <__b2d+0x40>
 800d886:	9901      	ldr	r1, [sp, #4]
 800d888:	3908      	subs	r1, #8
 800d88a:	6809      	ldr	r1, [r1, #0]
 800d88c:	3015      	adds	r0, #21
 800d88e:	4084      	lsls	r4, r0
 800d890:	4660      	mov	r0, ip
 800d892:	40c1      	lsrs	r1, r0
 800d894:	430c      	orrs	r4, r1
 800d896:	0022      	movs	r2, r4
 800d898:	0010      	movs	r0, r2
 800d89a:	0019      	movs	r1, r3
 800d89c:	b003      	add	sp, #12
 800d89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8a0:	2700      	movs	r7, #0
 800d8a2:	42ae      	cmp	r6, r5
 800d8a4:	d202      	bcs.n	800d8ac <__b2d+0x60>
 800d8a6:	9d01      	ldr	r5, [sp, #4]
 800d8a8:	3d08      	subs	r5, #8
 800d8aa:	682f      	ldr	r7, [r5, #0]
 800d8ac:	380b      	subs	r0, #11
 800d8ae:	4684      	mov	ip, r0
 800d8b0:	1e03      	subs	r3, r0, #0
 800d8b2:	d012      	beq.n	800d8da <__b2d+0x8e>
 800d8b4:	409c      	lsls	r4, r3
 800d8b6:	2020      	movs	r0, #32
 800d8b8:	4321      	orrs	r1, r4
 800d8ba:	003c      	movs	r4, r7
 800d8bc:	1ac0      	subs	r0, r0, r3
 800d8be:	40c4      	lsrs	r4, r0
 800d8c0:	4321      	orrs	r1, r4
 800d8c2:	000b      	movs	r3, r1
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	42b5      	cmp	r5, r6
 800d8c8:	d901      	bls.n	800d8ce <__b2d+0x82>
 800d8ca:	3d04      	subs	r5, #4
 800d8cc:	6829      	ldr	r1, [r5, #0]
 800d8ce:	4664      	mov	r4, ip
 800d8d0:	40c1      	lsrs	r1, r0
 800d8d2:	40a7      	lsls	r7, r4
 800d8d4:	430f      	orrs	r7, r1
 800d8d6:	003a      	movs	r2, r7
 800d8d8:	e7de      	b.n	800d898 <__b2d+0x4c>
 800d8da:	4321      	orrs	r1, r4
 800d8dc:	000b      	movs	r3, r1
 800d8de:	e7fa      	b.n	800d8d6 <__b2d+0x8a>
 800d8e0:	3ff00000 	.word	0x3ff00000

0800d8e4 <__d2b>:
 800d8e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8e6:	001d      	movs	r5, r3
 800d8e8:	2101      	movs	r1, #1
 800d8ea:	0014      	movs	r4, r2
 800d8ec:	9f08      	ldr	r7, [sp, #32]
 800d8ee:	f7ff fcb6 	bl	800d25e <_Balloc>
 800d8f2:	032b      	lsls	r3, r5, #12
 800d8f4:	006d      	lsls	r5, r5, #1
 800d8f6:	0006      	movs	r6, r0
 800d8f8:	0b1b      	lsrs	r3, r3, #12
 800d8fa:	0d6d      	lsrs	r5, r5, #21
 800d8fc:	d124      	bne.n	800d948 <__d2b+0x64>
 800d8fe:	9301      	str	r3, [sp, #4]
 800d900:	2c00      	cmp	r4, #0
 800d902:	d027      	beq.n	800d954 <__d2b+0x70>
 800d904:	4668      	mov	r0, sp
 800d906:	9400      	str	r4, [sp, #0]
 800d908:	f7ff fd90 	bl	800d42c <__lo0bits>
 800d90c:	9c00      	ldr	r4, [sp, #0]
 800d90e:	2800      	cmp	r0, #0
 800d910:	d01e      	beq.n	800d950 <__d2b+0x6c>
 800d912:	9b01      	ldr	r3, [sp, #4]
 800d914:	2120      	movs	r1, #32
 800d916:	001a      	movs	r2, r3
 800d918:	1a09      	subs	r1, r1, r0
 800d91a:	408a      	lsls	r2, r1
 800d91c:	40c3      	lsrs	r3, r0
 800d91e:	4322      	orrs	r2, r4
 800d920:	6172      	str	r2, [r6, #20]
 800d922:	9301      	str	r3, [sp, #4]
 800d924:	9c01      	ldr	r4, [sp, #4]
 800d926:	61b4      	str	r4, [r6, #24]
 800d928:	1e63      	subs	r3, r4, #1
 800d92a:	419c      	sbcs	r4, r3
 800d92c:	3401      	adds	r4, #1
 800d92e:	6134      	str	r4, [r6, #16]
 800d930:	2d00      	cmp	r5, #0
 800d932:	d018      	beq.n	800d966 <__d2b+0x82>
 800d934:	4b12      	ldr	r3, [pc, #72]	; (800d980 <__d2b+0x9c>)
 800d936:	18ed      	adds	r5, r5, r3
 800d938:	2335      	movs	r3, #53	; 0x35
 800d93a:	182d      	adds	r5, r5, r0
 800d93c:	603d      	str	r5, [r7, #0]
 800d93e:	1a18      	subs	r0, r3, r0
 800d940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d942:	6018      	str	r0, [r3, #0]
 800d944:	0030      	movs	r0, r6
 800d946:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d948:	2280      	movs	r2, #128	; 0x80
 800d94a:	0352      	lsls	r2, r2, #13
 800d94c:	4313      	orrs	r3, r2
 800d94e:	e7d6      	b.n	800d8fe <__d2b+0x1a>
 800d950:	6174      	str	r4, [r6, #20]
 800d952:	e7e7      	b.n	800d924 <__d2b+0x40>
 800d954:	a801      	add	r0, sp, #4
 800d956:	f7ff fd69 	bl	800d42c <__lo0bits>
 800d95a:	2401      	movs	r4, #1
 800d95c:	9b01      	ldr	r3, [sp, #4]
 800d95e:	6134      	str	r4, [r6, #16]
 800d960:	6173      	str	r3, [r6, #20]
 800d962:	3020      	adds	r0, #32
 800d964:	e7e4      	b.n	800d930 <__d2b+0x4c>
 800d966:	4b07      	ldr	r3, [pc, #28]	; (800d984 <__d2b+0xa0>)
 800d968:	18c0      	adds	r0, r0, r3
 800d96a:	4b07      	ldr	r3, [pc, #28]	; (800d988 <__d2b+0xa4>)
 800d96c:	6038      	str	r0, [r7, #0]
 800d96e:	18e3      	adds	r3, r4, r3
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	18f3      	adds	r3, r6, r3
 800d974:	6958      	ldr	r0, [r3, #20]
 800d976:	f7ff fd3f 	bl	800d3f8 <__hi0bits>
 800d97a:	0164      	lsls	r4, r4, #5
 800d97c:	1a20      	subs	r0, r4, r0
 800d97e:	e7df      	b.n	800d940 <__d2b+0x5c>
 800d980:	fffffbcd 	.word	0xfffffbcd
 800d984:	fffffbce 	.word	0xfffffbce
 800d988:	3fffffff 	.word	0x3fffffff

0800d98c <__ratio>:
 800d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d98e:	b085      	sub	sp, #20
 800d990:	000f      	movs	r7, r1
 800d992:	a902      	add	r1, sp, #8
 800d994:	0006      	movs	r6, r0
 800d996:	f7ff ff59 	bl	800d84c <__b2d>
 800d99a:	0004      	movs	r4, r0
 800d99c:	000d      	movs	r5, r1
 800d99e:	0038      	movs	r0, r7
 800d9a0:	a903      	add	r1, sp, #12
 800d9a2:	9400      	str	r4, [sp, #0]
 800d9a4:	9501      	str	r5, [sp, #4]
 800d9a6:	f7ff ff51 	bl	800d84c <__b2d>
 800d9aa:	6936      	ldr	r6, [r6, #16]
 800d9ac:	693f      	ldr	r7, [r7, #16]
 800d9ae:	0002      	movs	r2, r0
 800d9b0:	1bf7      	subs	r7, r6, r7
 800d9b2:	017e      	lsls	r6, r7, #5
 800d9b4:	46b4      	mov	ip, r6
 800d9b6:	9f03      	ldr	r7, [sp, #12]
 800d9b8:	9e02      	ldr	r6, [sp, #8]
 800d9ba:	000b      	movs	r3, r1
 800d9bc:	1bf6      	subs	r6, r6, r7
 800d9be:	4466      	add	r6, ip
 800d9c0:	0537      	lsls	r7, r6, #20
 800d9c2:	2e00      	cmp	r6, #0
 800d9c4:	dd07      	ble.n	800d9d6 <__ratio+0x4a>
 800d9c6:	1979      	adds	r1, r7, r5
 800d9c8:	9101      	str	r1, [sp, #4]
 800d9ca:	9800      	ldr	r0, [sp, #0]
 800d9cc:	9901      	ldr	r1, [sp, #4]
 800d9ce:	f7f3 f9c7 	bl	8000d60 <__aeabi_ddiv>
 800d9d2:	b005      	add	sp, #20
 800d9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9d6:	1bcb      	subs	r3, r1, r7
 800d9d8:	e7f7      	b.n	800d9ca <__ratio+0x3e>

0800d9da <__copybits>:
 800d9da:	0013      	movs	r3, r2
 800d9dc:	3901      	subs	r1, #1
 800d9de:	b510      	push	{r4, lr}
 800d9e0:	1149      	asrs	r1, r1, #5
 800d9e2:	6912      	ldr	r2, [r2, #16]
 800d9e4:	3101      	adds	r1, #1
 800d9e6:	0089      	lsls	r1, r1, #2
 800d9e8:	3314      	adds	r3, #20
 800d9ea:	0092      	lsls	r2, r2, #2
 800d9ec:	1841      	adds	r1, r0, r1
 800d9ee:	189a      	adds	r2, r3, r2
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d803      	bhi.n	800d9fc <__copybits+0x22>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	4281      	cmp	r1, r0
 800d9f8:	d803      	bhi.n	800da02 <__copybits+0x28>
 800d9fa:	bd10      	pop	{r4, pc}
 800d9fc:	cb10      	ldmia	r3!, {r4}
 800d9fe:	c010      	stmia	r0!, {r4}
 800da00:	e7f6      	b.n	800d9f0 <__copybits+0x16>
 800da02:	c008      	stmia	r0!, {r3}
 800da04:	e7f7      	b.n	800d9f6 <__copybits+0x1c>

0800da06 <__any_on>:
 800da06:	0002      	movs	r2, r0
 800da08:	6900      	ldr	r0, [r0, #16]
 800da0a:	b510      	push	{r4, lr}
 800da0c:	3214      	adds	r2, #20
 800da0e:	114b      	asrs	r3, r1, #5
 800da10:	4298      	cmp	r0, r3
 800da12:	db12      	blt.n	800da3a <__any_on+0x34>
 800da14:	dd0b      	ble.n	800da2e <__any_on+0x28>
 800da16:	201f      	movs	r0, #31
 800da18:	4001      	ands	r1, r0
 800da1a:	d008      	beq.n	800da2e <__any_on+0x28>
 800da1c:	0098      	lsls	r0, r3, #2
 800da1e:	5884      	ldr	r4, [r0, r2]
 800da20:	0020      	movs	r0, r4
 800da22:	40c8      	lsrs	r0, r1
 800da24:	4088      	lsls	r0, r1
 800da26:	0001      	movs	r1, r0
 800da28:	2001      	movs	r0, #1
 800da2a:	428c      	cmp	r4, r1
 800da2c:	d104      	bne.n	800da38 <__any_on+0x32>
 800da2e:	009b      	lsls	r3, r3, #2
 800da30:	18d3      	adds	r3, r2, r3
 800da32:	4293      	cmp	r3, r2
 800da34:	d803      	bhi.n	800da3e <__any_on+0x38>
 800da36:	2000      	movs	r0, #0
 800da38:	bd10      	pop	{r4, pc}
 800da3a:	0003      	movs	r3, r0
 800da3c:	e7f7      	b.n	800da2e <__any_on+0x28>
 800da3e:	3b04      	subs	r3, #4
 800da40:	6819      	ldr	r1, [r3, #0]
 800da42:	2900      	cmp	r1, #0
 800da44:	d0f5      	beq.n	800da32 <__any_on+0x2c>
 800da46:	2001      	movs	r0, #1
 800da48:	e7f6      	b.n	800da38 <__any_on+0x32>

0800da4a <_calloc_r>:
 800da4a:	434a      	muls	r2, r1
 800da4c:	b570      	push	{r4, r5, r6, lr}
 800da4e:	0011      	movs	r1, r2
 800da50:	0014      	movs	r4, r2
 800da52:	f7fc fc29 	bl	800a2a8 <_malloc_r>
 800da56:	1e05      	subs	r5, r0, #0
 800da58:	d003      	beq.n	800da62 <_calloc_r+0x18>
 800da5a:	0022      	movs	r2, r4
 800da5c:	2100      	movs	r1, #0
 800da5e:	f7fc fbd0 	bl	800a202 <memset>
 800da62:	0028      	movs	r0, r5
 800da64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800da68 <__ssputs_r>:
 800da68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da6a:	688e      	ldr	r6, [r1, #8]
 800da6c:	b085      	sub	sp, #20
 800da6e:	0007      	movs	r7, r0
 800da70:	000c      	movs	r4, r1
 800da72:	9203      	str	r2, [sp, #12]
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	429e      	cmp	r6, r3
 800da78:	d83c      	bhi.n	800daf4 <__ssputs_r+0x8c>
 800da7a:	2390      	movs	r3, #144	; 0x90
 800da7c:	898a      	ldrh	r2, [r1, #12]
 800da7e:	00db      	lsls	r3, r3, #3
 800da80:	421a      	tst	r2, r3
 800da82:	d034      	beq.n	800daee <__ssputs_r+0x86>
 800da84:	2503      	movs	r5, #3
 800da86:	6909      	ldr	r1, [r1, #16]
 800da88:	6823      	ldr	r3, [r4, #0]
 800da8a:	1a5b      	subs	r3, r3, r1
 800da8c:	9302      	str	r3, [sp, #8]
 800da8e:	6963      	ldr	r3, [r4, #20]
 800da90:	9802      	ldr	r0, [sp, #8]
 800da92:	435d      	muls	r5, r3
 800da94:	0feb      	lsrs	r3, r5, #31
 800da96:	195d      	adds	r5, r3, r5
 800da98:	9b01      	ldr	r3, [sp, #4]
 800da9a:	106d      	asrs	r5, r5, #1
 800da9c:	3301      	adds	r3, #1
 800da9e:	181b      	adds	r3, r3, r0
 800daa0:	42ab      	cmp	r3, r5
 800daa2:	d900      	bls.n	800daa6 <__ssputs_r+0x3e>
 800daa4:	001d      	movs	r5, r3
 800daa6:	0553      	lsls	r3, r2, #21
 800daa8:	d532      	bpl.n	800db10 <__ssputs_r+0xa8>
 800daaa:	0029      	movs	r1, r5
 800daac:	0038      	movs	r0, r7
 800daae:	f7fc fbfb 	bl	800a2a8 <_malloc_r>
 800dab2:	1e06      	subs	r6, r0, #0
 800dab4:	d109      	bne.n	800daca <__ssputs_r+0x62>
 800dab6:	230c      	movs	r3, #12
 800dab8:	603b      	str	r3, [r7, #0]
 800daba:	2340      	movs	r3, #64	; 0x40
 800dabc:	2001      	movs	r0, #1
 800dabe:	89a2      	ldrh	r2, [r4, #12]
 800dac0:	4240      	negs	r0, r0
 800dac2:	4313      	orrs	r3, r2
 800dac4:	81a3      	strh	r3, [r4, #12]
 800dac6:	b005      	add	sp, #20
 800dac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daca:	9a02      	ldr	r2, [sp, #8]
 800dacc:	6921      	ldr	r1, [r4, #16]
 800dace:	f7fc fb8f 	bl	800a1f0 <memcpy>
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	4a14      	ldr	r2, [pc, #80]	; (800db28 <__ssputs_r+0xc0>)
 800dad6:	401a      	ands	r2, r3
 800dad8:	2380      	movs	r3, #128	; 0x80
 800dada:	4313      	orrs	r3, r2
 800dadc:	81a3      	strh	r3, [r4, #12]
 800dade:	9b02      	ldr	r3, [sp, #8]
 800dae0:	6126      	str	r6, [r4, #16]
 800dae2:	18f6      	adds	r6, r6, r3
 800dae4:	6026      	str	r6, [r4, #0]
 800dae6:	6165      	str	r5, [r4, #20]
 800dae8:	9e01      	ldr	r6, [sp, #4]
 800daea:	1aed      	subs	r5, r5, r3
 800daec:	60a5      	str	r5, [r4, #8]
 800daee:	9b01      	ldr	r3, [sp, #4]
 800daf0:	429e      	cmp	r6, r3
 800daf2:	d900      	bls.n	800daf6 <__ssputs_r+0x8e>
 800daf4:	9e01      	ldr	r6, [sp, #4]
 800daf6:	0032      	movs	r2, r6
 800daf8:	9903      	ldr	r1, [sp, #12]
 800dafa:	6820      	ldr	r0, [r4, #0]
 800dafc:	f000 f931 	bl	800dd62 <memmove>
 800db00:	68a3      	ldr	r3, [r4, #8]
 800db02:	2000      	movs	r0, #0
 800db04:	1b9b      	subs	r3, r3, r6
 800db06:	60a3      	str	r3, [r4, #8]
 800db08:	6823      	ldr	r3, [r4, #0]
 800db0a:	199e      	adds	r6, r3, r6
 800db0c:	6026      	str	r6, [r4, #0]
 800db0e:	e7da      	b.n	800dac6 <__ssputs_r+0x5e>
 800db10:	002a      	movs	r2, r5
 800db12:	0038      	movs	r0, r7
 800db14:	f000 f938 	bl	800dd88 <_realloc_r>
 800db18:	1e06      	subs	r6, r0, #0
 800db1a:	d1e0      	bne.n	800dade <__ssputs_r+0x76>
 800db1c:	6921      	ldr	r1, [r4, #16]
 800db1e:	0038      	movs	r0, r7
 800db20:	f7fc fb78 	bl	800a214 <_free_r>
 800db24:	e7c7      	b.n	800dab6 <__ssputs_r+0x4e>
 800db26:	46c0      	nop			; (mov r8, r8)
 800db28:	fffffb7f 	.word	0xfffffb7f

0800db2c <_svfiprintf_r>:
 800db2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db2e:	b0a1      	sub	sp, #132	; 0x84
 800db30:	9003      	str	r0, [sp, #12]
 800db32:	001d      	movs	r5, r3
 800db34:	898b      	ldrh	r3, [r1, #12]
 800db36:	000f      	movs	r7, r1
 800db38:	0016      	movs	r6, r2
 800db3a:	061b      	lsls	r3, r3, #24
 800db3c:	d511      	bpl.n	800db62 <_svfiprintf_r+0x36>
 800db3e:	690b      	ldr	r3, [r1, #16]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10e      	bne.n	800db62 <_svfiprintf_r+0x36>
 800db44:	2140      	movs	r1, #64	; 0x40
 800db46:	f7fc fbaf 	bl	800a2a8 <_malloc_r>
 800db4a:	6038      	str	r0, [r7, #0]
 800db4c:	6138      	str	r0, [r7, #16]
 800db4e:	2800      	cmp	r0, #0
 800db50:	d105      	bne.n	800db5e <_svfiprintf_r+0x32>
 800db52:	230c      	movs	r3, #12
 800db54:	9a03      	ldr	r2, [sp, #12]
 800db56:	3801      	subs	r0, #1
 800db58:	6013      	str	r3, [r2, #0]
 800db5a:	b021      	add	sp, #132	; 0x84
 800db5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db5e:	2340      	movs	r3, #64	; 0x40
 800db60:	617b      	str	r3, [r7, #20]
 800db62:	2300      	movs	r3, #0
 800db64:	ac08      	add	r4, sp, #32
 800db66:	6163      	str	r3, [r4, #20]
 800db68:	3320      	adds	r3, #32
 800db6a:	7663      	strb	r3, [r4, #25]
 800db6c:	3310      	adds	r3, #16
 800db6e:	76a3      	strb	r3, [r4, #26]
 800db70:	9507      	str	r5, [sp, #28]
 800db72:	0035      	movs	r5, r6
 800db74:	782b      	ldrb	r3, [r5, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <_svfiprintf_r+0x52>
 800db7a:	2b25      	cmp	r3, #37	; 0x25
 800db7c:	d146      	bne.n	800dc0c <_svfiprintf_r+0xe0>
 800db7e:	1bab      	subs	r3, r5, r6
 800db80:	9305      	str	r3, [sp, #20]
 800db82:	d00c      	beq.n	800db9e <_svfiprintf_r+0x72>
 800db84:	0032      	movs	r2, r6
 800db86:	0039      	movs	r1, r7
 800db88:	9803      	ldr	r0, [sp, #12]
 800db8a:	f7ff ff6d 	bl	800da68 <__ssputs_r>
 800db8e:	1c43      	adds	r3, r0, #1
 800db90:	d100      	bne.n	800db94 <_svfiprintf_r+0x68>
 800db92:	e0ae      	b.n	800dcf2 <_svfiprintf_r+0x1c6>
 800db94:	6962      	ldr	r2, [r4, #20]
 800db96:	9b05      	ldr	r3, [sp, #20]
 800db98:	4694      	mov	ip, r2
 800db9a:	4463      	add	r3, ip
 800db9c:	6163      	str	r3, [r4, #20]
 800db9e:	782b      	ldrb	r3, [r5, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d100      	bne.n	800dba6 <_svfiprintf_r+0x7a>
 800dba4:	e0a5      	b.n	800dcf2 <_svfiprintf_r+0x1c6>
 800dba6:	2201      	movs	r2, #1
 800dba8:	2300      	movs	r3, #0
 800dbaa:	4252      	negs	r2, r2
 800dbac:	6062      	str	r2, [r4, #4]
 800dbae:	a904      	add	r1, sp, #16
 800dbb0:	3254      	adds	r2, #84	; 0x54
 800dbb2:	1852      	adds	r2, r2, r1
 800dbb4:	1c6e      	adds	r6, r5, #1
 800dbb6:	6023      	str	r3, [r4, #0]
 800dbb8:	60e3      	str	r3, [r4, #12]
 800dbba:	60a3      	str	r3, [r4, #8]
 800dbbc:	7013      	strb	r3, [r2, #0]
 800dbbe:	65a3      	str	r3, [r4, #88]	; 0x58
 800dbc0:	7831      	ldrb	r1, [r6, #0]
 800dbc2:	2205      	movs	r2, #5
 800dbc4:	4853      	ldr	r0, [pc, #332]	; (800dd14 <_svfiprintf_r+0x1e8>)
 800dbc6:	f7ff fb3d 	bl	800d244 <memchr>
 800dbca:	1c75      	adds	r5, r6, #1
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d11f      	bne.n	800dc10 <_svfiprintf_r+0xe4>
 800dbd0:	6822      	ldr	r2, [r4, #0]
 800dbd2:	06d3      	lsls	r3, r2, #27
 800dbd4:	d504      	bpl.n	800dbe0 <_svfiprintf_r+0xb4>
 800dbd6:	2353      	movs	r3, #83	; 0x53
 800dbd8:	a904      	add	r1, sp, #16
 800dbda:	185b      	adds	r3, r3, r1
 800dbdc:	2120      	movs	r1, #32
 800dbde:	7019      	strb	r1, [r3, #0]
 800dbe0:	0713      	lsls	r3, r2, #28
 800dbe2:	d504      	bpl.n	800dbee <_svfiprintf_r+0xc2>
 800dbe4:	2353      	movs	r3, #83	; 0x53
 800dbe6:	a904      	add	r1, sp, #16
 800dbe8:	185b      	adds	r3, r3, r1
 800dbea:	212b      	movs	r1, #43	; 0x2b
 800dbec:	7019      	strb	r1, [r3, #0]
 800dbee:	7833      	ldrb	r3, [r6, #0]
 800dbf0:	2b2a      	cmp	r3, #42	; 0x2a
 800dbf2:	d016      	beq.n	800dc22 <_svfiprintf_r+0xf6>
 800dbf4:	0035      	movs	r5, r6
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	200a      	movs	r0, #10
 800dbfa:	68e3      	ldr	r3, [r4, #12]
 800dbfc:	782a      	ldrb	r2, [r5, #0]
 800dbfe:	1c6e      	adds	r6, r5, #1
 800dc00:	3a30      	subs	r2, #48	; 0x30
 800dc02:	2a09      	cmp	r2, #9
 800dc04:	d94e      	bls.n	800dca4 <_svfiprintf_r+0x178>
 800dc06:	2900      	cmp	r1, #0
 800dc08:	d018      	beq.n	800dc3c <_svfiprintf_r+0x110>
 800dc0a:	e010      	b.n	800dc2e <_svfiprintf_r+0x102>
 800dc0c:	3501      	adds	r5, #1
 800dc0e:	e7b1      	b.n	800db74 <_svfiprintf_r+0x48>
 800dc10:	4b40      	ldr	r3, [pc, #256]	; (800dd14 <_svfiprintf_r+0x1e8>)
 800dc12:	6822      	ldr	r2, [r4, #0]
 800dc14:	1ac0      	subs	r0, r0, r3
 800dc16:	2301      	movs	r3, #1
 800dc18:	4083      	lsls	r3, r0
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	002e      	movs	r6, r5
 800dc20:	e7ce      	b.n	800dbc0 <_svfiprintf_r+0x94>
 800dc22:	9b07      	ldr	r3, [sp, #28]
 800dc24:	1d19      	adds	r1, r3, #4
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	9107      	str	r1, [sp, #28]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	db01      	blt.n	800dc32 <_svfiprintf_r+0x106>
 800dc2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc30:	e004      	b.n	800dc3c <_svfiprintf_r+0x110>
 800dc32:	425b      	negs	r3, r3
 800dc34:	60e3      	str	r3, [r4, #12]
 800dc36:	2302      	movs	r3, #2
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	6023      	str	r3, [r4, #0]
 800dc3c:	782b      	ldrb	r3, [r5, #0]
 800dc3e:	2b2e      	cmp	r3, #46	; 0x2e
 800dc40:	d10a      	bne.n	800dc58 <_svfiprintf_r+0x12c>
 800dc42:	786b      	ldrb	r3, [r5, #1]
 800dc44:	2b2a      	cmp	r3, #42	; 0x2a
 800dc46:	d135      	bne.n	800dcb4 <_svfiprintf_r+0x188>
 800dc48:	9b07      	ldr	r3, [sp, #28]
 800dc4a:	3502      	adds	r5, #2
 800dc4c:	1d1a      	adds	r2, r3, #4
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	9207      	str	r2, [sp, #28]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	db2b      	blt.n	800dcae <_svfiprintf_r+0x182>
 800dc56:	9309      	str	r3, [sp, #36]	; 0x24
 800dc58:	4e2f      	ldr	r6, [pc, #188]	; (800dd18 <_svfiprintf_r+0x1ec>)
 800dc5a:	7829      	ldrb	r1, [r5, #0]
 800dc5c:	2203      	movs	r2, #3
 800dc5e:	0030      	movs	r0, r6
 800dc60:	f7ff faf0 	bl	800d244 <memchr>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d006      	beq.n	800dc76 <_svfiprintf_r+0x14a>
 800dc68:	2340      	movs	r3, #64	; 0x40
 800dc6a:	1b80      	subs	r0, r0, r6
 800dc6c:	4083      	lsls	r3, r0
 800dc6e:	6822      	ldr	r2, [r4, #0]
 800dc70:	3501      	adds	r5, #1
 800dc72:	4313      	orrs	r3, r2
 800dc74:	6023      	str	r3, [r4, #0]
 800dc76:	7829      	ldrb	r1, [r5, #0]
 800dc78:	2206      	movs	r2, #6
 800dc7a:	4828      	ldr	r0, [pc, #160]	; (800dd1c <_svfiprintf_r+0x1f0>)
 800dc7c:	1c6e      	adds	r6, r5, #1
 800dc7e:	7621      	strb	r1, [r4, #24]
 800dc80:	f7ff fae0 	bl	800d244 <memchr>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d03c      	beq.n	800dd02 <_svfiprintf_r+0x1d6>
 800dc88:	4b25      	ldr	r3, [pc, #148]	; (800dd20 <_svfiprintf_r+0x1f4>)
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d125      	bne.n	800dcda <_svfiprintf_r+0x1ae>
 800dc8e:	2207      	movs	r2, #7
 800dc90:	9b07      	ldr	r3, [sp, #28]
 800dc92:	3307      	adds	r3, #7
 800dc94:	4393      	bics	r3, r2
 800dc96:	3308      	adds	r3, #8
 800dc98:	9307      	str	r3, [sp, #28]
 800dc9a:	6963      	ldr	r3, [r4, #20]
 800dc9c:	9a04      	ldr	r2, [sp, #16]
 800dc9e:	189b      	adds	r3, r3, r2
 800dca0:	6163      	str	r3, [r4, #20]
 800dca2:	e766      	b.n	800db72 <_svfiprintf_r+0x46>
 800dca4:	4343      	muls	r3, r0
 800dca6:	2101      	movs	r1, #1
 800dca8:	189b      	adds	r3, r3, r2
 800dcaa:	0035      	movs	r5, r6
 800dcac:	e7a6      	b.n	800dbfc <_svfiprintf_r+0xd0>
 800dcae:	2301      	movs	r3, #1
 800dcb0:	425b      	negs	r3, r3
 800dcb2:	e7d0      	b.n	800dc56 <_svfiprintf_r+0x12a>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	200a      	movs	r0, #10
 800dcb8:	001a      	movs	r2, r3
 800dcba:	3501      	adds	r5, #1
 800dcbc:	6063      	str	r3, [r4, #4]
 800dcbe:	7829      	ldrb	r1, [r5, #0]
 800dcc0:	1c6e      	adds	r6, r5, #1
 800dcc2:	3930      	subs	r1, #48	; 0x30
 800dcc4:	2909      	cmp	r1, #9
 800dcc6:	d903      	bls.n	800dcd0 <_svfiprintf_r+0x1a4>
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d0c5      	beq.n	800dc58 <_svfiprintf_r+0x12c>
 800dccc:	9209      	str	r2, [sp, #36]	; 0x24
 800dcce:	e7c3      	b.n	800dc58 <_svfiprintf_r+0x12c>
 800dcd0:	4342      	muls	r2, r0
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	1852      	adds	r2, r2, r1
 800dcd6:	0035      	movs	r5, r6
 800dcd8:	e7f1      	b.n	800dcbe <_svfiprintf_r+0x192>
 800dcda:	ab07      	add	r3, sp, #28
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	003a      	movs	r2, r7
 800dce0:	4b10      	ldr	r3, [pc, #64]	; (800dd24 <_svfiprintf_r+0x1f8>)
 800dce2:	0021      	movs	r1, r4
 800dce4:	9803      	ldr	r0, [sp, #12]
 800dce6:	f7fc fbd9 	bl	800a49c <_printf_float>
 800dcea:	9004      	str	r0, [sp, #16]
 800dcec:	9b04      	ldr	r3, [sp, #16]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	d1d3      	bne.n	800dc9a <_svfiprintf_r+0x16e>
 800dcf2:	89bb      	ldrh	r3, [r7, #12]
 800dcf4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dcf6:	065b      	lsls	r3, r3, #25
 800dcf8:	d400      	bmi.n	800dcfc <_svfiprintf_r+0x1d0>
 800dcfa:	e72e      	b.n	800db5a <_svfiprintf_r+0x2e>
 800dcfc:	2001      	movs	r0, #1
 800dcfe:	4240      	negs	r0, r0
 800dd00:	e72b      	b.n	800db5a <_svfiprintf_r+0x2e>
 800dd02:	ab07      	add	r3, sp, #28
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	003a      	movs	r2, r7
 800dd08:	4b06      	ldr	r3, [pc, #24]	; (800dd24 <_svfiprintf_r+0x1f8>)
 800dd0a:	0021      	movs	r1, r4
 800dd0c:	9803      	ldr	r0, [sp, #12]
 800dd0e:	f7fc fe7f 	bl	800aa10 <_printf_i>
 800dd12:	e7ea      	b.n	800dcea <_svfiprintf_r+0x1be>
 800dd14:	0800f38c 	.word	0x0800f38c
 800dd18:	0800f392 	.word	0x0800f392
 800dd1c:	0800f396 	.word	0x0800f396
 800dd20:	0800a49d 	.word	0x0800a49d
 800dd24:	0800da69 	.word	0x0800da69

0800dd28 <strncmp>:
 800dd28:	2300      	movs	r3, #0
 800dd2a:	b530      	push	{r4, r5, lr}
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d00a      	beq.n	800dd46 <strncmp+0x1e>
 800dd30:	3a01      	subs	r2, #1
 800dd32:	5cc4      	ldrb	r4, [r0, r3]
 800dd34:	5ccd      	ldrb	r5, [r1, r3]
 800dd36:	42ac      	cmp	r4, r5
 800dd38:	d104      	bne.n	800dd44 <strncmp+0x1c>
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d002      	beq.n	800dd44 <strncmp+0x1c>
 800dd3e:	3301      	adds	r3, #1
 800dd40:	2c00      	cmp	r4, #0
 800dd42:	d1f6      	bne.n	800dd32 <strncmp+0xa>
 800dd44:	1b63      	subs	r3, r4, r5
 800dd46:	0018      	movs	r0, r3
 800dd48:	bd30      	pop	{r4, r5, pc}

0800dd4a <__ascii_wctomb>:
 800dd4a:	1e0b      	subs	r3, r1, #0
 800dd4c:	d004      	beq.n	800dd58 <__ascii_wctomb+0xe>
 800dd4e:	2aff      	cmp	r2, #255	; 0xff
 800dd50:	d904      	bls.n	800dd5c <__ascii_wctomb+0x12>
 800dd52:	238a      	movs	r3, #138	; 0x8a
 800dd54:	6003      	str	r3, [r0, #0]
 800dd56:	3b8b      	subs	r3, #139	; 0x8b
 800dd58:	0018      	movs	r0, r3
 800dd5a:	4770      	bx	lr
 800dd5c:	700a      	strb	r2, [r1, #0]
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e7fa      	b.n	800dd58 <__ascii_wctomb+0xe>

0800dd62 <memmove>:
 800dd62:	b510      	push	{r4, lr}
 800dd64:	4288      	cmp	r0, r1
 800dd66:	d902      	bls.n	800dd6e <memmove+0xc>
 800dd68:	188b      	adds	r3, r1, r2
 800dd6a:	4298      	cmp	r0, r3
 800dd6c:	d303      	bcc.n	800dd76 <memmove+0x14>
 800dd6e:	2300      	movs	r3, #0
 800dd70:	e007      	b.n	800dd82 <memmove+0x20>
 800dd72:	5c8b      	ldrb	r3, [r1, r2]
 800dd74:	5483      	strb	r3, [r0, r2]
 800dd76:	3a01      	subs	r2, #1
 800dd78:	d2fb      	bcs.n	800dd72 <memmove+0x10>
 800dd7a:	bd10      	pop	{r4, pc}
 800dd7c:	5ccc      	ldrb	r4, [r1, r3]
 800dd7e:	54c4      	strb	r4, [r0, r3]
 800dd80:	3301      	adds	r3, #1
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d1fa      	bne.n	800dd7c <memmove+0x1a>
 800dd86:	e7f8      	b.n	800dd7a <memmove+0x18>

0800dd88 <_realloc_r>:
 800dd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd8a:	0007      	movs	r7, r0
 800dd8c:	000d      	movs	r5, r1
 800dd8e:	0016      	movs	r6, r2
 800dd90:	2900      	cmp	r1, #0
 800dd92:	d105      	bne.n	800dda0 <_realloc_r+0x18>
 800dd94:	0011      	movs	r1, r2
 800dd96:	f7fc fa87 	bl	800a2a8 <_malloc_r>
 800dd9a:	0004      	movs	r4, r0
 800dd9c:	0020      	movs	r0, r4
 800dd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dda0:	2a00      	cmp	r2, #0
 800dda2:	d103      	bne.n	800ddac <_realloc_r+0x24>
 800dda4:	f7fc fa36 	bl	800a214 <_free_r>
 800dda8:	0034      	movs	r4, r6
 800ddaa:	e7f7      	b.n	800dd9c <_realloc_r+0x14>
 800ddac:	f000 f812 	bl	800ddd4 <_malloc_usable_size_r>
 800ddb0:	002c      	movs	r4, r5
 800ddb2:	42b0      	cmp	r0, r6
 800ddb4:	d2f2      	bcs.n	800dd9c <_realloc_r+0x14>
 800ddb6:	0031      	movs	r1, r6
 800ddb8:	0038      	movs	r0, r7
 800ddba:	f7fc fa75 	bl	800a2a8 <_malloc_r>
 800ddbe:	1e04      	subs	r4, r0, #0
 800ddc0:	d0ec      	beq.n	800dd9c <_realloc_r+0x14>
 800ddc2:	0029      	movs	r1, r5
 800ddc4:	0032      	movs	r2, r6
 800ddc6:	f7fc fa13 	bl	800a1f0 <memcpy>
 800ddca:	0029      	movs	r1, r5
 800ddcc:	0038      	movs	r0, r7
 800ddce:	f7fc fa21 	bl	800a214 <_free_r>
 800ddd2:	e7e3      	b.n	800dd9c <_realloc_r+0x14>

0800ddd4 <_malloc_usable_size_r>:
 800ddd4:	1f0b      	subs	r3, r1, #4
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	1f18      	subs	r0, r3, #4
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	da01      	bge.n	800dde2 <_malloc_usable_size_r+0xe>
 800ddde:	580b      	ldr	r3, [r1, r0]
 800dde0:	18c0      	adds	r0, r0, r3
 800dde2:	4770      	bx	lr

0800dde4 <_init>:
 800dde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dde6:	46c0      	nop			; (mov r8, r8)
 800dde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddea:	bc08      	pop	{r3}
 800ddec:	469e      	mov	lr, r3
 800ddee:	4770      	bx	lr

0800ddf0 <_fini>:
 800ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf2:	46c0      	nop			; (mov r8, r8)
 800ddf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddf6:	bc08      	pop	{r3}
 800ddf8:	469e      	mov	lr, r3
 800ddfa:	4770      	bx	lr
